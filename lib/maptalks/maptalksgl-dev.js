/*!
 * @maptalks/gl v0.2.4
 * LICENSE : UNLICENSED
 * (c) 2016-2019 maptalks.org
 */
(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('assert'), require('maptalks')) :
	typeof define === 'function' && define.amd ? define(['exports', 'assert', 'maptalks'], factory) :
	(global = global || self, factory(global.maptalksgl = {}, global.assert, global.maptalks));
}(this, function (exports, assert, maptalks) { 'use strict';

	assert = assert && assert.hasOwnProperty('default') ? assert['default'] : assert;

	var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var regl = createCommonjsModule(function (module, exports) {
	  (function (global, factory) {
	    module.exports = factory();
	  })(commonjsGlobal, function () {

	    var isTypedArray = function isTypedArray(x) {
	      return x instanceof Uint8Array || x instanceof Uint16Array || x instanceof Uint32Array || x instanceof Int8Array || x instanceof Int16Array || x instanceof Int32Array || x instanceof Float32Array || x instanceof Float64Array || x instanceof Uint8ClampedArray;
	    };

	    var extend = function extend(base, opts) {
	      var keys = Object.keys(opts);

	      for (var i = 0; i < keys.length; ++i) {
	        base[keys[i]] = opts[keys[i]];
	      }

	      return base;
	    };

	    var endl = '\n';

	    function decodeB64(str) {
	      if (typeof atob !== 'undefined') {
	        return atob(str);
	      }

	      return 'base64:' + str;
	    }

	    function raise(message) {
	      var error = new Error('(regl) ' + message);
	      console.error(error);
	      throw error;
	    }

	    function check(pred, message) {
	      if (!pred) {
	        raise(message);
	      }
	    }

	    function encolon(message) {
	      if (message) {
	        return ': ' + message;
	      }

	      return '';
	    }

	    function checkParameter(param, possibilities, message) {
	      if (!(param in possibilities)) {
	        raise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + Object.keys(possibilities).join());
	      }
	    }

	    function checkIsTypedArray(data, message) {
	      if (!isTypedArray(data)) {
	        raise('invalid parameter type' + encolon(message) + '. must be a typed array');
	      }
	    }

	    function checkTypeOf(value, type, message) {
	      if (typeof value !== type) {
	        raise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + typeof value);
	      }
	    }

	    function checkNonNegativeInt(value, message) {
	      if (!(value >= 0 && (value | 0) === value)) {
	        raise('invalid parameter type, (' + value + ')' + encolon(message) + '. must be a nonnegative integer');
	      }
	    }

	    function checkOneOf(value, list, message) {
	      if (list.indexOf(value) < 0) {
	        raise('invalid value' + encolon(message) + '. must be one of: ' + list);
	      }
	    }

	    var constructorKeys = ['gl', 'canvas', 'container', 'attributes', 'pixelRatio', 'extensions', 'optionalExtensions', 'profile', 'onDone'];

	    function checkConstructor(obj) {
	      Object.keys(obj).forEach(function (key) {
	        if (constructorKeys.indexOf(key) < 0) {
	          raise('invalid regl constructor argument "' + key + '". must be one of ' + constructorKeys);
	        }
	      });
	    }

	    function leftPad(str, n) {
	      str = str + '';

	      while (str.length < n) {
	        str = ' ' + str;
	      }

	      return str;
	    }

	    function ShaderFile() {
	      this.name = 'unknown';
	      this.lines = [];
	      this.index = {};
	      this.hasErrors = false;
	    }

	    function ShaderLine(number, line) {
	      this.number = number;
	      this.line = line;
	      this.errors = [];
	    }

	    function ShaderError(fileNumber, lineNumber, message) {
	      this.file = fileNumber;
	      this.line = lineNumber;
	      this.message = message;
	    }

	    function guessCommand() {
	      var error = new Error();
	      var stack = (error.stack || error).toString();
	      var pat = /compileProcedure.*\n\s*at.*\((.*)\)/.exec(stack);

	      if (pat) {
	        return pat[1];
	      }

	      var pat2 = /compileProcedure.*\n\s*at\s+(.*)(\n|$)/.exec(stack);

	      if (pat2) {
	        return pat2[1];
	      }

	      return 'unknown';
	    }

	    function guessCallSite() {
	      var error = new Error();
	      var stack = (error.stack || error).toString();
	      var pat = /at REGLCommand.*\n\s+at.*\((.*)\)/.exec(stack);

	      if (pat) {
	        return pat[1];
	      }

	      var pat2 = /at REGLCommand.*\n\s+at\s+(.*)\n/.exec(stack);

	      if (pat2) {
	        return pat2[1];
	      }

	      return 'unknown';
	    }

	    function parseSource(source, command) {
	      var lines = source.split('\n');
	      var lineNumber = 1;
	      var fileNumber = 0;
	      var files = {
	        unknown: new ShaderFile(),
	        0: new ShaderFile()
	      };
	      files.unknown.name = files[0].name = command || guessCommand();
	      files.unknown.lines.push(new ShaderLine(0, ''));

	      for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];
	        var parts = /^\s*\#\s*(\w+)\s+(.+)\s*$/.exec(line);

	        if (parts) {
	          switch (parts[1]) {
	            case 'line':
	              var lineNumberInfo = /(\d+)(\s+\d+)?/.exec(parts[2]);

	              if (lineNumberInfo) {
	                lineNumber = lineNumberInfo[1] | 0;

	                if (lineNumberInfo[2]) {
	                  fileNumber = lineNumberInfo[2] | 0;

	                  if (!(fileNumber in files)) {
	                    files[fileNumber] = new ShaderFile();
	                  }
	                }
	              }

	              break;

	            case 'define':
	              var nameInfo = /SHADER_NAME(_B64)?\s+(.*)$/.exec(parts[2]);

	              if (nameInfo) {
	                files[fileNumber].name = nameInfo[1] ? decodeB64(nameInfo[2]) : nameInfo[2];
	              }

	              break;
	          }
	        }

	        files[fileNumber].lines.push(new ShaderLine(lineNumber++, line));
	      }

	      Object.keys(files).forEach(function (fileNumber) {
	        var file = files[fileNumber];
	        file.lines.forEach(function (line) {
	          file.index[line.number] = line;
	        });
	      });
	      return files;
	    }

	    function parseErrorLog(errLog) {
	      var result = [];
	      errLog.split('\n').forEach(function (errMsg) {
	        if (errMsg.length < 5) {
	          return;
	        }

	        var parts = /^ERROR\:\s+(\d+)\:(\d+)\:\s*(.*)$/.exec(errMsg);

	        if (parts) {
	          result.push(new ShaderError(parts[1] | 0, parts[2] | 0, parts[3].trim()));
	        } else if (errMsg.length > 0) {
	          result.push(new ShaderError('unknown', 0, errMsg));
	        }
	      });
	      return result;
	    }

	    function annotateFiles(files, errors) {
	      errors.forEach(function (error) {
	        var file = files[error.file];

	        if (file) {
	          var line = file.index[error.line];

	          if (line) {
	            line.errors.push(error);
	            file.hasErrors = true;
	            return;
	          }
	        }

	        files.unknown.hasErrors = true;
	        files.unknown.lines[0].errors.push(error);
	      });
	    }

	    function checkShaderError(gl, shader, source, type, command) {
	      if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
	        var errLog = gl.getShaderInfoLog(shader);
	        var typeName = type === gl.FRAGMENT_SHADER ? 'fragment' : 'vertex';
	        checkCommandType(source, 'string', typeName + ' shader source must be a string', command);
	        var files = parseSource(source, command);
	        var errors = parseErrorLog(errLog);
	        annotateFiles(files, errors);
	        Object.keys(files).forEach(function (fileNumber) {
	          var file = files[fileNumber];

	          if (!file.hasErrors) {
	            return;
	          }

	          var strings = [''];
	          var styles = [''];

	          function push(str, style) {
	            strings.push(str);
	            styles.push(style || '');
	          }

	          push('file number ' + fileNumber + ': ' + file.name + '\n', 'color:red;text-decoration:underline;font-weight:bold');
	          file.lines.forEach(function (line) {
	            if (line.errors.length > 0) {
	              push(leftPad(line.number, 4) + '|  ', 'background-color:yellow; font-weight:bold');
	              push(line.line + endl, 'color:red; background-color:yellow; font-weight:bold');
	              var offset = 0;
	              line.errors.forEach(function (error) {
	                var message = error.message;
	                var token = /^\s*\'(.*)\'\s*\:\s*(.*)$/.exec(message);

	                if (token) {
	                  var tokenPat = token[1];
	                  message = token[2];

	                  switch (tokenPat) {
	                    case 'assign':
	                      tokenPat = '=';
	                      break;
	                  }

	                  offset = Math.max(line.line.indexOf(tokenPat, offset), 0);
	                } else {
	                  offset = 0;
	                }

	                push(leftPad('| ', 6));
	                push(leftPad('^^^', offset + 3) + endl, 'font-weight:bold');
	                push(leftPad('| ', 6));
	                push(message + endl, 'font-weight:bold');
	              });
	              push(leftPad('| ', 6) + endl);
	            } else {
	              push(leftPad(line.number, 4) + '|  ');
	              push(line.line + endl, 'color:red');
	            }
	          });

	          if (typeof document !== 'undefined' && !window.chrome) {
	            styles[0] = strings.join('%c');
	            console.log.apply(console, styles);
	          } else {
	            console.log(strings.join(''));
	          }
	        });
	        check.raise('Error compiling ' + typeName + ' shader, ' + files[0].name);
	      }
	    }

	    function checkLinkError(gl, program, fragShader, vertShader, command) {
	      if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
	        var errLog = gl.getProgramInfoLog(program);
	        var fragParse = parseSource(fragShader, command);
	        var vertParse = parseSource(vertShader, command);
	        var header = 'Error linking program with vertex shader, "' + vertParse[0].name + '", and fragment shader "' + fragParse[0].name + '"';

	        if (typeof document !== 'undefined') {
	          console.log('%c' + header + endl + '%c' + errLog, 'color:red;text-decoration:underline;font-weight:bold', 'color:red');
	        } else {
	          console.log(header + endl + errLog);
	        }

	        check.raise(header);
	      }
	    }

	    function saveCommandRef(object) {
	      object._commandRef = guessCommand();
	    }

	    function saveDrawCommandInfo(opts, uniforms, attributes, stringStore) {
	      saveCommandRef(opts);

	      function id(str) {
	        if (str) {
	          return stringStore.id(str);
	        }

	        return 0;
	      }

	      opts._fragId = id(opts.static.frag);
	      opts._vertId = id(opts.static.vert);

	      function addProps(dict, set) {
	        Object.keys(set).forEach(function (u) {
	          dict[stringStore.id(u)] = true;
	        });
	      }

	      var uniformSet = opts._uniformSet = {};
	      addProps(uniformSet, uniforms.static);
	      addProps(uniformSet, uniforms.dynamic);
	      var attributeSet = opts._attributeSet = {};
	      addProps(attributeSet, attributes.static);
	      addProps(attributeSet, attributes.dynamic);
	      opts._hasCount = 'count' in opts.static || 'count' in opts.dynamic || 'elements' in opts.static || 'elements' in opts.dynamic;
	    }

	    function commandRaise(message, command) {
	      var callSite = guessCallSite();
	      raise(message + ' in command ' + (command || guessCommand()) + (callSite === 'unknown' ? '' : ' called from ' + callSite));
	    }

	    function checkCommand(pred, message, command) {
	      if (!pred) {
	        commandRaise(message, command || guessCommand());
	      }
	    }

	    function checkParameterCommand(param, possibilities, message, command) {
	      if (!(param in possibilities)) {
	        commandRaise('unknown parameter (' + param + ')' + encolon(message) + '. possible values: ' + Object.keys(possibilities).join(), command || guessCommand());
	      }
	    }

	    function checkCommandType(value, type, message, command) {
	      if (typeof value !== type) {
	        commandRaise('invalid parameter type' + encolon(message) + '. expected ' + type + ', got ' + typeof value, command || guessCommand());
	      }
	    }

	    function checkOptional(block) {
	      block();
	    }

	    function checkFramebufferFormat(attachment, texFormats, rbFormats) {
	      if (attachment.texture) {
	        checkOneOf(attachment.texture._texture.internalformat, texFormats, 'unsupported texture format for attachment');
	      } else {
	        checkOneOf(attachment.renderbuffer._renderbuffer.format, rbFormats, 'unsupported renderbuffer format for attachment');
	      }
	    }

	    var GL_CLAMP_TO_EDGE = 0x812F;
	    var GL_NEAREST = 0x2600;
	    var GL_NEAREST_MIPMAP_NEAREST = 0x2700;
	    var GL_LINEAR_MIPMAP_NEAREST = 0x2701;
	    var GL_NEAREST_MIPMAP_LINEAR = 0x2702;
	    var GL_LINEAR_MIPMAP_LINEAR = 0x2703;
	    var GL_BYTE = 5120;
	    var GL_UNSIGNED_BYTE = 5121;
	    var GL_SHORT = 5122;
	    var GL_UNSIGNED_SHORT = 5123;
	    var GL_INT = 5124;
	    var GL_UNSIGNED_INT = 5125;
	    var GL_FLOAT = 5126;
	    var GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
	    var GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
	    var GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
	    var GL_UNSIGNED_INT_24_8_WEBGL = 0x84FA;
	    var GL_HALF_FLOAT_OES = 0x8D61;
	    var TYPE_SIZE = {};
	    TYPE_SIZE[GL_BYTE] = TYPE_SIZE[GL_UNSIGNED_BYTE] = 1;
	    TYPE_SIZE[GL_SHORT] = TYPE_SIZE[GL_UNSIGNED_SHORT] = TYPE_SIZE[GL_HALF_FLOAT_OES] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_6_5] = TYPE_SIZE[GL_UNSIGNED_SHORT_4_4_4_4] = TYPE_SIZE[GL_UNSIGNED_SHORT_5_5_5_1] = 2;
	    TYPE_SIZE[GL_INT] = TYPE_SIZE[GL_UNSIGNED_INT] = TYPE_SIZE[GL_FLOAT] = TYPE_SIZE[GL_UNSIGNED_INT_24_8_WEBGL] = 4;

	    function pixelSize(type, channels) {
	      if (type === GL_UNSIGNED_SHORT_5_5_5_1 || type === GL_UNSIGNED_SHORT_4_4_4_4 || type === GL_UNSIGNED_SHORT_5_6_5) {
	        return 2;
	      } else if (type === GL_UNSIGNED_INT_24_8_WEBGL) {
	        return 4;
	      } else {
	        return TYPE_SIZE[type] * channels;
	      }
	    }

	    function isPow2(v) {
	      return !(v & v - 1) && !!v;
	    }

	    function checkTexture2D(info, mipData, limits) {
	      var i;
	      var w = mipData.width;
	      var h = mipData.height;
	      var c = mipData.channels;
	      check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');

	      if (info.wrapS !== GL_CLAMP_TO_EDGE || info.wrapT !== GL_CLAMP_TO_EDGE) {
	        check(isPow2(w) && isPow2(h), 'incompatible wrap mode for texture, both width and height must be power of 2');
	      }

	      if (mipData.mipmask === 1) {
	        if (w !== 1 && h !== 1) {
	          check(info.minFilter !== GL_NEAREST_MIPMAP_NEAREST && info.minFilter !== GL_NEAREST_MIPMAP_LINEAR && info.minFilter !== GL_LINEAR_MIPMAP_NEAREST && info.minFilter !== GL_LINEAR_MIPMAP_LINEAR, 'min filter requires mipmap');
	        }
	      } else {
	        check(isPow2(w) && isPow2(h), 'texture must be a square power of 2 to support mipmapping');
	        check(mipData.mipmask === (w << 1) - 1, 'missing or incomplete mipmap data');
	      }

	      if (mipData.type === GL_FLOAT) {
	        if (limits.extensions.indexOf('oes_texture_float_linear') < 0) {
	          check(info.minFilter === GL_NEAREST && info.magFilter === GL_NEAREST, 'filter not supported, must enable oes_texture_float_linear');
	        }

	        check(!info.genMipmaps, 'mipmap generation not supported with float textures');
	      }

	      var mipimages = mipData.images;

	      for (i = 0; i < 16; ++i) {
	        if (mipimages[i]) {
	          var mw = w >> i;
	          var mh = h >> i;
	          check(mipData.mipmask & 1 << i, 'missing mipmap data');
	          var img = mipimages[i];
	          check(img.width === mw && img.height === mh, 'invalid shape for mip images');
	          check(img.format === mipData.format && img.internalformat === mipData.internalformat && img.type === mipData.type, 'incompatible type for mip image');

	          if (img.compressed) ; else if (img.data) {
	            var rowSize = Math.ceil(pixelSize(img.type, c) * mw / img.unpackAlignment) * img.unpackAlignment;
	            check(img.data.byteLength === rowSize * mh, 'invalid data for image, buffer size is inconsistent with image format');
	          } else if (img.element) ; else if (img.copy) ;
	        } else if (!info.genMipmaps) {
	          check((mipData.mipmask & 1 << i) === 0, 'extra mipmap data');
	        }
	      }

	      if (mipData.compressed) {
	        check(!info.genMipmaps, 'mipmap generation for compressed images not supported');
	      }
	    }

	    function checkTextureCube(texture, info, faces, limits) {
	      var w = texture.width;
	      var h = texture.height;
	      var c = texture.channels;
	      check(w > 0 && w <= limits.maxTextureSize && h > 0 && h <= limits.maxTextureSize, 'invalid texture shape');
	      check(w === h, 'cube map must be square');
	      check(info.wrapS === GL_CLAMP_TO_EDGE && info.wrapT === GL_CLAMP_TO_EDGE, 'wrap mode not supported by cube map');

	      for (var i = 0; i < faces.length; ++i) {
	        var face = faces[i];
	        check(face.width === w && face.height === h, 'inconsistent cube map face shape');

	        if (info.genMipmaps) {
	          check(!face.compressed, 'can not generate mipmap for compressed textures');
	          check(face.mipmask === 1, 'can not specify mipmaps and generate mipmaps');
	        }

	        var mipmaps = face.images;

	        for (var j = 0; j < 16; ++j) {
	          var img = mipmaps[j];

	          if (img) {
	            var mw = w >> j;
	            var mh = h >> j;
	            check(face.mipmask & 1 << j, 'missing mipmap data');
	            check(img.width === mw && img.height === mh, 'invalid shape for mip images');
	            check(img.format === texture.format && img.internalformat === texture.internalformat && img.type === texture.type, 'incompatible type for mip image');

	            if (img.compressed) ; else if (img.data) {
	              check(img.data.byteLength === mw * mh * Math.max(pixelSize(img.type, c), img.unpackAlignment), 'invalid data for image, buffer size is inconsistent with image format');
	            } else if (img.element) ; else if (img.copy) ;
	          }
	        }
	      }
	    }

	    var check$1 = extend(check, {
	      optional: checkOptional,
	      raise: raise,
	      commandRaise: commandRaise,
	      command: checkCommand,
	      parameter: checkParameter,
	      commandParameter: checkParameterCommand,
	      constructor: checkConstructor,
	      type: checkTypeOf,
	      commandType: checkCommandType,
	      isTypedArray: checkIsTypedArray,
	      nni: checkNonNegativeInt,
	      oneOf: checkOneOf,
	      shaderError: checkShaderError,
	      linkError: checkLinkError,
	      callSite: guessCallSite,
	      saveCommandRef: saveCommandRef,
	      saveDrawInfo: saveDrawCommandInfo,
	      framebufferFormat: checkFramebufferFormat,
	      guessCommand: guessCommand,
	      texture2D: checkTexture2D,
	      textureCube: checkTextureCube
	    });
	    var VARIABLE_COUNTER = 0;
	    var DYN_FUNC = 0;

	    function DynamicVariable(type, data) {
	      this.id = VARIABLE_COUNTER++;
	      this.type = type;
	      this.data = data;
	    }

	    function escapeStr(str) {
	      return str.replace(/\\/g, '\\\\').replace(/"/g, '\\"');
	    }

	    function splitParts(str) {
	      if (str.length === 0) {
	        return [];
	      }

	      var firstChar = str.charAt(0);
	      var lastChar = str.charAt(str.length - 1);

	      if (str.length > 1 && firstChar === lastChar && (firstChar === '"' || firstChar === "'")) {
	        return ['"' + escapeStr(str.substr(1, str.length - 2)) + '"'];
	      }

	      var parts = /\[(false|true|null|\d+|'[^']*'|"[^"]*")\]/.exec(str);

	      if (parts) {
	        return splitParts(str.substr(0, parts.index)).concat(splitParts(parts[1])).concat(splitParts(str.substr(parts.index + parts[0].length)));
	      }

	      var subparts = str.split('.');

	      if (subparts.length === 1) {
	        return ['"' + escapeStr(str) + '"'];
	      }

	      var result = [];

	      for (var i = 0; i < subparts.length; ++i) {
	        result = result.concat(splitParts(subparts[i]));
	      }

	      return result;
	    }

	    function toAccessorString(str) {
	      return '[' + splitParts(str).join('][') + ']';
	    }

	    function defineDynamic(type, data) {
	      return new DynamicVariable(type, toAccessorString(data + ''));
	    }

	    function isDynamic(x) {
	      return typeof x === 'function' && !x._reglType || x instanceof DynamicVariable;
	    }

	    function unbox(x, path) {
	      if (typeof x === 'function') {
	        return new DynamicVariable(DYN_FUNC, x);
	      }

	      return x;
	    }

	    var dynamic = {
	      DynamicVariable: DynamicVariable,
	      define: defineDynamic,
	      isDynamic: isDynamic,
	      unbox: unbox,
	      accessor: toAccessorString
	    };
	    var raf = {
	      next: typeof requestAnimationFrame === 'function' ? function (cb) {
	        return requestAnimationFrame(cb);
	      } : function (cb) {
	        return setTimeout(cb, 16);
	      },
	      cancel: typeof cancelAnimationFrame === 'function' ? function (raf) {
	        return cancelAnimationFrame(raf);
	      } : clearTimeout
	    };
	    var clock = typeof performance !== 'undefined' && performance.now ? function () {
	      return performance.now();
	    } : function () {
	      return +new Date();
	    };

	    function createStringStore() {
	      var stringIds = {
	        '': 0
	      };
	      var stringValues = [''];
	      return {
	        id: function id(str) {
	          var result = stringIds[str];

	          if (result) {
	            return result;
	          }

	          result = stringIds[str] = stringValues.length;
	          stringValues.push(str);
	          return result;
	        },
	        str: function str(id) {
	          return stringValues[id];
	        }
	      };
	    }

	    function createCanvas(element, onDone, pixelRatio) {
	      var canvas = document.createElement('canvas');
	      extend(canvas.style, {
	        border: 0,
	        margin: 0,
	        padding: 0,
	        top: 0,
	        left: 0
	      });
	      element.appendChild(canvas);

	      if (element === document.body) {
	        canvas.style.position = 'absolute';
	        extend(element.style, {
	          margin: 0,
	          padding: 0
	        });
	      }

	      function resize() {
	        var w = window.innerWidth;
	        var h = window.innerHeight;

	        if (element !== document.body) {
	          var bounds = element.getBoundingClientRect();
	          w = bounds.right - bounds.left;
	          h = bounds.bottom - bounds.top;
	        }

	        canvas.width = pixelRatio * w;
	        canvas.height = pixelRatio * h;
	        extend(canvas.style, {
	          width: w + 'px',
	          height: h + 'px'
	        });
	      }

	      window.addEventListener('resize', resize, false);

	      function onDestroy() {
	        window.removeEventListener('resize', resize);
	        element.removeChild(canvas);
	      }

	      resize();
	      return {
	        canvas: canvas,
	        onDestroy: onDestroy
	      };
	    }

	    function createContext(canvas, contextAttributes) {
	      function get(name) {
	        try {
	          return canvas.getContext(name, contextAttributes);
	        } catch (e) {
	          return null;
	        }
	      }

	      return get('webgl') || get('experimental-webgl') || get('webgl-experimental');
	    }

	    function isHTMLElement(obj) {
	      return typeof obj.nodeName === 'string' && typeof obj.appendChild === 'function' && typeof obj.getBoundingClientRect === 'function';
	    }

	    function isWebGLContext(obj) {
	      return typeof obj.drawArrays === 'function' || typeof obj.drawElements === 'function';
	    }

	    function parseExtensions(input) {
	      if (typeof input === 'string') {
	        return input.split();
	      }

	      check$1(Array.isArray(input), 'invalid extension array');
	      return input;
	    }

	    function getElement(desc) {
	      if (typeof desc === 'string') {
	        check$1(typeof document !== 'undefined', 'not supported outside of DOM');
	        return document.querySelector(desc);
	      }

	      return desc;
	    }

	    function parseArgs(args_) {
	      var args = args_ || {};
	      var element, container, canvas, gl;
	      var contextAttributes = {};
	      var extensions = [];
	      var optionalExtensions = [];
	      var pixelRatio = typeof window === 'undefined' ? 1 : window.devicePixelRatio;
	      var profile = false;

	      var onDone = function onDone(err) {
	        if (err) {
	          check$1.raise(err);
	        }
	      };

	      var onDestroy = function onDestroy() {};

	      if (typeof args === 'string') {
	        check$1(typeof document !== 'undefined', 'selector queries only supported in DOM enviroments');
	        element = document.querySelector(args);
	        check$1(element, 'invalid query string for element');
	      } else if (typeof args === 'object') {
	        if (isHTMLElement(args)) {
	          element = args;
	        } else if (isWebGLContext(args)) {
	          gl = args;
	          canvas = gl.canvas;
	        } else {
	          check$1.constructor(args);

	          if ('gl' in args) {
	            gl = args.gl;
	          } else if ('canvas' in args) {
	            canvas = getElement(args.canvas);
	          } else if ('container' in args) {
	            container = getElement(args.container);
	          }

	          if ('attributes' in args) {
	            contextAttributes = args.attributes;
	            check$1.type(contextAttributes, 'object', 'invalid context attributes');
	          }

	          if ('extensions' in args) {
	            extensions = parseExtensions(args.extensions);
	          }

	          if ('optionalExtensions' in args) {
	            optionalExtensions = parseExtensions(args.optionalExtensions);
	          }

	          if ('onDone' in args) {
	            check$1.type(args.onDone, 'function', 'invalid or missing onDone callback');
	            onDone = args.onDone;
	          }

	          if ('profile' in args) {
	            profile = !!args.profile;
	          }

	          if ('pixelRatio' in args) {
	            pixelRatio = +args.pixelRatio;
	            check$1(pixelRatio > 0, 'invalid pixel ratio');
	          }
	        }
	      } else {
	        check$1.raise('invalid arguments to regl');
	      }

	      if (element) {
	        if (element.nodeName.toLowerCase() === 'canvas') {
	          canvas = element;
	        } else {
	          container = element;
	        }
	      }

	      if (!gl) {
	        if (!canvas) {
	          check$1(typeof document !== 'undefined', 'must manually specify webgl context outside of DOM environments');
	          var result = createCanvas(container || document.body, onDone, pixelRatio);

	          if (!result) {
	            return null;
	          }

	          canvas = result.canvas;
	          onDestroy = result.onDestroy;
	        }

	        gl = createContext(canvas, contextAttributes);
	      }

	      if (!gl) {
	        onDestroy();
	        onDone('webgl not supported, try upgrading your browser or graphics drivers http://get.webgl.org');
	        return null;
	      }

	      return {
	        gl: gl,
	        canvas: canvas,
	        container: container,
	        extensions: extensions,
	        optionalExtensions: optionalExtensions,
	        pixelRatio: pixelRatio,
	        profile: profile,
	        onDone: onDone,
	        onDestroy: onDestroy
	      };
	    }

	    function createExtensionCache(gl, config) {
	      var extensions = {};

	      function tryLoadExtension(name_) {
	        check$1.type(name_, 'string', 'extension name must be string');
	        var name = name_.toLowerCase();
	        var ext;

	        try {
	          ext = extensions[name] = gl.getExtension(name);
	        } catch (e) {}

	        return !!ext;
	      }

	      for (var i = 0; i < config.extensions.length; ++i) {
	        var name = config.extensions[i];

	        if (!tryLoadExtension(name)) {
	          config.onDestroy();
	          config.onDone('"' + name + '" extension is not supported by the current WebGL context, try upgrading your system or a different browser');
	          return null;
	        }
	      }

	      config.optionalExtensions.forEach(tryLoadExtension);
	      return {
	        extensions: extensions,
	        restore: function restore() {
	          Object.keys(extensions).forEach(function (name) {
	            if (extensions[name] && !tryLoadExtension(name)) {
	              throw new Error('(regl): error restoring extension ' + name);
	            }
	          });
	        }
	      };
	    }

	    function loop(n, f) {
	      var result = Array(n);

	      for (var i = 0; i < n; ++i) {
	        result[i] = f(i);
	      }

	      return result;
	    }

	    var GL_BYTE$1 = 5120;
	    var GL_UNSIGNED_BYTE$2 = 5121;
	    var GL_SHORT$1 = 5122;
	    var GL_UNSIGNED_SHORT$1 = 5123;
	    var GL_INT$1 = 5124;
	    var GL_UNSIGNED_INT$1 = 5125;
	    var GL_FLOAT$2 = 5126;

	    function nextPow16(v) {
	      for (var i = 16; i <= 1 << 28; i *= 16) {
	        if (v <= i) {
	          return i;
	        }
	      }

	      return 0;
	    }

	    function log2(v) {
	      var r, shift;
	      r = (v > 0xFFFF) << 4;
	      v >>>= r;
	      shift = (v > 0xFF) << 3;
	      v >>>= shift;
	      r |= shift;
	      shift = (v > 0xF) << 2;
	      v >>>= shift;
	      r |= shift;
	      shift = (v > 0x3) << 1;
	      v >>>= shift;
	      r |= shift;
	      return r | v >> 1;
	    }

	    function createPool() {
	      var bufferPool = loop(8, function () {
	        return [];
	      });

	      function alloc(n) {
	        var sz = nextPow16(n);
	        var bin = bufferPool[log2(sz) >> 2];

	        if (bin.length > 0) {
	          return bin.pop();
	        }

	        return new ArrayBuffer(sz);
	      }

	      function free(buf) {
	        bufferPool[log2(buf.byteLength) >> 2].push(buf);
	      }

	      function allocType(type, n) {
	        var result = null;

	        switch (type) {
	          case GL_BYTE$1:
	            result = new Int8Array(alloc(n), 0, n);
	            break;

	          case GL_UNSIGNED_BYTE$2:
	            result = new Uint8Array(alloc(n), 0, n);
	            break;

	          case GL_SHORT$1:
	            result = new Int16Array(alloc(2 * n), 0, n);
	            break;

	          case GL_UNSIGNED_SHORT$1:
	            result = new Uint16Array(alloc(2 * n), 0, n);
	            break;

	          case GL_INT$1:
	            result = new Int32Array(alloc(4 * n), 0, n);
	            break;

	          case GL_UNSIGNED_INT$1:
	            result = new Uint32Array(alloc(4 * n), 0, n);
	            break;

	          case GL_FLOAT$2:
	            result = new Float32Array(alloc(4 * n), 0, n);
	            break;

	          default:
	            return null;
	        }

	        if (result.length !== n) {
	          return result.subarray(0, n);
	        }

	        return result;
	      }

	      function freeType(array) {
	        free(array.buffer);
	      }

	      return {
	        alloc: alloc,
	        free: free,
	        allocType: allocType,
	        freeType: freeType
	      };
	    }

	    var pool = createPool();
	    pool.zero = createPool();
	    var GL_SUBPIXEL_BITS = 0x0D50;
	    var GL_RED_BITS = 0x0D52;
	    var GL_GREEN_BITS = 0x0D53;
	    var GL_BLUE_BITS = 0x0D54;
	    var GL_ALPHA_BITS = 0x0D55;
	    var GL_DEPTH_BITS = 0x0D56;
	    var GL_STENCIL_BITS = 0x0D57;
	    var GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
	    var GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
	    var GL_MAX_TEXTURE_SIZE = 0x0D33;
	    var GL_MAX_VIEWPORT_DIMS = 0x0D3A;
	    var GL_MAX_VERTEX_ATTRIBS = 0x8869;
	    var GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
	    var GL_MAX_VARYING_VECTORS = 0x8DFC;
	    var GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
	    var GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
	    var GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
	    var GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
	    var GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
	    var GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
	    var GL_VENDOR = 0x1F00;
	    var GL_RENDERER = 0x1F01;
	    var GL_VERSION = 0x1F02;
	    var GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
	    var GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
	    var GL_MAX_COLOR_ATTACHMENTS_WEBGL = 0x8CDF;
	    var GL_MAX_DRAW_BUFFERS_WEBGL = 0x8824;
	    var GL_TEXTURE_2D = 0x0DE1;
	    var GL_TEXTURE_CUBE_MAP = 0x8513;
	    var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
	    var GL_TEXTURE0 = 0x84C0;
	    var GL_RGBA = 0x1908;
	    var GL_FLOAT$1 = 0x1406;
	    var GL_UNSIGNED_BYTE$1 = 0x1401;
	    var GL_FRAMEBUFFER = 0x8D40;
	    var GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
	    var GL_COLOR_ATTACHMENT0 = 0x8CE0;
	    var GL_COLOR_BUFFER_BIT$1 = 0x4000;

	    var wrapLimits = function wrapLimits(gl, extensions) {
	      var maxAnisotropic = 1;

	      if (extensions.ext_texture_filter_anisotropic) {
	        maxAnisotropic = gl.getParameter(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT);
	      }

	      var maxDrawbuffers = 1;
	      var maxColorAttachments = 1;

	      if (extensions.webgl_draw_buffers) {
	        maxDrawbuffers = gl.getParameter(GL_MAX_DRAW_BUFFERS_WEBGL);
	        maxColorAttachments = gl.getParameter(GL_MAX_COLOR_ATTACHMENTS_WEBGL);
	      }

	      var readFloat = !!extensions.oes_texture_float;

	      if (readFloat) {
	        var readFloatTexture = gl.createTexture();
	        gl.bindTexture(GL_TEXTURE_2D, readFloatTexture);
	        gl.texImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 1, 1, 0, GL_RGBA, GL_FLOAT$1, null);
	        var fbo = gl.createFramebuffer();
	        gl.bindFramebuffer(GL_FRAMEBUFFER, fbo);
	        gl.framebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, readFloatTexture, 0);
	        gl.bindTexture(GL_TEXTURE_2D, null);
	        if (gl.checkFramebufferStatus(GL_FRAMEBUFFER) !== GL_FRAMEBUFFER_COMPLETE) readFloat = false;else {
	          gl.viewport(0, 0, 1, 1);
	          gl.clearColor(1.0, 0.0, 0.0, 1.0);
	          gl.clear(GL_COLOR_BUFFER_BIT$1);
	          var pixels = pool.allocType(GL_FLOAT$1, 4);
	          gl.readPixels(0, 0, 1, 1, GL_RGBA, GL_FLOAT$1, pixels);
	          if (gl.getError()) readFloat = false;else {
	            gl.deleteFramebuffer(fbo);
	            gl.deleteTexture(readFloatTexture);
	            readFloat = pixels[0] === 1.0;
	          }
	          pool.freeType(pixels);
	        }
	      }

	      var isIE = typeof navigator !== 'undefined' && (/MSIE/.test(navigator.userAgent) || /Trident\//.test(navigator.appVersion) || /Edge/.test(navigator.userAgent));
	      var npotTextureCube = true;

	      if (!isIE) {
	        var cubeTexture = gl.createTexture();
	        var data = pool.allocType(GL_UNSIGNED_BYTE$1, 36);
	        gl.activeTexture(GL_TEXTURE0);
	        gl.bindTexture(GL_TEXTURE_CUBE_MAP, cubeTexture);
	        gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGBA, 3, 3, 0, GL_RGBA, GL_UNSIGNED_BYTE$1, data);
	        pool.freeType(data);
	        gl.bindTexture(GL_TEXTURE_CUBE_MAP, null);
	        gl.deleteTexture(cubeTexture);
	        npotTextureCube = !gl.getError();
	      }

	      return {
	        colorBits: [gl.getParameter(GL_RED_BITS), gl.getParameter(GL_GREEN_BITS), gl.getParameter(GL_BLUE_BITS), gl.getParameter(GL_ALPHA_BITS)],
	        depthBits: gl.getParameter(GL_DEPTH_BITS),
	        stencilBits: gl.getParameter(GL_STENCIL_BITS),
	        subpixelBits: gl.getParameter(GL_SUBPIXEL_BITS),
	        extensions: Object.keys(extensions).filter(function (ext) {
	          return !!extensions[ext];
	        }),
	        maxAnisotropic: maxAnisotropic,
	        maxDrawbuffers: maxDrawbuffers,
	        maxColorAttachments: maxColorAttachments,
	        pointSizeDims: gl.getParameter(GL_ALIASED_POINT_SIZE_RANGE),
	        lineWidthDims: gl.getParameter(GL_ALIASED_LINE_WIDTH_RANGE),
	        maxViewportDims: gl.getParameter(GL_MAX_VIEWPORT_DIMS),
	        maxCombinedTextureUnits: gl.getParameter(GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS),
	        maxCubeMapSize: gl.getParameter(GL_MAX_CUBE_MAP_TEXTURE_SIZE),
	        maxRenderbufferSize: gl.getParameter(GL_MAX_RENDERBUFFER_SIZE),
	        maxTextureUnits: gl.getParameter(GL_MAX_TEXTURE_IMAGE_UNITS),
	        maxTextureSize: gl.getParameter(GL_MAX_TEXTURE_SIZE),
	        maxAttributes: gl.getParameter(GL_MAX_VERTEX_ATTRIBS),
	        maxVertexUniforms: gl.getParameter(GL_MAX_VERTEX_UNIFORM_VECTORS),
	        maxVertexTextureUnits: gl.getParameter(GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS),
	        maxVaryingVectors: gl.getParameter(GL_MAX_VARYING_VECTORS),
	        maxFragmentUniforms: gl.getParameter(GL_MAX_FRAGMENT_UNIFORM_VECTORS),
	        glsl: gl.getParameter(GL_SHADING_LANGUAGE_VERSION),
	        renderer: gl.getParameter(GL_RENDERER),
	        vendor: gl.getParameter(GL_VENDOR),
	        version: gl.getParameter(GL_VERSION),
	        readFloat: readFloat,
	        npotTextureCube: npotTextureCube
	      };
	    };

	    function isNDArrayLike(obj) {
	      return !!obj && typeof obj === 'object' && Array.isArray(obj.shape) && Array.isArray(obj.stride) && typeof obj.offset === 'number' && obj.shape.length === obj.stride.length && (Array.isArray(obj.data) || isTypedArray(obj.data));
	    }

	    var values = function values(obj) {
	      return Object.keys(obj).map(function (key) {
	        return obj[key];
	      });
	    };

	    var flattenUtils = {
	      shape: arrayShape$1,
	      flatten: flattenArray
	    };

	    function flatten1D(array, nx, out) {
	      for (var i = 0; i < nx; ++i) {
	        out[i] = array[i];
	      }
	    }

	    function flatten2D(array, nx, ny, out) {
	      var ptr = 0;

	      for (var i = 0; i < nx; ++i) {
	        var row = array[i];

	        for (var j = 0; j < ny; ++j) {
	          out[ptr++] = row[j];
	        }
	      }
	    }

	    function flatten3D(array, nx, ny, nz, out, ptr_) {
	      var ptr = ptr_;

	      for (var i = 0; i < nx; ++i) {
	        var row = array[i];

	        for (var j = 0; j < ny; ++j) {
	          var col = row[j];

	          for (var k = 0; k < nz; ++k) {
	            out[ptr++] = col[k];
	          }
	        }
	      }
	    }

	    function flattenRec(array, shape, level, out, ptr) {
	      var stride = 1;

	      for (var i = level + 1; i < shape.length; ++i) {
	        stride *= shape[i];
	      }

	      var n = shape[level];

	      if (shape.length - level === 4) {
	        var nx = shape[level + 1];
	        var ny = shape[level + 2];
	        var nz = shape[level + 3];

	        for (i = 0; i < n; ++i) {
	          flatten3D(array[i], nx, ny, nz, out, ptr);
	          ptr += stride;
	        }
	      } else {
	        for (i = 0; i < n; ++i) {
	          flattenRec(array[i], shape, level + 1, out, ptr);
	          ptr += stride;
	        }
	      }
	    }

	    function flattenArray(array, shape, type, out_) {
	      var sz = 1;

	      if (shape.length) {
	        for (var i = 0; i < shape.length; ++i) {
	          sz *= shape[i];
	        }
	      } else {
	        sz = 0;
	      }

	      var out = out_ || pool.allocType(type, sz);

	      switch (shape.length) {
	        case 0:
	          break;

	        case 1:
	          flatten1D(array, shape[0], out);
	          break;

	        case 2:
	          flatten2D(array, shape[0], shape[1], out);
	          break;

	        case 3:
	          flatten3D(array, shape[0], shape[1], shape[2], out, 0);
	          break;

	        default:
	          flattenRec(array, shape, 0, out, 0);
	      }

	      return out;
	    }

	    function arrayShape$1(array_) {
	      var shape = [];

	      for (var array = array_; array.length; array = array[0]) {
	        shape.push(array.length);
	      }

	      return shape;
	    }

	    var arrayTypes = {
	      "[object Int8Array]": 5120,
	      "[object Int16Array]": 5122,
	      "[object Int32Array]": 5124,
	      "[object Uint8Array]": 5121,
	      "[object Uint8ClampedArray]": 5121,
	      "[object Uint16Array]": 5123,
	      "[object Uint32Array]": 5125,
	      "[object Float32Array]": 5126,
	      "[object Float64Array]": 5121,
	      "[object ArrayBuffer]": 5121
	    };
	    var int8 = 5120;
	    var int16 = 5122;
	    var int32 = 5124;
	    var uint8 = 5121;
	    var uint16 = 5123;
	    var uint32 = 5125;
	    var float = 5126;
	    var float32 = 5126;
	    var glTypes = {
	      int8: int8,
	      int16: int16,
	      int32: int32,
	      uint8: uint8,
	      uint16: uint16,
	      uint32: uint32,
	      float: float,
	      float32: float32
	    };
	    var dynamic$1 = 35048;
	    var stream = 35040;
	    var usageTypes = {
	      dynamic: dynamic$1,
	      stream: stream,
	      "static": 35044
	    };
	    var arrayFlatten = flattenUtils.flatten;
	    var arrayShape = flattenUtils.shape;
	    var GL_STATIC_DRAW = 0x88E4;
	    var GL_STREAM_DRAW = 0x88E0;
	    var GL_UNSIGNED_BYTE$3 = 5121;
	    var GL_FLOAT$3 = 5126;
	    var DTYPES_SIZES = [];
	    DTYPES_SIZES[5120] = 1;
	    DTYPES_SIZES[5122] = 2;
	    DTYPES_SIZES[5124] = 4;
	    DTYPES_SIZES[5121] = 1;
	    DTYPES_SIZES[5123] = 2;
	    DTYPES_SIZES[5125] = 4;
	    DTYPES_SIZES[5126] = 4;

	    function typedArrayCode(data) {
	      return arrayTypes[Object.prototype.toString.call(data)] | 0;
	    }

	    function copyArray(out, inp) {
	      for (var i = 0; i < inp.length; ++i) {
	        out[i] = inp[i];
	      }
	    }

	    function transpose(result, data, shapeX, shapeY, strideX, strideY, offset) {
	      var ptr = 0;

	      for (var i = 0; i < shapeX; ++i) {
	        for (var j = 0; j < shapeY; ++j) {
	          result[ptr++] = data[strideX * i + strideY * j + offset];
	        }
	      }
	    }

	    function wrapBufferState(gl, stats, config, attributeState) {
	      var bufferCount = 0;
	      var bufferSet = {};

	      function REGLBuffer(type) {
	        this.id = bufferCount++;
	        this.buffer = gl.createBuffer();
	        this.type = type;
	        this.usage = GL_STATIC_DRAW;
	        this.byteLength = 0;
	        this.dimension = 1;
	        this.dtype = GL_UNSIGNED_BYTE$3;
	        this.persistentData = null;

	        if (config.profile) {
	          this.stats = {
	            size: 0
	          };
	        }
	      }

	      REGLBuffer.prototype.bind = function () {
	        gl.bindBuffer(this.type, this.buffer);
	      };

	      REGLBuffer.prototype.destroy = function () {
	        destroy(this);
	      };

	      var streamPool = [];

	      function createStream(type, data) {
	        var buffer = streamPool.pop();

	        if (!buffer) {
	          buffer = new REGLBuffer(type);
	        }

	        buffer.bind();
	        initBufferFromData(buffer, data, GL_STREAM_DRAW, 0, 1, false);
	        return buffer;
	      }

	      function destroyStream(stream$$1) {
	        streamPool.push(stream$$1);
	      }

	      function initBufferFromTypedArray(buffer, data, usage) {
	        buffer.byteLength = data.byteLength;
	        gl.bufferData(buffer.type, data, usage);
	      }

	      function initBufferFromData(buffer, data, usage, dtype, dimension, persist) {
	        var shape;
	        buffer.usage = usage;

	        if (Array.isArray(data)) {
	          buffer.dtype = dtype || GL_FLOAT$3;

	          if (data.length > 0) {
	            var flatData;

	            if (Array.isArray(data[0])) {
	              shape = arrayShape(data);
	              var dim = 1;

	              for (var i = 1; i < shape.length; ++i) {
	                dim *= shape[i];
	              }

	              buffer.dimension = dim;
	              flatData = arrayFlatten(data, shape, buffer.dtype);
	              initBufferFromTypedArray(buffer, flatData, usage);

	              if (persist) {
	                buffer.persistentData = flatData;
	              } else {
	                pool.freeType(flatData);
	              }
	            } else if (typeof data[0] === 'number') {
	              buffer.dimension = dimension;
	              var typedData = pool.allocType(buffer.dtype, data.length);
	              copyArray(typedData, data);
	              initBufferFromTypedArray(buffer, typedData, usage);

	              if (persist) {
	                buffer.persistentData = typedData;
	              } else {
	                pool.freeType(typedData);
	              }
	            } else if (isTypedArray(data[0])) {
	              buffer.dimension = data[0].length;
	              buffer.dtype = dtype || typedArrayCode(data[0]) || GL_FLOAT$3;
	              flatData = arrayFlatten(data, [data.length, data[0].length], buffer.dtype);
	              initBufferFromTypedArray(buffer, flatData, usage);

	              if (persist) {
	                buffer.persistentData = flatData;
	              } else {
	                pool.freeType(flatData);
	              }
	            } else {
	              check$1.raise('invalid buffer data');
	            }
	          }
	        } else if (isTypedArray(data)) {
	          buffer.dtype = dtype || typedArrayCode(data);
	          buffer.dimension = dimension;
	          initBufferFromTypedArray(buffer, data, usage);

	          if (persist) {
	            buffer.persistentData = new Uint8Array(new Uint8Array(data.buffer));
	          }
	        } else if (isNDArrayLike(data)) {
	          shape = data.shape;
	          var stride = data.stride;
	          var offset = data.offset;
	          var shapeX = 0;
	          var shapeY = 0;
	          var strideX = 0;
	          var strideY = 0;

	          if (shape.length === 1) {
	            shapeX = shape[0];
	            shapeY = 1;
	            strideX = stride[0];
	            strideY = 0;
	          } else if (shape.length === 2) {
	            shapeX = shape[0];
	            shapeY = shape[1];
	            strideX = stride[0];
	            strideY = stride[1];
	          } else {
	            check$1.raise('invalid shape');
	          }

	          buffer.dtype = dtype || typedArrayCode(data.data) || GL_FLOAT$3;
	          buffer.dimension = shapeY;
	          var transposeData = pool.allocType(buffer.dtype, shapeX * shapeY);
	          transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, offset);
	          initBufferFromTypedArray(buffer, transposeData, usage);

	          if (persist) {
	            buffer.persistentData = transposeData;
	          } else {
	            pool.freeType(transposeData);
	          }
	        } else if (data instanceof ArrayBuffer) {
	          buffer.dtype = GL_UNSIGNED_BYTE$3;
	          buffer.dimension = dimension;
	          initBufferFromTypedArray(buffer, data, usage);

	          if (persist) {
	            buffer.persistentData = new Uint8Array(new Uint8Array(data));
	          }
	        } else {
	          check$1.raise('invalid buffer data');
	        }
	      }

	      function destroy(buffer) {
	        stats.bufferCount--;

	        for (var i = 0; i < attributeState.state.length; ++i) {
	          var record = attributeState.state[i];

	          if (record.buffer === buffer) {
	            gl.disableVertexAttribArray(i);
	            record.buffer = null;
	          }
	        }

	        var handle = buffer.buffer;
	        check$1(handle, 'buffer must not be deleted already');
	        gl.deleteBuffer(handle);
	        buffer.buffer = null;
	        delete bufferSet[buffer.id];
	      }

	      function createBuffer(options, type, deferInit, persistent) {
	        stats.bufferCount++;
	        var buffer = new REGLBuffer(type);
	        bufferSet[buffer.id] = buffer;

	        function reglBuffer(options) {
	          var usage = GL_STATIC_DRAW;
	          var data = null;
	          var byteLength = 0;
	          var dtype = 0;
	          var dimension = 1;

	          if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options) || options instanceof ArrayBuffer) {
	            data = options;
	          } else if (typeof options === 'number') {
	            byteLength = options | 0;
	          } else if (options) {
	            check$1.type(options, 'object', 'buffer arguments must be an object, a number or an array');

	            if ('data' in options) {
	              check$1(data === null || Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for buffer');
	              data = options.data;
	            }

	            if ('usage' in options) {
	              check$1.parameter(options.usage, usageTypes, 'invalid buffer usage');
	              usage = usageTypes[options.usage];
	            }

	            if ('type' in options) {
	              check$1.parameter(options.type, glTypes, 'invalid buffer type');
	              dtype = glTypes[options.type];
	            }

	            if ('dimension' in options) {
	              check$1.type(options.dimension, 'number', 'invalid dimension');
	              dimension = options.dimension | 0;
	            }

	            if ('length' in options) {
	              check$1.nni(byteLength, 'buffer length must be a nonnegative integer');
	              byteLength = options.length | 0;
	            }
	          }

	          buffer.bind();

	          if (!data) {
	            if (byteLength) gl.bufferData(buffer.type, byteLength, usage);
	            buffer.dtype = dtype || GL_UNSIGNED_BYTE$3;
	            buffer.usage = usage;
	            buffer.dimension = dimension;
	            buffer.byteLength = byteLength;
	          } else {
	            initBufferFromData(buffer, data, usage, dtype, dimension, persistent);
	          }

	          if (config.profile) {
	            buffer.stats.size = buffer.byteLength * DTYPES_SIZES[buffer.dtype];
	          }

	          return reglBuffer;
	        }

	        function setSubData(data, offset) {
	          check$1(offset + data.byteLength <= buffer.byteLength, 'invalid buffer subdata call, buffer is too small. ' + ' Can\'t write data of size ' + data.byteLength + ' starting from offset ' + offset + ' to a buffer of size ' + buffer.byteLength);
	          gl.bufferSubData(buffer.type, offset, data);
	        }

	        function subdata(data, offset_) {
	          var offset = (offset_ || 0) | 0;
	          var shape;
	          buffer.bind();

	          if (isTypedArray(data) || data instanceof ArrayBuffer) {
	            setSubData(data, offset);
	          } else if (Array.isArray(data)) {
	            if (data.length > 0) {
	              if (typeof data[0] === 'number') {
	                var converted = pool.allocType(buffer.dtype, data.length);
	                copyArray(converted, data);
	                setSubData(converted, offset);
	                pool.freeType(converted);
	              } else if (Array.isArray(data[0]) || isTypedArray(data[0])) {
	                shape = arrayShape(data);
	                var flatData = arrayFlatten(data, shape, buffer.dtype);
	                setSubData(flatData, offset);
	                pool.freeType(flatData);
	              } else {
	                check$1.raise('invalid buffer data');
	              }
	            }
	          } else if (isNDArrayLike(data)) {
	            shape = data.shape;
	            var stride = data.stride;
	            var shapeX = 0;
	            var shapeY = 0;
	            var strideX = 0;
	            var strideY = 0;

	            if (shape.length === 1) {
	              shapeX = shape[0];
	              shapeY = 1;
	              strideX = stride[0];
	              strideY = 0;
	            } else if (shape.length === 2) {
	              shapeX = shape[0];
	              shapeY = shape[1];
	              strideX = stride[0];
	              strideY = stride[1];
	            } else {
	              check$1.raise('invalid shape');
	            }

	            var dtype = Array.isArray(data.data) ? buffer.dtype : typedArrayCode(data.data);
	            var transposeData = pool.allocType(dtype, shapeX * shapeY);
	            transpose(transposeData, data.data, shapeX, shapeY, strideX, strideY, data.offset);
	            setSubData(transposeData, offset);
	            pool.freeType(transposeData);
	          } else {
	            check$1.raise('invalid data for buffer subdata');
	          }

	          return reglBuffer;
	        }

	        if (!deferInit) {
	          reglBuffer(options);
	        }

	        reglBuffer._reglType = 'buffer';
	        reglBuffer._buffer = buffer;
	        reglBuffer.subdata = subdata;

	        if (config.profile) {
	          reglBuffer.stats = buffer.stats;
	        }

	        reglBuffer.destroy = function () {
	          destroy(buffer);
	        };

	        return reglBuffer;
	      }

	      function restoreBuffers() {
	        values(bufferSet).forEach(function (buffer) {
	          buffer.buffer = gl.createBuffer();
	          gl.bindBuffer(buffer.type, buffer.buffer);
	          gl.bufferData(buffer.type, buffer.persistentData || buffer.byteLength, buffer.usage);
	        });
	      }

	      if (config.profile) {
	        stats.getTotalBufferSize = function () {
	          var total = 0;
	          Object.keys(bufferSet).forEach(function (key) {
	            total += bufferSet[key].stats.size;
	          });
	          return total;
	        };
	      }

	      return {
	        create: createBuffer,
	        createStream: createStream,
	        destroyStream: destroyStream,
	        clear: function clear() {
	          values(bufferSet).forEach(destroy);
	          streamPool.forEach(destroy);
	        },
	        getBuffer: function getBuffer(wrapper) {
	          if (wrapper && wrapper._buffer instanceof REGLBuffer) {
	            return wrapper._buffer;
	          }

	          return null;
	        },
	        restore: restoreBuffers,
	        _initBuffer: initBufferFromData
	      };
	    }

	    var points = 0;
	    var point = 0;
	    var lines = 1;
	    var line = 1;
	    var triangles = 4;
	    var triangle = 4;
	    var primTypes = {
	      points: points,
	      point: point,
	      lines: lines,
	      line: line,
	      triangles: triangles,
	      triangle: triangle,
	      "line loop": 2,
	      "line strip": 3,
	      "triangle strip": 5,
	      "triangle fan": 6
	    };
	    var GL_POINTS = 0;
	    var GL_LINES = 1;
	    var GL_TRIANGLES = 4;
	    var GL_BYTE$2 = 5120;
	    var GL_UNSIGNED_BYTE$4 = 5121;
	    var GL_SHORT$2 = 5122;
	    var GL_UNSIGNED_SHORT$2 = 5123;
	    var GL_INT$2 = 5124;
	    var GL_UNSIGNED_INT$2 = 5125;
	    var GL_ELEMENT_ARRAY_BUFFER = 34963;
	    var GL_STREAM_DRAW$1 = 0x88E0;
	    var GL_STATIC_DRAW$1 = 0x88E4;

	    function wrapElementsState(gl, extensions, bufferState, stats) {
	      var elementSet = {};
	      var elementCount = 0;
	      var elementTypes = {
	        'uint8': GL_UNSIGNED_BYTE$4,
	        'uint16': GL_UNSIGNED_SHORT$2
	      };

	      if (extensions.oes_element_index_uint) {
	        elementTypes.uint32 = GL_UNSIGNED_INT$2;
	      }

	      function REGLElementBuffer(buffer) {
	        this.id = elementCount++;
	        elementSet[this.id] = this;
	        this.buffer = buffer;
	        this.primType = GL_TRIANGLES;
	        this.vertCount = 0;
	        this.type = 0;
	      }

	      REGLElementBuffer.prototype.bind = function () {
	        this.buffer.bind();
	      };

	      var bufferPool = [];

	      function createElementStream(data) {
	        var result = bufferPool.pop();

	        if (!result) {
	          result = new REGLElementBuffer(bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true, false)._buffer);
	        }

	        initElements(result, data, GL_STREAM_DRAW$1, -1, -1, 0, 0);
	        return result;
	      }

	      function destroyElementStream(elements) {
	        bufferPool.push(elements);
	      }

	      function initElements(elements, data, usage, prim, count, byteLength, type) {
	        elements.buffer.bind();

	        if (data) {
	          var predictedType = type;

	          if (!type && (!isTypedArray(data) || isNDArrayLike(data) && !isTypedArray(data.data))) {
	            predictedType = extensions.oes_element_index_uint ? GL_UNSIGNED_INT$2 : GL_UNSIGNED_SHORT$2;
	          }

	          bufferState._initBuffer(elements.buffer, data, usage, predictedType, 3);
	        } else {
	          gl.bufferData(GL_ELEMENT_ARRAY_BUFFER, byteLength, usage);
	          elements.buffer.dtype = dtype || GL_UNSIGNED_BYTE$4;
	          elements.buffer.usage = usage;
	          elements.buffer.dimension = 3;
	          elements.buffer.byteLength = byteLength;
	        }

	        var dtype = type;

	        if (!type) {
	          switch (elements.buffer.dtype) {
	            case GL_UNSIGNED_BYTE$4:
	            case GL_BYTE$2:
	              dtype = GL_UNSIGNED_BYTE$4;
	              break;

	            case GL_UNSIGNED_SHORT$2:
	            case GL_SHORT$2:
	              dtype = GL_UNSIGNED_SHORT$2;
	              break;

	            case GL_UNSIGNED_INT$2:
	            case GL_INT$2:
	              dtype = GL_UNSIGNED_INT$2;
	              break;

	            default:
	              check$1.raise('unsupported type for element array');
	          }

	          elements.buffer.dtype = dtype;
	        }

	        elements.type = dtype;
	        check$1(dtype !== GL_UNSIGNED_INT$2 || !!extensions.oes_element_index_uint, '32 bit element buffers not supported, enable oes_element_index_uint first');
	        var vertCount = count;

	        if (vertCount < 0) {
	          vertCount = elements.buffer.byteLength;

	          if (dtype === GL_UNSIGNED_SHORT$2) {
	            vertCount >>= 1;
	          } else if (dtype === GL_UNSIGNED_INT$2) {
	            vertCount >>= 2;
	          }
	        }

	        elements.vertCount = vertCount;
	        var primType = prim;

	        if (prim < 0) {
	          primType = GL_TRIANGLES;
	          var dimension = elements.buffer.dimension;
	          if (dimension === 1) primType = GL_POINTS;
	          if (dimension === 2) primType = GL_LINES;
	          if (dimension === 3) primType = GL_TRIANGLES;
	        }

	        elements.primType = primType;
	      }

	      function destroyElements(elements) {
	        stats.elementsCount--;
	        check$1(elements.buffer !== null, 'must not double destroy elements');
	        delete elementSet[elements.id];
	        elements.buffer.destroy();
	        elements.buffer = null;
	      }

	      function createElements(options, persistent) {
	        var buffer = bufferState.create(null, GL_ELEMENT_ARRAY_BUFFER, true);
	        var elements = new REGLElementBuffer(buffer._buffer);
	        stats.elementsCount++;

	        function reglElements(options) {
	          if (!options) {
	            buffer();
	            elements.primType = GL_TRIANGLES;
	            elements.vertCount = 0;
	            elements.type = GL_UNSIGNED_BYTE$4;
	          } else if (typeof options === 'number') {
	            buffer(options);
	            elements.primType = GL_TRIANGLES;
	            elements.vertCount = options | 0;
	            elements.type = GL_UNSIGNED_BYTE$4;
	          } else {
	            var data = null;
	            var usage = GL_STATIC_DRAW$1;
	            var primType = -1;
	            var vertCount = -1;
	            var byteLength = 0;
	            var dtype = 0;

	            if (Array.isArray(options) || isTypedArray(options) || isNDArrayLike(options)) {
	              data = options;
	            } else {
	              check$1.type(options, 'object', 'invalid arguments for elements');

	              if ('data' in options) {
	                data = options.data;
	                check$1(Array.isArray(data) || isTypedArray(data) || isNDArrayLike(data), 'invalid data for element buffer');
	              }

	              if ('usage' in options) {
	                check$1.parameter(options.usage, usageTypes, 'invalid element buffer usage');
	                usage = usageTypes[options.usage];
	              }

	              if ('primitive' in options) {
	                check$1.parameter(options.primitive, primTypes, 'invalid element buffer primitive');
	                primType = primTypes[options.primitive];
	              }

	              if ('count' in options) {
	                check$1(typeof options.count === 'number' && options.count >= 0, 'invalid vertex count for elements');
	                vertCount = options.count | 0;
	              }

	              if ('type' in options) {
	                check$1.parameter(options.type, elementTypes, 'invalid buffer type');
	                dtype = elementTypes[options.type];
	              }

	              if ('length' in options) {
	                byteLength = options.length | 0;
	              } else {
	                byteLength = vertCount;

	                if (dtype === GL_UNSIGNED_SHORT$2 || dtype === GL_SHORT$2) {
	                  byteLength *= 2;
	                } else if (dtype === GL_UNSIGNED_INT$2 || dtype === GL_INT$2) {
	                  byteLength *= 4;
	                }
	              }
	            }

	            initElements(elements, data, usage, primType, vertCount, byteLength, dtype);
	          }

	          return reglElements;
	        }

	        reglElements(options);
	        reglElements._reglType = 'elements';
	        reglElements._elements = elements;

	        reglElements.subdata = function (data, offset) {
	          buffer.subdata(data, offset);
	          return reglElements;
	        };

	        reglElements.destroy = function () {
	          destroyElements(elements);
	        };

	        return reglElements;
	      }

	      return {
	        create: createElements,
	        createStream: createElementStream,
	        destroyStream: destroyElementStream,
	        getElements: function getElements(elements) {
	          if (typeof elements === 'function' && elements._elements instanceof REGLElementBuffer) {
	            return elements._elements;
	          }

	          return null;
	        },
	        clear: function clear() {
	          values(elementSet).forEach(destroyElements);
	        }
	      };
	    }

	    var FLOAT = new Float32Array(1);
	    var INT = new Uint32Array(FLOAT.buffer);
	    var GL_UNSIGNED_SHORT$4 = 5123;

	    function convertToHalfFloat(array) {
	      var ushorts = pool.allocType(GL_UNSIGNED_SHORT$4, array.length);

	      for (var i = 0; i < array.length; ++i) {
	        if (isNaN(array[i])) {
	          ushorts[i] = 0xffff;
	        } else if (array[i] === Infinity) {
	          ushorts[i] = 0x7c00;
	        } else if (array[i] === -Infinity) {
	          ushorts[i] = 0xfc00;
	        } else {
	          FLOAT[0] = array[i];
	          var x = INT[0];
	          var sgn = x >>> 31 << 15;
	          var exp = (x << 1 >>> 24) - 127;
	          var frac = x >> 13 & (1 << 10) - 1;

	          if (exp < -24) {
	            ushorts[i] = sgn;
	          } else if (exp < -14) {
	            var s = -14 - exp;
	            ushorts[i] = sgn + (frac + (1 << 10) >> s);
	          } else if (exp > 15) {
	            ushorts[i] = sgn + 0x7c00;
	          } else {
	            ushorts[i] = sgn + (exp + 15 << 10) + frac;
	          }
	        }
	      }

	      return ushorts;
	    }

	    function isArrayLike(s) {
	      return Array.isArray(s) || isTypedArray(s);
	    }

	    var isPow2$1 = function isPow2$1(v) {
	      return !(v & v - 1) && !!v;
	    };

	    var GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
	    var GL_TEXTURE_2D$1 = 0x0DE1;
	    var GL_TEXTURE_CUBE_MAP$1 = 0x8513;
	    var GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 = 0x8515;
	    var GL_RGBA$1 = 0x1908;
	    var GL_ALPHA = 0x1906;
	    var GL_RGB = 0x1907;
	    var GL_LUMINANCE = 0x1909;
	    var GL_LUMINANCE_ALPHA = 0x190A;
	    var GL_RGBA4 = 0x8056;
	    var GL_RGB5_A1 = 0x8057;
	    var GL_RGB565 = 0x8D62;
	    var GL_UNSIGNED_SHORT_4_4_4_4$1 = 0x8033;
	    var GL_UNSIGNED_SHORT_5_5_5_1$1 = 0x8034;
	    var GL_UNSIGNED_SHORT_5_6_5$1 = 0x8363;
	    var GL_UNSIGNED_INT_24_8_WEBGL$1 = 0x84FA;
	    var GL_DEPTH_COMPONENT = 0x1902;
	    var GL_DEPTH_STENCIL = 0x84F9;
	    var GL_SRGB_EXT = 0x8C40;
	    var GL_SRGB_ALPHA_EXT = 0x8C42;
	    var GL_HALF_FLOAT_OES$1 = 0x8D61;
	    var GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
	    var GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
	    var GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
	    var GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
	    var GL_COMPRESSED_RGB_ATC_WEBGL = 0x8C92;
	    var GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL = 0x8C93;
	    var GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL = 0x87EE;
	    var GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
	    var GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
	    var GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
	    var GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
	    var GL_COMPRESSED_RGB_ETC1_WEBGL = 0x8D64;
	    var GL_UNSIGNED_BYTE$5 = 0x1401;
	    var GL_UNSIGNED_SHORT$3 = 0x1403;
	    var GL_UNSIGNED_INT$3 = 0x1405;
	    var GL_FLOAT$4 = 0x1406;
	    var GL_TEXTURE_WRAP_S = 0x2802;
	    var GL_TEXTURE_WRAP_T = 0x2803;
	    var GL_REPEAT = 0x2901;
	    var GL_CLAMP_TO_EDGE$1 = 0x812F;
	    var GL_MIRRORED_REPEAT = 0x8370;
	    var GL_TEXTURE_MAG_FILTER = 0x2800;
	    var GL_TEXTURE_MIN_FILTER = 0x2801;
	    var GL_NEAREST$1 = 0x2600;
	    var GL_LINEAR = 0x2601;
	    var GL_NEAREST_MIPMAP_NEAREST$1 = 0x2700;
	    var GL_LINEAR_MIPMAP_NEAREST$1 = 0x2701;
	    var GL_NEAREST_MIPMAP_LINEAR$1 = 0x2702;
	    var GL_LINEAR_MIPMAP_LINEAR$1 = 0x2703;
	    var GL_GENERATE_MIPMAP_HINT = 0x8192;
	    var GL_DONT_CARE = 0x1100;
	    var GL_FASTEST = 0x1101;
	    var GL_NICEST = 0x1102;
	    var GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
	    var GL_UNPACK_ALIGNMENT = 0x0CF5;
	    var GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
	    var GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
	    var GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
	    var GL_BROWSER_DEFAULT_WEBGL = 0x9244;
	    var GL_TEXTURE0$1 = 0x84C0;
	    var MIPMAP_FILTERS = [GL_NEAREST_MIPMAP_NEAREST$1, GL_NEAREST_MIPMAP_LINEAR$1, GL_LINEAR_MIPMAP_NEAREST$1, GL_LINEAR_MIPMAP_LINEAR$1];
	    var CHANNELS_FORMAT = [0, GL_LUMINANCE, GL_LUMINANCE_ALPHA, GL_RGB, GL_RGBA$1];
	    var FORMAT_CHANNELS = {};
	    FORMAT_CHANNELS[GL_LUMINANCE] = FORMAT_CHANNELS[GL_ALPHA] = FORMAT_CHANNELS[GL_DEPTH_COMPONENT] = 1;
	    FORMAT_CHANNELS[GL_DEPTH_STENCIL] = FORMAT_CHANNELS[GL_LUMINANCE_ALPHA] = 2;
	    FORMAT_CHANNELS[GL_RGB] = FORMAT_CHANNELS[GL_SRGB_EXT] = 3;
	    FORMAT_CHANNELS[GL_RGBA$1] = FORMAT_CHANNELS[GL_SRGB_ALPHA_EXT] = 4;

	    function objectName(str) {
	      return '[object ' + str + ']';
	    }

	    var CANVAS_CLASS = objectName('HTMLCanvasElement');
	    var CONTEXT2D_CLASS = objectName('CanvasRenderingContext2D');
	    var BITMAP_CLASS = objectName('ImageBitmap');
	    var IMAGE_CLASS = objectName('HTMLImageElement');
	    var VIDEO_CLASS = objectName('HTMLVideoElement');
	    var PIXEL_CLASSES = Object.keys(arrayTypes).concat([CANVAS_CLASS, CONTEXT2D_CLASS, BITMAP_CLASS, IMAGE_CLASS, VIDEO_CLASS]);
	    var TYPE_SIZES = [];
	    TYPE_SIZES[GL_UNSIGNED_BYTE$5] = 1;
	    TYPE_SIZES[GL_FLOAT$4] = 4;
	    TYPE_SIZES[GL_HALF_FLOAT_OES$1] = 2;
	    TYPE_SIZES[GL_UNSIGNED_SHORT$3] = 2;
	    TYPE_SIZES[GL_UNSIGNED_INT$3] = 4;
	    var FORMAT_SIZES_SPECIAL = [];
	    FORMAT_SIZES_SPECIAL[GL_RGBA4] = 2;
	    FORMAT_SIZES_SPECIAL[GL_RGB5_A1] = 2;
	    FORMAT_SIZES_SPECIAL[GL_RGB565] = 2;
	    FORMAT_SIZES_SPECIAL[GL_DEPTH_STENCIL] = 4;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_S3TC_DXT1_EXT] = 0.5;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT1_EXT] = 0.5;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT3_EXT] = 1;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_S3TC_DXT5_EXT] = 1;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ATC_WEBGL] = 0.5;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL] = 1;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL] = 1;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG] = 0.5;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG] = 0.25;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG] = 0.5;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG] = 0.25;
	    FORMAT_SIZES_SPECIAL[GL_COMPRESSED_RGB_ETC1_WEBGL] = 0.5;

	    function isNumericArray(arr) {
	      return Array.isArray(arr) && (arr.length === 0 || typeof arr[0] === 'number');
	    }

	    function isRectArray(arr) {
	      if (!Array.isArray(arr)) {
	        return false;
	      }

	      var width = arr.length;

	      if (width === 0 || !isArrayLike(arr[0])) {
	        return false;
	      }

	      return true;
	    }

	    function classString(x) {
	      return Object.prototype.toString.call(x);
	    }

	    function isCanvasElement(object) {
	      return classString(object) === CANVAS_CLASS;
	    }

	    function isContext2D(object) {
	      return classString(object) === CONTEXT2D_CLASS;
	    }

	    function isBitmap(object) {
	      return classString(object) === BITMAP_CLASS;
	    }

	    function isImageElement(object) {
	      return classString(object) === IMAGE_CLASS;
	    }

	    function isVideoElement(object) {
	      return classString(object) === VIDEO_CLASS;
	    }

	    function isPixelData(object) {
	      if (!object) {
	        return false;
	      }

	      var className = classString(object);

	      if (PIXEL_CLASSES.indexOf(className) >= 0) {
	        return true;
	      }

	      return isNumericArray(object) || isRectArray(object) || isNDArrayLike(object);
	    }

	    function typedArrayCode$1(data) {
	      return arrayTypes[Object.prototype.toString.call(data)] | 0;
	    }

	    function convertData(result, data) {
	      var n = data.length;

	      switch (result.type) {
	        case GL_UNSIGNED_BYTE$5:
	        case GL_UNSIGNED_SHORT$3:
	        case GL_UNSIGNED_INT$3:
	        case GL_FLOAT$4:
	          var converted = pool.allocType(result.type, n);
	          converted.set(data);
	          result.data = converted;
	          break;

	        case GL_HALF_FLOAT_OES$1:
	          result.data = convertToHalfFloat(data);
	          break;

	        default:
	          check$1.raise('unsupported texture type, must specify a typed array');
	      }
	    }

	    function preConvert(image, n) {
	      return pool.allocType(image.type === GL_HALF_FLOAT_OES$1 ? GL_FLOAT$4 : image.type, n);
	    }

	    function postConvert(image, data) {
	      if (image.type === GL_HALF_FLOAT_OES$1) {
	        image.data = convertToHalfFloat(data);
	        pool.freeType(data);
	      } else {
	        image.data = data;
	      }
	    }

	    function transposeData(image, array, strideX, strideY, strideC, offset) {
	      var w = image.width;
	      var h = image.height;
	      var c = image.channels;
	      var n = w * h * c;
	      var data = preConvert(image, n);
	      var p = 0;

	      for (var i = 0; i < h; ++i) {
	        for (var j = 0; j < w; ++j) {
	          for (var k = 0; k < c; ++k) {
	            data[p++] = array[strideX * j + strideY * i + strideC * k + offset];
	          }
	        }
	      }

	      postConvert(image, data);
	    }

	    function getTextureSize(format, type, width, height, isMipmap, isCube) {
	      var s;

	      if (typeof FORMAT_SIZES_SPECIAL[format] !== 'undefined') {
	        s = FORMAT_SIZES_SPECIAL[format];
	      } else {
	        s = FORMAT_CHANNELS[format] * TYPE_SIZES[type];
	      }

	      if (isCube) {
	        s *= 6;
	      }

	      if (isMipmap) {
	        var total = 0;
	        var w = width;

	        while (w >= 1) {
	          total += s * w * w;
	          w /= 2;
	        }

	        return total;
	      } else {
	        return s * width * height;
	      }
	    }

	    function createTextureSet(gl, extensions, limits, reglPoll, contextState, stats, config) {
	      var mipmapHint = {
	        "don't care": GL_DONT_CARE,
	        'dont care': GL_DONT_CARE,
	        'nice': GL_NICEST,
	        'fast': GL_FASTEST
	      };
	      var wrapModes = {
	        'repeat': GL_REPEAT,
	        'clamp': GL_CLAMP_TO_EDGE$1,
	        'mirror': GL_MIRRORED_REPEAT
	      };
	      var magFilters = {
	        'nearest': GL_NEAREST$1,
	        'linear': GL_LINEAR
	      };
	      var minFilters = extend({
	        'mipmap': GL_LINEAR_MIPMAP_LINEAR$1,
	        'nearest mipmap nearest': GL_NEAREST_MIPMAP_NEAREST$1,
	        'linear mipmap nearest': GL_LINEAR_MIPMAP_NEAREST$1,
	        'nearest mipmap linear': GL_NEAREST_MIPMAP_LINEAR$1,
	        'linear mipmap linear': GL_LINEAR_MIPMAP_LINEAR$1
	      }, magFilters);
	      var colorSpace = {
	        'none': 0,
	        'browser': GL_BROWSER_DEFAULT_WEBGL
	      };
	      var textureTypes = {
	        'uint8': GL_UNSIGNED_BYTE$5,
	        'rgba4': GL_UNSIGNED_SHORT_4_4_4_4$1,
	        'rgb565': GL_UNSIGNED_SHORT_5_6_5$1,
	        'rgb5 a1': GL_UNSIGNED_SHORT_5_5_5_1$1
	      };
	      var textureFormats = {
	        'alpha': GL_ALPHA,
	        'luminance': GL_LUMINANCE,
	        'luminance alpha': GL_LUMINANCE_ALPHA,
	        'rgb': GL_RGB,
	        'rgba': GL_RGBA$1,
	        'rgba4': GL_RGBA4,
	        'rgb5 a1': GL_RGB5_A1,
	        'rgb565': GL_RGB565
	      };
	      var compressedTextureFormats = {};

	      if (extensions.ext_srgb) {
	        textureFormats.srgb = GL_SRGB_EXT;
	        textureFormats.srgba = GL_SRGB_ALPHA_EXT;
	      }

	      if (extensions.oes_texture_float) {
	        textureTypes.float32 = textureTypes.float = GL_FLOAT$4;
	      }

	      if (extensions.oes_texture_half_float) {
	        textureTypes['float16'] = textureTypes['half float'] = GL_HALF_FLOAT_OES$1;
	      }

	      if (extensions.webgl_depth_texture) {
	        extend(textureFormats, {
	          'depth': GL_DEPTH_COMPONENT,
	          'depth stencil': GL_DEPTH_STENCIL
	        });
	        extend(textureTypes, {
	          'uint16': GL_UNSIGNED_SHORT$3,
	          'uint32': GL_UNSIGNED_INT$3,
	          'depth stencil': GL_UNSIGNED_INT_24_8_WEBGL$1
	        });
	      }

	      if (extensions.webgl_compressed_texture_s3tc) {
	        extend(compressedTextureFormats, {
	          'rgb s3tc dxt1': GL_COMPRESSED_RGB_S3TC_DXT1_EXT,
	          'rgba s3tc dxt1': GL_COMPRESSED_RGBA_S3TC_DXT1_EXT,
	          'rgba s3tc dxt3': GL_COMPRESSED_RGBA_S3TC_DXT3_EXT,
	          'rgba s3tc dxt5': GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
	        });
	      }

	      if (extensions.webgl_compressed_texture_atc) {
	        extend(compressedTextureFormats, {
	          'rgb atc': GL_COMPRESSED_RGB_ATC_WEBGL,
	          'rgba atc explicit alpha': GL_COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL,
	          'rgba atc interpolated alpha': GL_COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL
	        });
	      }

	      if (extensions.webgl_compressed_texture_pvrtc) {
	        extend(compressedTextureFormats, {
	          'rgb pvrtc 4bppv1': GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG,
	          'rgb pvrtc 2bppv1': GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG,
	          'rgba pvrtc 4bppv1': GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG,
	          'rgba pvrtc 2bppv1': GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
	        });
	      }

	      if (extensions.webgl_compressed_texture_etc1) {
	        compressedTextureFormats['rgb etc1'] = GL_COMPRESSED_RGB_ETC1_WEBGL;
	      }

	      var supportedCompressedFormats = Array.prototype.slice.call(gl.getParameter(GL_COMPRESSED_TEXTURE_FORMATS));
	      Object.keys(compressedTextureFormats).forEach(function (name) {
	        var format = compressedTextureFormats[name];

	        if (supportedCompressedFormats.indexOf(format) >= 0) {
	          textureFormats[name] = format;
	        }
	      });
	      var supportedFormats = Object.keys(textureFormats);
	      limits.textureFormats = supportedFormats;
	      var textureFormatsInvert = [];
	      Object.keys(textureFormats).forEach(function (key) {
	        var val = textureFormats[key];
	        textureFormatsInvert[val] = key;
	      });
	      var textureTypesInvert = [];
	      Object.keys(textureTypes).forEach(function (key) {
	        var val = textureTypes[key];
	        textureTypesInvert[val] = key;
	      });
	      var magFiltersInvert = [];
	      Object.keys(magFilters).forEach(function (key) {
	        var val = magFilters[key];
	        magFiltersInvert[val] = key;
	      });
	      var minFiltersInvert = [];
	      Object.keys(minFilters).forEach(function (key) {
	        var val = minFilters[key];
	        minFiltersInvert[val] = key;
	      });
	      var wrapModesInvert = [];
	      Object.keys(wrapModes).forEach(function (key) {
	        var val = wrapModes[key];
	        wrapModesInvert[val] = key;
	      });
	      var colorFormats = supportedFormats.reduce(function (color, key) {
	        var glenum = textureFormats[key];

	        if (glenum === GL_LUMINANCE || glenum === GL_ALPHA || glenum === GL_LUMINANCE || glenum === GL_LUMINANCE_ALPHA || glenum === GL_DEPTH_COMPONENT || glenum === GL_DEPTH_STENCIL) {
	          color[glenum] = glenum;
	        } else if (glenum === GL_RGB5_A1 || key.indexOf('rgba') >= 0) {
	          color[glenum] = GL_RGBA$1;
	        } else {
	          color[glenum] = GL_RGB;
	        }

	        return color;
	      }, {});

	      function TexFlags() {
	        this.internalformat = GL_RGBA$1;
	        this.format = GL_RGBA$1;
	        this.type = GL_UNSIGNED_BYTE$5;
	        this.compressed = false;
	        this.premultiplyAlpha = false;
	        this.flipY = false;
	        this.unpackAlignment = 1;
	        this.colorSpace = GL_BROWSER_DEFAULT_WEBGL;
	        this.width = 0;
	        this.height = 0;
	        this.channels = 0;
	      }

	      function copyFlags(result, other) {
	        result.internalformat = other.internalformat;
	        result.format = other.format;
	        result.type = other.type;
	        result.compressed = other.compressed;
	        result.premultiplyAlpha = other.premultiplyAlpha;
	        result.flipY = other.flipY;
	        result.unpackAlignment = other.unpackAlignment;
	        result.colorSpace = other.colorSpace;
	        result.width = other.width;
	        result.height = other.height;
	        result.channels = other.channels;
	      }

	      function parseFlags(flags, options) {
	        if (typeof options !== 'object' || !options) {
	          return;
	        }

	        if ('premultiplyAlpha' in options) {
	          check$1.type(options.premultiplyAlpha, 'boolean', 'invalid premultiplyAlpha');
	          flags.premultiplyAlpha = options.premultiplyAlpha;
	        }

	        if ('flipY' in options) {
	          check$1.type(options.flipY, 'boolean', 'invalid texture flip');
	          flags.flipY = options.flipY;
	        }

	        if ('alignment' in options) {
	          check$1.oneOf(options.alignment, [1, 2, 4, 8], 'invalid texture unpack alignment');
	          flags.unpackAlignment = options.alignment;
	        }

	        if ('colorSpace' in options) {
	          check$1.parameter(options.colorSpace, colorSpace, 'invalid colorSpace');
	          flags.colorSpace = colorSpace[options.colorSpace];
	        }

	        if ('type' in options) {
	          var type = options.type;
	          check$1(extensions.oes_texture_float || !(type === 'float' || type === 'float32'), 'you must enable the OES_texture_float extension in order to use floating point textures.');
	          check$1(extensions.oes_texture_half_float || !(type === 'half float' || type === 'float16'), 'you must enable the OES_texture_half_float extension in order to use 16-bit floating point textures.');
	          check$1(extensions.webgl_depth_texture || !(type === 'uint16' || type === 'uint32' || type === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
	          check$1.parameter(type, textureTypes, 'invalid texture type');
	          flags.type = textureTypes[type];
	        }

	        var w = flags.width;
	        var h = flags.height;
	        var c = flags.channels;
	        var hasChannels = false;

	        if ('shape' in options) {
	          check$1(Array.isArray(options.shape) && options.shape.length >= 2, 'shape must be an array');
	          w = options.shape[0];
	          h = options.shape[1];

	          if (options.shape.length === 3) {
	            c = options.shape[2];
	            check$1(c > 0 && c <= 4, 'invalid number of channels');
	            hasChannels = true;
	          }

	          check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
	          check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
	        } else {
	          if ('radius' in options) {
	            w = h = options.radius;
	            check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid radius');
	          }

	          if ('width' in options) {
	            w = options.width;
	            check$1(w >= 0 && w <= limits.maxTextureSize, 'invalid width');
	          }

	          if ('height' in options) {
	            h = options.height;
	            check$1(h >= 0 && h <= limits.maxTextureSize, 'invalid height');
	          }

	          if ('channels' in options) {
	            c = options.channels;
	            check$1(c > 0 && c <= 4, 'invalid number of channels');
	            hasChannels = true;
	          }
	        }

	        flags.width = w | 0;
	        flags.height = h | 0;
	        flags.channels = c | 0;
	        var hasFormat = false;

	        if ('format' in options) {
	          var formatStr = options.format;
	          check$1(extensions.webgl_depth_texture || !(formatStr === 'depth' || formatStr === 'depth stencil'), 'you must enable the WEBGL_depth_texture extension in order to use depth/stencil textures.');
	          check$1.parameter(formatStr, textureFormats, 'invalid texture format');
	          var internalformat = flags.internalformat = textureFormats[formatStr];
	          flags.format = colorFormats[internalformat];

	          if (formatStr in textureTypes) {
	            if (!('type' in options)) {
	              flags.type = textureTypes[formatStr];
	            }
	          }

	          if (formatStr in compressedTextureFormats) {
	            flags.compressed = true;
	          }

	          hasFormat = true;
	        }

	        if (!hasChannels && hasFormat) {
	          flags.channels = FORMAT_CHANNELS[flags.format];
	        } else if (hasChannels && !hasFormat) {
	          if (flags.channels !== CHANNELS_FORMAT[flags.format]) {
	            flags.format = flags.internalformat = CHANNELS_FORMAT[flags.channels];
	          }
	        } else if (hasFormat && hasChannels) {
	          check$1(flags.channels === FORMAT_CHANNELS[flags.format], 'number of channels inconsistent with specified format');
	        }
	      }

	      function setFlags(flags) {
	        gl.pixelStorei(GL_UNPACK_FLIP_Y_WEBGL, flags.flipY);
	        gl.pixelStorei(GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL, flags.premultiplyAlpha);
	        gl.pixelStorei(GL_UNPACK_COLORSPACE_CONVERSION_WEBGL, flags.colorSpace);
	        gl.pixelStorei(GL_UNPACK_ALIGNMENT, flags.unpackAlignment);
	      }

	      function TexImage() {
	        TexFlags.call(this);
	        this.xOffset = 0;
	        this.yOffset = 0;
	        this.data = null;
	        this.needsFree = false;
	        this.element = null;
	        this.needsCopy = false;
	      }

	      function parseImage(image, options) {
	        var data = null;

	        if (isPixelData(options)) {
	          data = options;
	        } else if (options) {
	          check$1.type(options, 'object', 'invalid pixel data type');
	          parseFlags(image, options);

	          if ('x' in options) {
	            image.xOffset = options.x | 0;
	          }

	          if ('y' in options) {
	            image.yOffset = options.y | 0;
	          }

	          if (isPixelData(options.data)) {
	            data = options.data;
	          }
	        }

	        check$1(!image.compressed || data instanceof Uint8Array, 'compressed texture data must be stored in a uint8array');

	        if (options.copy) {
	          check$1(!data, 'can not specify copy and data field for the same texture');
	          var viewW = contextState.viewportWidth;
	          var viewH = contextState.viewportHeight;
	          image.width = image.width || viewW - image.xOffset;
	          image.height = image.height || viewH - image.yOffset;
	          image.needsCopy = true;
	          check$1(image.xOffset >= 0 && image.xOffset < viewW && image.yOffset >= 0 && image.yOffset < viewH && image.width > 0 && image.width <= viewW && image.height > 0 && image.height <= viewH, 'copy texture read out of bounds');
	        } else if (!data) {
	          image.width = image.width || 1;
	          image.height = image.height || 1;
	          image.channels = image.channels || 4;
	        } else if (isTypedArray(data)) {
	          image.channels = image.channels || 4;
	          image.data = data;

	          if (!('type' in options) && image.type === GL_UNSIGNED_BYTE$5) {
	            image.type = typedArrayCode$1(data);
	          }
	        } else if (isNumericArray(data)) {
	          image.channels = image.channels || 4;
	          convertData(image, data);
	          image.alignment = 1;
	          image.needsFree = true;
	        } else if (isNDArrayLike(data)) {
	          var array = data.data;

	          if (!Array.isArray(array) && image.type === GL_UNSIGNED_BYTE$5) {
	            image.type = typedArrayCode$1(array);
	          }

	          var shape = data.shape;
	          var stride = data.stride;
	          var shapeX, shapeY, shapeC, strideX, strideY, strideC;

	          if (shape.length === 3) {
	            shapeC = shape[2];
	            strideC = stride[2];
	          } else {
	            check$1(shape.length === 2, 'invalid ndarray pixel data, must be 2 or 3D');
	            shapeC = 1;
	            strideC = 1;
	          }

	          shapeX = shape[0];
	          shapeY = shape[1];
	          strideX = stride[0];
	          strideY = stride[1];
	          image.alignment = 1;
	          image.width = shapeX;
	          image.height = shapeY;
	          image.channels = shapeC;
	          image.format = image.internalformat = CHANNELS_FORMAT[shapeC];
	          image.needsFree = true;
	          transposeData(image, array, strideX, strideY, strideC, data.offset);
	        } else if (isCanvasElement(data) || isContext2D(data)) {
	          if (isCanvasElement(data)) {
	            image.element = data;
	          } else {
	            image.element = data.canvas;
	          }

	          image.width = image.element.width;
	          image.height = image.element.height;
	          image.channels = 4;
	        } else if (isBitmap(data)) {
	          image.element = data;
	          image.width = data.width;
	          image.height = data.height;
	          image.channels = 4;
	        } else if (isImageElement(data)) {
	          image.element = data;
	          image.width = data.naturalWidth;
	          image.height = data.naturalHeight;
	          image.channels = 4;
	        } else if (isVideoElement(data)) {
	          image.element = data;
	          image.width = data.videoWidth;
	          image.height = data.videoHeight;
	          image.channels = 4;
	        } else if (isRectArray(data)) {
	          var w = image.width || data[0].length;
	          var h = image.height || data.length;
	          var c = image.channels;

	          if (isArrayLike(data[0][0])) {
	            c = c || data[0][0].length;
	          } else {
	            c = c || 1;
	          }

	          var arrayShape = flattenUtils.shape(data);
	          var n = 1;

	          for (var dd = 0; dd < arrayShape.length; ++dd) {
	            n *= arrayShape[dd];
	          }

	          var allocData = preConvert(image, n);
	          flattenUtils.flatten(data, arrayShape, '', allocData);
	          postConvert(image, allocData);
	          image.alignment = 1;
	          image.width = w;
	          image.height = h;
	          image.channels = c;
	          image.format = image.internalformat = CHANNELS_FORMAT[c];
	          image.needsFree = true;
	        }

	        if (image.type === GL_FLOAT$4) {
	          check$1(limits.extensions.indexOf('oes_texture_float') >= 0, 'oes_texture_float extension not enabled');
	        } else if (image.type === GL_HALF_FLOAT_OES$1) {
	          check$1(limits.extensions.indexOf('oes_texture_half_float') >= 0, 'oes_texture_half_float extension not enabled');
	        }
	      }

	      function setImage(info, target, miplevel) {
	        var element = info.element;
	        var data = info.data;
	        var internalformat = info.internalformat;
	        var format = info.format;
	        var type = info.type;
	        var width = info.width;
	        var height = info.height;
	        var channels = info.channels;
	        setFlags(info);

	        if (element) {
	          gl.texImage2D(target, miplevel, format, format, type, element);
	        } else if (info.compressed) {
	          gl.compressedTexImage2D(target, miplevel, internalformat, width, height, 0, data);
	        } else if (info.needsCopy) {
	          reglPoll();
	          gl.copyTexImage2D(target, miplevel, format, info.xOffset, info.yOffset, width, height, 0);
	        } else {
	          var nullData = !data;

	          if (nullData) {
	            data = pool.zero.allocType(type, width * height * channels);
	          }

	          gl.texImage2D(target, miplevel, format, width, height, 0, format, type, data);

	          if (nullData && data) {
	            pool.zero.freeType(data);
	          }
	        }
	      }

	      function setSubImage(info, target, x, y, miplevel) {
	        var element = info.element;
	        var data = info.data;
	        var internalformat = info.internalformat;
	        var format = info.format;
	        var type = info.type;
	        var width = info.width;
	        var height = info.height;
	        setFlags(info);

	        if (element) {
	          gl.texSubImage2D(target, miplevel, x, y, format, type, element);
	        } else if (info.compressed) {
	          gl.compressedTexSubImage2D(target, miplevel, x, y, internalformat, width, height, data);
	        } else if (info.needsCopy) {
	          reglPoll();
	          gl.copyTexSubImage2D(target, miplevel, x, y, info.xOffset, info.yOffset, width, height);
	        } else {
	          gl.texSubImage2D(target, miplevel, x, y, width, height, format, type, data);
	        }
	      }

	      var imagePool = [];

	      function allocImage() {
	        return imagePool.pop() || new TexImage();
	      }

	      function freeImage(image) {
	        if (image.needsFree) {
	          pool.freeType(image.data);
	        }

	        TexImage.call(image);
	        imagePool.push(image);
	      }

	      function MipMap() {
	        TexFlags.call(this);
	        this.genMipmaps = false;
	        this.mipmapHint = GL_DONT_CARE;
	        this.mipmask = 0;
	        this.images = Array(16);
	      }

	      function parseMipMapFromShape(mipmap, width, height) {
	        var img = mipmap.images[0] = allocImage();
	        mipmap.mipmask = 1;
	        img.width = mipmap.width = width;
	        img.height = mipmap.height = height;
	        img.channels = mipmap.channels = 4;
	      }

	      function parseMipMapFromObject(mipmap, options) {
	        var imgData = null;

	        if (isPixelData(options)) {
	          imgData = mipmap.images[0] = allocImage();
	          copyFlags(imgData, mipmap);
	          parseImage(imgData, options);
	          mipmap.mipmask = 1;
	        } else {
	          parseFlags(mipmap, options);

	          if (Array.isArray(options.mipmap)) {
	            var mipData = options.mipmap;

	            for (var i = 0; i < mipData.length; ++i) {
	              imgData = mipmap.images[i] = allocImage();
	              copyFlags(imgData, mipmap);
	              imgData.width >>= i;
	              imgData.height >>= i;
	              parseImage(imgData, mipData[i]);
	              mipmap.mipmask |= 1 << i;
	            }
	          } else {
	            imgData = mipmap.images[0] = allocImage();
	            copyFlags(imgData, mipmap);
	            parseImage(imgData, options);
	            mipmap.mipmask = 1;
	          }
	        }

	        copyFlags(mipmap, mipmap.images[0]);

	        if (mipmap.compressed && mipmap.internalformat === GL_COMPRESSED_RGB_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT1_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT3_EXT || mipmap.internalformat === GL_COMPRESSED_RGBA_S3TC_DXT5_EXT) {
	          check$1(mipmap.width % 4 === 0 && mipmap.height % 4 === 0, 'for compressed texture formats, mipmap level 0 must have width and height that are a multiple of 4');
	        }
	      }

	      function setMipMap(mipmap, target) {
	        var images = mipmap.images;

	        for (var i = 0; i < images.length; ++i) {
	          if (!images[i]) {
	            return;
	          }

	          setImage(images[i], target, i);
	        }
	      }

	      var mipPool = [];

	      function allocMipMap() {
	        var result = mipPool.pop() || new MipMap();
	        TexFlags.call(result);
	        result.mipmask = 0;

	        for (var i = 0; i < 16; ++i) {
	          result.images[i] = null;
	        }

	        return result;
	      }

	      function freeMipMap(mipmap) {
	        var images = mipmap.images;

	        for (var i = 0; i < images.length; ++i) {
	          if (images[i]) {
	            freeImage(images[i]);
	          }

	          images[i] = null;
	        }

	        mipPool.push(mipmap);
	      }

	      function TexInfo() {
	        this.minFilter = GL_NEAREST$1;
	        this.magFilter = GL_NEAREST$1;
	        this.wrapS = GL_CLAMP_TO_EDGE$1;
	        this.wrapT = GL_CLAMP_TO_EDGE$1;
	        this.anisotropic = 1;
	        this.genMipmaps = false;
	        this.mipmapHint = GL_DONT_CARE;
	      }

	      function parseTexInfo(info, options) {
	        if ('min' in options) {
	          var minFilter = options.min;
	          check$1.parameter(minFilter, minFilters);
	          info.minFilter = minFilters[minFilter];

	          if (MIPMAP_FILTERS.indexOf(info.minFilter) >= 0 && !('faces' in options)) {
	            info.genMipmaps = true;
	          }
	        }

	        if ('mag' in options) {
	          var magFilter = options.mag;
	          check$1.parameter(magFilter, magFilters);
	          info.magFilter = magFilters[magFilter];
	        }

	        var wrapS = info.wrapS;
	        var wrapT = info.wrapT;

	        if ('wrap' in options) {
	          var wrap = options.wrap;

	          if (typeof wrap === 'string') {
	            check$1.parameter(wrap, wrapModes);
	            wrapS = wrapT = wrapModes[wrap];
	          } else if (Array.isArray(wrap)) {
	            check$1.parameter(wrap[0], wrapModes);
	            check$1.parameter(wrap[1], wrapModes);
	            wrapS = wrapModes[wrap[0]];
	            wrapT = wrapModes[wrap[1]];
	          }
	        } else {
	          if ('wrapS' in options) {
	            var optWrapS = options.wrapS;
	            check$1.parameter(optWrapS, wrapModes);
	            wrapS = wrapModes[optWrapS];
	          }

	          if ('wrapT' in options) {
	            var optWrapT = options.wrapT;
	            check$1.parameter(optWrapT, wrapModes);
	            wrapT = wrapModes[optWrapT];
	          }
	        }

	        info.wrapS = wrapS;
	        info.wrapT = wrapT;

	        if ('anisotropic' in options) {
	          var anisotropic = options.anisotropic;
	          check$1(typeof anisotropic === 'number' && anisotropic >= 1 && anisotropic <= limits.maxAnisotropic, 'aniso samples must be between 1 and ');
	          info.anisotropic = options.anisotropic;
	        }

	        if ('mipmap' in options) {
	          var hasMipMap = false;

	          switch (typeof options.mipmap) {
	            case 'string':
	              check$1.parameter(options.mipmap, mipmapHint, 'invalid mipmap hint');
	              info.mipmapHint = mipmapHint[options.mipmap];
	              info.genMipmaps = true;
	              hasMipMap = true;
	              break;

	            case 'boolean':
	              hasMipMap = info.genMipmaps = options.mipmap;
	              break;

	            case 'object':
	              check$1(Array.isArray(options.mipmap), 'invalid mipmap type');
	              info.genMipmaps = false;
	              hasMipMap = true;
	              break;

	            default:
	              check$1.raise('invalid mipmap type');
	          }

	          if (hasMipMap && !('min' in options)) {
	            info.minFilter = GL_NEAREST_MIPMAP_NEAREST$1;
	          }
	        }
	      }

	      function setTexInfo(info, target) {
	        gl.texParameteri(target, GL_TEXTURE_MIN_FILTER, info.minFilter);
	        gl.texParameteri(target, GL_TEXTURE_MAG_FILTER, info.magFilter);
	        gl.texParameteri(target, GL_TEXTURE_WRAP_S, info.wrapS);
	        gl.texParameteri(target, GL_TEXTURE_WRAP_T, info.wrapT);

	        if (extensions.ext_texture_filter_anisotropic) {
	          gl.texParameteri(target, GL_TEXTURE_MAX_ANISOTROPY_EXT, info.anisotropic);
	        }

	        if (info.genMipmaps) {
	          gl.hint(GL_GENERATE_MIPMAP_HINT, info.mipmapHint);
	          gl.generateMipmap(target);
	        }
	      }

	      var textureCount = 0;
	      var textureSet = {};
	      var numTexUnits = limits.maxTextureUnits;
	      var textureUnits = Array(numTexUnits).map(function () {
	        return null;
	      });

	      function REGLTexture(target) {
	        TexFlags.call(this);
	        this.mipmask = 0;
	        this.internalformat = GL_RGBA$1;
	        this.id = textureCount++;
	        this.refCount = 1;
	        this.target = target;
	        this.texture = gl.createTexture();
	        this.unit = -1;
	        this.bindCount = 0;
	        this.texInfo = new TexInfo();

	        if (config.profile) {
	          this.stats = {
	            size: 0
	          };
	        }
	      }

	      function tempBind(texture) {
	        gl.activeTexture(GL_TEXTURE0$1);
	        gl.bindTexture(texture.target, texture.texture);
	      }

	      function tempRestore() {
	        var prev = textureUnits[0];

	        if (prev) {
	          gl.bindTexture(prev.target, prev.texture);
	        } else {
	          gl.bindTexture(GL_TEXTURE_2D$1, null);
	        }
	      }

	      function destroy(texture) {
	        var handle = texture.texture;
	        check$1(handle, 'must not double destroy texture');
	        var unit = texture.unit;
	        var target = texture.target;

	        if (unit >= 0) {
	          gl.activeTexture(GL_TEXTURE0$1 + unit);
	          gl.bindTexture(target, null);
	          textureUnits[unit] = null;
	        }

	        gl.deleteTexture(handle);
	        texture.texture = null;
	        texture.params = null;
	        texture.pixels = null;
	        texture.refCount = 0;
	        delete textureSet[texture.id];
	        stats.textureCount--;
	      }

	      extend(REGLTexture.prototype, {
	        bind: function bind() {
	          var texture = this;
	          texture.bindCount += 1;
	          var unit = texture.unit;

	          if (unit < 0) {
	            for (var i = 0; i < numTexUnits; ++i) {
	              var other = textureUnits[i];

	              if (other) {
	                if (other.bindCount > 0) {
	                  continue;
	                }

	                other.unit = -1;
	              }

	              textureUnits[i] = texture;
	              unit = i;
	              break;
	            }

	            if (unit >= numTexUnits) {
	              check$1.raise('insufficient number of texture units');
	            }

	            if (config.profile && stats.maxTextureUnits < unit + 1) {
	              stats.maxTextureUnits = unit + 1;
	            }

	            texture.unit = unit;
	            gl.activeTexture(GL_TEXTURE0$1 + unit);
	            gl.bindTexture(texture.target, texture.texture);
	          }

	          return unit;
	        },
	        unbind: function unbind() {
	          this.bindCount -= 1;
	        },
	        decRef: function decRef() {
	          if (--this.refCount <= 0) {
	            destroy(this);
	          }
	        }
	      });

	      function createTexture2D(a, b) {
	        var texture = new REGLTexture(GL_TEXTURE_2D$1);
	        textureSet[texture.id] = texture;
	        stats.textureCount++;

	        function reglTexture2D(a, b) {
	          var texInfo = texture.texInfo;
	          TexInfo.call(texInfo);
	          var mipData = allocMipMap();

	          if (typeof a === 'number') {
	            if (typeof b === 'number') {
	              parseMipMapFromShape(mipData, a | 0, b | 0);
	            } else {
	              parseMipMapFromShape(mipData, a | 0, a | 0);
	            }
	          } else if (a) {
	            check$1.type(a, 'object', 'invalid arguments to regl.texture');
	            parseTexInfo(texInfo, a);
	            parseMipMapFromObject(mipData, a);
	          } else {
	            parseMipMapFromShape(mipData, 1, 1);
	          }

	          if (texInfo.genMipmaps) {
	            mipData.mipmask = (mipData.width << 1) - 1;
	          }

	          texture.mipmask = mipData.mipmask;
	          copyFlags(texture, mipData);
	          check$1.texture2D(texInfo, mipData, limits);
	          texture.internalformat = mipData.internalformat;
	          reglTexture2D.width = mipData.width;
	          reglTexture2D.height = mipData.height;
	          tempBind(texture);
	          setMipMap(mipData, GL_TEXTURE_2D$1);
	          setTexInfo(texInfo, GL_TEXTURE_2D$1);
	          tempRestore();
	          freeMipMap(mipData);

	          if (config.profile) {
	            texture.stats.size = getTextureSize(texture.internalformat, texture.type, mipData.width, mipData.height, texInfo.genMipmaps, false);
	          }

	          reglTexture2D.format = textureFormatsInvert[texture.internalformat];
	          reglTexture2D.type = textureTypesInvert[texture.type];
	          reglTexture2D.mag = magFiltersInvert[texInfo.magFilter];
	          reglTexture2D.min = minFiltersInvert[texInfo.minFilter];
	          reglTexture2D.wrapS = wrapModesInvert[texInfo.wrapS];
	          reglTexture2D.wrapT = wrapModesInvert[texInfo.wrapT];
	          return reglTexture2D;
	        }

	        function subimage(image, x_, y_, level_) {
	          check$1(!!image, 'must specify image data');
	          var x = x_ | 0;
	          var y = y_ | 0;
	          var level = level_ | 0;
	          var imageData = allocImage();
	          copyFlags(imageData, texture);
	          imageData.width = 0;
	          imageData.height = 0;
	          parseImage(imageData, image);
	          imageData.width = imageData.width || (texture.width >> level) - x;
	          imageData.height = imageData.height || (texture.height >> level) - y;
	          check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');
	          check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');
	          check$1(texture.mipmask & 1 << level, 'missing mipmap data');
	          check$1(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');
	          tempBind(texture);
	          setSubImage(imageData, GL_TEXTURE_2D$1, x, y, level);
	          tempRestore();
	          freeImage(imageData);
	          return reglTexture2D;
	        }

	        function resize(w_, h_) {
	          var w = w_ | 0;
	          var h = h_ | 0 || w;

	          if (w === texture.width && h === texture.height) {
	            return reglTexture2D;
	          }

	          reglTexture2D.width = texture.width = w;
	          reglTexture2D.height = texture.height = h;
	          tempBind(texture);
	          var data;
	          var channels = texture.channels;
	          var type = texture.type;

	          for (var i = 0; texture.mipmask >> i; ++i) {
	            var _w = w >> i;

	            var _h = h >> i;

	            if (!_w || !_h) break;
	            data = pool.zero.allocType(type, _w * _h * channels);
	            gl.texImage2D(GL_TEXTURE_2D$1, i, texture.format, _w, _h, 0, texture.format, texture.type, data);
	            if (data) pool.zero.freeType(data);
	          }

	          tempRestore();

	          if (config.profile) {
	            texture.stats.size = getTextureSize(texture.internalformat, texture.type, w, h, false, false);
	          }

	          return reglTexture2D;
	        }

	        reglTexture2D(a, b);
	        reglTexture2D.subimage = subimage;
	        reglTexture2D.resize = resize;
	        reglTexture2D._reglType = 'texture2d';
	        reglTexture2D._texture = texture;

	        if (config.profile) {
	          reglTexture2D.stats = texture.stats;
	        }

	        reglTexture2D.destroy = function () {
	          texture.decRef();
	        };

	        return reglTexture2D;
	      }

	      function createTextureCube(a0, a1, a2, a3, a4, a5) {
	        var texture = new REGLTexture(GL_TEXTURE_CUBE_MAP$1);
	        textureSet[texture.id] = texture;
	        stats.cubeCount++;
	        var faces = new Array(6);

	        function reglTextureCube(a0, a1, a2, a3, a4, a5) {
	          var i;
	          var texInfo = texture.texInfo;
	          TexInfo.call(texInfo);

	          for (i = 0; i < 6; ++i) {
	            faces[i] = allocMipMap();
	          }

	          if (typeof a0 === 'number' || !a0) {
	            var s = a0 | 0 || 1;

	            for (i = 0; i < 6; ++i) {
	              parseMipMapFromShape(faces[i], s, s);
	            }
	          } else if (typeof a0 === 'object') {
	            if (a1) {
	              parseMipMapFromObject(faces[0], a0);
	              parseMipMapFromObject(faces[1], a1);
	              parseMipMapFromObject(faces[2], a2);
	              parseMipMapFromObject(faces[3], a3);
	              parseMipMapFromObject(faces[4], a4);
	              parseMipMapFromObject(faces[5], a5);
	            } else {
	              parseTexInfo(texInfo, a0);
	              parseFlags(texture, a0);

	              if ('faces' in a0) {
	                var face_input = a0.faces;
	                check$1(Array.isArray(face_input) && face_input.length === 6, 'cube faces must be a length 6 array');

	                for (i = 0; i < 6; ++i) {
	                  check$1(typeof face_input[i] === 'object' && !!face_input[i], 'invalid input for cube map face');
	                  copyFlags(faces[i], texture);
	                  parseMipMapFromObject(faces[i], face_input[i]);
	                }
	              } else {
	                for (i = 0; i < 6; ++i) {
	                  parseMipMapFromObject(faces[i], a0);
	                }
	              }
	            }
	          } else {
	            check$1.raise('invalid arguments to cube map');
	          }

	          copyFlags(texture, faces[0]);

	          if (!limits.npotTextureCube) {
	            check$1(isPow2$1(texture.width) && isPow2$1(texture.height), 'your browser does not support non power or two texture dimensions');
	          }

	          if (texInfo.genMipmaps) {
	            texture.mipmask = (faces[0].width << 1) - 1;
	          } else {
	            texture.mipmask = faces[0].mipmask;
	          }

	          check$1.textureCube(texture, texInfo, faces, limits);
	          texture.internalformat = faces[0].internalformat;
	          reglTextureCube.width = faces[0].width;
	          reglTextureCube.height = faces[0].height;
	          tempBind(texture);

	          for (i = 0; i < 6; ++i) {
	            setMipMap(faces[i], GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i);
	          }

	          setTexInfo(texInfo, GL_TEXTURE_CUBE_MAP$1);
	          tempRestore();

	          if (config.profile) {
	            texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, texInfo.genMipmaps, true);
	          }

	          reglTextureCube.format = textureFormatsInvert[texture.internalformat];
	          reglTextureCube.type = textureTypesInvert[texture.type];
	          reglTextureCube.mag = magFiltersInvert[texInfo.magFilter];
	          reglTextureCube.min = minFiltersInvert[texInfo.minFilter];
	          reglTextureCube.wrapS = wrapModesInvert[texInfo.wrapS];
	          reglTextureCube.wrapT = wrapModesInvert[texInfo.wrapT];

	          for (i = 0; i < 6; ++i) {
	            freeMipMap(faces[i]);
	          }

	          return reglTextureCube;
	        }

	        function subimage(face, image, x_, y_, level_) {
	          check$1(!!image, 'must specify image data');
	          check$1(typeof face === 'number' && face === (face | 0) && face >= 0 && face < 6, 'invalid face');
	          var x = x_ | 0;
	          var y = y_ | 0;
	          var level = level_ | 0;
	          var imageData = allocImage();
	          copyFlags(imageData, texture);
	          imageData.width = 0;
	          imageData.height = 0;
	          parseImage(imageData, image);
	          imageData.width = imageData.width || (texture.width >> level) - x;
	          imageData.height = imageData.height || (texture.height >> level) - y;
	          check$1(texture.type === imageData.type && texture.format === imageData.format && texture.internalformat === imageData.internalformat, 'incompatible format for texture.subimage');
	          check$1(x >= 0 && y >= 0 && x + imageData.width <= texture.width && y + imageData.height <= texture.height, 'texture.subimage write out of bounds');
	          check$1(texture.mipmask & 1 << level, 'missing mipmap data');
	          check$1(imageData.data || imageData.element || imageData.needsCopy, 'missing image data');
	          tempBind(texture);
	          setSubImage(imageData, GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + face, x, y, level);
	          tempRestore();
	          freeImage(imageData);
	          return reglTextureCube;
	        }

	        function resize(radius_) {
	          var radius = radius_ | 0;

	          if (radius === texture.width) {
	            return;
	          }

	          reglTextureCube.width = texture.width = radius;
	          reglTextureCube.height = texture.height = radius;
	          tempBind(texture);

	          for (var i = 0; i < 6; ++i) {
	            for (var j = 0; texture.mipmask >> j; ++j) {
	              gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + i, j, texture.format, radius >> j, radius >> j, 0, texture.format, texture.type, null);
	            }
	          }

	          tempRestore();

	          if (config.profile) {
	            texture.stats.size = getTextureSize(texture.internalformat, texture.type, reglTextureCube.width, reglTextureCube.height, false, true);
	          }

	          return reglTextureCube;
	        }

	        reglTextureCube(a0, a1, a2, a3, a4, a5);
	        reglTextureCube.subimage = subimage;
	        reglTextureCube.resize = resize;
	        reglTextureCube._reglType = 'textureCube';
	        reglTextureCube._texture = texture;

	        if (config.profile) {
	          reglTextureCube.stats = texture.stats;
	        }

	        reglTextureCube.destroy = function () {
	          texture.decRef();
	        };

	        return reglTextureCube;
	      }

	      function destroyTextures() {
	        for (var i = 0; i < numTexUnits; ++i) {
	          gl.activeTexture(GL_TEXTURE0$1 + i);
	          gl.bindTexture(GL_TEXTURE_2D$1, null);
	          textureUnits[i] = null;
	        }

	        values(textureSet).forEach(destroy);
	        stats.cubeCount = 0;
	        stats.textureCount = 0;
	      }

	      if (config.profile) {
	        stats.getTotalTextureSize = function () {
	          var total = 0;
	          Object.keys(textureSet).forEach(function (key) {
	            total += textureSet[key].stats.size;
	          });
	          return total;
	        };
	      }

	      function restoreTextures() {
	        for (var i = 0; i < numTexUnits; ++i) {
	          var tex = textureUnits[i];

	          if (tex) {
	            tex.bindCount = 0;
	            tex.unit = -1;
	            textureUnits[i] = null;
	          }
	        }

	        values(textureSet).forEach(function (texture) {
	          texture.texture = gl.createTexture();
	          gl.bindTexture(texture.target, texture.texture);

	          for (var i = 0; i < 32; ++i) {
	            if ((texture.mipmask & 1 << i) === 0) {
	              continue;
	            }

	            if (texture.target === GL_TEXTURE_2D$1) {
	              gl.texImage2D(GL_TEXTURE_2D$1, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);
	            } else {
	              for (var j = 0; j < 6; ++j) {
	                gl.texImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X$1 + j, i, texture.internalformat, texture.width >> i, texture.height >> i, 0, texture.internalformat, texture.type, null);
	              }
	            }
	          }

	          setTexInfo(texture.texInfo, texture.target);
	        });
	      }

	      return {
	        create2D: createTexture2D,
	        createCube: createTextureCube,
	        clear: destroyTextures,
	        getTexture: function getTexture(wrapper) {
	          return null;
	        },
	        restore: restoreTextures
	      };
	    }

	    var GL_RENDERBUFFER = 0x8D41;
	    var GL_RGBA4$1 = 0x8056;
	    var GL_RGB5_A1$1 = 0x8057;
	    var GL_RGB565$1 = 0x8D62;
	    var GL_DEPTH_COMPONENT16 = 0x81A5;
	    var GL_STENCIL_INDEX8 = 0x8D48;
	    var GL_DEPTH_STENCIL$1 = 0x84F9;
	    var GL_SRGB8_ALPHA8_EXT = 0x8C43;
	    var GL_RGBA32F_EXT = 0x8814;
	    var GL_RGBA16F_EXT = 0x881A;
	    var GL_RGB16F_EXT = 0x881B;
	    var FORMAT_SIZES = [];
	    FORMAT_SIZES[GL_RGBA4$1] = 2;
	    FORMAT_SIZES[GL_RGB5_A1$1] = 2;
	    FORMAT_SIZES[GL_RGB565$1] = 2;
	    FORMAT_SIZES[GL_DEPTH_COMPONENT16] = 2;
	    FORMAT_SIZES[GL_STENCIL_INDEX8] = 1;
	    FORMAT_SIZES[GL_DEPTH_STENCIL$1] = 4;
	    FORMAT_SIZES[GL_SRGB8_ALPHA8_EXT] = 4;
	    FORMAT_SIZES[GL_RGBA32F_EXT] = 16;
	    FORMAT_SIZES[GL_RGBA16F_EXT] = 8;
	    FORMAT_SIZES[GL_RGB16F_EXT] = 6;

	    function getRenderbufferSize(format, width, height) {
	      return FORMAT_SIZES[format] * width * height;
	    }

	    var wrapRenderbuffers = function wrapRenderbuffers(gl, extensions, limits, stats, config) {
	      var formatTypes = {
	        'rgba4': GL_RGBA4$1,
	        'rgb565': GL_RGB565$1,
	        'rgb5 a1': GL_RGB5_A1$1,
	        'depth': GL_DEPTH_COMPONENT16,
	        'stencil': GL_STENCIL_INDEX8,
	        'depth stencil': GL_DEPTH_STENCIL$1
	      };

	      if (extensions.ext_srgb) {
	        formatTypes['srgba'] = GL_SRGB8_ALPHA8_EXT;
	      }

	      if (extensions.ext_color_buffer_half_float) {
	        formatTypes['rgba16f'] = GL_RGBA16F_EXT;
	        formatTypes['rgb16f'] = GL_RGB16F_EXT;
	      }

	      if (extensions.webgl_color_buffer_float) {
	        formatTypes['rgba32f'] = GL_RGBA32F_EXT;
	      }

	      var formatTypesInvert = [];
	      Object.keys(formatTypes).forEach(function (key) {
	        var val = formatTypes[key];
	        formatTypesInvert[val] = key;
	      });
	      var renderbufferCount = 0;
	      var renderbufferSet = {};

	      function REGLRenderbuffer(renderbuffer) {
	        this.id = renderbufferCount++;
	        this.refCount = 1;
	        this.renderbuffer = renderbuffer;
	        this.format = GL_RGBA4$1;
	        this.width = 0;
	        this.height = 0;

	        if (config.profile) {
	          this.stats = {
	            size: 0
	          };
	        }
	      }

	      REGLRenderbuffer.prototype.decRef = function () {
	        if (--this.refCount <= 0) {
	          destroy(this);
	        }
	      };

	      function destroy(rb) {
	        var handle = rb.renderbuffer;
	        check$1(handle, 'must not double destroy renderbuffer');
	        gl.bindRenderbuffer(GL_RENDERBUFFER, null);
	        gl.deleteRenderbuffer(handle);
	        rb.renderbuffer = null;
	        rb.refCount = 0;
	        delete renderbufferSet[rb.id];
	        stats.renderbufferCount--;
	      }

	      function createRenderbuffer(a, b) {
	        var renderbuffer = new REGLRenderbuffer(gl.createRenderbuffer());
	        renderbufferSet[renderbuffer.id] = renderbuffer;
	        stats.renderbufferCount++;

	        function reglRenderbuffer(a, b) {
	          var w = 0;
	          var h = 0;
	          var format = GL_RGBA4$1;

	          if (typeof a === 'object' && a) {
	            var options = a;

	            if ('shape' in options) {
	              var shape = options.shape;
	              check$1(Array.isArray(shape) && shape.length >= 2, 'invalid renderbuffer shape');
	              w = shape[0] | 0;
	              h = shape[1] | 0;
	            } else {
	              if ('radius' in options) {
	                w = h = options.radius | 0;
	              }

	              if ('width' in options) {
	                w = options.width | 0;
	              }

	              if ('height' in options) {
	                h = options.height | 0;
	              }
	            }

	            if ('format' in options) {
	              check$1.parameter(options.format, formatTypes, 'invalid renderbuffer format');
	              format = formatTypes[options.format];
	            }
	          } else if (typeof a === 'number') {
	            w = a | 0;

	            if (typeof b === 'number') {
	              h = b | 0;
	            } else {
	              h = w;
	            }
	          } else if (!a) {
	            w = h = 1;
	          } else {
	            check$1.raise('invalid arguments to renderbuffer constructor');
	          }

	          check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');

	          if (w === renderbuffer.width && h === renderbuffer.height && format === renderbuffer.format) {
	            return;
	          }

	          reglRenderbuffer.width = renderbuffer.width = w;
	          reglRenderbuffer.height = renderbuffer.height = h;
	          renderbuffer.format = format;
	          gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
	          gl.renderbufferStorage(GL_RENDERBUFFER, format, w, h);
	          check$1(gl.getError() === 0, 'invalid render buffer format');

	          if (config.profile) {
	            renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
	          }

	          reglRenderbuffer.format = formatTypesInvert[renderbuffer.format];
	          return reglRenderbuffer;
	        }

	        function resize(w_, h_) {
	          var w = w_ | 0;
	          var h = h_ | 0 || w;

	          if (w === renderbuffer.width && h === renderbuffer.height) {
	            return reglRenderbuffer;
	          }

	          check$1(w > 0 && h > 0 && w <= limits.maxRenderbufferSize && h <= limits.maxRenderbufferSize, 'invalid renderbuffer size');
	          reglRenderbuffer.width = renderbuffer.width = w;
	          reglRenderbuffer.height = renderbuffer.height = h;
	          gl.bindRenderbuffer(GL_RENDERBUFFER, renderbuffer.renderbuffer);
	          gl.renderbufferStorage(GL_RENDERBUFFER, renderbuffer.format, w, h);
	          check$1(gl.getError() === 0, 'invalid render buffer format');

	          if (config.profile) {
	            renderbuffer.stats.size = getRenderbufferSize(renderbuffer.format, renderbuffer.width, renderbuffer.height);
	          }

	          return reglRenderbuffer;
	        }

	        reglRenderbuffer(a, b);
	        reglRenderbuffer.resize = resize;
	        reglRenderbuffer._reglType = 'renderbuffer';
	        reglRenderbuffer._renderbuffer = renderbuffer;

	        if (config.profile) {
	          reglRenderbuffer.stats = renderbuffer.stats;
	        }

	        reglRenderbuffer.destroy = function () {
	          renderbuffer.decRef();
	        };

	        return reglRenderbuffer;
	      }

	      if (config.profile) {
	        stats.getTotalRenderbufferSize = function () {
	          var total = 0;
	          Object.keys(renderbufferSet).forEach(function (key) {
	            total += renderbufferSet[key].stats.size;
	          });
	          return total;
	        };
	      }

	      function restoreRenderbuffers() {
	        values(renderbufferSet).forEach(function (rb) {
	          rb.renderbuffer = gl.createRenderbuffer();
	          gl.bindRenderbuffer(GL_RENDERBUFFER, rb.renderbuffer);
	          gl.renderbufferStorage(GL_RENDERBUFFER, rb.format, rb.width, rb.height);
	        });
	        gl.bindRenderbuffer(GL_RENDERBUFFER, null);
	      }

	      return {
	        create: createRenderbuffer,
	        clear: function clear() {
	          values(renderbufferSet).forEach(destroy);
	        },
	        restore: restoreRenderbuffers
	      };
	    };

	    var GL_FRAMEBUFFER$1 = 0x8D40;
	    var GL_RENDERBUFFER$1 = 0x8D41;
	    var GL_TEXTURE_2D$2 = 0x0DE1;
	    var GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 = 0x8515;
	    var GL_COLOR_ATTACHMENT0$1 = 0x8CE0;
	    var GL_DEPTH_ATTACHMENT = 0x8D00;
	    var GL_STENCIL_ATTACHMENT = 0x8D20;
	    var GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
	    var GL_FRAMEBUFFER_COMPLETE$1 = 0x8CD5;
	    var GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
	    var GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
	    var GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
	    var GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
	    var GL_HALF_FLOAT_OES$2 = 0x8D61;
	    var GL_UNSIGNED_BYTE$6 = 0x1401;
	    var GL_FLOAT$5 = 0x1406;
	    var GL_RGB$1 = 0x1907;
	    var GL_RGBA$2 = 0x1908;
	    var GL_DEPTH_COMPONENT$1 = 0x1902;
	    var colorTextureFormatEnums = [GL_RGB$1, GL_RGBA$2];
	    var textureFormatChannels = [];
	    textureFormatChannels[GL_RGBA$2] = 4;
	    textureFormatChannels[GL_RGB$1] = 3;
	    var textureTypeSizes = [];
	    textureTypeSizes[GL_UNSIGNED_BYTE$6] = 1;
	    textureTypeSizes[GL_FLOAT$5] = 4;
	    textureTypeSizes[GL_HALF_FLOAT_OES$2] = 2;
	    var GL_RGBA4$2 = 0x8056;
	    var GL_RGB5_A1$2 = 0x8057;
	    var GL_RGB565$2 = 0x8D62;
	    var GL_DEPTH_COMPONENT16$1 = 0x81A5;
	    var GL_STENCIL_INDEX8$1 = 0x8D48;
	    var GL_DEPTH_STENCIL$2 = 0x84F9;
	    var GL_SRGB8_ALPHA8_EXT$1 = 0x8C43;
	    var GL_RGBA32F_EXT$1 = 0x8814;
	    var GL_RGBA16F_EXT$1 = 0x881A;
	    var GL_RGB16F_EXT$1 = 0x881B;
	    var colorRenderbufferFormatEnums = [GL_RGBA4$2, GL_RGB5_A1$2, GL_RGB565$2, GL_SRGB8_ALPHA8_EXT$1, GL_RGBA16F_EXT$1, GL_RGB16F_EXT$1, GL_RGBA32F_EXT$1];
	    var statusCode = {};
	    statusCode[GL_FRAMEBUFFER_COMPLETE$1] = 'complete';
	    statusCode[GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT] = 'incomplete attachment';
	    statusCode[GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS] = 'incomplete dimensions';
	    statusCode[GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT] = 'incomplete, missing attachment';
	    statusCode[GL_FRAMEBUFFER_UNSUPPORTED] = 'unsupported';

	    function wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats) {
	      var framebufferState = {
	        cur: null,
	        next: null,
	        dirty: false,
	        setFBO: null
	      };
	      var colorTextureFormats = ['rgba'];
	      var colorRenderbufferFormats = ['rgba4', 'rgb565', 'rgb5 a1'];

	      if (extensions.ext_srgb) {
	        colorRenderbufferFormats.push('srgba');
	      }

	      if (extensions.ext_color_buffer_half_float) {
	        colorRenderbufferFormats.push('rgba16f', 'rgb16f');
	      }

	      if (extensions.webgl_color_buffer_float) {
	        colorRenderbufferFormats.push('rgba32f');
	      }

	      var colorTypes = ['uint8'];

	      if (extensions.oes_texture_half_float) {
	        colorTypes.push('half float', 'float16');
	      }

	      if (extensions.oes_texture_float) {
	        colorTypes.push('float', 'float32');
	      }

	      function FramebufferAttachment(target, texture, renderbuffer) {
	        this.target = target;
	        this.texture = texture;
	        this.renderbuffer = renderbuffer;
	        var w = 0;
	        var h = 0;

	        if (texture) {
	          w = texture.width;
	          h = texture.height;
	        } else if (renderbuffer) {
	          w = renderbuffer.width;
	          h = renderbuffer.height;
	        }

	        this.width = w;
	        this.height = h;
	      }

	      function decRef(attachment) {
	        if (attachment) {
	          if (attachment.texture) {
	            attachment.texture._texture.decRef();
	          }

	          if (attachment.renderbuffer) {
	            attachment.renderbuffer._renderbuffer.decRef();
	          }
	        }
	      }

	      function incRefAndCheckShape(attachment, width, height) {
	        if (!attachment) {
	          return;
	        }

	        if (attachment.texture) {
	          var texture = attachment.texture._texture;
	          var tw = Math.max(1, texture.width);
	          var th = Math.max(1, texture.height);
	          check$1(tw === width && th === height, 'inconsistent width/height for supplied texture');
	          texture.refCount += 1;
	        } else {
	          var renderbuffer = attachment.renderbuffer._renderbuffer;
	          check$1(renderbuffer.width === width && renderbuffer.height === height, 'inconsistent width/height for renderbuffer');
	          renderbuffer.refCount += 1;
	        }
	      }

	      function attach(location, attachment) {
	        if (attachment) {
	          if (attachment.texture) {
	            gl.framebufferTexture2D(GL_FRAMEBUFFER$1, location, attachment.target, attachment.texture._texture.texture, 0);
	          } else {
	            gl.framebufferRenderbuffer(GL_FRAMEBUFFER$1, location, GL_RENDERBUFFER$1, attachment.renderbuffer._renderbuffer.renderbuffer);
	          }
	        }
	      }

	      function parseAttachment(attachment) {
	        var target = GL_TEXTURE_2D$2;
	        var texture = null;
	        var renderbuffer = null;
	        var data = attachment;

	        if (typeof attachment === 'object') {
	          data = attachment.data;

	          if ('target' in attachment) {
	            target = attachment.target | 0;
	          }
	        }

	        check$1.type(data, 'function', 'invalid attachment data');
	        var type = data._reglType;

	        if (type === 'texture2d') {
	          texture = data;
	          check$1(target === GL_TEXTURE_2D$2);
	        } else if (type === 'textureCube') {
	          texture = data;
	          check$1(target >= GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 && target < GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + 6, 'invalid cube map target');
	        } else if (type === 'renderbuffer') {
	          renderbuffer = data;
	          target = GL_RENDERBUFFER$1;
	        } else {
	          check$1.raise('invalid regl object for attachment');
	        }

	        return new FramebufferAttachment(target, texture, renderbuffer);
	      }

	      function allocAttachment(width, height, isTexture, format, type) {
	        if (isTexture) {
	          var texture = textureState.create2D({
	            width: width,
	            height: height,
	            format: format,
	            type: type
	          });
	          texture._texture.refCount = 0;
	          return new FramebufferAttachment(GL_TEXTURE_2D$2, texture, null);
	        } else {
	          var rb = renderbufferState.create({
	            width: width,
	            height: height,
	            format: format
	          });
	          rb._renderbuffer.refCount = 0;
	          return new FramebufferAttachment(GL_RENDERBUFFER$1, null, rb);
	        }
	      }

	      function unwrapAttachment(attachment) {
	        return attachment && (attachment.texture || attachment.renderbuffer);
	      }

	      function resizeAttachment(attachment, w, h) {
	        if (attachment) {
	          if (attachment.texture) {
	            attachment.texture.resize(w, h);
	          } else if (attachment.renderbuffer) {
	            attachment.renderbuffer.resize(w, h);
	          }

	          attachment.width = w;
	          attachment.height = h;
	        }
	      }

	      var framebufferCount = 0;
	      var framebufferSet = {};

	      function REGLFramebuffer() {
	        this.id = framebufferCount++;
	        framebufferSet[this.id] = this;
	        this.framebuffer = gl.createFramebuffer();
	        this.width = 0;
	        this.height = 0;
	        this.colorAttachments = [];
	        this.depthAttachment = null;
	        this.stencilAttachment = null;
	        this.depthStencilAttachment = null;
	      }

	      function decFBORefs(framebuffer) {
	        framebuffer.colorAttachments.forEach(decRef);
	        decRef(framebuffer.depthAttachment);
	        decRef(framebuffer.stencilAttachment);
	        decRef(framebuffer.depthStencilAttachment);
	      }

	      function _destroy(framebuffer) {
	        var handle = framebuffer.framebuffer;
	        check$1(handle, 'must not double destroy framebuffer');
	        gl.deleteFramebuffer(handle);
	        framebuffer.framebuffer = null;
	        stats.framebufferCount--;
	        delete framebufferSet[framebuffer.id];
	      }

	      function updateFramebuffer(framebuffer) {
	        var i;
	        gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebuffer.framebuffer);
	        var colorAttachments = framebuffer.colorAttachments;

	        for (i = 0; i < colorAttachments.length; ++i) {
	          attach(GL_COLOR_ATTACHMENT0$1 + i, colorAttachments[i]);
	        }

	        for (i = colorAttachments.length; i < limits.maxColorAttachments; ++i) {
	          gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_COLOR_ATTACHMENT0$1 + i, GL_TEXTURE_2D$2, null, 0);
	        }

	        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);
	        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);
	        gl.framebufferTexture2D(GL_FRAMEBUFFER$1, GL_STENCIL_ATTACHMENT, GL_TEXTURE_2D$2, null, 0);
	        attach(GL_DEPTH_ATTACHMENT, framebuffer.depthAttachment);
	        attach(GL_STENCIL_ATTACHMENT, framebuffer.stencilAttachment);
	        attach(GL_DEPTH_STENCIL_ATTACHMENT, framebuffer.depthStencilAttachment);
	        var status = gl.checkFramebufferStatus(GL_FRAMEBUFFER$1);

	        if (!gl.isContextLost() && status !== GL_FRAMEBUFFER_COMPLETE$1) {
	          check$1.raise('framebuffer configuration not supported, status = ' + statusCode[status]);
	        }

	        gl.bindFramebuffer(GL_FRAMEBUFFER$1, framebufferState.next ? framebufferState.next.framebuffer : null);
	        framebufferState.cur = framebufferState.next;
	        gl.getError();
	      }

	      function createFBO(a0, a1) {
	        var framebuffer = new REGLFramebuffer();
	        stats.framebufferCount++;

	        function reglFramebuffer(a, b) {
	          var i;
	          check$1(framebufferState.next !== framebuffer, 'can not update framebuffer which is currently in use');
	          var width = 0;
	          var height = 0;
	          var needsDepth = true;
	          var needsStencil = true;
	          var colorBuffer = null;
	          var colorTexture = true;
	          var colorFormat = 'rgba';
	          var colorType = 'uint8';
	          var colorCount = 1;
	          var depthBuffer = null;
	          var stencilBuffer = null;
	          var depthStencilBuffer = null;
	          var depthStencilTexture = false;

	          if (typeof a === 'number') {
	            width = a | 0;
	            height = b | 0 || width;
	          } else if (!a) {
	            width = height = 1;
	          } else {
	            check$1.type(a, 'object', 'invalid arguments for framebuffer');
	            var options = a;

	            if ('shape' in options) {
	              var shape = options.shape;
	              check$1(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');
	              width = shape[0];
	              height = shape[1];
	            } else {
	              if ('radius' in options) {
	                width = height = options.radius;
	              }

	              if ('width' in options) {
	                width = options.width;
	              }

	              if ('height' in options) {
	                height = options.height;
	              }
	            }

	            if ('color' in options || 'colors' in options) {
	              colorBuffer = options.color || options.colors;

	              if (Array.isArray(colorBuffer)) {
	                check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, 'multiple render targets not supported');
	              }
	            }

	            if (!colorBuffer) {
	              if ('colorCount' in options) {
	                colorCount = options.colorCount | 0;
	                check$1(colorCount > 0, 'invalid color buffer count');
	              }

	              if ('colorTexture' in options) {
	                colorTexture = !!options.colorTexture;
	                colorFormat = 'rgba4';
	              }

	              if ('colorType' in options) {
	                colorType = options.colorType;

	                if (!colorTexture) {
	                  if (colorType === 'half float' || colorType === 'float16') {
	                    check$1(extensions.ext_color_buffer_half_float, 'you must enable EXT_color_buffer_half_float to use 16-bit render buffers');
	                    colorFormat = 'rgba16f';
	                  } else if (colorType === 'float' || colorType === 'float32') {
	                    check$1(extensions.webgl_color_buffer_float, 'you must enable WEBGL_color_buffer_float in order to use 32-bit floating point renderbuffers');
	                    colorFormat = 'rgba32f';
	                  }
	                } else {
	                  check$1(extensions.oes_texture_float || !(colorType === 'float' || colorType === 'float32'), 'you must enable OES_texture_float in order to use floating point framebuffer objects');
	                  check$1(extensions.oes_texture_half_float || !(colorType === 'half float' || colorType === 'float16'), 'you must enable OES_texture_half_float in order to use 16-bit floating point framebuffer objects');
	                }

	                check$1.oneOf(colorType, colorTypes, 'invalid color type');
	              }

	              if ('colorFormat' in options) {
	                colorFormat = options.colorFormat;

	                if (colorTextureFormats.indexOf(colorFormat) >= 0) {
	                  colorTexture = true;
	                } else if (colorRenderbufferFormats.indexOf(colorFormat) >= 0) {
	                  colorTexture = false;
	                } else {
	                  if (colorTexture) {
	                    check$1.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');
	                  } else {
	                    check$1.oneOf(options.colorFormat, colorRenderbufferFormats, 'invalid color format for renderbuffer');
	                  }
	                }
	              }
	            }

	            if ('depthTexture' in options || 'depthStencilTexture' in options) {
	              depthStencilTexture = !!(options.depthTexture || options.depthStencilTexture);
	              check$1(!depthStencilTexture || extensions.webgl_depth_texture, 'webgl_depth_texture extension not supported');
	            }

	            if ('depth' in options) {
	              if (typeof options.depth === 'boolean') {
	                needsDepth = options.depth;
	              } else {
	                depthBuffer = options.depth;
	                needsStencil = false;
	              }
	            }

	            if ('stencil' in options) {
	              if (typeof options.stencil === 'boolean') {
	                needsStencil = options.stencil;
	              } else {
	                stencilBuffer = options.stencil;
	                needsDepth = false;
	              }
	            }

	            if ('depthStencil' in options) {
	              if (typeof options.depthStencil === 'boolean') {
	                needsDepth = needsStencil = options.depthStencil;
	              } else {
	                depthStencilBuffer = options.depthStencil;
	                needsDepth = false;
	                needsStencil = false;
	              }
	            }
	          }

	          var colorAttachments = null;
	          var depthAttachment = null;
	          var stencilAttachment = null;
	          var depthStencilAttachment = null;

	          if (Array.isArray(colorBuffer)) {
	            colorAttachments = colorBuffer.map(parseAttachment);
	          } else if (colorBuffer) {
	            colorAttachments = [parseAttachment(colorBuffer)];
	          } else {
	            colorAttachments = new Array(colorCount);

	            for (i = 0; i < colorCount; ++i) {
	              colorAttachments[i] = allocAttachment(width, height, colorTexture, colorFormat, colorType);
	            }
	          }

	          check$1(extensions.webgl_draw_buffers || colorAttachments.length <= 1, 'you must enable the WEBGL_draw_buffers extension in order to use multiple color buffers.');
	          check$1(colorAttachments.length <= limits.maxColorAttachments, 'too many color attachments, not supported');
	          width = width || colorAttachments[0].width;
	          height = height || colorAttachments[0].height;

	          if (depthBuffer) {
	            depthAttachment = parseAttachment(depthBuffer);
	          } else if (needsDepth && !needsStencil) {
	            depthAttachment = allocAttachment(width, height, depthStencilTexture, 'depth', 'uint32');
	          }

	          if (stencilBuffer) {
	            stencilAttachment = parseAttachment(stencilBuffer);
	          } else if (needsStencil && !needsDepth) {
	            stencilAttachment = allocAttachment(width, height, false, 'stencil', 'uint8');
	          }

	          if (depthStencilBuffer) {
	            depthStencilAttachment = parseAttachment(depthStencilBuffer);
	          } else if (!depthBuffer && !stencilBuffer && needsStencil && needsDepth) {
	            depthStencilAttachment = allocAttachment(width, height, depthStencilTexture, 'depth stencil', 'depth stencil');
	          }

	          check$1(!!depthBuffer + !!stencilBuffer + !!depthStencilBuffer <= 1, 'invalid framebuffer configuration, can specify exactly one depth/stencil attachment');
	          var commonColorAttachmentSize = null;

	          for (i = 0; i < colorAttachments.length; ++i) {
	            incRefAndCheckShape(colorAttachments[i], width, height);
	            check$1(!colorAttachments[i] || colorAttachments[i].texture && colorTextureFormatEnums.indexOf(colorAttachments[i].texture._texture.format) >= 0 || colorAttachments[i].renderbuffer && colorRenderbufferFormatEnums.indexOf(colorAttachments[i].renderbuffer._renderbuffer.format) >= 0, 'framebuffer color attachment ' + i + ' is invalid');

	            if (colorAttachments[i] && colorAttachments[i].texture) {
	              var colorAttachmentSize = textureFormatChannels[colorAttachments[i].texture._texture.format] * textureTypeSizes[colorAttachments[i].texture._texture.type];

	              if (commonColorAttachmentSize === null) {
	                commonColorAttachmentSize = colorAttachmentSize;
	              } else {
	                check$1(commonColorAttachmentSize === colorAttachmentSize, 'all color attachments much have the same number of bits per pixel.');
	              }
	            }
	          }

	          incRefAndCheckShape(depthAttachment, width, height);
	          check$1(!depthAttachment || depthAttachment.texture && depthAttachment.texture._texture.format === GL_DEPTH_COMPONENT$1 || depthAttachment.renderbuffer && depthAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_COMPONENT16$1, 'invalid depth attachment for framebuffer object');
	          incRefAndCheckShape(stencilAttachment, width, height);
	          check$1(!stencilAttachment || stencilAttachment.renderbuffer && stencilAttachment.renderbuffer._renderbuffer.format === GL_STENCIL_INDEX8$1, 'invalid stencil attachment for framebuffer object');
	          incRefAndCheckShape(depthStencilAttachment, width, height);
	          check$1(!depthStencilAttachment || depthStencilAttachment.texture && depthStencilAttachment.texture._texture.format === GL_DEPTH_STENCIL$2 || depthStencilAttachment.renderbuffer && depthStencilAttachment.renderbuffer._renderbuffer.format === GL_DEPTH_STENCIL$2, 'invalid depth-stencil attachment for framebuffer object');
	          decFBORefs(framebuffer);
	          framebuffer.width = width;
	          framebuffer.height = height;
	          framebuffer.colorAttachments = colorAttachments;
	          framebuffer.depthAttachment = depthAttachment;
	          framebuffer.stencilAttachment = stencilAttachment;
	          framebuffer.depthStencilAttachment = depthStencilAttachment;
	          reglFramebuffer.color = colorAttachments.map(unwrapAttachment);
	          reglFramebuffer.depth = unwrapAttachment(depthAttachment);
	          reglFramebuffer.stencil = unwrapAttachment(stencilAttachment);
	          reglFramebuffer.depthStencil = unwrapAttachment(depthStencilAttachment);
	          reglFramebuffer.width = framebuffer.width;
	          reglFramebuffer.height = framebuffer.height;
	          updateFramebuffer(framebuffer);
	          return reglFramebuffer;
	        }

	        function resize(w_, h_) {
	          check$1(framebufferState.next !== framebuffer, 'can not resize a framebuffer which is currently in use');
	          var w = Math.max(w_ | 0, 1);
	          var h = Math.max(h_ | 0 || w, 1);

	          if (w === framebuffer.width && h === framebuffer.height) {
	            return reglFramebuffer;
	          }

	          var colorAttachments = framebuffer.colorAttachments;

	          for (var i = 0; i < colorAttachments.length; ++i) {
	            resizeAttachment(colorAttachments[i], w, h);
	          }

	          resizeAttachment(framebuffer.depthAttachment, w, h);
	          resizeAttachment(framebuffer.stencilAttachment, w, h);
	          resizeAttachment(framebuffer.depthStencilAttachment, w, h);
	          framebuffer.width = reglFramebuffer.width = w;
	          framebuffer.height = reglFramebuffer.height = h;
	          updateFramebuffer(framebuffer);
	          return reglFramebuffer;
	        }

	        reglFramebuffer(a0, a1);
	        return extend(reglFramebuffer, {
	          resize: resize,
	          _reglType: 'framebuffer',
	          _framebuffer: framebuffer,
	          destroy: function destroy() {
	            _destroy(framebuffer);

	            decFBORefs(framebuffer);
	          },
	          use: function use(block) {
	            framebufferState.setFBO({
	              framebuffer: reglFramebuffer
	            }, block);
	          }
	        });
	      }

	      function createCubeFBO(options) {
	        var faces = Array(6);

	        function reglFramebufferCube(a) {
	          var i;
	          check$1(faces.indexOf(framebufferState.next) < 0, 'can not update framebuffer which is currently in use');
	          var params = {
	            color: null
	          };
	          var radius = 0;
	          var colorBuffer = null;
	          var colorFormat = 'rgba';
	          var colorType = 'uint8';
	          var colorCount = 1;

	          if (typeof a === 'number') {
	            radius = a | 0;
	          } else if (!a) {
	            radius = 1;
	          } else {
	            check$1.type(a, 'object', 'invalid arguments for framebuffer');
	            var options = a;

	            if ('shape' in options) {
	              var shape = options.shape;
	              check$1(Array.isArray(shape) && shape.length >= 2, 'invalid shape for framebuffer');
	              check$1(shape[0] === shape[1], 'cube framebuffer must be square');
	              radius = shape[0];
	            } else {
	              if ('radius' in options) {
	                radius = options.radius | 0;
	              }

	              if ('width' in options) {
	                radius = options.width | 0;

	                if ('height' in options) {
	                  check$1(options.height === radius, 'must be square');
	                }
	              } else if ('height' in options) {
	                radius = options.height | 0;
	              }
	            }

	            if ('color' in options || 'colors' in options) {
	              colorBuffer = options.color || options.colors;

	              if (Array.isArray(colorBuffer)) {
	                check$1(colorBuffer.length === 1 || extensions.webgl_draw_buffers, 'multiple render targets not supported');
	              }
	            }

	            if (!colorBuffer) {
	              if ('colorCount' in options) {
	                colorCount = options.colorCount | 0;
	                check$1(colorCount > 0, 'invalid color buffer count');
	              }

	              if ('colorType' in options) {
	                check$1.oneOf(options.colorType, colorTypes, 'invalid color type');
	                colorType = options.colorType;
	              }

	              if ('colorFormat' in options) {
	                colorFormat = options.colorFormat;
	                check$1.oneOf(options.colorFormat, colorTextureFormats, 'invalid color format for texture');
	              }
	            }

	            if ('depth' in options) {
	              params.depth = options.depth;
	            }

	            if ('stencil' in options) {
	              params.stencil = options.stencil;
	            }

	            if ('depthStencil' in options) {
	              params.depthStencil = options.depthStencil;
	            }
	          }

	          var colorCubes;

	          if (colorBuffer) {
	            if (Array.isArray(colorBuffer)) {
	              colorCubes = [];

	              for (i = 0; i < colorBuffer.length; ++i) {
	                colorCubes[i] = colorBuffer[i];
	              }
	            } else {
	              colorCubes = [colorBuffer];
	            }
	          } else {
	            colorCubes = Array(colorCount);
	            var cubeMapParams = {
	              radius: radius,
	              format: colorFormat,
	              type: colorType
	            };

	            for (i = 0; i < colorCount; ++i) {
	              colorCubes[i] = textureState.createCube(cubeMapParams);
	            }
	          }

	          params.color = Array(colorCubes.length);

	          for (i = 0; i < colorCubes.length; ++i) {
	            var cube = colorCubes[i];
	            check$1(typeof cube === 'function' && cube._reglType === 'textureCube', 'invalid cube map');
	            radius = radius || cube.width;
	            check$1(cube.width === radius && cube.height === radius, 'invalid cube map shape');
	            params.color[i] = {
	              target: GL_TEXTURE_CUBE_MAP_POSITIVE_X$2,
	              data: colorCubes[i]
	            };
	          }

	          for (i = 0; i < 6; ++i) {
	            for (var j = 0; j < colorCubes.length; ++j) {
	              params.color[j].target = GL_TEXTURE_CUBE_MAP_POSITIVE_X$2 + i;
	            }

	            if (i > 0) {
	              params.depth = faces[0].depth;
	              params.stencil = faces[0].stencil;
	              params.depthStencil = faces[0].depthStencil;
	            }

	            if (faces[i]) {
	              faces[i](params);
	            } else {
	              faces[i] = createFBO(params);
	            }
	          }

	          return extend(reglFramebufferCube, {
	            width: radius,
	            height: radius,
	            color: colorCubes
	          });
	        }

	        function resize(radius_) {
	          var i;
	          var radius = radius_ | 0;
	          check$1(radius > 0 && radius <= limits.maxCubeMapSize, 'invalid radius for cube fbo');

	          if (radius === reglFramebufferCube.width) {
	            return reglFramebufferCube;
	          }

	          var colors = reglFramebufferCube.color;

	          for (i = 0; i < colors.length; ++i) {
	            colors[i].resize(radius);
	          }

	          for (i = 0; i < 6; ++i) {
	            faces[i].resize(radius);
	          }

	          reglFramebufferCube.width = reglFramebufferCube.height = radius;
	          return reglFramebufferCube;
	        }

	        reglFramebufferCube(options);
	        return extend(reglFramebufferCube, {
	          faces: faces,
	          resize: resize,
	          _reglType: 'framebufferCube',
	          destroy: function destroy() {
	            faces.forEach(function (f) {
	              f.destroy();
	            });
	          }
	        });
	      }

	      function restoreFramebuffers() {
	        framebufferState.cur = null;
	        framebufferState.next = null;
	        framebufferState.dirty = true;
	        values(framebufferSet).forEach(function (fb) {
	          fb.framebuffer = gl.createFramebuffer();
	          updateFramebuffer(fb);
	        });
	      }

	      return extend(framebufferState, {
	        getFramebuffer: function getFramebuffer(object) {
	          if (typeof object === 'function' && object._reglType === 'framebuffer') {
	            var fbo = object._framebuffer;
	            return fbo;
	          }

	          return null;
	        },
	        create: createFBO,
	        createCube: createCubeFBO,
	        clear: function clear() {
	          values(framebufferSet).forEach(_destroy);
	        },
	        restore: restoreFramebuffers
	      });
	    }

	    var GL_FLOAT$6 = 5126;

	    function AttributeRecord() {
	      this.state = 0;
	      this.x = 0.0;
	      this.y = 0.0;
	      this.z = 0.0;
	      this.w = 0.0;
	      this.buffer = null;
	      this.size = 0;
	      this.normalized = false;
	      this.type = GL_FLOAT$6;
	      this.offset = 0;
	      this.stride = 0;
	      this.divisor = 0;
	    }

	    function wrapAttributeState(gl, extensions, limits, stringStore) {
	      var NUM_ATTRIBUTES = limits.maxAttributes;
	      var attributeBindings = new Array(NUM_ATTRIBUTES);

	      for (var i = 0; i < NUM_ATTRIBUTES; ++i) {
	        attributeBindings[i] = new AttributeRecord();
	      }

	      return {
	        Record: AttributeRecord,
	        scope: {},
	        state: attributeBindings
	      };
	    }

	    var GL_FRAGMENT_SHADER = 35632;
	    var GL_VERTEX_SHADER = 35633;
	    var GL_ACTIVE_UNIFORMS = 0x8B86;
	    var GL_ACTIVE_ATTRIBUTES = 0x8B89;

	    function wrapShaderState(gl, stringStore, stats, config) {
	      var fragShaders = {};
	      var vertShaders = {};

	      function ActiveInfo(name, id, location, info) {
	        this.name = name;
	        this.id = id;
	        this.location = location;
	        this.info = info;
	      }

	      function insertActiveInfo(list, info) {
	        for (var i = 0; i < list.length; ++i) {
	          if (list[i].id === info.id) {
	            list[i].location = info.location;
	            return;
	          }
	        }

	        list.push(info);
	      }

	      function getShader(type, id, command) {
	        var cache = type === GL_FRAGMENT_SHADER ? fragShaders : vertShaders;
	        var shader = cache[id];

	        if (!shader) {
	          var source = stringStore.str(id);
	          shader = gl.createShader(type);
	          gl.shaderSource(shader, source);
	          gl.compileShader(shader);
	          check$1.shaderError(gl, shader, source, type, command);
	          cache[id] = shader;
	        }

	        return shader;
	      }

	      var programCache = {};
	      var programList = [];
	      var PROGRAM_COUNTER = 0;

	      function REGLProgram(fragId, vertId) {
	        this.id = PROGRAM_COUNTER++;
	        this.fragId = fragId;
	        this.vertId = vertId;
	        this.program = null;
	        this.uniforms = [];
	        this.attributes = [];

	        if (config.profile) {
	          this.stats = {
	            uniformsCount: 0,
	            attributesCount: 0
	          };
	        }
	      }

	      function linkProgram(desc, command) {
	        var i, info;
	        var fragShader = getShader(GL_FRAGMENT_SHADER, desc.fragId);
	        var vertShader = getShader(GL_VERTEX_SHADER, desc.vertId);
	        var program = desc.program = gl.createProgram();
	        gl.attachShader(program, fragShader);
	        gl.attachShader(program, vertShader);
	        gl.linkProgram(program);
	        check$1.linkError(gl, program, stringStore.str(desc.fragId), stringStore.str(desc.vertId), command);
	        var numUniforms = gl.getProgramParameter(program, GL_ACTIVE_UNIFORMS);

	        if (config.profile) {
	          desc.stats.uniformsCount = numUniforms;
	        }

	        var uniforms = desc.uniforms;

	        for (i = 0; i < numUniforms; ++i) {
	          info = gl.getActiveUniform(program, i);

	          if (info) {
	            if (info.size > 1) {
	              for (var j = 0; j < info.size; ++j) {
	                var name = info.name.replace('[0]', '[' + j + ']');
	                insertActiveInfo(uniforms, new ActiveInfo(name, stringStore.id(name), gl.getUniformLocation(program, name), info));
	              }
	            } else {
	              insertActiveInfo(uniforms, new ActiveInfo(info.name, stringStore.id(info.name), gl.getUniformLocation(program, info.name), info));
	            }
	          }
	        }

	        var numAttributes = gl.getProgramParameter(program, GL_ACTIVE_ATTRIBUTES);

	        if (config.profile) {
	          desc.stats.attributesCount = numAttributes;
	        }

	        var attributes = desc.attributes;

	        for (i = 0; i < numAttributes; ++i) {
	          info = gl.getActiveAttrib(program, i);

	          if (info) {
	            insertActiveInfo(attributes, new ActiveInfo(info.name, stringStore.id(info.name), gl.getAttribLocation(program, info.name), info));
	          }
	        }
	      }

	      if (config.profile) {
	        stats.getMaxUniformsCount = function () {
	          var m = 0;
	          programList.forEach(function (desc) {
	            if (desc.stats.uniformsCount > m) {
	              m = desc.stats.uniformsCount;
	            }
	          });
	          return m;
	        };

	        stats.getMaxAttributesCount = function () {
	          var m = 0;
	          programList.forEach(function (desc) {
	            if (desc.stats.attributesCount > m) {
	              m = desc.stats.attributesCount;
	            }
	          });
	          return m;
	        };
	      }

	      function restoreShaders() {
	        fragShaders = {};
	        vertShaders = {};

	        for (var i = 0; i < programList.length; ++i) {
	          linkProgram(programList[i]);
	        }
	      }

	      return {
	        clear: function clear() {
	          var deleteShader = gl.deleteShader.bind(gl);
	          values(fragShaders).forEach(deleteShader);
	          fragShaders = {};
	          values(vertShaders).forEach(deleteShader);
	          vertShaders = {};
	          programList.forEach(function (desc) {
	            gl.deleteProgram(desc.program);
	          });
	          programList.length = 0;
	          programCache = {};
	          stats.shaderCount = 0;
	        },
	        program: function program(vertId, fragId, command) {
	          check$1.command(vertId >= 0, 'missing vertex shader', command);
	          check$1.command(fragId >= 0, 'missing fragment shader', command);
	          var cache = programCache[fragId];

	          if (!cache) {
	            cache = programCache[fragId] = {};
	          }

	          var program = cache[vertId];

	          if (!program) {
	            program = new REGLProgram(fragId, vertId);
	            stats.shaderCount++;
	            linkProgram(program, command);
	            cache[vertId] = program;
	            programList.push(program);
	          }

	          return program;
	        },
	        restore: restoreShaders,
	        shader: getShader,
	        frag: -1,
	        vert: -1
	      };
	    }

	    var GL_RGBA$3 = 6408;
	    var GL_UNSIGNED_BYTE$7 = 5121;
	    var GL_PACK_ALIGNMENT = 0x0D05;
	    var GL_FLOAT$7 = 0x1406;

	    function wrapReadPixels(gl, framebufferState, reglPoll, context, glAttributes, extensions, limits) {
	      function readPixelsImpl(input) {
	        var type;

	        if (framebufferState.next === null) {
	          check$1(glAttributes.preserveDrawingBuffer, 'you must create a webgl context with "preserveDrawingBuffer":true in order to read pixels from the drawing buffer');
	          type = GL_UNSIGNED_BYTE$7;
	        } else {
	          check$1(framebufferState.next.colorAttachments[0].texture !== null, 'You cannot read from a renderbuffer');
	          type = framebufferState.next.colorAttachments[0].texture._texture.type;

	          if (extensions.oes_texture_float) {
	            check$1(type === GL_UNSIGNED_BYTE$7 || type === GL_FLOAT$7, 'Reading from a framebuffer is only allowed for the types \'uint8\' and \'float\'');

	            if (type === GL_FLOAT$7) {
	              check$1(limits.readFloat, 'Reading \'float\' values is not permitted in your browser. For a fallback, please see: https://www.npmjs.com/package/glsl-read-float');
	            }
	          } else {
	            check$1(type === GL_UNSIGNED_BYTE$7, 'Reading from a framebuffer is only allowed for the type \'uint8\'');
	          }
	        }

	        var x = 0;
	        var y = 0;
	        var width = context.framebufferWidth;
	        var height = context.framebufferHeight;
	        var data = null;

	        if (isTypedArray(input)) {
	          data = input;
	        } else if (input) {
	          check$1.type(input, 'object', 'invalid arguments to regl.read()');
	          x = input.x | 0;
	          y = input.y | 0;
	          check$1(x >= 0 && x < context.framebufferWidth, 'invalid x offset for regl.read');
	          check$1(y >= 0 && y < context.framebufferHeight, 'invalid y offset for regl.read');
	          width = (input.width || context.framebufferWidth - x) | 0;
	          height = (input.height || context.framebufferHeight - y) | 0;
	          data = input.data || null;
	        }

	        if (data) {
	          if (type === GL_UNSIGNED_BYTE$7) {
	            check$1(data instanceof Uint8Array, 'buffer must be \'Uint8Array\' when reading from a framebuffer of type \'uint8\'');
	          } else if (type === GL_FLOAT$7) {
	            check$1(data instanceof Float32Array, 'buffer must be \'Float32Array\' when reading from a framebuffer of type \'float\'');
	          }
	        }

	        check$1(width > 0 && width + x <= context.framebufferWidth, 'invalid width for read pixels');
	        check$1(height > 0 && height + y <= context.framebufferHeight, 'invalid height for read pixels');
	        reglPoll();
	        var size = width * height * 4;

	        if (!data) {
	          if (type === GL_UNSIGNED_BYTE$7) {
	            data = new Uint8Array(size);
	          } else if (type === GL_FLOAT$7) {
	            data = data || new Float32Array(size);
	          }
	        }

	        check$1.isTypedArray(data, 'data buffer for regl.read() must be a typedarray');
	        check$1(data.byteLength >= size, 'data buffer for regl.read() too small');
	        gl.pixelStorei(GL_PACK_ALIGNMENT, 4);
	        gl.readPixels(x, y, width, height, GL_RGBA$3, type, data);
	        return data;
	      }

	      function readPixelsFBO(options) {
	        var result;
	        framebufferState.setFBO({
	          framebuffer: options.framebuffer
	        }, function () {
	          result = readPixelsImpl(options);
	        });
	        return result;
	      }

	      function readPixels(options) {
	        if (!options || !('framebuffer' in options)) {
	          return readPixelsImpl(options);
	        } else {
	          return readPixelsFBO(options);
	        }
	      }

	      return readPixels;
	    }

	    function slice(x) {
	      return Array.prototype.slice.call(x);
	    }

	    function join(x) {
	      return slice(x).join('');
	    }

	    function createEnvironment() {
	      var varCounter = 0;
	      var linkedNames = [];
	      var linkedValues = [];

	      function link(value) {
	        for (var i = 0; i < linkedValues.length; ++i) {
	          if (linkedValues[i] === value) {
	            return linkedNames[i];
	          }
	        }

	        var name = 'g' + varCounter++;
	        linkedNames.push(name);
	        linkedValues.push(value);
	        return name;
	      }

	      function block() {
	        var code = [];

	        function push() {
	          code.push.apply(code, slice(arguments));
	        }

	        var vars = [];

	        function def() {
	          var name = 'v' + varCounter++;
	          vars.push(name);

	          if (arguments.length > 0) {
	            code.push(name, '=');
	            code.push.apply(code, slice(arguments));
	            code.push(';');
	          }

	          return name;
	        }

	        return extend(push, {
	          def: def,
	          toString: function toString() {
	            return join([vars.length > 0 ? 'var ' + vars + ';' : '', join(code)]);
	          }
	        });
	      }

	      function scope() {
	        var entry = block();
	        var exit = block();
	        var entryToString = entry.toString;
	        var exitToString = exit.toString;

	        function save(object, prop) {
	          exit(object, prop, '=', entry.def(object, prop), ';');
	        }

	        return extend(function () {
	          entry.apply(entry, slice(arguments));
	        }, {
	          def: entry.def,
	          entry: entry,
	          exit: exit,
	          save: save,
	          set: function set(object, prop, value) {
	            save(object, prop);
	            entry(object, prop, '=', value, ';');
	          },
	          toString: function toString() {
	            return entryToString() + exitToString();
	          }
	        });
	      }

	      function conditional() {
	        var pred = join(arguments);
	        var thenBlock = scope();
	        var elseBlock = scope();
	        var thenToString = thenBlock.toString;
	        var elseToString = elseBlock.toString;
	        return extend(thenBlock, {
	          then: function then() {
	            thenBlock.apply(thenBlock, slice(arguments));
	            return this;
	          },
	          else: function _else() {
	            elseBlock.apply(elseBlock, slice(arguments));
	            return this;
	          },
	          toString: function toString() {
	            var elseClause = elseToString();

	            if (elseClause) {
	              elseClause = 'else{' + elseClause + '}';
	            }

	            return join(['if(', pred, '){', thenToString(), '}', elseClause]);
	          }
	        });
	      }

	      var globalBlock = block();
	      var procedures = {};

	      function proc(name, count) {
	        var args = [];

	        function arg() {
	          var name = 'a' + args.length;
	          args.push(name);
	          return name;
	        }

	        count = count || 0;

	        for (var i = 0; i < count; ++i) {
	          arg();
	        }

	        var body = scope();
	        var bodyToString = body.toString;
	        var result = procedures[name] = extend(body, {
	          arg: arg,
	          toString: function toString() {
	            return join(['function(', args.join(), '){', bodyToString(), '}']);
	          }
	        });
	        return result;
	      }

	      function compile() {
	        var code = ['"use strict";', globalBlock, 'return {'];
	        Object.keys(procedures).forEach(function (name) {
	          code.push('"', name, '":', procedures[name].toString(), ',');
	        });
	        code.push('}');
	        var src = join(code).replace(/;/g, ';\n').replace(/}/g, '}\n').replace(/{/g, '{\n');
	        var proc = Function.apply(null, linkedNames.concat(src));
	        return proc.apply(null, linkedValues);
	      }

	      return {
	        global: globalBlock,
	        link: link,
	        block: block,
	        proc: proc,
	        scope: scope,
	        cond: conditional,
	        compile: compile
	      };
	    }

	    var CUTE_COMPONENTS = 'xyzw'.split('');
	    var GL_UNSIGNED_BYTE$8 = 5121;
	    var ATTRIB_STATE_POINTER = 1;
	    var ATTRIB_STATE_CONSTANT = 2;
	    var DYN_FUNC$1 = 0;
	    var DYN_PROP$1 = 1;
	    var DYN_CONTEXT$1 = 2;
	    var DYN_STATE$1 = 3;
	    var DYN_THUNK = 4;
	    var S_DITHER = 'dither';
	    var S_BLEND_ENABLE = 'blend.enable';
	    var S_BLEND_COLOR = 'blend.color';
	    var S_BLEND_EQUATION = 'blend.equation';
	    var S_BLEND_FUNC = 'blend.func';
	    var S_DEPTH_ENABLE = 'depth.enable';
	    var S_DEPTH_FUNC = 'depth.func';
	    var S_DEPTH_RANGE = 'depth.range';
	    var S_DEPTH_MASK = 'depth.mask';
	    var S_COLOR_MASK = 'colorMask';
	    var S_CULL_ENABLE = 'cull.enable';
	    var S_CULL_FACE = 'cull.face';
	    var S_FRONT_FACE = 'frontFace';
	    var S_LINE_WIDTH = 'lineWidth';
	    var S_POLYGON_OFFSET_ENABLE = 'polygonOffset.enable';
	    var S_POLYGON_OFFSET_OFFSET = 'polygonOffset.offset';
	    var S_SAMPLE_ALPHA = 'sample.alpha';
	    var S_SAMPLE_ENABLE = 'sample.enable';
	    var S_SAMPLE_COVERAGE = 'sample.coverage';
	    var S_STENCIL_ENABLE = 'stencil.enable';
	    var S_STENCIL_MASK = 'stencil.mask';
	    var S_STENCIL_FUNC = 'stencil.func';
	    var S_STENCIL_OPFRONT = 'stencil.opFront';
	    var S_STENCIL_OPBACK = 'stencil.opBack';
	    var S_SCISSOR_ENABLE = 'scissor.enable';
	    var S_SCISSOR_BOX = 'scissor.box';
	    var S_VIEWPORT = 'viewport';
	    var S_PROFILE = 'profile';
	    var S_FRAMEBUFFER = 'framebuffer';
	    var S_VERT = 'vert';
	    var S_FRAG = 'frag';
	    var S_ELEMENTS = 'elements';
	    var S_PRIMITIVE = 'primitive';
	    var S_COUNT = 'count';
	    var S_OFFSET = 'offset';
	    var S_INSTANCES = 'instances';
	    var SUFFIX_WIDTH = 'Width';
	    var SUFFIX_HEIGHT = 'Height';
	    var S_FRAMEBUFFER_WIDTH = S_FRAMEBUFFER + SUFFIX_WIDTH;
	    var S_FRAMEBUFFER_HEIGHT = S_FRAMEBUFFER + SUFFIX_HEIGHT;
	    var S_VIEWPORT_WIDTH = S_VIEWPORT + SUFFIX_WIDTH;
	    var S_VIEWPORT_HEIGHT = S_VIEWPORT + SUFFIX_HEIGHT;
	    var S_DRAWINGBUFFER = 'drawingBuffer';
	    var S_DRAWINGBUFFER_WIDTH = S_DRAWINGBUFFER + SUFFIX_WIDTH;
	    var S_DRAWINGBUFFER_HEIGHT = S_DRAWINGBUFFER + SUFFIX_HEIGHT;
	    var NESTED_OPTIONS = [S_BLEND_FUNC, S_BLEND_EQUATION, S_STENCIL_FUNC, S_STENCIL_OPFRONT, S_STENCIL_OPBACK, S_SAMPLE_COVERAGE, S_VIEWPORT, S_SCISSOR_BOX, S_POLYGON_OFFSET_OFFSET];
	    var GL_ARRAY_BUFFER$1 = 34962;
	    var GL_ELEMENT_ARRAY_BUFFER$1 = 34963;
	    var GL_FRAGMENT_SHADER$1 = 35632;
	    var GL_VERTEX_SHADER$1 = 35633;
	    var GL_TEXTURE_2D$3 = 0x0DE1;
	    var GL_TEXTURE_CUBE_MAP$2 = 0x8513;
	    var GL_CULL_FACE = 0x0B44;
	    var GL_BLEND = 0x0BE2;
	    var GL_DITHER = 0x0BD0;
	    var GL_STENCIL_TEST = 0x0B90;
	    var GL_DEPTH_TEST = 0x0B71;
	    var GL_SCISSOR_TEST = 0x0C11;
	    var GL_POLYGON_OFFSET_FILL = 0x8037;
	    var GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
	    var GL_SAMPLE_COVERAGE = 0x80A0;
	    var GL_FLOAT$8 = 5126;
	    var GL_FLOAT_VEC2 = 35664;
	    var GL_FLOAT_VEC3 = 35665;
	    var GL_FLOAT_VEC4 = 35666;
	    var GL_INT$3 = 5124;
	    var GL_INT_VEC2 = 35667;
	    var GL_INT_VEC3 = 35668;
	    var GL_INT_VEC4 = 35669;
	    var GL_BOOL = 35670;
	    var GL_BOOL_VEC2 = 35671;
	    var GL_BOOL_VEC3 = 35672;
	    var GL_BOOL_VEC4 = 35673;
	    var GL_FLOAT_MAT2 = 35674;
	    var GL_FLOAT_MAT3 = 35675;
	    var GL_FLOAT_MAT4 = 35676;
	    var GL_SAMPLER_2D = 35678;
	    var GL_SAMPLER_CUBE = 35680;
	    var GL_TRIANGLES$1 = 4;
	    var GL_FRONT = 1028;
	    var GL_BACK = 1029;
	    var GL_CW = 0x0900;
	    var GL_CCW = 0x0901;
	    var GL_MIN_EXT = 0x8007;
	    var GL_MAX_EXT = 0x8008;
	    var GL_ALWAYS = 519;
	    var GL_KEEP = 7680;
	    var GL_ZERO = 0;
	    var GL_ONE = 1;
	    var GL_FUNC_ADD = 0x8006;
	    var GL_LESS = 513;
	    var GL_FRAMEBUFFER$2 = 0x8D40;
	    var GL_COLOR_ATTACHMENT0$2 = 0x8CE0;
	    var blendFuncs = {
	      '0': 0,
	      '1': 1,
	      'zero': 0,
	      'one': 1,
	      'src color': 768,
	      'one minus src color': 769,
	      'src alpha': 770,
	      'one minus src alpha': 771,
	      'dst color': 774,
	      'one minus dst color': 775,
	      'dst alpha': 772,
	      'one minus dst alpha': 773,
	      'constant color': 32769,
	      'one minus constant color': 32770,
	      'constant alpha': 32771,
	      'one minus constant alpha': 32772,
	      'src alpha saturate': 776
	    };
	    var invalidBlendCombinations = ['constant color, constant alpha', 'one minus constant color, constant alpha', 'constant color, one minus constant alpha', 'one minus constant color, one minus constant alpha', 'constant alpha, constant color', 'constant alpha, one minus constant color', 'one minus constant alpha, constant color', 'one minus constant alpha, one minus constant color'];
	    var compareFuncs = {
	      'never': 512,
	      'less': 513,
	      '<': 513,
	      'equal': 514,
	      '=': 514,
	      '==': 514,
	      '===': 514,
	      'lequal': 515,
	      '<=': 515,
	      'greater': 516,
	      '>': 516,
	      'notequal': 517,
	      '!=': 517,
	      '!==': 517,
	      'gequal': 518,
	      '>=': 518,
	      'always': 519
	    };
	    var stencilOps = {
	      '0': 0,
	      'zero': 0,
	      'keep': 7680,
	      'replace': 7681,
	      'increment': 7682,
	      'decrement': 7683,
	      'increment wrap': 34055,
	      'decrement wrap': 34056,
	      'invert': 5386
	    };
	    var shaderType = {
	      'frag': GL_FRAGMENT_SHADER$1,
	      'vert': GL_VERTEX_SHADER$1
	    };
	    var orientationType = {
	      'cw': GL_CW,
	      'ccw': GL_CCW
	    };

	    function isBufferArgs(x) {
	      return Array.isArray(x) || isTypedArray(x) || isNDArrayLike(x);
	    }

	    function sortState(state) {
	      return state.sort(function (a, b) {
	        if (a === S_VIEWPORT) {
	          return -1;
	        } else if (b === S_VIEWPORT) {
	          return 1;
	        }

	        return a < b ? -1 : 1;
	      });
	    }

	    function Declaration(thisDep, contextDep, propDep, append) {
	      this.thisDep = thisDep;
	      this.contextDep = contextDep;
	      this.propDep = propDep;
	      this.append = append;
	    }

	    function isStatic(decl) {
	      return decl && !(decl.thisDep || decl.contextDep || decl.propDep);
	    }

	    function createStaticDecl(append) {
	      return new Declaration(false, false, false, append);
	    }

	    function createDynamicDecl(dyn, append) {
	      var type = dyn.type;

	      if (type === DYN_FUNC$1) {
	        var numArgs = dyn.data.length;
	        return new Declaration(true, numArgs >= 1, numArgs >= 2, append);
	      } else if (type === DYN_THUNK) {
	        var data = dyn.data;
	        return new Declaration(data.thisDep, data.contextDep, data.propDep, append);
	      } else {
	        return new Declaration(type === DYN_STATE$1, type === DYN_CONTEXT$1, type === DYN_PROP$1, append);
	      }
	    }

	    var SCOPE_DECL = new Declaration(false, false, false, function () {});

	    function reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config) {
	      var AttributeRecord = attributeState.Record;
	      var blendEquations = {
	        'add': 32774,
	        'subtract': 32778,
	        'reverse subtract': 32779
	      };

	      if (extensions.ext_blend_minmax) {
	        blendEquations.min = GL_MIN_EXT;
	        blendEquations.max = GL_MAX_EXT;
	      }

	      var extInstancing = extensions.angle_instanced_arrays;
	      var extDrawBuffers = extensions.webgl_draw_buffers;
	      var currentState = {
	        dirty: true,
	        profile: config.profile
	      };
	      var nextState = {};
	      var GL_STATE_NAMES = [];
	      var GL_FLAGS = {};
	      var GL_VARIABLES = {};

	      function propName(name) {
	        return name.replace('.', '_');
	      }

	      function stateFlag(sname, cap, init) {
	        var name = propName(sname);
	        GL_STATE_NAMES.push(sname);
	        nextState[name] = currentState[name] = !!init;
	        GL_FLAGS[name] = cap;
	      }

	      function stateVariable(sname, func, init) {
	        var name = propName(sname);
	        GL_STATE_NAMES.push(sname);

	        if (Array.isArray(init)) {
	          currentState[name] = init.slice();
	          nextState[name] = init.slice();
	        } else {
	          currentState[name] = nextState[name] = init;
	        }

	        GL_VARIABLES[name] = func;
	      }

	      stateFlag(S_DITHER, GL_DITHER);
	      stateFlag(S_BLEND_ENABLE, GL_BLEND);
	      stateVariable(S_BLEND_COLOR, 'blendColor', [0, 0, 0, 0]);
	      stateVariable(S_BLEND_EQUATION, 'blendEquationSeparate', [GL_FUNC_ADD, GL_FUNC_ADD]);
	      stateVariable(S_BLEND_FUNC, 'blendFuncSeparate', [GL_ONE, GL_ZERO, GL_ONE, GL_ZERO]);
	      stateFlag(S_DEPTH_ENABLE, GL_DEPTH_TEST, true);
	      stateVariable(S_DEPTH_FUNC, 'depthFunc', GL_LESS);
	      stateVariable(S_DEPTH_RANGE, 'depthRange', [0, 1]);
	      stateVariable(S_DEPTH_MASK, 'depthMask', true);
	      stateVariable(S_COLOR_MASK, S_COLOR_MASK, [true, true, true, true]);
	      stateFlag(S_CULL_ENABLE, GL_CULL_FACE);
	      stateVariable(S_CULL_FACE, 'cullFace', GL_BACK);
	      stateVariable(S_FRONT_FACE, S_FRONT_FACE, GL_CCW);
	      stateVariable(S_LINE_WIDTH, S_LINE_WIDTH, 1);
	      stateFlag(S_POLYGON_OFFSET_ENABLE, GL_POLYGON_OFFSET_FILL);
	      stateVariable(S_POLYGON_OFFSET_OFFSET, 'polygonOffset', [0, 0]);
	      stateFlag(S_SAMPLE_ALPHA, GL_SAMPLE_ALPHA_TO_COVERAGE);
	      stateFlag(S_SAMPLE_ENABLE, GL_SAMPLE_COVERAGE);
	      stateVariable(S_SAMPLE_COVERAGE, 'sampleCoverage', [1, false]);
	      stateFlag(S_STENCIL_ENABLE, GL_STENCIL_TEST);
	      stateVariable(S_STENCIL_MASK, 'stencilMask', -1);
	      stateVariable(S_STENCIL_FUNC, 'stencilFunc', [GL_ALWAYS, 0, -1]);
	      stateVariable(S_STENCIL_OPFRONT, 'stencilOpSeparate', [GL_FRONT, GL_KEEP, GL_KEEP, GL_KEEP]);
	      stateVariable(S_STENCIL_OPBACK, 'stencilOpSeparate', [GL_BACK, GL_KEEP, GL_KEEP, GL_KEEP]);
	      stateFlag(S_SCISSOR_ENABLE, GL_SCISSOR_TEST);
	      stateVariable(S_SCISSOR_BOX, 'scissor', [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);
	      stateVariable(S_VIEWPORT, S_VIEWPORT, [0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight]);
	      var sharedState = {
	        gl: gl,
	        context: contextState,
	        strings: stringStore,
	        next: nextState,
	        current: currentState,
	        draw: drawState,
	        elements: elementState,
	        buffer: bufferState,
	        shader: shaderState,
	        attributes: attributeState.state,
	        uniforms: uniformState,
	        framebuffer: framebufferState,
	        extensions: extensions,
	        timer: timer,
	        isBufferArgs: isBufferArgs
	      };
	      var sharedConstants = {
	        primTypes: primTypes,
	        compareFuncs: compareFuncs,
	        blendFuncs: blendFuncs,
	        blendEquations: blendEquations,
	        stencilOps: stencilOps,
	        glTypes: glTypes,
	        orientationType: orientationType
	      };
	      check$1.optional(function () {
	        sharedState.isArrayLike = isArrayLike;
	      });

	      if (extDrawBuffers) {
	        sharedConstants.backBuffer = [GL_BACK];
	        sharedConstants.drawBuffer = loop(limits.maxDrawbuffers, function (i) {
	          if (i === 0) {
	            return [0];
	          }

	          return loop(i, function (j) {
	            return GL_COLOR_ATTACHMENT0$2 + j;
	          });
	        });
	      }

	      var drawCallCounter = 0;

	      function createREGLEnvironment() {
	        var env = createEnvironment();
	        var link = env.link;
	        var global = env.global;
	        env.id = drawCallCounter++;
	        env.batchId = '0';
	        var SHARED = link(sharedState);
	        var shared = env.shared = {
	          props: 'a0'
	        };
	        Object.keys(sharedState).forEach(function (prop) {
	          shared[prop] = global.def(SHARED, '.', prop);
	        });
	        check$1.optional(function () {
	          env.CHECK = link(check$1);
	          env.commandStr = check$1.guessCommand();
	          env.command = link(env.commandStr);

	          env.assert = function (block, pred, message) {
	            block('if(!(', pred, '))', this.CHECK, '.commandRaise(', link(message), ',', this.command, ');');
	          };

	          sharedConstants.invalidBlendCombinations = invalidBlendCombinations;
	        });
	        var nextVars = env.next = {};
	        var currentVars = env.current = {};
	        Object.keys(GL_VARIABLES).forEach(function (variable) {
	          if (Array.isArray(currentState[variable])) {
	            nextVars[variable] = global.def(shared.next, '.', variable);
	            currentVars[variable] = global.def(shared.current, '.', variable);
	          }
	        });
	        var constants = env.constants = {};
	        Object.keys(sharedConstants).forEach(function (name) {
	          constants[name] = global.def(JSON.stringify(sharedConstants[name]));
	        });

	        env.invoke = function (block, x) {
	          switch (x.type) {
	            case DYN_FUNC$1:
	              var argList = ['this', shared.context, shared.props, env.batchId];
	              return block.def(link(x.data), '.call(', argList.slice(0, Math.max(x.data.length + 1, 4)), ')');

	            case DYN_PROP$1:
	              return block.def(shared.props, x.data);

	            case DYN_CONTEXT$1:
	              return block.def(shared.context, x.data);

	            case DYN_STATE$1:
	              return block.def('this', x.data);

	            case DYN_THUNK:
	              x.data.append(env, block);
	              return x.data.ref;
	          }
	        };

	        env.attribCache = {};
	        var scopeAttribs = {};

	        env.scopeAttrib = function (name) {
	          var id = stringStore.id(name);

	          if (id in scopeAttribs) {
	            return scopeAttribs[id];
	          }

	          var binding = attributeState.scope[id];

	          if (!binding) {
	            binding = attributeState.scope[id] = new AttributeRecord();
	          }

	          var result = scopeAttribs[id] = link(binding);
	          return result;
	        };

	        return env;
	      }

	      function parseProfile(options) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;
	        var profileEnable;

	        if (S_PROFILE in staticOptions) {
	          var value = !!staticOptions[S_PROFILE];
	          profileEnable = createStaticDecl(function (env, scope) {
	            return value;
	          });
	          profileEnable.enable = value;
	        } else if (S_PROFILE in dynamicOptions) {
	          var dyn = dynamicOptions[S_PROFILE];
	          profileEnable = createDynamicDecl(dyn, function (env, scope) {
	            return env.invoke(scope, dyn);
	          });
	        }

	        return profileEnable;
	      }

	      function parseFramebuffer(options, env) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;

	        if (S_FRAMEBUFFER in staticOptions) {
	          var framebuffer = staticOptions[S_FRAMEBUFFER];

	          if (framebuffer) {
	            framebuffer = framebufferState.getFramebuffer(framebuffer);
	            check$1.command(framebuffer, 'invalid framebuffer object');
	            return createStaticDecl(function (env, block) {
	              var FRAMEBUFFER = env.link(framebuffer);
	              var shared = env.shared;
	              block.set(shared.framebuffer, '.next', FRAMEBUFFER);
	              var CONTEXT = shared.context;
	              block.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '.width');
	              block.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '.height');
	              return FRAMEBUFFER;
	            });
	          } else {
	            return createStaticDecl(function (env, scope) {
	              var shared = env.shared;
	              scope.set(shared.framebuffer, '.next', 'null');
	              var CONTEXT = shared.context;
	              scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
	              scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
	              return 'null';
	            });
	          }
	        } else if (S_FRAMEBUFFER in dynamicOptions) {
	          var dyn = dynamicOptions[S_FRAMEBUFFER];
	          return createDynamicDecl(dyn, function (env, scope) {
	            var FRAMEBUFFER_FUNC = env.invoke(scope, dyn);
	            var shared = env.shared;
	            var FRAMEBUFFER_STATE = shared.framebuffer;
	            var FRAMEBUFFER = scope.def(FRAMEBUFFER_STATE, '.getFramebuffer(', FRAMEBUFFER_FUNC, ')');
	            check$1.optional(function () {
	              env.assert(scope, '!' + FRAMEBUFFER_FUNC + '||' + FRAMEBUFFER, 'invalid framebuffer object');
	            });
	            scope.set(FRAMEBUFFER_STATE, '.next', FRAMEBUFFER);
	            var CONTEXT = shared.context;
	            scope.set(CONTEXT, '.' + S_FRAMEBUFFER_WIDTH, FRAMEBUFFER + '?' + FRAMEBUFFER + '.width:' + CONTEXT + '.' + S_DRAWINGBUFFER_WIDTH);
	            scope.set(CONTEXT, '.' + S_FRAMEBUFFER_HEIGHT, FRAMEBUFFER + '?' + FRAMEBUFFER + '.height:' + CONTEXT + '.' + S_DRAWINGBUFFER_HEIGHT);
	            return FRAMEBUFFER;
	          });
	        } else {
	          return null;
	        }
	      }

	      function parseViewportScissor(options, framebuffer, env) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;

	        function parseBox(param) {
	          if (param in staticOptions) {
	            var box = staticOptions[param];
	            check$1.commandType(box, 'object', 'invalid ' + param, env.commandStr);
	            var isStatic = true;
	            var x = box.x | 0;
	            var y = box.y | 0;
	            var w, h;

	            if ('width' in box) {
	              w = box.width | 0;
	              check$1.command(w >= 0, 'invalid ' + param, env.commandStr);
	            } else {
	              isStatic = false;
	            }

	            if ('height' in box) {
	              h = box.height | 0;
	              check$1.command(h >= 0, 'invalid ' + param, env.commandStr);
	            } else {
	              isStatic = false;
	            }

	            return new Declaration(!isStatic && framebuffer && framebuffer.thisDep, !isStatic && framebuffer && framebuffer.contextDep, !isStatic && framebuffer && framebuffer.propDep, function (env, scope) {
	              var CONTEXT = env.shared.context;
	              var BOX_W = w;

	              if (!('width' in box)) {
	                BOX_W = scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', x);
	              }

	              var BOX_H = h;

	              if (!('height' in box)) {
	                BOX_H = scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', y);
	              }

	              return [x, y, BOX_W, BOX_H];
	            });
	          } else if (param in dynamicOptions) {
	            var dynBox = dynamicOptions[param];
	            var result = createDynamicDecl(dynBox, function (env, scope) {
	              var BOX = env.invoke(scope, dynBox);
	              check$1.optional(function () {
	                env.assert(scope, BOX + '&&typeof ' + BOX + '==="object"', 'invalid ' + param);
	              });
	              var CONTEXT = env.shared.context;
	              var BOX_X = scope.def(BOX, '.x|0');
	              var BOX_Y = scope.def(BOX, '.y|0');
	              var BOX_W = scope.def('"width" in ', BOX, '?', BOX, '.width|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_WIDTH, '-', BOX_X, ')');
	              var BOX_H = scope.def('"height" in ', BOX, '?', BOX, '.height|0:', '(', CONTEXT, '.', S_FRAMEBUFFER_HEIGHT, '-', BOX_Y, ')');
	              check$1.optional(function () {
	                env.assert(scope, BOX_W + '>=0&&' + BOX_H + '>=0', 'invalid ' + param);
	              });
	              return [BOX_X, BOX_Y, BOX_W, BOX_H];
	            });

	            if (framebuffer) {
	              result.thisDep = result.thisDep || framebuffer.thisDep;
	              result.contextDep = result.contextDep || framebuffer.contextDep;
	              result.propDep = result.propDep || framebuffer.propDep;
	            }

	            return result;
	          } else if (framebuffer) {
	            return new Declaration(framebuffer.thisDep, framebuffer.contextDep, framebuffer.propDep, function (env, scope) {
	              var CONTEXT = env.shared.context;
	              return [0, 0, scope.def(CONTEXT, '.', S_FRAMEBUFFER_WIDTH), scope.def(CONTEXT, '.', S_FRAMEBUFFER_HEIGHT)];
	            });
	          } else {
	            return null;
	          }
	        }

	        var viewport = parseBox(S_VIEWPORT);

	        if (viewport) {
	          var prevViewport = viewport;
	          viewport = new Declaration(viewport.thisDep, viewport.contextDep, viewport.propDep, function (env, scope) {
	            var VIEWPORT = prevViewport.append(env, scope);
	            var CONTEXT = env.shared.context;
	            scope.set(CONTEXT, '.' + S_VIEWPORT_WIDTH, VIEWPORT[2]);
	            scope.set(CONTEXT, '.' + S_VIEWPORT_HEIGHT, VIEWPORT[3]);
	            return VIEWPORT;
	          });
	        }

	        return {
	          viewport: viewport,
	          scissor_box: parseBox(S_SCISSOR_BOX)
	        };
	      }

	      function parseProgram(options) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;

	        function parseShader(name) {
	          if (name in staticOptions) {
	            var id = stringStore.id(staticOptions[name]);
	            check$1.optional(function () {
	              shaderState.shader(shaderType[name], id, check$1.guessCommand());
	            });
	            var result = createStaticDecl(function () {
	              return id;
	            });
	            result.id = id;
	            return result;
	          } else if (name in dynamicOptions) {
	            var dyn = dynamicOptions[name];
	            return createDynamicDecl(dyn, function (env, scope) {
	              var str = env.invoke(scope, dyn);
	              var id = scope.def(env.shared.strings, '.id(', str, ')');
	              check$1.optional(function () {
	                scope(env.shared.shader, '.shader(', shaderType[name], ',', id, ',', env.command, ');');
	              });
	              return id;
	            });
	          }

	          return null;
	        }

	        var frag = parseShader(S_FRAG);
	        var vert = parseShader(S_VERT);
	        var program = null;
	        var progVar;

	        if (isStatic(frag) && isStatic(vert)) {
	          program = shaderState.program(vert.id, frag.id);
	          progVar = createStaticDecl(function (env, scope) {
	            return env.link(program);
	          });
	        } else {
	          progVar = new Declaration(frag && frag.thisDep || vert && vert.thisDep, frag && frag.contextDep || vert && vert.contextDep, frag && frag.propDep || vert && vert.propDep, function (env, scope) {
	            var SHADER_STATE = env.shared.shader;
	            var fragId;

	            if (frag) {
	              fragId = frag.append(env, scope);
	            } else {
	              fragId = scope.def(SHADER_STATE, '.', S_FRAG);
	            }

	            var vertId;

	            if (vert) {
	              vertId = vert.append(env, scope);
	            } else {
	              vertId = scope.def(SHADER_STATE, '.', S_VERT);
	            }

	            var progDef = SHADER_STATE + '.program(' + vertId + ',' + fragId;
	            check$1.optional(function () {
	              progDef += ',' + env.command;
	            });
	            return scope.def(progDef + ')');
	          });
	        }

	        return {
	          frag: frag,
	          vert: vert,
	          progVar: progVar,
	          program: program
	        };
	      }

	      function parseDraw(options, env) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;

	        function parseElements() {
	          if (S_ELEMENTS in staticOptions) {
	            var elements = staticOptions[S_ELEMENTS];

	            if (isBufferArgs(elements)) {
	              elements = elementState.getElements(elementState.create(elements, true));
	            } else if (elements) {
	              elements = elementState.getElements(elements);
	              check$1.command(elements, 'invalid elements', env.commandStr);
	            }

	            var result = createStaticDecl(function (env, scope) {
	              if (elements) {
	                var result = env.link(elements);
	                env.ELEMENTS = result;
	                return result;
	              }

	              env.ELEMENTS = null;
	              return null;
	            });
	            result.value = elements;
	            return result;
	          } else if (S_ELEMENTS in dynamicOptions) {
	            var dyn = dynamicOptions[S_ELEMENTS];
	            return createDynamicDecl(dyn, function (env, scope) {
	              var shared = env.shared;
	              var IS_BUFFER_ARGS = shared.isBufferArgs;
	              var ELEMENT_STATE = shared.elements;
	              var elementDefn = env.invoke(scope, dyn);
	              var elements = scope.def('null');
	              var elementStream = scope.def(IS_BUFFER_ARGS, '(', elementDefn, ')');
	              var ifte = env.cond(elementStream).then(elements, '=', ELEMENT_STATE, '.createStream(', elementDefn, ');').else(elements, '=', ELEMENT_STATE, '.getElements(', elementDefn, ');');
	              check$1.optional(function () {
	                env.assert(ifte.else, '!' + elementDefn + '||' + elements, 'invalid elements');
	              });
	              scope.entry(ifte);
	              scope.exit(env.cond(elementStream).then(ELEMENT_STATE, '.destroyStream(', elements, ');'));
	              env.ELEMENTS = elements;
	              return elements;
	            });
	          }

	          return null;
	        }

	        var elements = parseElements();

	        function parsePrimitive() {
	          if (S_PRIMITIVE in staticOptions) {
	            var primitive = staticOptions[S_PRIMITIVE];
	            check$1.commandParameter(primitive, primTypes, 'invalid primitve', env.commandStr);
	            return createStaticDecl(function (env, scope) {
	              return primTypes[primitive];
	            });
	          } else if (S_PRIMITIVE in dynamicOptions) {
	            var dynPrimitive = dynamicOptions[S_PRIMITIVE];
	            return createDynamicDecl(dynPrimitive, function (env, scope) {
	              var PRIM_TYPES = env.constants.primTypes;
	              var prim = env.invoke(scope, dynPrimitive);
	              check$1.optional(function () {
	                env.assert(scope, prim + ' in ' + PRIM_TYPES, 'invalid primitive, must be one of ' + Object.keys(primTypes));
	              });
	              return scope.def(PRIM_TYPES, '[', prim, ']');
	            });
	          } else if (elements) {
	            if (isStatic(elements)) {
	              if (elements.value) {
	                return createStaticDecl(function (env, scope) {
	                  return scope.def(env.ELEMENTS, '.primType');
	                });
	              } else {
	                return createStaticDecl(function () {
	                  return GL_TRIANGLES$1;
	                });
	              }
	            } else {
	              return new Declaration(elements.thisDep, elements.contextDep, elements.propDep, function (env, scope) {
	                var elements = env.ELEMENTS;
	                return scope.def(elements, '?', elements, '.primType:', GL_TRIANGLES$1);
	              });
	            }
	          }

	          return null;
	        }

	        function parseParam(param, isOffset) {
	          if (param in staticOptions) {
	            var value = staticOptions[param] | 0;
	            check$1.command(!isOffset || value >= 0, 'invalid ' + param, env.commandStr);
	            return createStaticDecl(function (env, scope) {
	              if (isOffset) {
	                env.OFFSET = value;
	              }

	              return value;
	            });
	          } else if (param in dynamicOptions) {
	            var dynValue = dynamicOptions[param];
	            return createDynamicDecl(dynValue, function (env, scope) {
	              var result = env.invoke(scope, dynValue);

	              if (isOffset) {
	                env.OFFSET = result;
	                check$1.optional(function () {
	                  env.assert(scope, result + '>=0', 'invalid ' + param);
	                });
	              }

	              return result;
	            });
	          } else if (isOffset && elements) {
	            return createStaticDecl(function (env, scope) {
	              env.OFFSET = '0';
	              return 0;
	            });
	          }

	          return null;
	        }

	        var OFFSET = parseParam(S_OFFSET, true);

	        function parseVertCount() {
	          if (S_COUNT in staticOptions) {
	            var count = staticOptions[S_COUNT] | 0;
	            check$1.command(typeof count === 'number' && count >= 0, 'invalid vertex count', env.commandStr);
	            return createStaticDecl(function () {
	              return count;
	            });
	          } else if (S_COUNT in dynamicOptions) {
	            var dynCount = dynamicOptions[S_COUNT];
	            return createDynamicDecl(dynCount, function (env, scope) {
	              var result = env.invoke(scope, dynCount);
	              check$1.optional(function () {
	                env.assert(scope, 'typeof ' + result + '==="number"&&' + result + '>=0&&' + result + '===(' + result + '|0)', 'invalid vertex count');
	              });
	              return result;
	            });
	          } else if (elements) {
	            if (isStatic(elements)) {
	              if (elements) {
	                if (OFFSET) {
	                  return new Declaration(OFFSET.thisDep, OFFSET.contextDep, OFFSET.propDep, function (env, scope) {
	                    var result = scope.def(env.ELEMENTS, '.vertCount-', env.OFFSET);
	                    check$1.optional(function () {
	                      env.assert(scope, result + '>=0', 'invalid vertex offset/element buffer too small');
	                    });
	                    return result;
	                  });
	                } else {
	                  return createStaticDecl(function (env, scope) {
	                    return scope.def(env.ELEMENTS, '.vertCount');
	                  });
	                }
	              } else {
	                var result = createStaticDecl(function () {
	                  return -1;
	                });
	                check$1.optional(function () {
	                  result.MISSING = true;
	                });
	                return result;
	              }
	            } else {
	              var variable = new Declaration(elements.thisDep || OFFSET.thisDep, elements.contextDep || OFFSET.contextDep, elements.propDep || OFFSET.propDep, function (env, scope) {
	                var elements = env.ELEMENTS;

	                if (env.OFFSET) {
	                  return scope.def(elements, '?', elements, '.vertCount-', env.OFFSET, ':-1');
	                }

	                return scope.def(elements, '?', elements, '.vertCount:-1');
	              });
	              check$1.optional(function () {
	                variable.DYNAMIC = true;
	              });
	              return variable;
	            }
	          }

	          return null;
	        }

	        return {
	          elements: elements,
	          primitive: parsePrimitive(),
	          count: parseVertCount(),
	          instances: parseParam(S_INSTANCES, false),
	          offset: OFFSET
	        };
	      }

	      function parseGLState(options, env) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;
	        var STATE = {};
	        GL_STATE_NAMES.forEach(function (prop) {
	          var param = propName(prop);

	          function parseParam(parseStatic, parseDynamic) {
	            if (prop in staticOptions) {
	              var value = parseStatic(staticOptions[prop]);
	              STATE[param] = createStaticDecl(function () {
	                return value;
	              });
	            } else if (prop in dynamicOptions) {
	              var dyn = dynamicOptions[prop];
	              STATE[param] = createDynamicDecl(dyn, function (env, scope) {
	                return parseDynamic(env, scope, env.invoke(scope, dyn));
	              });
	            }
	          }

	          switch (prop) {
	            case S_CULL_ENABLE:
	            case S_BLEND_ENABLE:
	            case S_DITHER:
	            case S_STENCIL_ENABLE:
	            case S_DEPTH_ENABLE:
	            case S_SCISSOR_ENABLE:
	            case S_POLYGON_OFFSET_ENABLE:
	            case S_SAMPLE_ALPHA:
	            case S_SAMPLE_ENABLE:
	            case S_DEPTH_MASK:
	              return parseParam(function (value) {
	                check$1.commandType(value, 'boolean', prop, env.commandStr);
	                return value;
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, 'typeof ' + value + '==="boolean"', 'invalid flag ' + prop, env.commandStr);
	                });
	                return value;
	              });

	            case S_DEPTH_FUNC:
	              return parseParam(function (value) {
	                check$1.commandParameter(value, compareFuncs, 'invalid ' + prop, env.commandStr);
	                return compareFuncs[value];
	              }, function (env, scope, value) {
	                var COMPARE_FUNCS = env.constants.compareFuncs;
	                check$1.optional(function () {
	                  env.assert(scope, value + ' in ' + COMPARE_FUNCS, 'invalid ' + prop + ', must be one of ' + Object.keys(compareFuncs));
	                });
	                return scope.def(COMPARE_FUNCS, '[', value, ']');
	              });

	            case S_DEPTH_RANGE:
	              return parseParam(function (value) {
	                check$1.command(isArrayLike(value) && value.length === 2 && typeof value[0] === 'number' && typeof value[1] === 'number' && value[0] <= value[1], 'depth range is 2d array', env.commandStr);
	                return value;
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===2&&' + 'typeof ' + value + '[0]==="number"&&' + 'typeof ' + value + '[1]==="number"&&' + value + '[0]<=' + value + '[1]', 'depth range must be a 2d array');
	                });
	                var Z_NEAR = scope.def('+', value, '[0]');
	                var Z_FAR = scope.def('+', value, '[1]');
	                return [Z_NEAR, Z_FAR];
	              });

	            case S_BLEND_FUNC:
	              return parseParam(function (value) {
	                check$1.commandType(value, 'object', 'blend.func', env.commandStr);
	                var srcRGB = 'srcRGB' in value ? value.srcRGB : value.src;
	                var srcAlpha = 'srcAlpha' in value ? value.srcAlpha : value.src;
	                var dstRGB = 'dstRGB' in value ? value.dstRGB : value.dst;
	                var dstAlpha = 'dstAlpha' in value ? value.dstAlpha : value.dst;
	                check$1.commandParameter(srcRGB, blendFuncs, param + '.srcRGB', env.commandStr);
	                check$1.commandParameter(srcAlpha, blendFuncs, param + '.srcAlpha', env.commandStr);
	                check$1.commandParameter(dstRGB, blendFuncs, param + '.dstRGB', env.commandStr);
	                check$1.commandParameter(dstAlpha, blendFuncs, param + '.dstAlpha', env.commandStr);
	                check$1.command(invalidBlendCombinations.indexOf(srcRGB + ', ' + dstRGB) === -1, 'unallowed blending combination (srcRGB, dstRGB) = (' + srcRGB + ', ' + dstRGB + ')', env.commandStr);
	                return [blendFuncs[srcRGB], blendFuncs[dstRGB], blendFuncs[srcAlpha], blendFuncs[dstAlpha]];
	              }, function (env, scope, value) {
	                var BLEND_FUNCS = env.constants.blendFuncs;
	                check$1.optional(function () {
	                  env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid blend func, must be an object');
	                });

	                function read(prefix, suffix) {
	                  var func = scope.def('"', prefix, suffix, '" in ', value, '?', value, '.', prefix, suffix, ':', value, '.', prefix);
	                  check$1.optional(function () {
	                    env.assert(scope, func + ' in ' + BLEND_FUNCS, 'invalid ' + prop + '.' + prefix + suffix + ', must be one of ' + Object.keys(blendFuncs));
	                  });
	                  return func;
	                }

	                var srcRGB = read('src', 'RGB');
	                var dstRGB = read('dst', 'RGB');
	                check$1.optional(function () {
	                  var INVALID_BLEND_COMBINATIONS = env.constants.invalidBlendCombinations;
	                  env.assert(scope, INVALID_BLEND_COMBINATIONS + '.indexOf(' + srcRGB + '+", "+' + dstRGB + ') === -1 ', 'unallowed blending combination for (srcRGB, dstRGB)');
	                });
	                var SRC_RGB = scope.def(BLEND_FUNCS, '[', srcRGB, ']');
	                var SRC_ALPHA = scope.def(BLEND_FUNCS, '[', read('src', 'Alpha'), ']');
	                var DST_RGB = scope.def(BLEND_FUNCS, '[', dstRGB, ']');
	                var DST_ALPHA = scope.def(BLEND_FUNCS, '[', read('dst', 'Alpha'), ']');
	                return [SRC_RGB, DST_RGB, SRC_ALPHA, DST_ALPHA];
	              });

	            case S_BLEND_EQUATION:
	              return parseParam(function (value) {
	                if (typeof value === 'string') {
	                  check$1.commandParameter(value, blendEquations, 'invalid ' + prop, env.commandStr);
	                  return [blendEquations[value], blendEquations[value]];
	                } else if (typeof value === 'object') {
	                  check$1.commandParameter(value.rgb, blendEquations, prop + '.rgb', env.commandStr);
	                  check$1.commandParameter(value.alpha, blendEquations, prop + '.alpha', env.commandStr);
	                  return [blendEquations[value.rgb], blendEquations[value.alpha]];
	                } else {
	                  check$1.commandRaise('invalid blend.equation', env.commandStr);
	                }
	              }, function (env, scope, value) {
	                var BLEND_EQUATIONS = env.constants.blendEquations;
	                var RGB = scope.def();
	                var ALPHA = scope.def();
	                var ifte = env.cond('typeof ', value, '==="string"');
	                check$1.optional(function () {
	                  function checkProp(block, name, value) {
	                    env.assert(block, value + ' in ' + BLEND_EQUATIONS, 'invalid ' + name + ', must be one of ' + Object.keys(blendEquations));
	                  }

	                  checkProp(ifte.then, prop, value);
	                  env.assert(ifte.else, value + '&&typeof ' + value + '==="object"', 'invalid ' + prop);
	                  checkProp(ifte.else, prop + '.rgb', value + '.rgb');
	                  checkProp(ifte.else, prop + '.alpha', value + '.alpha');
	                });
	                ifte.then(RGB, '=', ALPHA, '=', BLEND_EQUATIONS, '[', value, '];');
	                ifte.else(RGB, '=', BLEND_EQUATIONS, '[', value, '.rgb];', ALPHA, '=', BLEND_EQUATIONS, '[', value, '.alpha];');
	                scope(ifte);
	                return [RGB, ALPHA];
	              });

	            case S_BLEND_COLOR:
	              return parseParam(function (value) {
	                check$1.command(isArrayLike(value) && value.length === 4, 'blend.color must be a 4d array', env.commandStr);
	                return loop(4, function (i) {
	                  return +value[i];
	                });
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'blend.color must be a 4d array');
	                });
	                return loop(4, function (i) {
	                  return scope.def('+', value, '[', i, ']');
	                });
	              });

	            case S_STENCIL_MASK:
	              return parseParam(function (value) {
	                check$1.commandType(value, 'number', param, env.commandStr);
	                return value | 0;
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, 'typeof ' + value + '==="number"', 'invalid stencil.mask');
	                });
	                return scope.def(value, '|0');
	              });

	            case S_STENCIL_FUNC:
	              return parseParam(function (value) {
	                check$1.commandType(value, 'object', param, env.commandStr);
	                var cmp = value.cmp || 'keep';
	                var ref = value.ref || 0;
	                var mask = 'mask' in value ? value.mask : -1;
	                check$1.commandParameter(cmp, compareFuncs, prop + '.cmp', env.commandStr);
	                check$1.commandType(ref, 'number', prop + '.ref', env.commandStr);
	                check$1.commandType(mask, 'number', prop + '.mask', env.commandStr);
	                return [compareFuncs[cmp], ref, mask];
	              }, function (env, scope, value) {
	                var COMPARE_FUNCS = env.constants.compareFuncs;
	                check$1.optional(function () {
	                  function assert$$1() {
	                    env.assert(scope, Array.prototype.join.call(arguments, ''), 'invalid stencil.func');
	                  }

	                  assert$$1(value + '&&typeof ', value, '==="object"');
	                  assert$$1('!("cmp" in ', value, ')||(', value, '.cmp in ', COMPARE_FUNCS, ')');
	                });
	                var cmp = scope.def('"cmp" in ', value, '?', COMPARE_FUNCS, '[', value, '.cmp]', ':', GL_KEEP);
	                var ref = scope.def(value, '.ref|0');
	                var mask = scope.def('"mask" in ', value, '?', value, '.mask|0:-1');
	                return [cmp, ref, mask];
	              });

	            case S_STENCIL_OPFRONT:
	            case S_STENCIL_OPBACK:
	              return parseParam(function (value) {
	                check$1.commandType(value, 'object', param, env.commandStr);
	                var fail = value.fail || 'keep';
	                var zfail = value.zfail || 'keep';
	                var zpass = value.zpass || 'keep';
	                check$1.commandParameter(fail, stencilOps, prop + '.fail', env.commandStr);
	                check$1.commandParameter(zfail, stencilOps, prop + '.zfail', env.commandStr);
	                check$1.commandParameter(zpass, stencilOps, prop + '.zpass', env.commandStr);
	                return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, stencilOps[fail], stencilOps[zfail], stencilOps[zpass]];
	              }, function (env, scope, value) {
	                var STENCIL_OPS = env.constants.stencilOps;
	                check$1.optional(function () {
	                  env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid ' + prop);
	                });

	                function read(name) {
	                  check$1.optional(function () {
	                    env.assert(scope, '!("' + name + '" in ' + value + ')||' + '(' + value + '.' + name + ' in ' + STENCIL_OPS + ')', 'invalid ' + prop + '.' + name + ', must be one of ' + Object.keys(stencilOps));
	                  });
	                  return scope.def('"', name, '" in ', value, '?', STENCIL_OPS, '[', value, '.', name, ']:', GL_KEEP);
	                }

	                return [prop === S_STENCIL_OPBACK ? GL_BACK : GL_FRONT, read('fail'), read('zfail'), read('zpass')];
	              });

	            case S_POLYGON_OFFSET_OFFSET:
	              return parseParam(function (value) {
	                check$1.commandType(value, 'object', param, env.commandStr);
	                var factor = value.factor | 0;
	                var units = value.units | 0;
	                check$1.commandType(factor, 'number', param + '.factor', env.commandStr);
	                check$1.commandType(units, 'number', param + '.units', env.commandStr);
	                return [factor, units];
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid ' + prop);
	                });
	                var FACTOR = scope.def(value, '.factor|0');
	                var UNITS = scope.def(value, '.units|0');
	                return [FACTOR, UNITS];
	              });

	            case S_CULL_FACE:
	              return parseParam(function (value) {
	                var face = 0;

	                if (value === 'front') {
	                  face = GL_FRONT;
	                } else if (value === 'back') {
	                  face = GL_BACK;
	                }

	                check$1.command(!!face, param, env.commandStr);
	                return face;
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, value + '==="front"||' + value + '==="back"', 'invalid cull.face');
	                });
	                return scope.def(value, '==="front"?', GL_FRONT, ':', GL_BACK);
	              });

	            case S_LINE_WIDTH:
	              return parseParam(function (value) {
	                check$1.command(typeof value === 'number' && value >= limits.lineWidthDims[0] && value <= limits.lineWidthDims[1], 'invalid line width, must be a positive number between ' + limits.lineWidthDims[0] + ' and ' + limits.lineWidthDims[1], env.commandStr);
	                return value;
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, 'typeof ' + value + '==="number"&&' + value + '>=' + limits.lineWidthDims[0] + '&&' + value + '<=' + limits.lineWidthDims[1], 'invalid line width');
	                });
	                return value;
	              });

	            case S_FRONT_FACE:
	              return parseParam(function (value) {
	                check$1.commandParameter(value, orientationType, param, env.commandStr);
	                return orientationType[value];
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, value + '==="cw"||' + value + '==="ccw"', 'invalid frontFace, must be one of cw,ccw');
	                });
	                return scope.def(value + '==="cw"?' + GL_CW + ':' + GL_CCW);
	              });

	            case S_COLOR_MASK:
	              return parseParam(function (value) {
	                check$1.command(isArrayLike(value) && value.length === 4, 'color.mask must be length 4 array', env.commandStr);
	                return value.map(function (v) {
	                  return !!v;
	                });
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, env.shared.isArrayLike + '(' + value + ')&&' + value + '.length===4', 'invalid color.mask');
	                });
	                return loop(4, function (i) {
	                  return '!!' + value + '[' + i + ']';
	                });
	              });

	            case S_SAMPLE_COVERAGE:
	              return parseParam(function (value) {
	                check$1.command(typeof value === 'object' && value, param, env.commandStr);
	                var sampleValue = 'value' in value ? value.value : 1;
	                var sampleInvert = !!value.invert;
	                check$1.command(typeof sampleValue === 'number' && sampleValue >= 0 && sampleValue <= 1, 'sample.coverage.value must be a number between 0 and 1', env.commandStr);
	                return [sampleValue, sampleInvert];
	              }, function (env, scope, value) {
	                check$1.optional(function () {
	                  env.assert(scope, value + '&&typeof ' + value + '==="object"', 'invalid sample.coverage');
	                });
	                var VALUE = scope.def('"value" in ', value, '?+', value, '.value:1');
	                var INVERT = scope.def('!!', value, '.invert');
	                return [VALUE, INVERT];
	              });
	          }
	        });
	        return STATE;
	      }

	      function parseUniforms(uniforms, env) {
	        var staticUniforms = uniforms.static;
	        var dynamicUniforms = uniforms.dynamic;
	        var UNIFORMS = {};
	        Object.keys(staticUniforms).forEach(function (name) {
	          var value = staticUniforms[name];
	          var result;

	          if (typeof value === 'number' || typeof value === 'boolean') {
	            result = createStaticDecl(function () {
	              return value;
	            });
	          } else if (typeof value === 'function') {
	            var reglType = value._reglType;

	            if (reglType === 'texture2d' || reglType === 'textureCube') {
	              result = createStaticDecl(function (env) {
	                return env.link(value);
	              });
	            } else if (reglType === 'framebuffer' || reglType === 'framebufferCube') {
	              check$1.command(value.color.length > 0, 'missing color attachment for framebuffer sent to uniform "' + name + '"', env.commandStr);
	              result = createStaticDecl(function (env) {
	                return env.link(value.color[0]);
	              });
	            } else {
	              check$1.commandRaise('invalid data for uniform "' + name + '"', env.commandStr);
	            }
	          } else if (isArrayLike(value)) {
	            result = createStaticDecl(function (env) {
	              var ITEM = env.global.def('[', loop(value.length, function (i) {
	                check$1.command(typeof value[i] === 'number' || typeof value[i] === 'boolean', 'invalid uniform ' + name, env.commandStr);
	                return value[i];
	              }), ']');
	              return ITEM;
	            });
	          } else {
	            check$1.commandRaise('invalid or missing data for uniform "' + name + '"', env.commandStr);
	          }

	          result.value = value;
	          UNIFORMS[name] = result;
	        });
	        Object.keys(dynamicUniforms).forEach(function (key) {
	          var dyn = dynamicUniforms[key];
	          UNIFORMS[key] = createDynamicDecl(dyn, function (env, scope) {
	            return env.invoke(scope, dyn);
	          });
	        });
	        return UNIFORMS;
	      }

	      function parseAttributes(attributes, env) {
	        var staticAttributes = attributes.static;
	        var dynamicAttributes = attributes.dynamic;
	        var attributeDefs = {};
	        Object.keys(staticAttributes).forEach(function (attribute) {
	          var value = staticAttributes[attribute];
	          var id = stringStore.id(attribute);
	          var record = new AttributeRecord();

	          if (isBufferArgs(value)) {
	            record.state = ATTRIB_STATE_POINTER;
	            record.buffer = bufferState.getBuffer(bufferState.create(value, GL_ARRAY_BUFFER$1, false, true));
	            record.type = 0;
	          } else {
	            var buffer = bufferState.getBuffer(value);

	            if (buffer) {
	              record.state = ATTRIB_STATE_POINTER;
	              record.buffer = buffer;
	              record.type = 0;
	            } else {
	              check$1.command(typeof value === 'object' && value, 'invalid data for attribute ' + attribute, env.commandStr);

	              if ('constant' in value) {
	                var constant = value.constant;
	                record.buffer = 'null';
	                record.state = ATTRIB_STATE_CONSTANT;

	                if (typeof constant === 'number') {
	                  record.x = constant;
	                } else {
	                  check$1.command(isArrayLike(constant) && constant.length > 0 && constant.length <= 4, 'invalid constant for attribute ' + attribute, env.commandStr);
	                  CUTE_COMPONENTS.forEach(function (c, i) {
	                    if (i < constant.length) {
	                      record[c] = constant[i];
	                    }
	                  });
	                }
	              } else {
	                if (isBufferArgs(value.buffer)) {
	                  buffer = bufferState.getBuffer(bufferState.create(value.buffer, GL_ARRAY_BUFFER$1, false, true));
	                } else {
	                  buffer = bufferState.getBuffer(value.buffer);
	                }

	                check$1.command(!!buffer, 'missing buffer for attribute "' + attribute + '"', env.commandStr);
	                var offset = value.offset | 0;
	                check$1.command(offset >= 0, 'invalid offset for attribute "' + attribute + '"', env.commandStr);
	                var stride = value.stride | 0;
	                check$1.command(stride >= 0 && stride < 256, 'invalid stride for attribute "' + attribute + '", must be integer betweeen [0, 255]', env.commandStr);
	                var size = value.size | 0;
	                check$1.command(!('size' in value) || size > 0 && size <= 4, 'invalid size for attribute "' + attribute + '", must be 1,2,3,4', env.commandStr);
	                var normalized = !!value.normalized;
	                var type = 0;

	                if ('type' in value) {
	                  check$1.commandParameter(value.type, glTypes, 'invalid type for attribute ' + attribute, env.commandStr);
	                  type = glTypes[value.type];
	                }

	                var divisor = value.divisor | 0;

	                if ('divisor' in value) {
	                  check$1.command(divisor === 0 || extInstancing, 'cannot specify divisor for attribute "' + attribute + '", instancing not supported', env.commandStr);
	                  check$1.command(divisor >= 0, 'invalid divisor for attribute "' + attribute + '"', env.commandStr);
	                }

	                check$1.optional(function () {
	                  var command = env.commandStr;
	                  var VALID_KEYS = ['buffer', 'offset', 'divisor', 'normalized', 'type', 'size', 'stride'];
	                  Object.keys(value).forEach(function (prop) {
	                    check$1.command(VALID_KEYS.indexOf(prop) >= 0, 'unknown parameter "' + prop + '" for attribute pointer "' + attribute + '" (valid parameters are ' + VALID_KEYS + ')', command);
	                  });
	                });
	                record.buffer = buffer;
	                record.state = ATTRIB_STATE_POINTER;
	                record.size = size;
	                record.normalized = normalized;
	                record.type = type || buffer.dtype;
	                record.offset = offset;
	                record.stride = stride;
	                record.divisor = divisor;
	              }
	            }
	          }

	          attributeDefs[attribute] = createStaticDecl(function (env, scope) {
	            var cache = env.attribCache;

	            if (id in cache) {
	              return cache[id];
	            }

	            var result = {
	              isStream: false
	            };
	            Object.keys(record).forEach(function (key) {
	              result[key] = record[key];
	            });

	            if (record.buffer) {
	              result.buffer = env.link(record.buffer);
	              result.type = result.type || result.buffer + '.dtype';
	            }

	            cache[id] = result;
	            return result;
	          });
	        });
	        Object.keys(dynamicAttributes).forEach(function (attribute) {
	          var dyn = dynamicAttributes[attribute];

	          function appendAttributeCode(env, block) {
	            var VALUE = env.invoke(block, dyn);
	            var shared = env.shared;
	            var constants = env.constants;
	            var IS_BUFFER_ARGS = shared.isBufferArgs;
	            var BUFFER_STATE = shared.buffer;
	            check$1.optional(function () {
	              env.assert(block, VALUE + '&&(typeof ' + VALUE + '==="object"||typeof ' + VALUE + '==="function")&&(' + IS_BUFFER_ARGS + '(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + ')||' + BUFFER_STATE + '.getBuffer(' + VALUE + '.buffer)||' + IS_BUFFER_ARGS + '(' + VALUE + '.buffer)||' + '("constant" in ' + VALUE + '&&(typeof ' + VALUE + '.constant==="number"||' + shared.isArrayLike + '(' + VALUE + '.constant))))', 'invalid dynamic attribute "' + attribute + '"');
	            });
	            var result = {
	              isStream: block.def(false)
	            };
	            var defaultRecord = new AttributeRecord();
	            defaultRecord.state = ATTRIB_STATE_POINTER;
	            Object.keys(defaultRecord).forEach(function (key) {
	              result[key] = block.def('' + defaultRecord[key]);
	            });
	            var BUFFER = result.buffer;
	            var TYPE = result.type;
	            block('if(', IS_BUFFER_ARGS, '(', VALUE, ')){', result.isStream, '=true;', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, ');', TYPE, '=', BUFFER, '.dtype;', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, ');', 'if(', BUFFER, '){', TYPE, '=', BUFFER, '.dtype;', '}else if("constant" in ', VALUE, '){', result.state, '=', ATTRIB_STATE_CONSTANT, ';', 'if(typeof ' + VALUE + '.constant === "number"){', result[CUTE_COMPONENTS[0]], '=', VALUE, '.constant;', CUTE_COMPONENTS.slice(1).map(function (n) {
	              return result[n];
	            }).join('='), '=0;', '}else{', CUTE_COMPONENTS.map(function (name, i) {
	              return result[name] + '=' + VALUE + '.constant.length>' + i + '?' + VALUE + '.constant[' + i + ']:0;';
	            }).join(''), '}}else{', 'if(', IS_BUFFER_ARGS, '(', VALUE, '.buffer)){', BUFFER, '=', BUFFER_STATE, '.createStream(', GL_ARRAY_BUFFER$1, ',', VALUE, '.buffer);', '}else{', BUFFER, '=', BUFFER_STATE, '.getBuffer(', VALUE, '.buffer);', '}', TYPE, '="type" in ', VALUE, '?', constants.glTypes, '[', VALUE, '.type]:', BUFFER, '.dtype;', result.normalized, '=!!', VALUE, '.normalized;');

	            function emitReadRecord(name) {
	              block(result[name], '=', VALUE, '.', name, '|0;');
	            }

	            emitReadRecord('size');
	            emitReadRecord('offset');
	            emitReadRecord('stride');
	            emitReadRecord('divisor');
	            block('}}');
	            block.exit('if(', result.isStream, '){', BUFFER_STATE, '.destroyStream(', BUFFER, ');', '}');
	            return result;
	          }

	          attributeDefs[attribute] = createDynamicDecl(dyn, appendAttributeCode);
	        });
	        return attributeDefs;
	      }

	      function parseContext(context) {
	        var staticContext = context.static;
	        var dynamicContext = context.dynamic;
	        var result = {};
	        Object.keys(staticContext).forEach(function (name) {
	          var value = staticContext[name];
	          result[name] = createStaticDecl(function (env, scope) {
	            if (typeof value === 'number' || typeof value === 'boolean') {
	              return '' + value;
	            } else {
	              return env.link(value);
	            }
	          });
	        });
	        Object.keys(dynamicContext).forEach(function (name) {
	          var dyn = dynamicContext[name];
	          result[name] = createDynamicDecl(dyn, function (env, scope) {
	            return env.invoke(scope, dyn);
	          });
	        });
	        return result;
	      }

	      function parseArguments(options, attributes, uniforms, context, env) {
	        var staticOptions = options.static;
	        var dynamicOptions = options.dynamic;
	        check$1.optional(function () {
	          var KEY_NAMES = [S_FRAMEBUFFER, S_VERT, S_FRAG, S_ELEMENTS, S_PRIMITIVE, S_OFFSET, S_COUNT, S_INSTANCES, S_PROFILE].concat(GL_STATE_NAMES);

	          function checkKeys(dict) {
	            Object.keys(dict).forEach(function (key) {
	              check$1.command(KEY_NAMES.indexOf(key) >= 0, 'unknown parameter "' + key + '"', env.commandStr);
	            });
	          }

	          checkKeys(staticOptions);
	          checkKeys(dynamicOptions);
	        });
	        var framebuffer = parseFramebuffer(options, env);
	        var viewportAndScissor = parseViewportScissor(options, framebuffer, env);
	        var draw = parseDraw(options, env);
	        var state = parseGLState(options, env);
	        var shader = parseProgram(options, env);

	        function copyBox(name) {
	          var defn = viewportAndScissor[name];

	          if (defn) {
	            state[name] = defn;
	          }
	        }

	        copyBox(S_VIEWPORT);
	        copyBox(propName(S_SCISSOR_BOX));
	        var dirty = Object.keys(state).length > 0;
	        var result = {
	          framebuffer: framebuffer,
	          draw: draw,
	          shader: shader,
	          state: state,
	          dirty: dirty
	        };
	        result.profile = parseProfile(options, env);
	        result.uniforms = parseUniforms(uniforms, env);
	        result.attributes = parseAttributes(attributes, env);
	        result.context = parseContext(context, env);
	        return result;
	      }

	      function emitContext(env, scope, context) {
	        var shared = env.shared;
	        var CONTEXT = shared.context;
	        var contextEnter = env.scope();
	        Object.keys(context).forEach(function (name) {
	          scope.save(CONTEXT, '.' + name);
	          var defn = context[name];
	          contextEnter(CONTEXT, '.', name, '=', defn.append(env, scope), ';');
	        });
	        scope(contextEnter);
	      }

	      function emitPollFramebuffer(env, scope, framebuffer, skipCheck) {
	        var shared = env.shared;
	        var GL = shared.gl;
	        var FRAMEBUFFER_STATE = shared.framebuffer;
	        var EXT_DRAW_BUFFERS;

	        if (extDrawBuffers) {
	          EXT_DRAW_BUFFERS = scope.def(shared.extensions, '.webgl_draw_buffers');
	        }

	        var constants = env.constants;
	        var DRAW_BUFFERS = constants.drawBuffer;
	        var BACK_BUFFER = constants.backBuffer;
	        var NEXT;

	        if (framebuffer) {
	          NEXT = framebuffer.append(env, scope);
	        } else {
	          NEXT = scope.def(FRAMEBUFFER_STATE, '.next');
	        }

	        if (!skipCheck) {
	          scope('if(', NEXT, '!==', FRAMEBUFFER_STATE, '.cur){');
	        }

	        scope('if(', NEXT, '){', GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',', NEXT, '.framebuffer);');

	        if (extDrawBuffers) {
	          scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', DRAW_BUFFERS, '[', NEXT, '.colorAttachments.length]);');
	        }

	        scope('}else{', GL, '.bindFramebuffer(', GL_FRAMEBUFFER$2, ',null);');

	        if (extDrawBuffers) {
	          scope(EXT_DRAW_BUFFERS, '.drawBuffersWEBGL(', BACK_BUFFER, ');');
	        }

	        scope('}', FRAMEBUFFER_STATE, '.cur=', NEXT, ';');

	        if (!skipCheck) {
	          scope('}');
	        }
	      }

	      function emitPollState(env, scope, args) {
	        var shared = env.shared;
	        var GL = shared.gl;
	        var CURRENT_VARS = env.current;
	        var NEXT_VARS = env.next;
	        var CURRENT_STATE = shared.current;
	        var NEXT_STATE = shared.next;
	        var block = env.cond(CURRENT_STATE, '.dirty');
	        GL_STATE_NAMES.forEach(function (prop) {
	          var param = propName(prop);

	          if (param in args.state) {
	            return;
	          }

	          var NEXT, CURRENT;

	          if (param in NEXT_VARS) {
	            NEXT = NEXT_VARS[param];
	            CURRENT = CURRENT_VARS[param];
	            var parts = loop(currentState[param].length, function (i) {
	              return block.def(NEXT, '[', i, ']');
	            });
	            block(env.cond(parts.map(function (p, i) {
	              return p + '!==' + CURRENT + '[' + i + ']';
	            }).join('||')).then(GL, '.', GL_VARIABLES[param], '(', parts, ');', parts.map(function (p, i) {
	              return CURRENT + '[' + i + ']=' + p;
	            }).join(';'), ';'));
	          } else {
	            NEXT = block.def(NEXT_STATE, '.', param);
	            var ifte = env.cond(NEXT, '!==', CURRENT_STATE, '.', param);
	            block(ifte);

	            if (param in GL_FLAGS) {
	              ifte(env.cond(NEXT).then(GL, '.enable(', GL_FLAGS[param], ');').else(GL, '.disable(', GL_FLAGS[param], ');'), CURRENT_STATE, '.', param, '=', NEXT, ';');
	            } else {
	              ifte(GL, '.', GL_VARIABLES[param], '(', NEXT, ');', CURRENT_STATE, '.', param, '=', NEXT, ';');
	            }
	          }
	        });

	        if (Object.keys(args.state).length === 0) {
	          block(CURRENT_STATE, '.dirty=false;');
	        }

	        scope(block);
	      }

	      function emitSetOptions(env, scope, options, filter) {
	        var shared = env.shared;
	        var CURRENT_VARS = env.current;
	        var CURRENT_STATE = shared.current;
	        var GL = shared.gl;
	        sortState(Object.keys(options)).forEach(function (param) {
	          var defn = options[param];

	          if (filter && !filter(defn)) {
	            return;
	          }

	          var variable = defn.append(env, scope);

	          if (GL_FLAGS[param]) {
	            var flag = GL_FLAGS[param];

	            if (isStatic(defn)) {
	              if (variable) {
	                scope(GL, '.enable(', flag, ');');
	              } else {
	                scope(GL, '.disable(', flag, ');');
	              }
	            } else {
	              scope(env.cond(variable).then(GL, '.enable(', flag, ');').else(GL, '.disable(', flag, ');'));
	            }

	            scope(CURRENT_STATE, '.', param, '=', variable, ';');
	          } else if (isArrayLike(variable)) {
	            var CURRENT = CURRENT_VARS[param];
	            scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', variable.map(function (v, i) {
	              return CURRENT + '[' + i + ']=' + v;
	            }).join(';'), ';');
	          } else {
	            scope(GL, '.', GL_VARIABLES[param], '(', variable, ');', CURRENT_STATE, '.', param, '=', variable, ';');
	          }
	        });
	      }

	      function injectExtensions(env, scope) {
	        if (extInstancing) {
	          env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');
	        }
	      }

	      function emitProfile(env, scope, args, useScope, incrementCounter) {
	        var shared = env.shared;
	        var STATS = env.stats;
	        var CURRENT_STATE = shared.current;
	        var TIMER = shared.timer;
	        var profileArg = args.profile;

	        function perfCounter() {
	          if (typeof performance === 'undefined') {
	            return 'Date.now()';
	          } else {
	            return 'performance.now()';
	          }
	        }

	        var CPU_START, QUERY_COUNTER;

	        function emitProfileStart(block) {
	          CPU_START = scope.def();
	          block(CPU_START, '=', perfCounter(), ';');

	          if (typeof incrementCounter === 'string') {
	            block(STATS, '.count+=', incrementCounter, ';');
	          } else {
	            block(STATS, '.count++;');
	          }

	          if (timer) {
	            if (useScope) {
	              QUERY_COUNTER = scope.def();
	              block(QUERY_COUNTER, '=', TIMER, '.getNumPendingQueries();');
	            } else {
	              block(TIMER, '.beginQuery(', STATS, ');');
	            }
	          }
	        }

	        function emitProfileEnd(block) {
	          block(STATS, '.cpuTime+=', perfCounter(), '-', CPU_START, ';');

	          if (timer) {
	            if (useScope) {
	              block(TIMER, '.pushScopeStats(', QUERY_COUNTER, ',', TIMER, '.getNumPendingQueries(),', STATS, ');');
	            } else {
	              block(TIMER, '.endQuery();');
	            }
	          }
	        }

	        function scopeProfile(value) {
	          var prev = scope.def(CURRENT_STATE, '.profile');
	          scope(CURRENT_STATE, '.profile=', value, ';');
	          scope.exit(CURRENT_STATE, '.profile=', prev, ';');
	        }

	        var USE_PROFILE;

	        if (profileArg) {
	          if (isStatic(profileArg)) {
	            if (profileArg.enable) {
	              emitProfileStart(scope);
	              emitProfileEnd(scope.exit);
	              scopeProfile('true');
	            } else {
	              scopeProfile('false');
	            }

	            return;
	          }

	          USE_PROFILE = profileArg.append(env, scope);
	          scopeProfile(USE_PROFILE);
	        } else {
	          USE_PROFILE = scope.def(CURRENT_STATE, '.profile');
	        }

	        var start = env.block();
	        emitProfileStart(start);
	        scope('if(', USE_PROFILE, '){', start, '}');
	        var end = env.block();
	        emitProfileEnd(end);
	        scope.exit('if(', USE_PROFILE, '){', end, '}');
	      }

	      function emitAttributes(env, scope, args, attributes, filter) {
	        var shared = env.shared;

	        function typeLength(x) {
	          switch (x) {
	            case GL_FLOAT_VEC2:
	            case GL_INT_VEC2:
	            case GL_BOOL_VEC2:
	              return 2;

	            case GL_FLOAT_VEC3:
	            case GL_INT_VEC3:
	            case GL_BOOL_VEC3:
	              return 3;

	            case GL_FLOAT_VEC4:
	            case GL_INT_VEC4:
	            case GL_BOOL_VEC4:
	              return 4;

	            default:
	              return 1;
	          }
	        }

	        function emitBindAttribute(ATTRIBUTE, size, record) {
	          var GL = shared.gl;
	          var LOCATION = scope.def(ATTRIBUTE, '.location');
	          var BINDING = scope.def(shared.attributes, '[', LOCATION, ']');
	          var STATE = record.state;
	          var BUFFER = record.buffer;
	          var CONST_COMPONENTS = [record.x, record.y, record.z, record.w];
	          var COMMON_KEYS = ['buffer', 'normalized', 'offset', 'stride'];

	          function emitBuffer() {
	            scope('if(!', BINDING, '.buffer){', GL, '.enableVertexAttribArray(', LOCATION, ');}');
	            var TYPE = record.type;
	            var SIZE;

	            if (!record.size) {
	              SIZE = size;
	            } else {
	              SIZE = scope.def(record.size, '||', size);
	            }

	            scope('if(', BINDING, '.type!==', TYPE, '||', BINDING, '.size!==', SIZE, '||', COMMON_KEYS.map(function (key) {
	              return BINDING + '.' + key + '!==' + record[key];
	            }).join('||'), '){', GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BUFFER, '.buffer);', GL, '.vertexAttribPointer(', [LOCATION, SIZE, TYPE, record.normalized, record.stride, record.offset], ');', BINDING, '.type=', TYPE, ';', BINDING, '.size=', SIZE, ';', COMMON_KEYS.map(function (key) {
	              return BINDING + '.' + key + '=' + record[key] + ';';
	            }).join(''), '}');

	            if (extInstancing) {
	              var DIVISOR = record.divisor;
	              scope('if(', BINDING, '.divisor!==', DIVISOR, '){', env.instancing, '.vertexAttribDivisorANGLE(', [LOCATION, DIVISOR], ');', BINDING, '.divisor=', DIVISOR, ';}');
	            }
	          }

	          function emitConstant() {
	            scope('if(', BINDING, '.buffer){', GL, '.disableVertexAttribArray(', LOCATION, ');', '}if(', CUTE_COMPONENTS.map(function (c, i) {
	              return BINDING + '.' + c + '!==' + CONST_COMPONENTS[i];
	            }).join('||'), '){', GL, '.vertexAttrib4f(', LOCATION, ',', CONST_COMPONENTS, ');', CUTE_COMPONENTS.map(function (c, i) {
	              return BINDING + '.' + c + '=' + CONST_COMPONENTS[i] + ';';
	            }).join(''), '}');
	          }

	          if (STATE === ATTRIB_STATE_POINTER) {
	            emitBuffer();
	          } else if (STATE === ATTRIB_STATE_CONSTANT) {
	            emitConstant();
	          } else {
	            scope('if(', STATE, '===', ATTRIB_STATE_POINTER, '){');
	            emitBuffer();
	            scope('}else{');
	            emitConstant();
	            scope('}');
	          }
	        }

	        attributes.forEach(function (attribute) {
	          var name = attribute.name;
	          var arg = args.attributes[name];
	          var record;

	          if (arg) {
	            if (!filter(arg)) {
	              return;
	            }

	            record = arg.append(env, scope);
	          } else {
	            if (!filter(SCOPE_DECL)) {
	              return;
	            }

	            var scopeAttrib = env.scopeAttrib(name);
	            check$1.optional(function () {
	              env.assert(scope, scopeAttrib + '.state', 'missing attribute ' + name);
	            });
	            record = {};
	            Object.keys(new AttributeRecord()).forEach(function (key) {
	              record[key] = scope.def(scopeAttrib, '.', key);
	            });
	          }

	          emitBindAttribute(env.link(attribute), typeLength(attribute.info.type), record);
	        });
	      }

	      function emitUniforms(env, scope, args, uniforms, filter) {
	        var shared = env.shared;
	        var GL = shared.gl;
	        var infix;

	        for (var i = 0; i < uniforms.length; ++i) {
	          var uniform = uniforms[i];
	          var name = uniform.name;
	          var type = uniform.info.type;
	          var arg = args.uniforms[name];
	          var UNIFORM = env.link(uniform);
	          var LOCATION = UNIFORM + '.location';
	          var VALUE;

	          if (arg) {
	            if (!filter(arg)) {
	              continue;
	            }

	            if (isStatic(arg)) {
	              var value = arg.value;
	              check$1.command(value !== null && typeof value !== 'undefined', 'missing uniform "' + name + '"', env.commandStr);

	              if (type === GL_SAMPLER_2D || type === GL_SAMPLER_CUBE) {
	                check$1.command(typeof value === 'function' && (type === GL_SAMPLER_2D && (value._reglType === 'texture2d' || value._reglType === 'framebuffer') || type === GL_SAMPLER_CUBE && (value._reglType === 'textureCube' || value._reglType === 'framebufferCube')), 'invalid texture for uniform ' + name, env.commandStr);
	                var TEX_VALUE = env.link(value._texture || value.color[0]._texture);
	                scope(GL, '.uniform1i(', LOCATION, ',', TEX_VALUE + '.bind());');
	                scope.exit(TEX_VALUE, '.unbind();');
	              } else if (type === GL_FLOAT_MAT2 || type === GL_FLOAT_MAT3 || type === GL_FLOAT_MAT4) {
	                check$1.optional(function () {
	                  check$1.command(isArrayLike(value), 'invalid matrix for uniform ' + name, env.commandStr);
	                  check$1.command(type === GL_FLOAT_MAT2 && value.length === 4 || type === GL_FLOAT_MAT3 && value.length === 9 || type === GL_FLOAT_MAT4 && value.length === 16, 'invalid length for matrix uniform ' + name, env.commandStr);
	                });
	                var MAT_VALUE = env.global.def('new Float32Array([' + Array.prototype.slice.call(value) + '])');
	                var dim = 2;

	                if (type === GL_FLOAT_MAT3) {
	                  dim = 3;
	                } else if (type === GL_FLOAT_MAT4) {
	                  dim = 4;
	                }

	                scope(GL, '.uniformMatrix', dim, 'fv(', LOCATION, ',false,', MAT_VALUE, ');');
	              } else {
	                switch (type) {
	                  case GL_FLOAT$8:
	                    check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
	                    infix = '1f';
	                    break;

	                  case GL_FLOAT_VEC2:
	                    check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);
	                    infix = '2f';
	                    break;

	                  case GL_FLOAT_VEC3:
	                    check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);
	                    infix = '3f';
	                    break;

	                  case GL_FLOAT_VEC4:
	                    check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);
	                    infix = '4f';
	                    break;

	                  case GL_BOOL:
	                    check$1.commandType(value, 'boolean', 'uniform ' + name, env.commandStr);
	                    infix = '1i';
	                    break;

	                  case GL_INT$3:
	                    check$1.commandType(value, 'number', 'uniform ' + name, env.commandStr);
	                    infix = '1i';
	                    break;

	                  case GL_BOOL_VEC2:
	                    check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);
	                    infix = '2i';
	                    break;

	                  case GL_INT_VEC2:
	                    check$1.command(isArrayLike(value) && value.length === 2, 'uniform ' + name, env.commandStr);
	                    infix = '2i';
	                    break;

	                  case GL_BOOL_VEC3:
	                    check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);
	                    infix = '3i';
	                    break;

	                  case GL_INT_VEC3:
	                    check$1.command(isArrayLike(value) && value.length === 3, 'uniform ' + name, env.commandStr);
	                    infix = '3i';
	                    break;

	                  case GL_BOOL_VEC4:
	                    check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);
	                    infix = '4i';
	                    break;

	                  case GL_INT_VEC4:
	                    check$1.command(isArrayLike(value) && value.length === 4, 'uniform ' + name, env.commandStr);
	                    infix = '4i';
	                    break;
	                }

	                scope(GL, '.uniform', infix, '(', LOCATION, ',', isArrayLike(value) ? Array.prototype.slice.call(value) : value, ');');
	              }

	              continue;
	            } else {
	              VALUE = arg.append(env, scope);
	            }
	          } else {
	            if (!filter(SCOPE_DECL)) {
	              continue;
	            }

	            VALUE = scope.def(shared.uniforms, '[', stringStore.id(name), ']');
	          }

	          if (type === GL_SAMPLER_2D) {
	            scope('if(', VALUE, '&&', VALUE, '._reglType==="framebuffer"){', VALUE, '=', VALUE, '.color[0];', '}');
	          } else if (type === GL_SAMPLER_CUBE) {
	            scope('if(', VALUE, '&&', VALUE, '._reglType==="framebufferCube"){', VALUE, '=', VALUE, '.color[0];', '}');
	          }

	          check$1.optional(function () {
	            function check(pred, message) {
	              env.assert(scope, pred, 'bad data or missing for uniform "' + name + '".  ' + message);
	            }

	            function checkType(type) {
	              check('typeof ' + VALUE + '==="' + type + '"', 'invalid type, expected ' + type);
	            }

	            function checkVector(n, type) {
	              check(shared.isArrayLike + '(' + VALUE + ')&&' + VALUE + '.length===' + n, 'invalid vector, should have length ' + n, env.commandStr);
	            }

	            function checkTexture(target) {
	              check('typeof ' + VALUE + '==="function"&&' + VALUE + '._reglType==="texture' + (target === GL_TEXTURE_2D$3 ? '2d' : 'Cube') + '"', 'invalid texture type', env.commandStr);
	            }

	            switch (type) {
	              case GL_INT$3:
	                checkType('number');
	                break;

	              case GL_INT_VEC2:
	                checkVector(2, 'number');
	                break;

	              case GL_INT_VEC3:
	                checkVector(3, 'number');
	                break;

	              case GL_INT_VEC4:
	                checkVector(4, 'number');
	                break;

	              case GL_FLOAT$8:
	                checkType('number');
	                break;

	              case GL_FLOAT_VEC2:
	                checkVector(2, 'number');
	                break;

	              case GL_FLOAT_VEC3:
	                checkVector(3, 'number');
	                break;

	              case GL_FLOAT_VEC4:
	                checkVector(4, 'number');
	                break;

	              case GL_BOOL:
	                checkType('boolean');
	                break;

	              case GL_BOOL_VEC2:
	                checkVector(2, 'boolean');
	                break;

	              case GL_BOOL_VEC3:
	                checkVector(3, 'boolean');
	                break;

	              case GL_BOOL_VEC4:
	                checkVector(4, 'boolean');
	                break;

	              case GL_FLOAT_MAT2:
	                checkVector(4, 'number');
	                break;

	              case GL_FLOAT_MAT3:
	                checkVector(9, 'number');
	                break;

	              case GL_FLOAT_MAT4:
	                checkVector(16, 'number');
	                break;

	              case GL_SAMPLER_2D:
	                checkTexture(GL_TEXTURE_2D$3);
	                break;

	              case GL_SAMPLER_CUBE:
	                checkTexture(GL_TEXTURE_CUBE_MAP$2);
	                break;
	            }
	          });
	          var unroll = 1;

	          switch (type) {
	            case GL_SAMPLER_2D:
	            case GL_SAMPLER_CUBE:
	              var TEX = scope.def(VALUE, '._texture');
	              scope(GL, '.uniform1i(', LOCATION, ',', TEX, '.bind());');
	              scope.exit(TEX, '.unbind();');
	              continue;

	            case GL_INT$3:
	            case GL_BOOL:
	              infix = '1i';
	              break;

	            case GL_INT_VEC2:
	            case GL_BOOL_VEC2:
	              infix = '2i';
	              unroll = 2;
	              break;

	            case GL_INT_VEC3:
	            case GL_BOOL_VEC3:
	              infix = '3i';
	              unroll = 3;
	              break;

	            case GL_INT_VEC4:
	            case GL_BOOL_VEC4:
	              infix = '4i';
	              unroll = 4;
	              break;

	            case GL_FLOAT$8:
	              infix = '1f';
	              break;

	            case GL_FLOAT_VEC2:
	              infix = '2f';
	              unroll = 2;
	              break;

	            case GL_FLOAT_VEC3:
	              infix = '3f';
	              unroll = 3;
	              break;

	            case GL_FLOAT_VEC4:
	              infix = '4f';
	              unroll = 4;
	              break;

	            case GL_FLOAT_MAT2:
	              infix = 'Matrix2fv';
	              break;

	            case GL_FLOAT_MAT3:
	              infix = 'Matrix3fv';
	              break;

	            case GL_FLOAT_MAT4:
	              infix = 'Matrix4fv';
	              break;
	          }

	          scope(GL, '.uniform', infix, '(', LOCATION, ',');

	          if (infix.charAt(0) === 'M') {
	            var matSize = Math.pow(type - GL_FLOAT_MAT2 + 2, 2);
	            var STORAGE = env.global.def('new Float32Array(', matSize, ')');
	            scope('false,(Array.isArray(', VALUE, ')||', VALUE, ' instanceof Float32Array)?', VALUE, ':(', loop(matSize, function (i) {
	              return STORAGE + '[' + i + ']=' + VALUE + '[' + i + ']';
	            }), ',', STORAGE, ')');
	          } else if (unroll > 1) {
	            scope(loop(unroll, function (i) {
	              return VALUE + '[' + i + ']';
	            }));
	          } else {
	            scope(VALUE);
	          }

	          scope(');');
	        }
	      }

	      function emitDraw(env, outer, inner, args) {
	        var shared = env.shared;
	        var GL = shared.gl;
	        var DRAW_STATE = shared.draw;
	        var drawOptions = args.draw;

	        function emitElements() {
	          var defn = drawOptions.elements;
	          var ELEMENTS;
	          var scope = outer;

	          if (defn) {
	            if (defn.contextDep && args.contextDynamic || defn.propDep) {
	              scope = inner;
	            }

	            ELEMENTS = defn.append(env, scope);
	          } else {
	            ELEMENTS = scope.def(DRAW_STATE, '.', S_ELEMENTS);
	          }

	          if (ELEMENTS) {
	            scope('if(' + ELEMENTS + ')' + GL + '.bindBuffer(' + GL_ELEMENT_ARRAY_BUFFER$1 + ',' + ELEMENTS + '.buffer.buffer);');
	          }

	          return ELEMENTS;
	        }

	        function emitCount() {
	          var defn = drawOptions.count;
	          var COUNT;
	          var scope = outer;

	          if (defn) {
	            if (defn.contextDep && args.contextDynamic || defn.propDep) {
	              scope = inner;
	            }

	            COUNT = defn.append(env, scope);
	            check$1.optional(function () {
	              if (defn.MISSING) {
	                env.assert(outer, 'false', 'missing vertex count');
	              }

	              if (defn.DYNAMIC) {
	                env.assert(scope, COUNT + '>=0', 'missing vertex count');
	              }
	            });
	          } else {
	            COUNT = scope.def(DRAW_STATE, '.', S_COUNT);
	            check$1.optional(function () {
	              env.assert(scope, COUNT + '>=0', 'missing vertex count');
	            });
	          }

	          return COUNT;
	        }

	        var ELEMENTS = emitElements();

	        function emitValue(name) {
	          var defn = drawOptions[name];

	          if (defn) {
	            if (defn.contextDep && args.contextDynamic || defn.propDep) {
	              return defn.append(env, inner);
	            } else {
	              return defn.append(env, outer);
	            }
	          } else {
	            return outer.def(DRAW_STATE, '.', name);
	          }
	        }

	        var PRIMITIVE = emitValue(S_PRIMITIVE);
	        var OFFSET = emitValue(S_OFFSET);
	        var COUNT = emitCount();

	        if (typeof COUNT === 'number') {
	          if (COUNT === 0) {
	            return;
	          }
	        } else {
	          inner('if(', COUNT, '){');
	          inner.exit('}');
	        }

	        var INSTANCES, EXT_INSTANCING;

	        if (extInstancing) {
	          INSTANCES = emitValue(S_INSTANCES);
	          EXT_INSTANCING = env.instancing;
	        }

	        var ELEMENT_TYPE = ELEMENTS + '.type';
	        var elementsStatic = drawOptions.elements && isStatic(drawOptions.elements);

	        function emitInstancing() {
	          function drawElements() {
	            inner(EXT_INSTANCING, '.drawElementsInstancedANGLE(', [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)', INSTANCES], ');');
	          }

	          function drawArrays() {
	            inner(EXT_INSTANCING, '.drawArraysInstancedANGLE(', [PRIMITIVE, OFFSET, COUNT, INSTANCES], ');');
	          }

	          if (ELEMENTS) {
	            if (!elementsStatic) {
	              inner('if(', ELEMENTS, '){');
	              drawElements();
	              inner('}else{');
	              drawArrays();
	              inner('}');
	            } else {
	              drawElements();
	            }
	          } else {
	            drawArrays();
	          }
	        }

	        function emitRegular() {
	          function drawElements() {
	            inner(GL + '.drawElements(' + [PRIMITIVE, COUNT, ELEMENT_TYPE, OFFSET + '<<((' + ELEMENT_TYPE + '-' + GL_UNSIGNED_BYTE$8 + ')>>1)'] + ');');
	          }

	          function drawArrays() {
	            inner(GL + '.drawArrays(' + [PRIMITIVE, OFFSET, COUNT] + ');');
	          }

	          if (ELEMENTS) {
	            if (!elementsStatic) {
	              inner('if(', ELEMENTS, '){');
	              drawElements();
	              inner('}else{');
	              drawArrays();
	              inner('}');
	            } else {
	              drawElements();
	            }
	          } else {
	            drawArrays();
	          }
	        }

	        if (extInstancing && (typeof INSTANCES !== 'number' || INSTANCES >= 0)) {
	          if (typeof INSTANCES === 'string') {
	            inner('if(', INSTANCES, '>0){');
	            emitInstancing();
	            inner('}else if(', INSTANCES, '<0){');
	            emitRegular();
	            inner('}');
	          } else {
	            emitInstancing();
	          }
	        } else {
	          emitRegular();
	        }
	      }

	      function createBody(emitBody, parentEnv, args, program, count) {
	        var env = createREGLEnvironment();
	        var scope = env.proc('body', count);
	        check$1.optional(function () {
	          env.commandStr = parentEnv.commandStr;
	          env.command = env.link(parentEnv.commandStr);
	        });

	        if (extInstancing) {
	          env.instancing = scope.def(env.shared.extensions, '.angle_instanced_arrays');
	        }

	        emitBody(env, scope, args, program);
	        return env.compile().body;
	      }

	      function emitDrawBody(env, draw, args, program) {
	        injectExtensions(env, draw);
	        emitAttributes(env, draw, args, program.attributes, function () {
	          return true;
	        });
	        emitUniforms(env, draw, args, program.uniforms, function () {
	          return true;
	        });
	        emitDraw(env, draw, draw, args);
	      }

	      function emitDrawProc(env, args) {
	        var draw = env.proc('draw', 1);
	        injectExtensions(env, draw);
	        emitContext(env, draw, args.context);
	        emitPollFramebuffer(env, draw, args.framebuffer);
	        emitPollState(env, draw, args);
	        emitSetOptions(env, draw, args.state);
	        emitProfile(env, draw, args, false, true);
	        var program = args.shader.progVar.append(env, draw);
	        draw(env.shared.gl, '.useProgram(', program, '.program);');

	        if (args.shader.program) {
	          emitDrawBody(env, draw, args, args.shader.program);
	        } else {
	          var drawCache = env.global.def('{}');
	          var PROG_ID = draw.def(program, '.id');
	          var CACHED_PROC = draw.def(drawCache, '[', PROG_ID, ']');
	          draw(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0);').else(CACHED_PROC, '=', drawCache, '[', PROG_ID, ']=', env.link(function (program) {
	            return createBody(emitDrawBody, env, args, program, 1);
	          }), '(', program, ');', CACHED_PROC, '.call(this,a0);'));
	        }

	        if (Object.keys(args.state).length > 0) {
	          draw(env.shared.current, '.dirty=true;');
	        }
	      }

	      function emitBatchDynamicShaderBody(env, scope, args, program) {
	        env.batchId = 'a1';
	        injectExtensions(env, scope);

	        function all() {
	          return true;
	        }

	        emitAttributes(env, scope, args, program.attributes, all);
	        emitUniforms(env, scope, args, program.uniforms, all);
	        emitDraw(env, scope, scope, args);
	      }

	      function emitBatchBody(env, scope, args, program) {
	        injectExtensions(env, scope);
	        var contextDynamic = args.contextDep;
	        var BATCH_ID = scope.def();
	        var PROP_LIST = 'a0';
	        var NUM_PROPS = 'a1';
	        var PROPS = scope.def();
	        env.shared.props = PROPS;
	        env.batchId = BATCH_ID;
	        var outer = env.scope();
	        var inner = env.scope();
	        scope(outer.entry, 'for(', BATCH_ID, '=0;', BATCH_ID, '<', NUM_PROPS, ';++', BATCH_ID, '){', PROPS, '=', PROP_LIST, '[', BATCH_ID, '];', inner, '}', outer.exit);

	        function isInnerDefn(defn) {
	          return defn.contextDep && contextDynamic || defn.propDep;
	        }

	        function isOuterDefn(defn) {
	          return !isInnerDefn(defn);
	        }

	        if (args.needsContext) {
	          emitContext(env, inner, args.context);
	        }

	        if (args.needsFramebuffer) {
	          emitPollFramebuffer(env, inner, args.framebuffer);
	        }

	        emitSetOptions(env, inner, args.state, isInnerDefn);

	        if (args.profile && isInnerDefn(args.profile)) {
	          emitProfile(env, inner, args, false, true);
	        }

	        if (!program) {
	          var progCache = env.global.def('{}');
	          var PROGRAM = args.shader.progVar.append(env, inner);
	          var PROG_ID = inner.def(PROGRAM, '.id');
	          var CACHED_PROC = inner.def(progCache, '[', PROG_ID, ']');
	          inner(env.shared.gl, '.useProgram(', PROGRAM, '.program);', 'if(!', CACHED_PROC, '){', CACHED_PROC, '=', progCache, '[', PROG_ID, ']=', env.link(function (program) {
	            return createBody(emitBatchDynamicShaderBody, env, args, program, 2);
	          }), '(', PROGRAM, ');}', CACHED_PROC, '.call(this,a0[', BATCH_ID, '],', BATCH_ID, ');');
	        } else {
	          emitAttributes(env, outer, args, program.attributes, isOuterDefn);
	          emitAttributes(env, inner, args, program.attributes, isInnerDefn);
	          emitUniforms(env, outer, args, program.uniforms, isOuterDefn);
	          emitUniforms(env, inner, args, program.uniforms, isInnerDefn);
	          emitDraw(env, outer, inner, args);
	        }
	      }

	      function emitBatchProc(env, args) {
	        var batch = env.proc('batch', 2);
	        env.batchId = '0';
	        injectExtensions(env, batch);
	        var contextDynamic = false;
	        var needsContext = true;
	        Object.keys(args.context).forEach(function (name) {
	          contextDynamic = contextDynamic || args.context[name].propDep;
	        });

	        if (!contextDynamic) {
	          emitContext(env, batch, args.context);
	          needsContext = false;
	        }

	        var framebuffer = args.framebuffer;
	        var needsFramebuffer = false;

	        if (framebuffer) {
	          if (framebuffer.propDep) {
	            contextDynamic = needsFramebuffer = true;
	          } else if (framebuffer.contextDep && contextDynamic) {
	            needsFramebuffer = true;
	          }

	          if (!needsFramebuffer) {
	            emitPollFramebuffer(env, batch, framebuffer);
	          }
	        } else {
	          emitPollFramebuffer(env, batch, null);
	        }

	        if (args.state.viewport && args.state.viewport.propDep) {
	          contextDynamic = true;
	        }

	        function isInnerDefn(defn) {
	          return defn.contextDep && contextDynamic || defn.propDep;
	        }

	        emitPollState(env, batch, args);
	        emitSetOptions(env, batch, args.state, function (defn) {
	          return !isInnerDefn(defn);
	        });

	        if (!args.profile || !isInnerDefn(args.profile)) {
	          emitProfile(env, batch, args, false, 'a1');
	        }

	        args.contextDep = contextDynamic;
	        args.needsContext = needsContext;
	        args.needsFramebuffer = needsFramebuffer;
	        var progDefn = args.shader.progVar;

	        if (progDefn.contextDep && contextDynamic || progDefn.propDep) {
	          emitBatchBody(env, batch, args, null);
	        } else {
	          var PROGRAM = progDefn.append(env, batch);
	          batch(env.shared.gl, '.useProgram(', PROGRAM, '.program);');

	          if (args.shader.program) {
	            emitBatchBody(env, batch, args, args.shader.program);
	          } else {
	            var batchCache = env.global.def('{}');
	            var PROG_ID = batch.def(PROGRAM, '.id');
	            var CACHED_PROC = batch.def(batchCache, '[', PROG_ID, ']');
	            batch(env.cond(CACHED_PROC).then(CACHED_PROC, '.call(this,a0,a1);').else(CACHED_PROC, '=', batchCache, '[', PROG_ID, ']=', env.link(function (program) {
	              return createBody(emitBatchBody, env, args, program, 2);
	            }), '(', PROGRAM, ');', CACHED_PROC, '.call(this,a0,a1);'));
	          }
	        }

	        if (Object.keys(args.state).length > 0) {
	          batch(env.shared.current, '.dirty=true;');
	        }
	      }

	      function emitScopeProc(env, args) {
	        var scope = env.proc('scope', 3);
	        env.batchId = 'a2';
	        var shared = env.shared;
	        var CURRENT_STATE = shared.current;
	        emitContext(env, scope, args.context);

	        if (args.framebuffer) {
	          args.framebuffer.append(env, scope);
	        }

	        sortState(Object.keys(args.state)).forEach(function (name) {
	          var defn = args.state[name];
	          var value = defn.append(env, scope);

	          if (isArrayLike(value)) {
	            value.forEach(function (v, i) {
	              scope.set(env.next[name], '[' + i + ']', v);
	            });
	          } else {
	            scope.set(shared.next, '.' + name, value);
	          }
	        });
	        emitProfile(env, scope, args, true, true);
	        [S_ELEMENTS, S_OFFSET, S_COUNT, S_INSTANCES, S_PRIMITIVE].forEach(function (opt) {
	          var variable = args.draw[opt];

	          if (!variable) {
	            return;
	          }

	          scope.set(shared.draw, '.' + opt, '' + variable.append(env, scope));
	        });
	        Object.keys(args.uniforms).forEach(function (opt) {
	          scope.set(shared.uniforms, '[' + stringStore.id(opt) + ']', args.uniforms[opt].append(env, scope));
	        });
	        Object.keys(args.attributes).forEach(function (name) {
	          var record = args.attributes[name].append(env, scope);
	          var scopeAttrib = env.scopeAttrib(name);
	          Object.keys(new AttributeRecord()).forEach(function (prop) {
	            scope.set(scopeAttrib, '.' + prop, record[prop]);
	          });
	        });

	        function saveShader(name) {
	          var shader = args.shader[name];

	          if (shader) {
	            scope.set(shared.shader, '.' + name, shader.append(env, scope));
	          }
	        }

	        saveShader(S_VERT);
	        saveShader(S_FRAG);

	        if (Object.keys(args.state).length > 0) {
	          scope(CURRENT_STATE, '.dirty=true;');
	          scope.exit(CURRENT_STATE, '.dirty=true;');
	        }

	        scope('a1(', env.shared.context, ',a0,', env.batchId, ');');
	      }

	      function isDynamicObject(object) {
	        if (typeof object !== 'object' || isArrayLike(object)) {
	          return;
	        }

	        var props = Object.keys(object);

	        for (var i = 0; i < props.length; ++i) {
	          if (dynamic.isDynamic(object[props[i]])) {
	            return true;
	          }
	        }

	        return false;
	      }

	      function splatObject(env, options, name) {
	        var object = options.static[name];

	        if (!object || !isDynamicObject(object)) {
	          return;
	        }

	        var globals = env.global;
	        var keys = Object.keys(object);
	        var thisDep = false;
	        var contextDep = false;
	        var propDep = false;
	        var objectRef = env.global.def('{}');
	        keys.forEach(function (key) {
	          var value = object[key];

	          if (dynamic.isDynamic(value)) {
	            if (typeof value === 'function') {
	              value = object[key] = dynamic.unbox(value);
	            }

	            var deps = createDynamicDecl(value, null);
	            thisDep = thisDep || deps.thisDep;
	            propDep = propDep || deps.propDep;
	            contextDep = contextDep || deps.contextDep;
	          } else {
	            globals(objectRef, '.', key, '=');

	            switch (typeof value) {
	              case 'number':
	                globals(value);
	                break;

	              case 'string':
	                globals('"', value, '"');
	                break;

	              case 'object':
	                if (Array.isArray(value)) {
	                  globals('[', value.join(), ']');
	                }

	                break;

	              default:
	                globals(env.link(value));
	                break;
	            }

	            globals(';');
	          }
	        });

	        function appendBlock(env, block) {
	          keys.forEach(function (key) {
	            var value = object[key];

	            if (!dynamic.isDynamic(value)) {
	              return;
	            }

	            var ref = env.invoke(block, value);
	            block(objectRef, '.', key, '=', ref, ';');
	          });
	        }

	        options.dynamic[name] = new dynamic.DynamicVariable(DYN_THUNK, {
	          thisDep: thisDep,
	          contextDep: contextDep,
	          propDep: propDep,
	          ref: objectRef,
	          append: appendBlock
	        });
	        delete options.static[name];
	      }

	      function compileCommand(options, attributes, uniforms, context, stats) {
	        var env = createREGLEnvironment();
	        env.stats = env.link(stats);
	        Object.keys(attributes.static).forEach(function (key) {
	          splatObject(env, attributes, key);
	        });
	        NESTED_OPTIONS.forEach(function (name) {
	          splatObject(env, options, name);
	        });
	        var args = parseArguments(options, attributes, uniforms, context, env);
	        emitDrawProc(env, args);
	        emitScopeProc(env, args);
	        emitBatchProc(env, args);
	        return env.compile();
	      }

	      return {
	        next: nextState,
	        current: currentState,
	        procs: function () {
	          var env = createREGLEnvironment();
	          var poll = env.proc('poll');
	          var refresh = env.proc('refresh');
	          var common = env.block();
	          poll(common);
	          refresh(common);
	          var shared = env.shared;
	          var GL = shared.gl;
	          var NEXT_STATE = shared.next;
	          var CURRENT_STATE = shared.current;
	          common(CURRENT_STATE, '.dirty=false;');
	          emitPollFramebuffer(env, poll);
	          emitPollFramebuffer(env, refresh, null, true);
	          var INSTANCING;

	          if (extInstancing) {
	            INSTANCING = env.link(extInstancing);
	          }

	          for (var i = 0; i < limits.maxAttributes; ++i) {
	            var BINDING = refresh.def(shared.attributes, '[', i, ']');
	            var ifte = env.cond(BINDING, '.buffer');
	            ifte.then(GL, '.enableVertexAttribArray(', i, ');', GL, '.bindBuffer(', GL_ARRAY_BUFFER$1, ',', BINDING, '.buffer.buffer);', GL, '.vertexAttribPointer(', i, ',', BINDING, '.size,', BINDING, '.type,', BINDING, '.normalized,', BINDING, '.stride,', BINDING, '.offset);').else(GL, '.disableVertexAttribArray(', i, ');', GL, '.vertexAttrib4f(', i, ',', BINDING, '.x,', BINDING, '.y,', BINDING, '.z,', BINDING, '.w);', BINDING, '.buffer=null;');
	            refresh(ifte);

	            if (extInstancing) {
	              refresh(INSTANCING, '.vertexAttribDivisorANGLE(', i, ',', BINDING, '.divisor);');
	            }
	          }

	          Object.keys(GL_FLAGS).forEach(function (flag) {
	            var cap = GL_FLAGS[flag];
	            var NEXT = common.def(NEXT_STATE, '.', flag);
	            var block = env.block();
	            block('if(', NEXT, '){', GL, '.enable(', cap, ')}else{', GL, '.disable(', cap, ')}', CURRENT_STATE, '.', flag, '=', NEXT, ';');
	            refresh(block);
	            poll('if(', NEXT, '!==', CURRENT_STATE, '.', flag, '){', block, '}');
	          });
	          Object.keys(GL_VARIABLES).forEach(function (name) {
	            var func = GL_VARIABLES[name];
	            var init = currentState[name];
	            var NEXT, CURRENT;
	            var block = env.block();
	            block(GL, '.', func, '(');

	            if (isArrayLike(init)) {
	              var n = init.length;
	              NEXT = env.global.def(NEXT_STATE, '.', name);
	              CURRENT = env.global.def(CURRENT_STATE, '.', name);
	              block(loop(n, function (i) {
	                return NEXT + '[' + i + ']';
	              }), ');', loop(n, function (i) {
	                return CURRENT + '[' + i + ']=' + NEXT + '[' + i + '];';
	              }).join(''));
	              poll('if(', loop(n, function (i) {
	                return NEXT + '[' + i + ']!==' + CURRENT + '[' + i + ']';
	              }).join('||'), '){', block, '}');
	            } else {
	              NEXT = common.def(NEXT_STATE, '.', name);
	              CURRENT = common.def(CURRENT_STATE, '.', name);
	              block(NEXT, ');', CURRENT_STATE, '.', name, '=', NEXT, ';');
	              poll('if(', NEXT, '!==', CURRENT, '){', block, '}');
	            }

	            refresh(block);
	          });
	          return env.compile();
	        }(),
	        compile: compileCommand
	      };
	    }

	    function stats() {
	      return {
	        bufferCount: 0,
	        elementsCount: 0,
	        framebufferCount: 0,
	        shaderCount: 0,
	        textureCount: 0,
	        cubeCount: 0,
	        renderbufferCount: 0,
	        maxTextureUnits: 0
	      };
	    }

	    var GL_QUERY_RESULT_EXT = 0x8866;
	    var GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
	    var GL_TIME_ELAPSED_EXT = 0x88BF;

	    var createTimer = function createTimer(gl, extensions) {
	      if (!extensions.ext_disjoint_timer_query) {
	        return null;
	      }

	      var queryPool = [];

	      function allocQuery() {
	        return queryPool.pop() || extensions.ext_disjoint_timer_query.createQueryEXT();
	      }

	      function freeQuery(query) {
	        queryPool.push(query);
	      }

	      var pendingQueries = [];

	      function beginQuery(stats) {
	        var query = allocQuery();
	        extensions.ext_disjoint_timer_query.beginQueryEXT(GL_TIME_ELAPSED_EXT, query);
	        pendingQueries.push(query);
	        pushScopeStats(pendingQueries.length - 1, pendingQueries.length, stats);
	      }

	      function endQuery() {
	        extensions.ext_disjoint_timer_query.endQueryEXT(GL_TIME_ELAPSED_EXT);
	      }

	      function PendingStats() {
	        this.startQueryIndex = -1;
	        this.endQueryIndex = -1;
	        this.sum = 0;
	        this.stats = null;
	      }

	      var pendingStatsPool = [];

	      function allocPendingStats() {
	        return pendingStatsPool.pop() || new PendingStats();
	      }

	      function freePendingStats(pendingStats) {
	        pendingStatsPool.push(pendingStats);
	      }

	      var pendingStats = [];

	      function pushScopeStats(start, end, stats) {
	        var ps = allocPendingStats();
	        ps.startQueryIndex = start;
	        ps.endQueryIndex = end;
	        ps.sum = 0;
	        ps.stats = stats;
	        pendingStats.push(ps);
	      }

	      var timeSum = [];
	      var queryPtr = [];

	      function update() {
	        var ptr, i;
	        var n = pendingQueries.length;

	        if (n === 0) {
	          return;
	        }

	        queryPtr.length = Math.max(queryPtr.length, n + 1);
	        timeSum.length = Math.max(timeSum.length, n + 1);
	        timeSum[0] = 0;
	        queryPtr[0] = 0;
	        var queryTime = 0;
	        ptr = 0;

	        for (i = 0; i < pendingQueries.length; ++i) {
	          var query = pendingQueries[i];

	          if (extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_AVAILABLE_EXT)) {
	            queryTime += extensions.ext_disjoint_timer_query.getQueryObjectEXT(query, GL_QUERY_RESULT_EXT);
	            freeQuery(query);
	          } else {
	            pendingQueries[ptr++] = query;
	          }

	          timeSum[i + 1] = queryTime;
	          queryPtr[i + 1] = ptr;
	        }

	        pendingQueries.length = ptr;
	        ptr = 0;

	        for (i = 0; i < pendingStats.length; ++i) {
	          var stats = pendingStats[i];
	          var start = stats.startQueryIndex;
	          var end = stats.endQueryIndex;
	          stats.sum += timeSum[end] - timeSum[start];
	          var startPtr = queryPtr[start];
	          var endPtr = queryPtr[end];

	          if (endPtr === startPtr) {
	            stats.stats.gpuTime += stats.sum / 1e6;
	            freePendingStats(stats);
	          } else {
	            stats.startQueryIndex = startPtr;
	            stats.endQueryIndex = endPtr;
	            pendingStats[ptr++] = stats;
	          }
	        }

	        pendingStats.length = ptr;
	      }

	      return {
	        beginQuery: beginQuery,
	        endQuery: endQuery,
	        pushScopeStats: pushScopeStats,
	        update: update,
	        getNumPendingQueries: function getNumPendingQueries() {
	          return pendingQueries.length;
	        },
	        clear: function clear() {
	          queryPool.push.apply(queryPool, pendingQueries);

	          for (var i = 0; i < queryPool.length; i++) {
	            extensions.ext_disjoint_timer_query.deleteQueryEXT(queryPool[i]);
	          }

	          pendingQueries.length = 0;
	          queryPool.length = 0;
	        },
	        restore: function restore() {
	          pendingQueries.length = 0;
	          queryPool.length = 0;
	        }
	      };
	    };

	    var GL_COLOR_BUFFER_BIT = 16384;
	    var GL_DEPTH_BUFFER_BIT = 256;
	    var GL_STENCIL_BUFFER_BIT = 1024;
	    var GL_ARRAY_BUFFER = 34962;
	    var CONTEXT_LOST_EVENT = 'webglcontextlost';
	    var CONTEXT_RESTORED_EVENT = 'webglcontextrestored';
	    var DYN_PROP = 1;
	    var DYN_CONTEXT = 2;
	    var DYN_STATE = 3;

	    function find(haystack, needle) {
	      for (var i = 0; i < haystack.length; ++i) {
	        if (haystack[i] === needle) {
	          return i;
	        }
	      }

	      return -1;
	    }

	    function wrapREGL(args) {
	      var config = parseArgs(args);

	      if (!config) {
	        return null;
	      }

	      var gl = config.gl;
	      var glAttributes = gl.getContextAttributes();
	      var contextLost = gl.isContextLost();
	      var extensionState = createExtensionCache(gl, config);

	      if (!extensionState) {
	        return null;
	      }

	      var stringStore = createStringStore();
	      var stats$$1 = stats();
	      var extensions = extensionState.extensions;
	      var timer = createTimer(gl, extensions);
	      var START_TIME = clock();
	      var WIDTH = gl.drawingBufferWidth;
	      var HEIGHT = gl.drawingBufferHeight;
	      var contextState = {
	        tick: 0,
	        time: 0,
	        viewportWidth: WIDTH,
	        viewportHeight: HEIGHT,
	        framebufferWidth: WIDTH,
	        framebufferHeight: HEIGHT,
	        drawingBufferWidth: WIDTH,
	        drawingBufferHeight: HEIGHT,
	        pixelRatio: config.pixelRatio
	      };
	      var uniformState = {};
	      var drawState = {
	        elements: null,
	        primitive: 4,
	        count: -1,
	        offset: 0,
	        instances: -1
	      };
	      var limits = wrapLimits(gl, extensions);
	      var attributeState = wrapAttributeState(gl, extensions, limits, stringStore);
	      var bufferState = wrapBufferState(gl, stats$$1, config, attributeState);
	      var elementState = wrapElementsState(gl, extensions, bufferState, stats$$1);
	      var shaderState = wrapShaderState(gl, stringStore, stats$$1, config);
	      var textureState = createTextureSet(gl, extensions, limits, function () {
	        core.procs.poll();
	      }, contextState, stats$$1, config);
	      var renderbufferState = wrapRenderbuffers(gl, extensions, limits, stats$$1, config);
	      var framebufferState = wrapFBOState(gl, extensions, limits, textureState, renderbufferState, stats$$1);
	      var core = reglCore(gl, stringStore, extensions, limits, bufferState, elementState, textureState, framebufferState, uniformState, attributeState, shaderState, drawState, contextState, timer, config);
	      var readPixels = wrapReadPixels(gl, framebufferState, core.procs.poll, contextState, glAttributes, extensions, limits);
	      var nextState = core.next;
	      var canvas = gl.canvas;
	      var rafCallbacks = [];
	      var lossCallbacks = [];
	      var restoreCallbacks = [];
	      var destroyCallbacks = [config.onDestroy];
	      var activeRAF = null;

	      function handleRAF() {
	        if (rafCallbacks.length === 0) {
	          if (timer) {
	            timer.update();
	          }

	          activeRAF = null;
	          return;
	        }

	        activeRAF = raf.next(handleRAF);

	        _poll();

	        for (var i = rafCallbacks.length - 1; i >= 0; --i) {
	          var cb = rafCallbacks[i];

	          if (cb) {
	            cb(contextState, null, 0);
	          }
	        }

	        gl.flush();

	        if (timer) {
	          timer.update();
	        }
	      }

	      function startRAF() {
	        if (!activeRAF && rafCallbacks.length > 0) {
	          activeRAF = raf.next(handleRAF);
	        }
	      }

	      function stopRAF() {
	        if (activeRAF) {
	          raf.cancel(handleRAF);
	          activeRAF = null;
	        }
	      }

	      function handleContextLoss(event) {
	        event.preventDefault();
	        contextLost = true;
	        stopRAF();
	        lossCallbacks.forEach(function (cb) {
	          cb();
	        });
	      }

	      function handleContextRestored(event) {
	        gl.getError();
	        contextLost = false;
	        extensionState.restore();
	        shaderState.restore();
	        bufferState.restore();
	        textureState.restore();
	        renderbufferState.restore();
	        framebufferState.restore();

	        if (timer) {
	          timer.restore();
	        }

	        core.procs.refresh();
	        startRAF();
	        restoreCallbacks.forEach(function (cb) {
	          cb();
	        });
	      }

	      if (canvas) {
	        canvas.addEventListener(CONTEXT_LOST_EVENT, handleContextLoss, false);
	        canvas.addEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored, false);
	      }

	      function destroy() {
	        rafCallbacks.length = 0;
	        stopRAF();

	        if (canvas) {
	          canvas.removeEventListener(CONTEXT_LOST_EVENT, handleContextLoss);
	          canvas.removeEventListener(CONTEXT_RESTORED_EVENT, handleContextRestored);
	        }

	        shaderState.clear();
	        framebufferState.clear();
	        renderbufferState.clear();
	        textureState.clear();
	        elementState.clear();
	        bufferState.clear();

	        if (timer) {
	          timer.clear();
	        }

	        destroyCallbacks.forEach(function (cb) {
	          cb();
	        });
	      }

	      function compileProcedure(options) {
	        check$1(!!options, 'invalid args to regl({...})');
	        check$1.type(options, 'object', 'invalid args to regl({...})');

	        function flattenNestedOptions(options) {
	          var result = extend({}, options);
	          delete result.uniforms;
	          delete result.attributes;
	          delete result.context;

	          if ('stencil' in result && result.stencil.op) {
	            result.stencil.opBack = result.stencil.opFront = result.stencil.op;
	            delete result.stencil.op;
	          }

	          function merge(name) {
	            if (name in result) {
	              var child = result[name];
	              delete result[name];
	              Object.keys(child).forEach(function (prop) {
	                result[name + '.' + prop] = child[prop];
	              });
	            }
	          }

	          merge('blend');
	          merge('depth');
	          merge('cull');
	          merge('stencil');
	          merge('polygonOffset');
	          merge('scissor');
	          merge('sample');
	          return result;
	        }

	        function separateDynamic(object) {
	          var staticItems = {};
	          var dynamicItems = {};
	          Object.keys(object).forEach(function (option) {
	            var value = object[option];

	            if (dynamic.isDynamic(value)) {
	              dynamicItems[option] = dynamic.unbox(value, option);
	            } else {
	              staticItems[option] = value;
	            }
	          });
	          return {
	            dynamic: dynamicItems,
	            static: staticItems
	          };
	        }

	        var context = separateDynamic(options.context || {});
	        var uniforms = separateDynamic(options.uniforms || {});
	        var attributes = separateDynamic(options.attributes || {});
	        var opts = separateDynamic(flattenNestedOptions(options));
	        var stats$$1 = {
	          gpuTime: 0.0,
	          cpuTime: 0.0,
	          count: 0
	        };
	        var compiled = core.compile(opts, attributes, uniforms, context, stats$$1);
	        var draw = compiled.draw;
	        var batch = compiled.batch;
	        var scope = compiled.scope;
	        var EMPTY_ARRAY = [];

	        function reserve(count) {
	          while (EMPTY_ARRAY.length < count) {
	            EMPTY_ARRAY.push(null);
	          }

	          return EMPTY_ARRAY;
	        }

	        function REGLCommand(args, body) {
	          var i;

	          if (contextLost) {
	            check$1.raise('context lost');
	          }

	          if (typeof args === 'function') {
	            return scope.call(this, null, args, 0);
	          } else if (typeof body === 'function') {
	            if (typeof args === 'number') {
	              for (i = 0; i < args; ++i) {
	                scope.call(this, null, body, i);
	              }

	              return;
	            } else if (Array.isArray(args)) {
	              for (i = 0; i < args.length; ++i) {
	                scope.call(this, args[i], body, i);
	              }

	              return;
	            } else {
	              return scope.call(this, args, body, 0);
	            }
	          } else if (typeof args === 'number') {
	            if (args > 0) {
	              return batch.call(this, reserve(args | 0), args | 0);
	            }
	          } else if (Array.isArray(args)) {
	            if (args.length) {
	              return batch.call(this, args, args.length);
	            }
	          } else {
	            return draw.call(this, args);
	          }
	        }

	        return extend(REGLCommand, {
	          stats: stats$$1
	        });
	      }

	      var setFBO = framebufferState.setFBO = compileProcedure({
	        framebuffer: dynamic.define.call(null, DYN_PROP, 'framebuffer')
	      });

	      function clearImpl(_, options) {
	        var clearFlags = 0;
	        core.procs.poll();
	        var c = options.color;

	        if (c) {
	          gl.clearColor(+c[0] || 0, +c[1] || 0, +c[2] || 0, +c[3] || 0);
	          clearFlags |= GL_COLOR_BUFFER_BIT;
	        }

	        if ('depth' in options) {
	          gl.clearDepth(+options.depth);
	          clearFlags |= GL_DEPTH_BUFFER_BIT;
	        }

	        if ('stencil' in options) {
	          gl.clearStencil(options.stencil | 0);
	          clearFlags |= GL_STENCIL_BUFFER_BIT;
	        }

	        check$1(!!clearFlags, 'called regl.clear with no buffer specified');
	        gl.clear(clearFlags);
	      }

	      function clear(options) {
	        check$1(typeof options === 'object' && options, 'regl.clear() takes an object as input');

	        if ('framebuffer' in options) {
	          if (options.framebuffer && options.framebuffer_reglType === 'framebufferCube') {
	            for (var i = 0; i < 6; ++i) {
	              setFBO(extend({
	                framebuffer: options.framebuffer.faces[i]
	              }, options), clearImpl);
	            }
	          } else {
	            setFBO(options, clearImpl);
	          }
	        } else {
	          clearImpl(null, options);
	        }
	      }

	      function frame(cb) {
	        check$1.type(cb, 'function', 'regl.frame() callback must be a function');
	        rafCallbacks.push(cb);

	        function cancel() {
	          var i = find(rafCallbacks, cb);
	          check$1(i >= 0, 'cannot cancel a frame twice');

	          function pendingCancel() {
	            var index = find(rafCallbacks, pendingCancel);
	            rafCallbacks[index] = rafCallbacks[rafCallbacks.length - 1];
	            rafCallbacks.length -= 1;

	            if (rafCallbacks.length <= 0) {
	              stopRAF();
	            }
	          }

	          rafCallbacks[i] = pendingCancel;
	        }

	        startRAF();
	        return {
	          cancel: cancel
	        };
	      }

	      function pollViewport() {
	        var viewport = nextState.viewport;
	        var scissorBox = nextState.scissor_box;
	        viewport[0] = viewport[1] = scissorBox[0] = scissorBox[1] = 0;
	        contextState.viewportWidth = contextState.framebufferWidth = contextState.drawingBufferWidth = viewport[2] = scissorBox[2] = gl.drawingBufferWidth;
	        contextState.viewportHeight = contextState.framebufferHeight = contextState.drawingBufferHeight = viewport[3] = scissorBox[3] = gl.drawingBufferHeight;
	      }

	      function _poll() {
	        contextState.tick += 1;
	        contextState.time = now();
	        pollViewport();
	        core.procs.poll();
	      }

	      function refresh() {
	        pollViewport();
	        core.procs.refresh();

	        if (timer) {
	          timer.update();
	        }
	      }

	      function now() {
	        return (clock() - START_TIME) / 1000.0;
	      }

	      refresh();

	      function addListener(event, callback) {
	        check$1.type(callback, 'function', 'listener callback must be a function');
	        var callbacks;

	        switch (event) {
	          case 'frame':
	            return frame(callback);

	          case 'lost':
	            callbacks = lossCallbacks;
	            break;

	          case 'restore':
	            callbacks = restoreCallbacks;
	            break;

	          case 'destroy':
	            callbacks = destroyCallbacks;
	            break;

	          default:
	            check$1.raise('invalid event, must be one of frame,lost,restore,destroy');
	        }

	        callbacks.push(callback);
	        return {
	          cancel: function cancel() {
	            for (var i = 0; i < callbacks.length; ++i) {
	              if (callbacks[i] === callback) {
	                callbacks[i] = callbacks[callbacks.length - 1];
	                callbacks.pop();
	                return;
	              }
	            }
	          }
	        };
	      }

	      var regl = extend(compileProcedure, {
	        clear: clear,
	        prop: dynamic.define.bind(null, DYN_PROP),
	        context: dynamic.define.bind(null, DYN_CONTEXT),
	        this: dynamic.define.bind(null, DYN_STATE),
	        draw: compileProcedure({}),
	        buffer: function buffer(options) {
	          return bufferState.create(options, GL_ARRAY_BUFFER, false, false);
	        },
	        elements: function elements(options) {
	          return elementState.create(options, false);
	        },
	        texture: textureState.create2D,
	        cube: textureState.createCube,
	        renderbuffer: renderbufferState.create,
	        framebuffer: framebufferState.create,
	        framebufferCube: framebufferState.createCube,
	        attributes: glAttributes,
	        frame: frame,
	        on: addListener,
	        limits: limits,
	        hasExtension: function hasExtension(name) {
	          return limits.extensions.indexOf(name.toLowerCase()) >= 0;
	        },
	        read: readPixels,
	        destroy: destroy,
	        _gl: gl,
	        _refresh: refresh,
	        poll: function poll() {
	          _poll();

	          if (timer) {
	            timer.update();
	          }
	        },
	        now: now,
	        stats: stats$$1
	      });
	      config.onDone(null, regl);
	      return regl;
	    }

	    return wrapREGL;
	  });
	});

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var EPSILON = 0.000001;
	var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
	var degree = Math.PI / 180;

	function create$2() {
	  var out = new ARRAY_TYPE(9);

	  if (ARRAY_TYPE != Float32Array) {
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	  }

	  out[0] = 1;
	  out[4] = 1;
	  out[8] = 1;
	  return out;
	}
	function fromMat4(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[4];
	  out[4] = a[5];
	  out[5] = a[6];
	  out[6] = a[8];
	  out[7] = a[9];
	  out[8] = a[10];
	  return out;
	}

	function identity$3(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = 1;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = 1;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function transpose$2(out, a) {
	  if (out === a) {
	    var a01 = a[1],
	        a02 = a[2],
	        a03 = a[3];
	    var a12 = a[6],
	        a13 = a[7];
	    var a23 = a[11];
	    out[1] = a[4];
	    out[2] = a[8];
	    out[3] = a[12];
	    out[4] = a01;
	    out[6] = a[9];
	    out[7] = a[13];
	    out[8] = a02;
	    out[9] = a12;
	    out[11] = a[14];
	    out[12] = a03;
	    out[13] = a13;
	    out[14] = a23;
	  } else {
	    out[0] = a[0];
	    out[1] = a[4];
	    out[2] = a[8];
	    out[3] = a[12];
	    out[4] = a[1];
	    out[5] = a[5];
	    out[6] = a[9];
	    out[7] = a[13];
	    out[8] = a[2];
	    out[9] = a[6];
	    out[10] = a[10];
	    out[11] = a[14];
	    out[12] = a[3];
	    out[13] = a[7];
	    out[14] = a[11];
	    out[15] = a[15];
	  }

	  return out;
	}
	function invert$3(out, a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  var b00 = a00 * a11 - a01 * a10;
	  var b01 = a00 * a12 - a02 * a10;
	  var b02 = a00 * a13 - a03 * a10;
	  var b03 = a01 * a12 - a02 * a11;
	  var b04 = a01 * a13 - a03 * a11;
	  var b05 = a02 * a13 - a03 * a12;
	  var b06 = a20 * a31 - a21 * a30;
	  var b07 = a20 * a32 - a22 * a30;
	  var b08 = a20 * a33 - a23 * a30;
	  var b09 = a21 * a32 - a22 * a31;
	  var b10 = a21 * a33 - a23 * a31;
	  var b11 = a22 * a33 - a23 * a32;
	  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
	  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
	  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
	  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
	  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
	  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
	  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	  return out;
	}
	function multiply$3(out, a, b) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3];
	  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  b0 = b[4];
	  b1 = b[5];
	  b2 = b[6];
	  b3 = b[7];
	  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  b0 = b[8];
	  b1 = b[9];
	  b2 = b[10];
	  b3 = b[11];
	  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  b0 = b[12];
	  b1 = b[13];
	  b2 = b[14];
	  b3 = b[15];
	  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  return out;
	}
	function translate$2(out, a, v) {
	  var x = v[0],
	      y = v[1],
	      z = v[2];
	  var a00 = void 0,
	      a01 = void 0,
	      a02 = void 0,
	      a03 = void 0;
	  var a10 = void 0,
	      a11 = void 0,
	      a12 = void 0,
	      a13 = void 0;
	  var a20 = void 0,
	      a21 = void 0,
	      a22 = void 0,
	      a23 = void 0;

	  if (a === out) {
	    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
	    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
	    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
	    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	  } else {
	    a00 = a[0];
	    a01 = a[1];
	    a02 = a[2];
	    a03 = a[3];
	    a10 = a[4];
	    a11 = a[5];
	    a12 = a[6];
	    a13 = a[7];
	    a20 = a[8];
	    a21 = a[9];
	    a22 = a[10];
	    a23 = a[11];
	    out[0] = a00;
	    out[1] = a01;
	    out[2] = a02;
	    out[3] = a03;
	    out[4] = a10;
	    out[5] = a11;
	    out[6] = a12;
	    out[7] = a13;
	    out[8] = a20;
	    out[9] = a21;
	    out[10] = a22;
	    out[11] = a23;
	    out[12] = a00 * x + a10 * y + a20 * z + a[12];
	    out[13] = a01 * x + a11 * y + a21 * z + a[13];
	    out[14] = a02 * x + a12 * y + a22 * z + a[14];
	    out[15] = a03 * x + a13 * y + a23 * z + a[15];
	  }

	  return out;
	}
	function scale$3(out, a, v) {
	  var x = v[0],
	      y = v[1],
	      z = v[2];
	  out[0] = a[0] * x;
	  out[1] = a[1] * x;
	  out[2] = a[2] * x;
	  out[3] = a[3] * x;
	  out[4] = a[4] * y;
	  out[5] = a[5] * y;
	  out[6] = a[6] * y;
	  out[7] = a[7] * y;
	  out[8] = a[8] * z;
	  out[9] = a[9] * z;
	  out[10] = a[10] * z;
	  out[11] = a[11] * z;
	  out[12] = a[12];
	  out[13] = a[13];
	  out[14] = a[14];
	  out[15] = a[15];
	  return out;
	}
	function perspective(out, fovy, aspect, near, far) {
	  var f = 1.0 / Math.tan(fovy / 2),
	      nf = void 0;
	  out[0] = f / aspect;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = f;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[11] = -1;
	  out[12] = 0;
	  out[13] = 0;
	  out[15] = 0;

	  if (far != null && far !== Infinity) {
	    nf = 1 / (near - far);
	    out[10] = (far + near) * nf;
	    out[14] = 2 * far * near * nf;
	  } else {
	    out[10] = -1;
	    out[14] = -2 * near;
	  }

	  return out;
	}
	function ortho(out, left, right, bottom, top, near, far) {
	  var lr = 1 / (left - right);
	  var bt = 1 / (bottom - top);
	  var nf = 1 / (near - far);
	  out[0] = -2 * lr;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = -2 * bt;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = 2 * nf;
	  out[11] = 0;
	  out[12] = (left + right) * lr;
	  out[13] = (top + bottom) * bt;
	  out[14] = (far + near) * nf;
	  out[15] = 1;
	  return out;
	}
	function lookAt(out, eye, center, up) {
	  var x0 = void 0,
	      x1 = void 0,
	      x2 = void 0,
	      y0 = void 0,
	      y1 = void 0,
	      y2 = void 0,
	      z0 = void 0,
	      z1 = void 0,
	      z2 = void 0,
	      len = void 0;
	  var eyex = eye[0];
	  var eyey = eye[1];
	  var eyez = eye[2];
	  var upx = up[0];
	  var upy = up[1];
	  var upz = up[2];
	  var centerx = center[0];
	  var centery = center[1];
	  var centerz = center[2];

	  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
	    return identity$3(out);
	  }

	  z0 = eyex - centerx;
	  z1 = eyey - centery;
	  z2 = eyez - centerz;
	  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	  z0 *= len;
	  z1 *= len;
	  z2 *= len;
	  x0 = upy * z2 - upz * z1;
	  x1 = upz * z0 - upx * z2;
	  x2 = upx * z1 - upy * z0;
	  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);

	  if (!len) {
	    x0 = 0;
	    x1 = 0;
	    x2 = 0;
	  } else {
	    len = 1 / len;
	    x0 *= len;
	    x1 *= len;
	    x2 *= len;
	  }

	  y0 = z1 * x2 - z2 * x1;
	  y1 = z2 * x0 - z0 * x2;
	  y2 = z0 * x1 - z1 * x0;
	  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);

	  if (!len) {
	    y0 = 0;
	    y1 = 0;
	    y2 = 0;
	  } else {
	    len = 1 / len;
	    y0 *= len;
	    y1 *= len;
	    y2 *= len;
	  }

	  out[0] = x0;
	  out[1] = y0;
	  out[2] = z0;
	  out[3] = 0;
	  out[4] = x1;
	  out[5] = y1;
	  out[6] = z1;
	  out[7] = 0;
	  out[8] = x2;
	  out[9] = y2;
	  out[10] = z2;
	  out[11] = 0;
	  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
	  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
	  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
	  out[15] = 1;
	  return out;
	}

	function create$4() {
	  var out = new ARRAY_TYPE(3);

	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	  }

	  return out;
	}
	function length(a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}
	function fromValues$4(x, y, z) {
	  var out = new ARRAY_TYPE(3);
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}
	function copy$4(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  return out;
	}
	function set$5(out, x, y, z) {
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}
	function add$4(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  return out;
	}
	function subtract$4(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  return out;
	}
	function scale$4(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  return out;
	}
	function distance(a, b) {
	  var x = b[0] - a[0];
	  var y = b[1] - a[1];
	  var z = b[2] - a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}
	function normalize(out, a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var len = x * x + y * y + z * z;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out[0] = a[0] * len;
	    out[1] = a[1] * len;
	    out[2] = a[2] * len;
	  }

	  return out;
	}
	function dot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}
	function cross(out, a, b) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2];
	  out[0] = ay * bz - az * by;
	  out[1] = az * bx - ax * bz;
	  out[2] = ax * by - ay * bx;
	  return out;
	}
	function transformMat4(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
	  w = w || 1.0;
	  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	  return out;
	}
	var sub$4 = subtract$4;
	var dist = distance;
	var len = length;
	var forEach = function () {
	  var vec = create$4();
	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;

	    if (!stride) {
	      stride = 3;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];
	      vec[1] = a[i + 1];
	      vec[2] = a[i + 2];
	      fn(vec, vec, arg);
	      a[i] = vec[0];
	      a[i + 1] = vec[1];
	      a[i + 2] = vec[2];
	    }

	    return a;
	  };
	}();

	function create$5() {
	  var out = new ARRAY_TYPE(4);

	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	  }

	  return out;
	}
	function copy$5(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}
	function set$6(out, x, y, z, w) {
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  out[3] = w;
	  return out;
	}
	function add$5(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  return out;
	}
	function scale$5(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  return out;
	}
	function normalize$1(out, a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var w = a[3];
	  var len = x * x + y * y + z * z + w * w;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out[0] = x * len;
	    out[1] = y * len;
	    out[2] = z * len;
	    out[3] = w * len;
	  }

	  return out;
	}
	function transformMat4$1(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2],
	      w = a[3];
	  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	  return out;
	}
	var forEach$1 = function () {
	  var vec = create$5();
	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;

	    if (!stride) {
	      stride = 4;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];
	      vec[1] = a[i + 1];
	      vec[2] = a[i + 2];
	      vec[3] = a[i + 3];
	      fn(vec, vec, arg);
	      a[i] = vec[0];
	      a[i + 1] = vec[1];
	      a[i + 2] = vec[2];
	      a[i + 3] = vec[3];
	    }

	    return a;
	  };
	}();

	function create$6() {
	  var out = new ARRAY_TYPE(4);

	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	  }

	  out[3] = 1;
	  return out;
	}
	function setAxisAngle(out, axis, rad) {
	  rad = rad * 0.5;
	  var s = Math.sin(rad);
	  out[0] = s * axis[0];
	  out[1] = s * axis[1];
	  out[2] = s * axis[2];
	  out[3] = Math.cos(rad);
	  return out;
	}
	function slerp(out, a, b, t) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2],
	      bw = b[3];
	  var omega = void 0,
	      cosom = void 0,
	      sinom = void 0,
	      scale0 = void 0,
	      scale1 = void 0;
	  cosom = ax * bx + ay * by + az * bz + aw * bw;

	  if (cosom < 0.0) {
	    cosom = -cosom;
	    bx = -bx;
	    by = -by;
	    bz = -bz;
	    bw = -bw;
	  }

	  if (1.0 - cosom > EPSILON) {
	    omega = Math.acos(cosom);
	    sinom = Math.sin(omega);
	    scale0 = Math.sin((1.0 - t) * omega) / sinom;
	    scale1 = Math.sin(t * omega) / sinom;
	  } else {
	    scale0 = 1.0 - t;
	    scale1 = t;
	  }

	  out[0] = scale0 * ax + scale1 * bx;
	  out[1] = scale0 * ay + scale1 * by;
	  out[2] = scale0 * az + scale1 * bz;
	  out[3] = scale0 * aw + scale1 * bw;
	  return out;
	}
	function fromMat3(out, m) {
	  var fTrace = m[0] + m[4] + m[8];
	  var fRoot = void 0;

	  if (fTrace > 0.0) {
	    fRoot = Math.sqrt(fTrace + 1.0);
	    out[3] = 0.5 * fRoot;
	    fRoot = 0.5 / fRoot;
	    out[0] = (m[5] - m[7]) * fRoot;
	    out[1] = (m[6] - m[2]) * fRoot;
	    out[2] = (m[1] - m[3]) * fRoot;
	  } else {
	    var i = 0;
	    if (m[4] > m[0]) i = 1;
	    if (m[8] > m[i * 3 + i]) i = 2;
	    var j = (i + 1) % 3;
	    var k = (i + 2) % 3;
	    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
	    out[i] = 0.5 * fRoot;
	    fRoot = 0.5 / fRoot;
	    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
	    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
	    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
	  }

	  return out;
	}
	var scale$6 = scale$5;
	var normalize$2 = normalize$1;
	var rotationTo = function () {
	  var tmpvec3 = create$4();
	  var xUnitVec3 = fromValues$4(1, 0, 0);
	  var yUnitVec3 = fromValues$4(0, 1, 0);
	  return function (out, a, b) {
	    var dot$$1 = dot(a, b);

	    if (dot$$1 < -0.999999) {
	      cross(tmpvec3, xUnitVec3, a);
	      if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
	      normalize(tmpvec3, tmpvec3);
	      setAxisAngle(out, tmpvec3, Math.PI);
	      return out;
	    } else if (dot$$1 > 0.999999) {
	      out[0] = 0;
	      out[1] = 0;
	      out[2] = 0;
	      out[3] = 1;
	      return out;
	    } else {
	      cross(tmpvec3, a, b);
	      out[0] = tmpvec3[0];
	      out[1] = tmpvec3[1];
	      out[2] = tmpvec3[2];
	      out[3] = 1 + dot$$1;
	      return normalize$2(out, out);
	    }
	  };
	}();
	var sqlerp = function () {
	  var temp1 = create$6();
	  var temp2 = create$6();
	  return function (out, a, b, c, d, t) {
	    slerp(temp1, a, d, t);
	    slerp(temp2, b, c, t);
	    slerp(out, temp1, temp2, 2 * t * (1 - t));
	    return out;
	  };
	}();
	var setAxes = function () {
	  var matr = create$2();
	  return function (out, view, right, up) {
	    matr[0] = right[0];
	    matr[3] = right[1];
	    matr[6] = right[2];
	    matr[1] = up[0];
	    matr[4] = up[1];
	    matr[7] = up[2];
	    matr[2] = -view[0];
	    matr[5] = -view[1];
	    matr[8] = -view[2];
	    return normalize$2(out, fromMat3(out, matr));
	  };
	}();

	function create$8() {
	  var out = new ARRAY_TYPE(2);

	  if (ARRAY_TYPE != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	  }

	  return out;
	}
	var forEach$2 = function () {
	  var vec = create$8();
	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;

	    if (!stride) {
	      stride = 2;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];
	      vec[1] = a[i + 1];
	      fn(vec, vec, arg);
	      a[i] = vec[0];
	      a[i + 1] = vec[1];
	    }

	    return a;
	  };
	}();

	function isString(obj) {
	  if (isNil(obj)) {
	    return false;
	  }

	  return typeof obj === 'string' || obj.constructor !== null && obj.constructor === String;
	}

	function isNil(obj) {
	  return obj == null;
	}

	function isFunction(obj) {
	  if (isNil(obj)) {
	    return false;
	  }

	  return typeof obj === 'function' || obj.constructor !== null && obj.constructor === Function;
	}

	var supportAssign = typeof Object.assign === 'function';

	function extend(dest) {
	  if (supportAssign) {
	    Object.assign.apply(Object, arguments);
	  } else {
	    for (var i = 1; i < arguments.length; i++) {
	      var src = arguments[i];

	      for (var k in src) {
	        dest[k] = src[k];
	      }
	    }
	  }

	  return dest;
	}

	function extend2(dest) {
	  for (var i = 1; i < arguments.length; i++) {
	    var src = arguments[i];

	    for (var k in src) {
	      if (dest[k] === undefined) {
	        dest[k] = src[k];
	      }
	    }
	  }

	  return dest;
	}

	function isNumber(val) {
	  return typeof val === 'number' && !isNaN(val);
	}

	function log2(x) {
	  if (Math.log2) {
	    return Math.log2(x);
	  }

	  var v = Math.log(x) * Math.LOG2E;
	  var rounded = Math.round(v);

	  if (Math.abs(rounded - v) < 1E-14) {
	    return rounded;
	  } else {
	    return v;
	  }
	}

	function normalize$5(out, arr) {
	  var sum = 0;

	  for (var i = 0, l = arr.length; i < l; i++) {
	    sum += arr[i];
	  }

	  for (var _i = 0, _l = arr.length; _i < _l; _i++) {
	    out[_i] = arr[_i] / sum;
	  }

	  return out;
	}

	function interpolate(a, b, t) {
	  return a * (1 - t) + b * t;
	}

	function isArray(arr) {
	  return Array.isArray(arr) || arr instanceof Uint8Array || arr instanceof Int8Array || arr instanceof Uint16Array || arr instanceof Int16Array || arr instanceof Uint32Array || arr instanceof Int32Array || arr instanceof Uint8ClampedArray || arr instanceof Float32Array || arr instanceof Float64Array;
	}

	var Util = Object.freeze({
	  isString: isString,
	  isNil: isNil,
	  isFunction: isFunction,
	  extend: extend,
	  extend2: extend2,
	  isNumber: isNumber,
	  log2: log2,
	  normalize: normalize$5,
	  interpolate: interpolate,
	  isArray: isArray
	});

	var Eventable = function Eventable(Base) {
	  return function (_Base) {
	    _inheritsLoose(_class, _Base);

	    function _class() {
	      return _Base.apply(this, arguments) || this;
	    }

	    var _proto = _class.prototype;

	    _proto.on = function on(type, handler) {
	      if (!this._events) {
	        this._events = {
	          type: [handler]
	        };
	      }

	      this._events[type] = this._events[type] || [];

	      this._events[type].push(handler);

	      return this;
	    };

	    _proto.once = function once(type, handler) {
	      return this.on(type, this._wrapOnce(type, handler));
	    };

	    _proto.off = function off(type, handler) {
	      if (!this._events || !this._events[type]) {
	        return this;
	      }

	      this._events[type].splice(this._events[type].indexOf(handler), 1);

	      return this;
	    };

	    _proto.fire = function fire(type, params) {
	      if (params === void 0) {
	        params = {};
	      }

	      if (!this._events || !this._events[type]) {
	        return this;
	      }

	      if (!params.target) {
	        params.target = this;
	      }

	      var queue = this._events[type].slice(0);

	      for (var _iterator = queue, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	        var _ref;

	        if (_isArray) {
	          if (_i2 >= _iterator.length) break;
	          _ref = _iterator[_i2++];
	        } else {
	          _i2 = _iterator.next();
	          if (_i2.done) break;
	          _ref = _i2.value;
	        }

	        var p = _ref;
	        p(params);
	      }

	      return this;
	    };

	    _proto._wrapOnce = function _wrapOnce(type, handler) {
	      var self = this;
	      var called = false;

	      var fn = function onceHandler(params) {
	        if (called) {
	          return;
	        }

	        called = true;
	        handler(params);
	        self.off(type, onceHandler);
	      };

	      return fn;
	    };

	    return _class;
	  }(Base);
	};

	var AbstractTexture = function () {
	  function AbstractTexture(config, resLoader) {
	    var _this = this;

	    if (isFunction(config)) {
	      this._texture = config;
	      config = this.config = {};

	      for (var p in this._texture) {
	        if (this._texture.hasOwnProperty(p)) {
	          if (!isFunction(this._texture[p])) {
	            config[p] = this._texture[p];
	          }
	        }
	      }
	    } else {
	      this.config = config || {};
	      this.resLoader = resLoader;

	      if ((config.url || config.promise) && !config.data) {
	        this._loading = true;

	        var _self = this;

	        var _promise;

	        if (config.promise) {
	          _promise = config.promise;
	        } else {
	          var loadFn;

	          if (config.arrayBuffer) {
	            loadFn = resLoader.getArrayBuffer;
	          } else {
	            loadFn = resLoader.get;
	          }

	          _promise = loadFn.call(resLoader, config.url);
	        }

	        config.data = resLoader.getDefaultTexture(config.url);
	        this.promise = _promise;

	        _promise.then(function (data) {
	          if (data.data instanceof Image && _this._needPowerOf2()) {
	            data.data = resize(data.data);
	          }

	          delete _this.promise;
	          _self._loading = false;

	          if (!_self.config) {
	            return data;
	          }

	          _self.onLoad(data);

	          if (!Array.isArray(data)) {
	            data = [data];
	          }

	          _self.fire('complete', {
	            target: _this,
	            resources: data
	          });

	          return data;
	        }).catch(function (err) {
	          console.error('error when loading texture image.', err);
	        });
	      }
	    }
	  }

	  var _proto2 = AbstractTexture.prototype;

	  _proto2.isReady = function isReady() {
	    return !this._loading;
	  };

	  _proto2.set = function set(k, v) {
	    this.config[k] = v;
	    this.dirty = true;
	    return this;
	  };

	  _proto2.get = function get(k) {
	    return this.config[k];
	  };

	  _proto2.getREGLTexture = function getREGLTexture(regl) {
	    if (!this._texture) {
	      this._texture = this.createREGLTexture(regl);
	    }

	    if (this.dirty) {
	      this._updateREGL();
	    }

	    return this._texture;
	  };

	  _proto2._updateREGL = function _updateREGL() {
	    if (this._texture) {
	      this._texture(this.config);
	    }

	    this.dirty = false;
	  };

	  _proto2.dispose = function dispose() {
	    if (this.config.url) {
	      this.resLoader.disposeRes(this.config.url);
	    }

	    if (this._texture && !this._texture['__destroyed']) {
	      this._texture.destroy();

	      this._texture['__destroyed'] = true;
	    }

	    delete this.resLoader;
	    this.fire('disposed', {
	      target: this,
	      url: this.config.url
	    });
	    delete this.config;
	  };

	  _proto2._needPowerOf2 = function _needPowerOf2() {
	    var config = this.config;
	    var isRepeat = config.wrap && config.wrap !== 'clamp' || config.wrapS && config.wrapS !== 'clamp' || config.wrapT && config.wrapT !== 'clamp';
	    return isRepeat || config.min && config.min !== 'nearest' && config.min !== 'linear';
	  };

	  return AbstractTexture;
	}();

	var Texture = Eventable(AbstractTexture);

	function resize(image) {
	  if (isPowerOfTwo(image.width) && isPowerOfTwo(image.height)) {
	    return image;
	  }

	  var width = image.width;
	  var height = image.height;

	  if (!isPowerOfTwo(width)) {
	    width = floorPowerOfTwo(width);
	  }

	  if (!isPowerOfTwo(height)) {
	    height = floorPowerOfTwo(height);
	  }

	  var canvas = document.createElement('canvas');
	  canvas.width = width;
	  canvas.height = height;
	  canvas.getContext('2d').drawImage(image, 0, 0, width, height);
	  var url = image.src;
	  var idx = url.lastIndexOf('/') + 1;
	  var filename = url.substring(idx);
	  console.warn("Texture(" + filename + ")'s size is not power of two, resize from (" + image.width + ", " + image.height + ") to (" + width + ", " + height + ")");
	  return canvas;
	}

	function isPowerOfTwo(value) {
	  return (value & value - 1) === 0 && value !== 0;
	}

	function floorPowerOfTwo(value) {
	  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
	}

	var Renderer = function () {
	  function Renderer(regl) {
	    this.regl = regl;
	  }

	  var _proto3 = Renderer.prototype;

	  _proto3.render = function render(shader, uniforms, scene, framebuffer) {
	    shader.setUniforms(uniforms || {});
	    shader.setFramebuffer(framebuffer);

	    if (scene) {
	      var _scene$getSortedMeshe = scene.getSortedMeshes(),
	          opaques = _scene$getSortedMeshe.opaques,
	          transparents = _scene$getSortedMeshe.transparents;

	      shader.draw(this.regl, opaques);
	      shader.draw(this.regl, transparents);
	    } else {
	      shader.draw(this.regl);
	    }

	    return this;
	  };

	  _proto3.clear = function clear(options) {
	    this.regl.clear(options);
	  };

	  return Renderer;
	}();

	var DeferredRenderer = function (_Renderer) {
	  _inheritsLoose(DeferredRenderer, _Renderer);

	  function DeferredRenderer() {
	    return _Renderer.apply(this, arguments) || this;
	  }

	  return DeferredRenderer;
	}(Renderer);

	var CHAR_BIT = 8;
	var MAT0 = [];
	var TMP0 = [];
	var TMP1 = [];
	var TMP2 = [];

	function packTangentFrame(q, n, t) {
	  var c = cross(TMP0, n, t);
	  var mat = toMat3.apply(void 0, [MAT0, t[0], t[1], t[2]].concat(c, n));
	  q = fromMat3(q, mat);
	  q = normalize$2(q, q);
	  q = positive(q);
	  var storageSize = 2;
	  var bias = 1 / ((1 << storageSize * CHAR_BIT - 1) - 1);

	  if (q[3] < bias) {
	    q[3] = bias;
	    var factor = Math.sqrt(1.0 - bias * bias);
	    q[0] *= factor;
	    q[1] *= factor;
	    q[2] *= factor;
	  }

	  var b = t[3] > 0 ? cross(TMP1, t, n) : cross(TMP1, n, t);
	  var cc = cross(TMP2, t, n);

	  if (dot(cc, b) < 0) {
	    scale$6(q, q, -1);
	  }

	  return q;
	}

	function toMat3(out, c00, c01, c02, c10, c11, c12, c20, c21, c22) {
	  out[0] = c00;
	  out[1] = c01;
	  out[2] = c02;
	  out[3] = c10;
	  out[4] = c11;
	  out[5] = c12;
	  out[6] = c20;
	  out[7] = c21;
	  out[8] = c22;
	  return out;
	}

	function positive(q) {
	  if (q[3] < 0) {
	    return scale$6(q, q, -1);
	  } else {
	    return q;
	  }
	}

	function buildTangents(positions, normals, uvs, indices) {
	  var nVertices = positions.length / 3;
	  var tangents = new Array(4 * nVertices);
	  var tan1 = [],
	      tan2 = [];

	  for (var i = 0; i < nVertices; i++) {
	    tan1[i] = [0, 0, 0];
	    tan2[i] = [0, 0, 0];
	  }

	  var vA = [0, 0, 0],
	      vB = [0, 0, 0],
	      vC = [0, 0, 0],
	      uvA = [0, 0],
	      uvB = [0, 0],
	      uvC = [0, 0],
	      sdir = [0, 0, 0],
	      tdir = [0, 0, 0];

	  function handleTriangle(a, b, c) {
	    fromArray3(vA, positions, a * 3);
	    fromArray3(vB, positions, b * 3);
	    fromArray3(vC, positions, c * 3);
	    fromArray2(uvA, uvs, a * 2);
	    fromArray2(uvB, uvs, b * 2);
	    fromArray2(uvC, uvs, c * 2);
	    var x1 = vB[0] - vA[0];
	    var x2 = vC[0] - vA[0];
	    var y1 = vB[1] - vA[1];
	    var y2 = vC[1] - vA[1];
	    var z1 = vB[2] - vA[2];
	    var z2 = vC[2] - vA[2];
	    var s1 = uvB[0] - uvA[0];
	    var s2 = uvC[0] - uvA[0];
	    var t1 = uvB[1] - uvA[1];
	    var t2 = uvC[1] - uvA[1];
	    var r = 1.0 / (s1 * t2 - s2 * t1);
	    set$5(sdir, (t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
	    set$5(tdir, (s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);
	    add$4(tan1[a], tan1[a], sdir);
	    add$4(tan1[b], tan1[b], sdir);
	    add$4(tan1[c], tan1[c], sdir);
	    add$4(tan2[a], tan2[a], tdir);
	    add$4(tan2[b], tan2[b], tdir);
	    add$4(tan2[c], tan2[c], tdir);
	  }

	  for (var j = 0, jl = indices.length; j < jl; j += 3) {
	    handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);
	  }

	  var tmp = [],
	      tmp2 = [];
	  var n = [],
	      n2 = [];
	  var w, t, test;

	  function handleVertex(v) {
	    fromArray3(n, normals, v * 3);
	    copy$4(n2, n);
	    t = tan1[v];
	    copy$4(tmp, t);
	    sub$4(tmp, tmp, scale$4(n, n, dot(n, t)));
	    normalize(tmp, tmp);
	    cross(tmp2, n2, t);
	    test = dot(tmp2, tan2[v]);
	    w = test < 0.0 ? -1.0 : 1.0;
	    tangents[v * 4] = tmp[0];
	    tangents[v * 4 + 1] = tmp[1];
	    tangents[v * 4 + 2] = tmp[2];
	    tangents[v * 4 + 3] = w;
	  }

	  for (var _j = 0, _jl = indices.length; _j < _jl; _j += 3) {
	    handleVertex(indices[_j + 0]);
	    handleVertex(indices[_j + 1]);
	    handleVertex(indices[_j + 2]);
	  }

	  return tangents;
	}

	function fromArray3(out, array, offset) {
	  out[0] = array[offset];
	  out[1] = array[offset + 1];
	  out[2] = array[offset + 2];
	  return out;
	}

	function fromArray2(out, array, offset) {
	  out[0] = array[offset];
	  out[1] = array[offset + 1];
	  return out;
	}

	var BoundingBox = function () {
	  function BoundingBox(min$$1, max$$1) {
	    this.min = min$$1 || [Infinity, Infinity, Infinity];
	    this.max = max$$1 || [-Infinity, -Infinity, -Infinity];
	  }

	  var _proto4 = BoundingBox.prototype;

	  _proto4.dirty = function dirty() {
	    this._dirty = true;
	    return this;
	  };

	  _proto4.getCenter = function getCenter() {
	    if (!this.center) {
	      this.center = [];
	      this._dirty = true;
	    }

	    if (this._dirty) {
	      add$4(this.center, this.min, this.max);
	      scale$4(this.center, this.center, 0.5);
	    }

	    this._dirty = false;
	    return this.center;
	  };

	  _proto4.containPoint = function containPoint(p) {
	    var min$$1 = this.min;
	    var max$$1 = this.max;
	    return min$$1[0] <= p[0] && min$$1[1] <= p[1] && min$$1[2] <= p[2] && max$$1[0] >= p[0] && max$$1[1] >= p[1] && max$$1[2] >= p[2];
	  };

	  _proto4.isFinite = function (_isFinite) {
	    function isFinite() {
	      return _isFinite.apply(this, arguments);
	    }

	    isFinite.toString = function () {
	      return _isFinite.toString();
	    };

	    return isFinite;
	  }(function () {
	    var min$$1 = this.min;
	    var max$$1 = this.max;
	    return isFinite(min$$1[0]) && isFinite(min$$1[1]) && isFinite(min$$1[2]) && isFinite(max$$1[0]) && isFinite(max$$1[1]) && isFinite(max$$1[2]);
	  });

	  return BoundingBox;
	}();

	var DEFAULT_DESC = {
	  'positionSize': 3,
	  'primitive': 'triangles',
	  'positionAttribute': 'aPosition',
	  'normalAttribute': 'aNormal',
	  'uv0Attribute': 'aTexCoord'
	};

	var Geometry = function () {
	  function Geometry(data, elements, count, desc) {
	    this.data = data;
	    this.elements = elements;
	    this.desc = extend({}, DEFAULT_DESC, desc);
	    var pos = data[this.desc.positionAttribute];

	    if (!count) {
	      if (elements) {
	        count = getElementLength(elements);
	      } else if (pos && pos.length) {
	        count = pos.length / this.desc.positionSize;
	      }
	    }

	    this.count = count;

	    if (!this.elements) {
	      this.elements = count;
	    }

	    this.properties = {};
	    this._buffers = {};
	    this.updateBoundingBox();
	  }

	  var _proto5 = Geometry.prototype;

	  _proto5.generateBuffers = function generateBuffers(regl) {
	    var allocatedBuffers = this._buffers;

	    for (var p in allocatedBuffers) {
	      if (!allocatedBuffers[p].buffer) {
	        allocatedBuffers[p].buffer = regl.buffer(allocatedBuffers[p].data);
	      }

	      delete allocatedBuffers[p].data;
	    }

	    var data = this.data;
	    var buffers = {};

	    for (var key in data) {
	      if (!data[key]) {
	        continue;
	      }

	      if (data[key].buffer !== undefined && !(data[key].buffer instanceof ArrayBuffer)) {
	        if (data[key].buffer.destroy) {
	          buffers[key] = data[key];
	        } else if (allocatedBuffers[data[key].buffer]) {
	          buffers[key] = extend({}, data[key]);
	          buffers[key].buffer = allocatedBuffers[data[key].buffer].buffer;
	        }
	      } else {
	        buffers[key] = {
	          buffer: regl.buffer(data[key])
	        };
	      }
	    }

	    this.data = buffers;

	    if (this.elements && !isNumber(this.elements)) {
	      this.elements = this.elements.destroy ? this.elements : regl.elements({
	        primitive: this.getPrimitive(),
	        data: this.elements
	      });
	    }
	  };

	  _proto5.addBuffer = function addBuffer(key, data) {
	    this._buffers[key] = {
	      data: data
	    };
	    return this;
	  };

	  _proto5.updateBuffer = function updateBuffer(key, data) {
	    if (!this._buffers[key]) {
	      throw new Error("invalid buffer " + key + " in geometry");
	    }

	    if (this._buffers[key].buffer) {
	      this._buffers[key].buffer.subdata(data);
	    } else {
	      this._buffers[key].data = data;
	    }

	    return this;
	  };

	  _proto5.updateData = function updateData(name, data) {
	    var buf = this.data[name];

	    if (!buf) {
	      return this;
	    }

	    var buffer;
	    this.data[name] = data;

	    if (buf.buffer && buf.buffer.destroy) {
	      buffer = buf;
	    }

	    if (name === this.desc.positionAttribute) {
	      this.updateBoundingBox();
	    }

	    if (buffer) {
	      buffer.buffer.subdata(data);
	      this.data[name] = buffer;
	    }

	    return this;
	  };

	  _proto5.getPrimitive = function getPrimitive() {
	    return this.desc.primitive;
	  };

	  _proto5.getAttributes = function getAttributes() {
	    return Object.keys(this.data);
	  };

	  _proto5.getElements = function getElements() {
	    return this.elements;
	  };

	  _proto5.setElements = function setElements(elements, count) {
	    if (!elements) {
	      throw new Error('elements data is invalid');
	    }

	    var e = this.elements;
	    this.count = count === undefined ? getElementLength(elements) : count;

	    if (e.destroy) {
	      this.elements = e(elements);
	    } else {
	      this.elements = elements;
	    }

	    return this;
	  };

	  _proto5.setDrawCount = function setDrawCount(count) {
	    this.count1 = count;
	    return this;
	  };

	  _proto5.getDrawCount = function getDrawCount() {
	    return this.count1 || this.count;
	  };

	  _proto5.setDrawOffset = function setDrawOffset(offset) {
	    this.offset = offset;
	    return this;
	  };

	  _proto5.getDrawOffset = function getDrawOffset() {
	    return this.offset || 0;
	  };

	  _proto5.dispose = function dispose() {
	    this._forEachBuffer(function (buffer) {
	      if (!buffer['__reshader_disposed']) {
	        buffer['__reshader_disposed'] = true;
	        buffer.destroy();
	      }
	    });

	    this.data = {};
	    this._buffers = {};
	    this.count = 0;
	    this.elements = [];
	    this._disposed = true;
	  };

	  _proto5.isDisposed = function isDisposed() {
	    return !!this._disposed;
	  };

	  _proto5.updateBoundingBox = function updateBoundingBox() {
	    var bbox = this.boundingBox;

	    if (!bbox) {
	      bbox = this.boundingBox = new BoundingBox();
	    }

	    var posAttr = this.desc.positionAttribute;
	    var posArr = this.data[posAttr];

	    if (!isArray(posArr)) {
	      posArr = posArr.data;
	    }

	    if (posArr && posArr.length) {
	      var _min = bbox.min;
	      var _max = bbox.max;
	      set$5(_min, posArr[0], posArr[1], posArr[2]);
	      set$5(_max, posArr[0], posArr[1], posArr[2]);

	      for (var i = 3; i < posArr.length;) {
	        var x = posArr[i++];
	        var y = posArr[i++];
	        var z = posArr[i++];

	        if (x < _min[0]) {
	          _min[0] = x;
	        }

	        if (y < _min[1]) {
	          _min[1] = y;
	        }

	        if (z < _min[2]) {
	          _min[2] = z;
	        }

	        if (x > _max[0]) {
	          _max[0] = x;
	        }

	        if (y > _max[1]) {
	          _max[1] = y;
	        }

	        if (z > _max[2]) {
	          _max[2] = z;
	        }
	      }

	      bbox.dirty();
	    }
	  };

	  _proto5.createTangent = function createTangent(name) {
	    if (name === void 0) {
	      name = 'aTangent';
	    }

	    var normals = this.data[this.desc.normalAttribute];
	    var tangents = buildTangents(this.data[this.desc.positionAttribute], normals, this.data[this.desc.uv0Attribute], this.elements);
	    var aTangent = this.data[name] = new Float32Array(tangents.length);
	    var t = [],
	        n = [],
	        q = [];

	    for (var i = 0; i < tangents.length; i += 4) {
	      var ni = i / 4 * 3;
	      set$5(n, normals[ni], normals[ni + 1], normals[ni + 2]);
	      set$6(t, tangents[i], tangents[i + 1], tangents[i + 2], tangents[i + 3]);
	      packTangentFrame(q, n, t);
	      copy$5(aTangent.subarray(i, i + 4), q);
	    }
	  };

	  _proto5.createBarycentric = function createBarycentric(name) {
	    if (name === void 0) {
	      name = 'aBarycentric';
	    }

	    var position = this.data[this.desc.positionAttribute];

	    if (!isArray(position)) {
	      throw new Error('Position data must be an array to create bary centric data');
	    } else if (this.desc.primitive !== 'triangles') {
	      throw new Error('Primitive must be triangles to create bary centric data');
	    }

	    var bary = new Uint8Array(position.length / this.desc.positionSize * 3);

	    for (var i = 0, l = this.elements.length; i < l;) {
	      for (var j = 0; j < 3; j++) {
	        var ii = this.elements[i++];
	        bary[ii * 3 + j] = 1;
	      }
	    }

	    this.data[name] = bary;
	  };

	  _proto5.buildUniqueVertex = function buildUniqueVertex() {
	    var data = this.data;
	    var indices = this.elements;

	    if (!isArray(indices)) {
	      throw new Error('elements must be array to build unique vertex.');
	    }

	    var keys = Object.keys(data);
	    var oldData = {};
	    var pos = data[this.desc.positionAttribute];

	    if (!isArray(pos)) {
	      throw new Error(this.desc.positionAttribute + ' must be array to build unique vertex.');
	    }

	    var vertexCount = pos.length / this.desc.positionSize;
	    var l = indices.length;

	    for (var i = 0; i < keys.length; i++) {
	      var name = keys[i];
	      var size = data[name].length / vertexCount;

	      if (!isArray(data[name])) {
	        throw new Error(name + ' must be array to build unique vertex.');
	      }

	      oldData[name] = data[name];
	      oldData[name].size = size;
	      data[name] = new data[name].constructor(l * size);
	    }

	    var cursor = 0;

	    for (var _i3 = 0; _i3 < l; _i3++) {
	      var idx = indices[_i3];

	      for (var ii = 0; ii < keys.length; ii++) {
	        var _name = keys[ii];
	        var array = data[_name];
	        var _size = oldData[_name].size;

	        for (var k = 0; k < _size; k++) {
	          array[cursor * _size + k] = oldData[_name][idx * _size + k];
	        }
	      }

	      indices[_i3] = cursor++;
	    }
	  };

	  _proto5.getMemorySize = function getMemorySize() {
	    var size = 0;

	    for (var p in this.data) {
	      if (this.data.hasOwnProperty(p)) {
	        var buffer = this.data[p];

	        if (buffer.data) {
	          size += buffer.data.length * buffer.data.BYTES_PER_ELEMENT;
	        } else {
	          size += buffer.length * buffer.BYTES_PER_ELEMENT;
	        }
	      }
	    }

	    return size;
	  };

	  _proto5._forEachBuffer = function _forEachBuffer(fn) {
	    if (this.elements && this.elements.destroy) {
	      fn(this.elements);
	    }

	    for (var p in this.data) {
	      if (this.data.hasOwnProperty(p)) {
	        if (this.data[p] && this.data[p].buffer && this.data[p].buffer.destroy) {
	          fn(this.data[p].buffer);
	        }
	      }
	    }

	    for (var _p in this._buffers) {
	      if (this._buffers.hasOwnProperty(_p)) {
	        if (this._buffers[_p] && this._buffers[_p].buffer && this._buffers[_p].buffer.destroy) {
	          fn(this._buffers[_p].buffer);
	        }
	      }
	    }
	  };

	  return Geometry;
	}();

	function getElementLength(elements) {
	  if (isNumber(elements)) {
	    return elements;
	  } else if (elements.length !== undefined) {
	    return elements.length;
	  } else if (elements.data) {
	    return elements.data.length;
	  }

	  throw new Error('invalid elements length');
	}

	var Material = function () {
	  function Material(uniforms, defaultUniforms) {
	    if (uniforms === void 0) {
	      uniforms = {};
	    }

	    this.uniforms = extend({}, defaultUniforms || {}, uniforms);

	    for (var p in uniforms) {
	      var getter = Object.getOwnPropertyDescriptor(uniforms, p).get;

	      if (getter) {
	        Object.defineProperty(this.uniforms, p, {
	          get: getter
	        });
	      }
	    }

	    this._dirtyUniforms = 'texture';
	    this.dirtyDefines = true;
	    this._reglUniforms = {};
	    this.refCount = 0;
	    this._bindedOnTextureComplete = this._onTextureComplete.bind(this);

	    this._checkTextures();
	  }

	  var _proto6 = Material.prototype;

	  _proto6.isReady = function isReady() {
	    return this._loadingCount <= 0;
	  };

	  _proto6.set = function set(k, v) {
	    this.uniforms[k] = v;
	    this._dirtyUniforms = this.isTexture(k) ? 'texture' : 'primitive';

	    if (this._dirtyUniforms === 'texture') {
	      this._checkTextures();
	    }

	    return this;
	  };

	  _proto6.get = function get(k) {
	    return this.uniforms[k];
	  };

	  _proto6.isDirty = function isDirty() {
	    return this._dirtyUniforms || this.dirtyDefines;
	  };

	  _proto6.getDefines = function getDefines() {
	    if (!this.dirtyDefines) {
	      return this._defines;
	    }

	    if (this.createDefines) {
	      this._defines = this.createDefines();
	    } else {
	      this._defines = {};
	    }

	    this.dirtyDefines = false;
	    return this._defines;
	  };

	  _proto6.getUniforms = function getUniforms(regl) {
	    var _this2 = this;

	    if (!this._dirtyUniforms) {
	      return this._reglUniforms;
	    }

	    var uniforms = this.uniforms;
	    var realUniforms = {};

	    var _loop = function _loop(p) {
	      var v = _this2.uniforms[p];

	      if (_this2.isTexture(p)) {
	        if (_this2._dirtyUniforms === 'primitive' && _this2._reglUniforms[p]) {
	          realUniforms[p] = _this2._reglUniforms[p];
	        } else {
	          if (_this2._reglUniforms[p]) {
	            _this2._reglUniforms[p].destroy();
	          }

	          realUniforms[p] = v.getREGLTexture(regl);
	        }
	      } else {
	        Object.defineProperty(realUniforms, p, {
	          enumerable: true,
	          configurable: true,
	          get: function get() {
	            return uniforms && uniforms[p];
	          }
	        });
	      }
	    };

	    for (var p in uniforms) {
	      _loop(p);
	    }

	    this._reglUniforms = realUniforms;
	    this._dirtyUniforms = false;
	    return realUniforms;
	  };

	  _proto6.isTexture = function isTexture(k) {
	    var v = this.uniforms[k];

	    if (v instanceof Texture) {
	      return true;
	    }

	    return false;
	  };

	  _proto6.dispose = function dispose() {
	    for (var p in this.uniforms) {
	      var u = this.uniforms[p];

	      if (u) {
	        if (u.dispose) {
	          u.dispose();
	        } else if (u.destroy && !u['__destroyed']) {
	          u.destroy();
	          u['__destroyed'] = true;
	        }
	      }
	    }

	    delete this.uniforms;
	    delete this._reglUniforms;
	    this._disposed = true;
	  };

	  _proto6.isDisposed = function isDisposed() {
	    return !!this._disposed;
	  };

	  _proto6._checkTextures = function _checkTextures() {
	    this._loadingCount = 0;

	    for (var p in this.uniforms) {
	      if (this.isTexture(p)) {
	        var texture = this.uniforms[p];

	        if (!texture.isReady()) {
	          this._loadingCount++;
	          texture.on('complete', this._bindedOnTextureComplete);
	        }
	      }
	    }
	  };

	  _proto6._onTextureComplete = function _onTextureComplete() {
	    this._loadingCount--;

	    if (this._loadingCount <= 0) {
	      this.fire('complete');
	    }
	  };

	  return Material;
	}();

	var Material$1 = Eventable(Material);
	var defaultUniforms = {
	  'time': 0,
	  'seeThrough': true,
	  'thickness': 0.03,
	  'fill': [1.0, 0.5137254902, 0.98, 1.0],
	  'stroke': [0.7019607843, 0.9333333333, 0.2274509804, 1.0],
	  'dashEnabled': false,
	  'dashAnimate': false,
	  'dashRepeats': 1,
	  'dashLength': 0.8,
	  'dashOverlap': true,
	  'insideAltColor': false,
	  'squeeze': false,
	  'squeezeMin': 0.5,
	  'squeezeMax': 1,
	  'dualStroke': false,
	  'secondThickness': 0.05,
	  'opacity': 1.0
	};

	var WireFrameMaterial = function (_Material$) {
	  _inheritsLoose(WireFrameMaterial, _Material$);

	  function WireFrameMaterial(uniforms) {
	    return _Material$.call(this, uniforms, defaultUniforms) || this;
	  }

	  return WireFrameMaterial;
	}(Material$1);

	var defaultUniforms$1 = {
	  'lightPosition': [0.0, 0.0, 50.0],
	  'lightAmbient': [0.5, 0.5, 0.5, 1.0],
	  'lightDiffuse': [0.8, 0.8, 0.8, 1.0],
	  'lightSpecular': [1.0, 1.0, 1.0, 1.0],
	  'materialShininess': 32.0,
	  'ambientStrength': 0.5,
	  'specularStrength': 0.8,
	  'opacity': 1.0
	};

	var PhongMaterial = function (_Material$2) {
	  _inheritsLoose(PhongMaterial, _Material$2);

	  function PhongMaterial(uniforms) {
	    return _Material$2.call(this, uniforms, defaultUniforms$1) || this;
	  }

	  return PhongMaterial;
	}(Material$1);

	var Mesh = function () {
	  function Mesh(geometry, material, config) {
	    if (config === void 0) {
	      config = {};
	    }

	    this.geometry = geometry;
	    this.material = material;
	    this.config = config;
	    this.transparent = !!config.transparent;
	    this.castShadow = isNil(config.castShadow) || config.castShadow;
	    this.picking = !!config.picking;
	    this.uniforms = {};
	    this.localTransform = identity$3(new Array(16));
	    this.properties = {};
	    this._dirtyUniforms = true;
	  }

	  var _proto7 = Mesh.prototype;

	  _proto7.setParent = function setParent() {
	    this.parent = parent;
	    return this;
	  };

	  _proto7.setLocalTransform = function setLocalTransform(transform) {
	    this.localTransform = transform;
	    return this;
	  };

	  _proto7.setUniform = function setUniform(k, v) {
	    if (this.uniforms[k] === undefined) {
	      this._dirtyUniforms = true;
	    }

	    this.uniforms[k] = v;
	    return this;
	  };

	  _proto7.getUniform = function getUniform(k) {
	    return this.uniforms[k];
	  };

	  _proto7.getDefines = function getDefines() {
	    var defines = {};

	    if (this.defines) {
	      extend(defines, this.defines);
	    }

	    if (this.material) {
	      var mDefines = this.material.getDefines();

	      if (mDefines) {
	        extend(defines, mDefines);
	      }
	    }

	    return defines;
	  };

	  _proto7.setDefines = function setDefines(defines) {
	    this.defines = defines;
	    this.dirtyDefines = true;
	    return this;
	  };

	  _proto7.getDefinesKey = function getDefinesKey() {
	    if (this._definesKey !== undefined && !this.dirtyDefines && (!this.material || !this.material.dirtyDefines)) {
	      return this._definesKey;
	    }

	    this._definesKey = this._createDefinesKey(this.getDefines());
	    this.dirtyDefines = false;
	    return this._definesKey;
	  };

	  _proto7.getUniforms = function getUniforms(regl) {
	    var _this3 = this;

	    if (this._dirtyUniforms || this.material && this.material.isDirty()) {
	      (function () {
	        _this3._realUniforms = {};
	        var uniforms = _this3.uniforms;

	        var _loop2 = function _loop2(p) {
	          if (_this3.uniforms.hasOwnProperty(p)) {
	            Object.defineProperty(_this3._realUniforms, p, {
	              enumerable: true,
	              configurable: true,
	              get: function get() {
	                return uniforms && uniforms[p];
	              }
	            });
	          }
	        };

	        for (var p in _this3.uniforms) {
	          _loop2(p);
	        }

	        if (_this3.material) {
	          (function () {
	            var materialUniforms = _this3.material.getUniforms(regl);

	            var _loop3 = function _loop3(p) {
	              if (materialUniforms.hasOwnProperty(p)) {
	                Object.defineProperty(_this3._realUniforms, p, {
	                  enumerable: true,
	                  configurable: true,
	                  get: function get() {
	                    return materialUniforms && materialUniforms[p];
	                  }
	                });
	              }
	            };

	            for (var p in materialUniforms) {
	              _loop3(p);
	            }
	          })();
	        }

	        _this3._dirtyUniforms = false;
	      })();
	    }

	    this._realUniforms['modelMatrix'] = this.localTransform;
	    return this._realUniforms;
	  };

	  _proto7.getMaterial = function getMaterial() {
	    return this.material;
	  };

	  _proto7.getAttributes = function getAttributes() {
	    return this.geometry.getAttributes();
	  };

	  _proto7.getElements = function getElements() {
	    return this.geometry.getElements();
	  };

	  _proto7.getREGLProps = function getREGLProps(regl) {
	    var props = this.getUniforms(regl);
	    extend(props, this.geometry.data);
	    props.elements = this.geometry.getElements();
	    props.count = this.geometry.getDrawCount();
	    props.offset = this.geometry.getDrawOffset();
	    props.primitive = this.geometry.getPrimitive();
	    return props;
	  };

	  _proto7.dispose = function dispose() {
	    delete this.geometry;
	    delete this.material;
	    this.uniforms = {};
	    return this;
	  };

	  _proto7.isValid = function isValid() {
	    return this.geometry && !this.geometry.isDisposed() && (!this.material || !this.material.isDisposed());
	  };

	  _proto7._createDefinesKey = function _createDefinesKey(defines) {
	    var v = [];

	    for (var p in defines) {
	      v.push(p, defines[p]);
	    }

	    return v.join(',');
	  };

	  return Mesh;
	}();

	Mesh.prototype.getWorldTransform = function () {
	  var worldTransform = [];
	  return function () {
	    if (parent) {
	      return multiply$3(worldTransform, parent.getWorldTransform(), this.localTransform);
	    }

	    return this.localTransform;
	  };
	}();

	var InstancedMesh = function (_Mesh) {
	  _inheritsLoose(InstancedMesh, _Mesh);

	  function InstancedMesh(instancedData, instanceCount, geometry, material, config) {
	    var _this4;

	    if (config === void 0) {
	      config = {};
	    }

	    _this4 = _Mesh.call(this, geometry, material, config) || this;
	    _this4.instanceCount = instanceCount;
	    _this4.instancedData = instancedData || {};

	    _this4._checkInstancedProp();

	    return _this4;
	  }

	  var _proto8 = InstancedMesh.prototype;

	  _proto8._checkInstancedProp = function _checkInstancedProp() {
	    for (var p in this.instancedData) {
	      if (this.geometry.data[p]) {
	        throw new Error("Duplicate attribute " + p + " defined in geometry and instanced data");
	      }
	    }
	  };

	  _proto8.getAttributes = function getAttributes() {
	    var attributes = _Mesh.prototype.getAttributes.call(this);

	    for (var p in this.instancedData) {
	      attributes.push(p);
	    }

	    return attributes;
	  };

	  _proto8.updateInstancedData = function updateInstancedData(name, data) {
	    var buf = this.instancedData[name];

	    if (!buf) {
	      return this;
	    }

	    var buffer;
	    this.instancedData[name] = data;

	    if (buf.buffer && buf.buffer.destroy) {
	      buffer = buf;
	    }

	    if (buffer) {
	      var bytesPerElement = this._getBytesPerElement(buffer.buffer._buffer.dtype);

	      var _len = buffer.buffer._buffer.byteLength / bytesPerElement;

	      if (_len >= data.length && bytesPerElement >= (data.BYTES_PER_ELEMENT || 0)) {
	        buffer.buffer.subdata(data);
	      } else {
	        buffer.buffer(data);
	      }

	      this.instancedData[name] = buffer;
	    }

	    return this;
	  };

	  _proto8.generateInstancedBuffers = function generateInstancedBuffers(regl) {
	    var data = this.instancedData;
	    var buffers = {};

	    for (var key in data) {
	      if (!data[key]) {
	        continue;
	      }

	      if (data[key].buffer !== undefined && data[key].buffer.destroy) {
	        buffers[key] = data[key];

	        if (buffers[key].divisor) {
	          buffers[key].divisor = 1;
	        }
	      } else {
	        buffers[key] = {
	          buffer: regl.buffer(data[key]),
	          divisor: 1
	        };
	      }
	    }

	    this.instancedData = buffers;
	    return this;
	  };

	  _proto8.getREGLProps = function getREGLProps(regl) {
	    var props = _Mesh.prototype.getREGLProps.call(this, regl);

	    extend(props, this.instancedData);
	    props.instances = this.instanceCount;
	    return props;
	  };

	  _proto8._getBytesPerElement = function _getBytesPerElement(dtype) {
	    switch (dtype) {
	      case 0x1400:
	        return 1;

	      case 0x1401:
	        return 1;

	      case 0x1402:
	        return 2;

	      case 0x1403:
	        return 2;

	      case 0x1404:
	        return 4;

	      case 0x1405:
	        return 4;

	      case 0x1406:
	        return 4;
	    }

	    throw new Error('unsupported data type: ' + dtype);
	  };

	  return InstancedMesh;
	}(Mesh);

	var Ajax = {
	  getArrayBuffer: function getArrayBuffer(url, cb) {
	    return Ajax.get(url, {
	      responseType: 'arraybuffer'
	    }, cb);
	  },
	  get: function get(url, options, cb) {
	    var client = Ajax._getClient(cb);

	    client.open('GET', url, true);

	    if (options) {
	      for (var k in options.headers) {
	        client.setRequestHeader(k, options.headers[k]);
	      }

	      client.withCredentials = options.credentials === 'include';

	      if (options['responseType']) {
	        client.responseType = options['responseType'];
	      }
	    }

	    client.send(null);
	    return client;
	  },
	  _wrapCallback: function _wrapCallback(client, cb) {
	    return function () {
	      if (client.readyState === 4) {
	        if (client.status === 200) {
	          if (client.responseType === 'arraybuffer') {
	            var response = client.response;

	            if (response.byteLength === 0) {
	              cb(new Error('http status 200 returned without content.'));
	            } else {
	              cb(null, {
	                data: client.response,
	                cacheControl: client.getResponseHeader('Cache-Control'),
	                expires: client.getResponseHeader('Expires'),
	                contentType: client.getResponseHeader('Content-Type')
	              });
	            }
	          } else {
	            cb(null, client.responseText);
	          }
	        } else {
	          cb(new Error(client.statusText + ',' + client.status));
	        }
	      }
	    };
	  },
	  _getClient: function _getClient(cb) {
	    var client;

	    try {
	      client = new XMLHttpRequest();
	    } catch (e) {
	      try {
	        client = new ActiveXObject('Msxml2.XMLHTTP');
	      } catch (e) {
	        try {
	          client = new ActiveXObject('Microsoft.XMLHTTP');
	        } catch (e) {}
	      }
	    }

	    client.onreadystatechange = Ajax._wrapCallback(client, cb);
	    return client;
	  }
	};
	var commonjsGlobal$1 = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule$1(fn, module) {
	  return module = {
	    exports: {}
	  }, fn(module, module.exports), module.exports;
	}

	var zousanMin = createCommonjsModule$1(function (module) {
	  !function (i) {
	    var c,
	        s,
	        u = "fulfilled",
	        f = "undefined",
	        a = function () {
	      var e = [],
	          n = 0;

	      function o() {
	        for (; e.length - n;) {
	          try {
	            e[n]();
	          } catch (t) {
	            i.console && i.console.error(t);
	          }

	          e[n++] = s, 1024 == n && (e.splice(0, 1024), n = 0);
	        }
	      }

	      var r = function () {
	        if (typeof MutationObserver === f) return typeof process !== f && "function" == typeof process.nextTick ? function () {
	          process.nextTick(o);
	        } : typeof setImmediate !== f ? function () {
	          setImmediate(o);
	        } : function () {
	          setTimeout(o, 0);
	        };
	        var t = document.createElement("div");
	        return new MutationObserver(o).observe(t, {
	          attributes: !0
	        }), function () {
	          t.setAttribute("a", 0);
	        };
	      }();

	      return function (t) {
	        e.push(t), e.length - n == 1 && r();
	      };
	    }();

	    function l(t) {
	      if (!(this instanceof l)) throw new TypeError("Zousan must be created with the new keyword");

	      if ("function" == typeof t) {
	        var e = this;

	        try {
	          t(function (t) {
	            e.resolve(t);
	          }, function (t) {
	            e.reject(t);
	          });
	        } catch (t) {
	          e.reject(t);
	        }
	      } else if (0 < arguments.length) throw new TypeError("Zousan resolver " + t + " is not a function");
	    }

	    function h(e, t) {
	      if ("function" == typeof e.y) try {
	        var n = e.y.call(s, t);
	        e.p.resolve(n);
	      } catch (t) {
	        e.p.reject(t);
	      } else e.p.resolve(t);
	    }

	    function v(e, t) {
	      if ("function" == typeof e.n) try {
	        var n = e.n.call(s, t);
	        e.p.resolve(n);
	      } catch (t) {
	        e.p.reject(t);
	      } else e.p.reject(t);
	    }

	    l.prototype = {
	      resolve: function resolve(n) {
	        if (this.state === c) {
	          if (n === this) return this.reject(new TypeError("Attempt to resolve promise with self"));
	          var o = this;
	          if (n && ("function" == typeof n || "object" == typeof n)) try {
	            var e = !0,
	                t = n.then;
	            if ("function" == typeof t) return void t.call(n, function (t) {
	              e && (e = !1, o.resolve(t));
	            }, function (t) {
	              e && (e = !1, o.reject(t));
	            });
	          } catch (t) {
	            return void (e && this.reject(t));
	          }
	          this.state = u, this.v = n, o.c && a(function () {
	            for (var t = 0, e = o.c.length; t < e; t++) {
	              h(o.c[t], n);
	            }
	          });
	        }
	      },
	      reject: function reject(n) {
	        if (this.state === c) {
	          var t = this;
	          this.state = "rejected", this.v = n;
	          var o = this.c;
	          a(o ? function () {
	            for (var t = 0, e = o.length; t < e; t++) {
	              v(o[t], n);
	            }
	          } : function () {
	            t.handled || !l.suppressUncaughtRejectionError && i.console && l.warn("You upset Zousan. Please catch rejections: ", n, n ? n.stack : null);
	          });
	        }
	      },
	      then: function then(t, e) {
	        var n = new l(),
	            o = {
	          y: t,
	          n: e,
	          p: n
	        };
	        if (this.state === c) this.c ? this.c.push(o) : this.c = [o];else {
	          var r = this.state,
	              i = this.v;
	          this.handled = !0, a(function () {
	            r === u ? h(o, i) : v(o, i);
	          });
	        }
	        return n;
	      },
	      catch: function _catch(t) {
	        return this.then(null, t);
	      },
	      finally: function _finally(t) {
	        return this.then(t, t);
	      },
	      timeout: function timeout(t, o) {
	        o = o || "Timeout";
	        var r = this;
	        return new l(function (e, n) {
	          setTimeout(function () {
	            n(Error(o));
	          }, t), r.then(function (t) {
	            e(t);
	          }, function (t) {
	            n(t);
	          });
	        });
	      }
	    }, l.resolve = function (t) {
	      var e = new l();
	      return e.resolve(t), e;
	    }, l.reject = function (t) {
	      var e = new l();
	      return e.c = [], e.reject(t), e;
	    }, l.all = function (n) {
	      var o = [],
	          r = 0,
	          i = new l();

	      function t(t, e) {
	        t && "function" == typeof t.then || (t = l.resolve(t)), t.then(function (t) {
	          o[e] = t, ++r == n.length && i.resolve(o);
	        }, function (t) {
	          i.reject(t);
	        });
	      }

	      for (var e = 0; e < n.length; e++) {
	        t(n[e], e);
	      }

	      return n.length || i.resolve(o), i;
	    }, l.warn = console.warn, module.exports && (module.exports = l), i.define && i.define.amd && i.define([], function () {
	      return l;
	    }), (i.Zousan = l).soon = a;
	  }("undefined" != typeof commonjsGlobal$1 ? commonjsGlobal$1 : commonjsGlobal$1);
	});
	var promise;

	if (typeof Promise !== 'undefined') {
	  promise = Promise;
	} else {
	  promise = zousanMin;
	}

	var Promise$1 = promise;

	var ResourceLoader = function () {
	  function ResourceLoader(DEFAULT_TEXTURE) {
	    this.defaultTexture = DEFAULT_TEXTURE;
	    this.defaultCubeTexture = new Array(6);
	    this.resources = {};
	  }

	  var _proto9 = ResourceLoader.prototype;

	  _proto9.get = function get(url) {
	    if (Array.isArray(url)) {
	      return this._loadImages(url);
	    } else {
	      return this._loadImage(url);
	    }
	  };

	  _proto9.getArrayBuffer = function getArrayBuffer(url) {
	    var _this5 = this;

	    if (Array.isArray(url)) {
	      var promises = url.map(function (u) {
	        return _this5.getArrayBuffer(u);
	      });
	      return Promise$1.all(promises);
	    } else {
	      return new Promise$1(function (resolve, reject) {
	        Ajax.getArrayBuffer(url, function (err, buffer) {
	          if (err) {
	            reject(err);
	          } else {
	            resolve({
	              url: url,
	              data: buffer
	            });
	          }
	        });
	      });
	    }
	  };

	  _proto9.disposeRes = function disposeRes(url) {
	    var _this6 = this;

	    if (Array.isArray(url)) {
	      url.forEach(function (u) {
	        return _this6._disposeOne(u);
	      });
	    } else {
	      this._disposeOne(url);
	    }

	    return this;
	  };

	  _proto9.isLoading = function isLoading() {
	    return this._count && this._count > 0;
	  };

	  _proto9.getDefaultTexture = function getDefaultTexture(url) {
	    if (!Array.isArray(url)) {
	      return this.defaultTexture;
	    } else {
	      return this._getBlankTextures(url.length);
	    }
	  };

	  _proto9._disposeOne = function _disposeOne(url) {
	    var resources = this.resources;

	    if (!resources[url]) {
	      return;
	    }

	    resources[url].count--;

	    if (resources[url.count] <= 0) {
	      delete resources[url];
	    }
	  };

	  _proto9._loadImage = function _loadImage(url) {
	    var resources = this.resources;

	    if (resources[url]) {
	      return Promise$1.resolve({
	        url: url,
	        data: resources[url].image
	      });
	    }

	    var promise = new Promise$1(function (resolve, reject) {
	      var img = new Image();
	      img.crossOrigin = 'anonymous';

	      img.onload = function () {
	        resources[url] = {
	          image: img,
	          count: 1
	        };
	        resolve({
	          url: url,
	          data: img
	        });
	      };

	      img.onerror = function (err) {
	        reject(err);
	      };

	      img.onabort = function () {
	        reject("image(" + url + ") loading aborted.");
	      };

	      img.src = url;
	    });
	    return promise;
	  };

	  _proto9._loadImages = function _loadImages(urls) {
	    var _this7 = this;

	    var promises = urls.map(function (url) {
	      return _this7._loadImage(url, true);
	    });
	    var promise = Promise$1.all(promises);
	    return promise;
	  };

	  _proto9._getBlankTextures = function _getBlankTextures(count) {
	    var t = new Array(count);

	    for (var i = 0; i < 6; i++) {
	      t.push(this.defaultTexture);
	    }

	    return t;
	  };

	  return ResourceLoader;
	}();

	var ResourceLoader$1 = Eventable(ResourceLoader);
	var P0 = [],
	    P1 = [];
	var uid = 0;

	var Scene = function () {
	  function Scene(meshes) {
	    this._id = uid++;
	    this.sortedMeshes = {};
	    this.setMeshes(meshes);
	    this._compareBinded = this._compare.bind(this);
	    this.dirty();
	  }

	  var _proto10 = Scene.prototype;

	  _proto10.setMeshes = function setMeshes(meshes) {
	    this.clear();

	    if (!meshes || Array.isArray(meshes) && !meshes.length || meshes === this.meshes) {
	      return this;
	    }

	    this.meshes = Array.isArray(meshes) ? meshes : [meshes];

	    for (var i = 0; i < this.meshes.length; i++) {
	      var mesh = this.meshes[i];
	      mesh._scenes = mesh._scenes || {};
	      mesh._scenes[this._id] = 1;
	    }

	    this.dirty();
	    return this;
	  };

	  _proto10.addMesh = function addMesh(mesh) {
	    var _this8 = this;

	    if (!mesh || Array.isArray(mesh) && !mesh.length) {
	      return this;
	    }

	    if (Array.isArray(mesh)) {
	      mesh.forEach(function (m) {
	        m._scenes = m._scenes || {};

	        if (!m._scenes[_this8._id]) {
	          m._scenes[_this8._id] = 1;

	          _this8.meshes.push(m);

	          _this8.dirty();
	        }
	      });
	    } else {
	      mesh._scenes = mesh._scenes || {};

	      if (!mesh._scenes[this._id]) {
	        mesh._scenes[this._id] = 1;
	        this.meshes.push(mesh);
	        this.dirty();
	      }
	    }

	    return this;
	  };

	  _proto10.removeMesh = function removeMesh(mesh) {
	    if (!mesh || Array.isArray(mesh) && !mesh.length) {
	      return this;
	    }

	    if (Array.isArray(mesh)) {
	      var hit = false;

	      for (var i = 0; i < mesh.length; i++) {
	        if (mesh[i]._scenes && mesh[i]._scenes[this._id]) {
	          hit = true;
	          this.dirty();
	          delete mesh[i]._scenes[this._id];
	        }
	      }

	      if (hit) {
	        this.meshes = this.meshes.filter(function (el) {
	          return mesh.indexOf(el) < 0;
	        });
	      }
	    } else {
	      if (!mesh._scenes || !mesh._scenes[this._id]) {
	        return this;
	      }

	      var idx = this.meshes.indexOf(mesh);

	      if (idx >= 0) {
	        this.meshes.splice(idx, 1);
	      }

	      delete mesh._scenes[this._id];
	      this.dirty();
	    }

	    return this;
	  };

	  _proto10.getMeshes = function getMeshes() {
	    return this.meshes;
	  };

	  _proto10.clear = function clear() {
	    if (this.meshes) {
	      for (var i = 0; i < this.meshes.length; i++) {
	        delete this.meshes[i]._scenes[this._id];
	      }
	    }

	    this.meshes = [];
	    this.sortedMeshes.opaques = [];
	    this.sortedMeshes.transparents = [];
	    return this;
	  };

	  _proto10.dirty = function dirty() {
	    this._dirty = true;
	    return this;
	  };

	  _proto10.sortMeshes = function sortMeshes(cameraPosition) {
	    var meshes = this.meshes;
	    var transparents = this.sortedMeshes.transparents;

	    if (this._dirty) {
	      var opaques = this.sortedMeshes.opaques = [];
	      transparents = this.sortedMeshes.transparents = [];

	      for (var i = 0, l = meshes.length; i < l; i++) {
	        if (meshes[i].transparent) {
	          transparents.push(meshes[i]);
	        } else {
	          opaques.push(meshes[i]);
	        }
	      }
	    }

	    if (cameraPosition && transparents.length > 1) {
	      this._cameraPosition = cameraPosition;
	      transparents.sort(this._compareBinded);
	      delete this._cameraPosition;
	    }

	    this._dirty = false;
	  };

	  _proto10.getSortedMeshes = function getSortedMeshes() {
	    if (this._dirty) {
	      this.sortMeshes();
	    }

	    return this.sortedMeshes;
	  };

	  _proto10._compare = function _compare(a, b) {
	    transformMat4(P0, a.geometry.boundingBox.getCenter(), a.localTransform);
	    transformMat4(P1, b.geometry.boundingBox.getCenter(), b.localTransform);
	    return dist(P1, this._cameraPosition) - dist(P0, this._cameraPosition);
	  };

	  return Scene;
	}();

	var toChar = String.fromCharCode;
	var MINELEN = 8;
	var MAXELEN = 0x7fff;

	function rgbe2float(rgbe, buffer, offset, exposure) {
	  if (rgbe[3] > 0) {
	    var f = Math.pow(2.0, rgbe[3] - 128 - 8 + exposure);
	    buffer[offset + 0] = rgbe[0] * f;
	    buffer[offset + 1] = rgbe[1] * f;
	    buffer[offset + 2] = rgbe[2] * f;
	  } else {
	    buffer[offset + 0] = 0;
	    buffer[offset + 1] = 0;
	    buffer[offset + 2] = 0;
	  }

	  buffer[offset + 3] = 1.0;
	  return buffer;
	}

	function uint82string(array, offset, size) {
	  var str$$1 = '';

	  for (var i = offset; i < size; i++) {
	    str$$1 += toChar(array[i]);
	  }

	  return str$$1;
	}

	function copyrgbe(s, t) {
	  t[0] = s[0];
	  t[1] = s[1];
	  t[2] = s[2];
	  t[3] = s[3];
	}

	function oldReadColors(scan, buffer, offset, xmax) {
	  var rshift = 0,
	      x = 0,
	      len$$1 = xmax;

	  while (len$$1 > 0) {
	    scan[x][0] = buffer[offset++];
	    scan[x][1] = buffer[offset++];
	    scan[x][2] = buffer[offset++];
	    scan[x][3] = buffer[offset++];

	    if (scan[x][0] === 1 && scan[x][1] === 1 && scan[x][2] === 1) {
	      for (var i = scan[x][3] << rshift >>> 0; i > 0; i--) {
	        copyrgbe(scan[x - 1], scan[x]);
	        x++;
	        len$$1--;
	      }

	      rshift += 8;
	    } else {
	      x++;
	      len$$1--;
	      rshift = 0;
	    }
	  }

	  return offset;
	}

	function readColors(scan, buffer, offset, xmax) {
	  if (xmax < MINELEN | xmax > MAXELEN) {
	    return oldReadColors(scan, buffer, offset, xmax);
	  }

	  var i = buffer[offset++];

	  if (i !== 2) {
	    return oldReadColors(scan, buffer, offset - 1, xmax);
	  }

	  scan[0][1] = buffer[offset++];
	  scan[0][2] = buffer[offset++];
	  i = buffer[offset++];

	  if ((scan[0][2] << 8 >>> 0 | i) >>> 0 !== xmax) {
	    return null;
	  }

	  for (var _i4 = 0; _i4 < 4; _i4++) {
	    for (var x = 0; x < xmax;) {
	      var code = buffer[offset++];

	      if (code > 128) {
	        code = (code & 127) >>> 0;
	        var val = buffer[offset++];

	        while (code--) {
	          scan[x++][_i4] = val;
	        }
	      } else {
	        while (code--) {
	          scan[x++][_i4] = buffer[offset++];
	        }
	      }
	    }
	  }

	  return offset;
	}

	function parseRGBE(arrayBuffer, exposure) {
	  if (exposure == null) {
	    exposure = 0;
	  }

	  var data = new Uint8Array(arrayBuffer);
	  var size = data.length;

	  if (uint82string(data, 0, 2) !== '#?') {
	    return null;
	  }

	  for (var i = 2; i < size; i++) {
	    if (toChar(data[i]) === '\n' && toChar(data[i + 1]) === '\n') {
	      break;
	    }
	  }

	  if (i >= size) {
	    return null;
	  }

	  i += 2;
	  var str$$1 = '';

	  for (; i < size; i++) {
	    var _char = toChar(data[i]);

	    if (_char === '\n') {
	      break;
	    }

	    str$$1 += _char;
	  }

	  var tmp = str$$1.split(' ');
	  var height = parseInt(tmp[1]);
	  var width = parseInt(tmp[3]);

	  if (!width || !height) {
	    return null;
	  }

	  var offset = i + 1;
	  var scanline = [];

	  for (var x = 0; x < width; x++) {
	    scanline[x] = [];

	    for (var j = 0; j < 4; j++) {
	      scanline[x][j] = 0;
	    }
	  }

	  var pixels = new Array(width * height * 4);
	  var offset2 = 0;

	  for (var y = 0; y < height; y++) {
	    offset = readColors(scanline, data, offset, width);

	    if (!offset) {
	      return null;
	    }

	    for (var _x = 0; _x < width; _x++) {
	      rgbe2float(scanline[_x], pixels, offset2, exposure);
	      offset2 += 4;
	    }
	  }

	  return {
	    width: width,
	    height: height,
	    pixels: pixels
	  };
	}

	var Texture2D = function (_Texture) {
	  _inheritsLoose(Texture2D, _Texture);

	  function Texture2D() {
	    return _Texture.apply(this, arguments) || this;
	  }

	  var _proto11 = Texture2D.prototype;

	  _proto11.onLoad = function onLoad(_ref2) {
	    var data = _ref2.data;
	    var config = this.config;

	    if (config.hdr) {
	      data = parseRGBE(data.data);
	      config.data = data.pixels;
	    } else {
	      config.data = data;
	    }

	    config.width = config.width || data.width;
	    config.height = config.height || data.height;

	    this._updateREGL();
	  };

	  _proto11.createREGLTexture = function createREGLTexture(regl) {
	    return regl.texture(this.config);
	  };

	  return Texture2D;
	}(Texture);

	var TextureCube = function (_Texture2) {
	  _inheritsLoose(TextureCube, _Texture2);

	  function TextureCube() {
	    return _Texture2.apply(this, arguments) || this;
	  }

	  var _proto12 = TextureCube.prototype;

	  _proto12.onLoad = function onLoad(images) {
	    var config = this.config;

	    var faces = this._createFaces(images);

	    config.faces = faces.map(function (face) {
	      return face.data;
	    });

	    this._updateREGL();
	  };

	  _proto12.createREGLTexture = function createREGLTexture(regl) {
	    return regl.cube(this.config);
	  };

	  _proto12._createFaces = function _createFaces() {
	    return [];
	  };

	  return TextureCube;
	}(Texture);

	var Plane = function (_Geometry) {
	  _inheritsLoose(Plane, _Geometry);

	  function Plane(z) {
	    return _Geometry.call(this, {
	      aPosition: [-0.5, -0.5, z || 0, 0.5, -0.5, z || 0, -0.5, 0.5, z || 0, 0.5, 0.5, z || 0],
	      aNormal: [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0]
	    }, [3, 1, 0, 0, 2, 3]) || this;
	  }

	  return Plane;
	}(Geometry);

	var vsm_shadow_vert = "//--------------------------\n\n// 阴影相关的变量计算\n\n//\n\n//\n\n// uniform mat4 vsm_shadow_lightProjViewModelMatrix 有向光源的projView矩阵， ortho projection * view matrix * model matrix\n\n//\n\n//\n\n// void shadow_computeShadowPars(vec4 worldPos)\n\n// 计算阴影frag需要的varying变量\n\n//   * vec4 worldPos : 顶点世界坐标 model * aPosition\n\n//\n\n// 示例：\n\n// vec4 position = vec4(aPosition, 1.0);\n\n// shadow_computeShadowPars(worldPos);\n\n//--------------------------\n\n\n\nuniform mat4 vsm_shadow_lightProjViewModelMatrix;\n\n\n\nvarying vec4 vsm_shadow_vLightSpacePos;\n\n\n\nvoid shadow_computeShadowPars(vec4 position) {\n\n    vsm_shadow_vLightSpacePos = vsm_shadow_lightProjViewModelMatrix * position;\n\n}\n\n";
	var vsm_shadow_frag = "//--------------------------\n\n// 阴影着色\n\n//\n\n//\n\n// uniform sampler2D vsm_shadow_shadowMap 深度纹理\n\n// uniform float vsm_shadow_opacity 阴影透明度\n\n//\n\n//\n\n// void shadow_computeShadow()\n\n// 计算某个有向光源在当前片元的阴影值\n\n//\n\n// 示例：\n\n// // 计算有向光源在当前片元的阴影值\n\n// float shadow = shadow_computeShadow();\n\n//--------------------------\n\n\n\nuniform sampler2D vsm_shadow_shadowMap;\n\nuniform float vsm_shadow_opacity;\n\nuniform float vsm_shadow_threshold;\n\n\n\nvarying vec4 vsm_shadow_vLightSpacePos;\n\n\n\nfloat esm(vec3 projCoords, vec4 shadowTexel) {\n\n    // vec2 uv = projCoords.xy;\n\n    float compare = projCoords.z;\n\n    float c = 50.0;\n\n    float depth = shadowTexel.r;\n\n\n\n    depth = exp(-c * min(compare - depth, 0.05));\n\n    // depth = exp(c * depth) * exp(-c * compare);\n\n    return clamp(depth, vsm_shadow_threshold, 1.0);\n\n}\n\n\n\nfloat vsm_shadow_chebyshevUpperBound(vec3 projCoords, vec4 shadowTexel){\n\n\n\n    vec2 moments = shadowTexel.rg;\n\n    float distance = projCoords.z;\n\n    // Surface is fully lit. as the current fragment is before the light occluder\n\n    if (distance >= 1.0 || distance <= moments.x)\n\n        return 1.0 ;\n\n\n\n    // The fragment is either in shadow or penumbra. We now use chebyshev's upperBound to check\n\n    // How likely this pixel is to be lit (p_max)\n\n    float variance = moments.y - (moments.x * moments.x);\n\n    variance = max(variance, 0.00002);\n\n\n\n    float d = distance - moments.x;\n\n    float p_max = variance / (variance + d * d);\n\n    return p_max;\n\n}\n\n\n\nfloat shadow_computeShadow_coeff(sampler2D shadowMap, vec3 projCoords) {\n\n    vec2 uv = projCoords.xy;\n\n    vec4 shadowTexel = texture2D(shadowMap, uv);\n\n    #if defined(USE_ESM) || defined(USE_VSM_ESM)\n\n        float esm_coeff = esm(projCoords, shadowTexel);\n\n    #endif\n\n    //TODO shadowMap是用esm算法生成的，但貌似采用vsm效果却不算差\n\n    #if defined(USE_VSM) || defined(USE_VSM_ESM)\n\n        float vsm_coeff = vsm_shadow_chebyshevUpperBound(projCoords, shadowTexel);\n\n    #endif\n\n    #if defined(USE_VSM_ESM)\n\n       float coeff = esm_coeff * vsm_coeff;\n\n    #elif defined(USE_ESM)\n\n        float coeff = esm_coeff;\n\n    #else\n\n        float coeff = vsm_coeff;\n\n    #endif\n\n\n\n    return 1.0 - (1.0 - coeff) * vsm_shadow_opacity;\n\n}\n\n\n\nfloat shadow_computeShadow() {\n\n    // 执行透视除法\n\n    vec3 projCoords = vsm_shadow_vLightSpacePos.xyz / vsm_shadow_vLightSpacePos.w;\n\n    // 变换到[0,1]的范围\n\n    projCoords = projCoords * 0.5 + 0.5;\n\n    if(projCoords.z >= 1.0 || projCoords.x < 0.0 || projCoords.x > 1.0 || projCoords.y < 0.0 || projCoords.y > 1.0) return 1.0;\n\n    return shadow_computeShadow_coeff(vsm_shadow_shadowMap, projCoords);\n\n\n\n}\n\n";
	var fbo_picking_vert = "//--------------------------\n\n// Picking\n\n//\n\n// #define ENABLE_PICKING 整型 是否开启PICKING\n\n//\n\n// uniform int batchId geometry的批次id\n\n//\n\n//\n\n// void fbo_picking_setData(viewPosZ)\n\n//   设置picking数据,必须在设置gl_Position后调用\n\n//\n\n// 示例：\n\n// fbo_picking_setData(gl_Position.w);\n\n//--------------------------\n\n\n\n#ifdef ENABLE_PICKING\n\n//USE_PICKING_ID == 1 时读取attributes\n\n#if USE_PICKING_ID == 1\n\nattribute float aPickingId;\n\n//USE_PICKING_ID == 2 时读取uniforms\n\n#elif USE_PICKING_ID == 2\n\nuniform float uPickingId;\n\n#endif\n\nvarying float vPickingId;\n\nvarying float vFbo_picking_viewZ;\n\nvarying float vFbo_picking_visible;\n\n#endif\n\n\n\nvoid fbo_picking_setData(float viewPosZ, bool visible) {\n\n    #ifdef ENABLE_PICKING\n\n    #if USE_PICKING_ID == 1\n\n       vPickingId = aPickingId;\n\n    #elif USE_PICKING_ID == 2\n\n        vPickingId = uPickingId;\n\n    #endif\n\n        vFbo_picking_viewZ = viewPosZ;\n\n    #endif\n\n    vFbo_picking_visible = visible ? 1.0 : 0.0;\n\n}\n\n";
	var invert_vert = "mat4 invert(mat4 matrix) {\n\n    vec4 vector1 = matrix[0], vector2 = matrix[1], vector3 = matrix[2], vector4 = matrix[3];\n\n    float a00 = vector1.x, a01 = vector1.y, a02 = vector1.z, a03 = vector1.w;\n\n    float a10 = vector2.x, a11 = vector2.y, a12 = vector2.z, a13 = vector2.w;\n\n    float a20 = vector3.x, a21 = vector3.y, a22 = vector3.z, a23 = vector3.w;\n\n    float a30 = vector4.x, a31 = vector4.y, a32 = vector4.z, a33 = vector4.w;\n\n\n\n    float b00 = a00 * a11 - a01 * a10;\n\n    float b01 = a00 * a12 - a02 * a10;\n\n    float b02 = a00 * a13 - a03 * a10;\n\n    float b03 = a01 * a12 - a02 * a11;\n\n    float b04 = a01 * a13 - a03 * a11;\n\n    float b05 = a02 * a13 - a03 * a12;\n\n    float b06 = a20 * a31 - a21 * a30;\n\n    float b07 = a20 * a32 - a22 * a30;\n\n    float b08 = a20 * a33 - a23 * a30;\n\n    float b09 = a21 * a32 - a22 * a31;\n\n    float b10 = a21 * a33 - a23 * a31;\n\n    float b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n\n    float det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    det = 1.0 / det;\n\n    mat4 m = mat4(\n\n        (a11 * b11 - a12 * b10 + a13 * b09) * det,\n\n        (a02 * b10 - a01 * b11 - a03 * b09) * det,\n\n        (a31 * b05 - a32 * b04 + a33 * b03) * det,\n\n        (a22 * b04 - a21 * b05 - a23 * b03) * det,\n\n        (a12 * b08 - a10 * b11 - a13 * b07) * det,\n\n        (a00 * b11 - a02 * b08 + a03 * b07) * det,\n\n        (a32 * b02 - a30 * b05 - a33 * b01) * det,\n\n        (a20 * b05 - a22 * b02 + a23 * b01) * det,\n\n        (a10 * b10 - a11 * b08 + a13 * b06) * det,\n\n        (a01 * b08 - a00 * b10 - a03 * b06) * det,\n\n        (a30 * b04 - a31 * b02 + a33 * b00) * det,\n\n        (a21 * b02 - a20 * b04 - a23 * b00) * det,\n\n        (a11 * b07 - a10 * b09 - a12 * b06) * det,\n\n        (a00 * b09 - a01 * b07 + a02 * b06) * det,\n\n        (a31 * b01 - a30 * b03 - a32 * b00) * det,\n\n        (a20 * b03 - a21 * b01 + a22 * b00) * det\n\n    );\n\n    return m;\n\n}\n\n\n\nmat4 transpose(mat4 matrix) {\n\n    vec4 vector1 = matrix[0], vector2 = matrix[1], vector3 = matrix[2], vector4 = matrix[3];\n\n    float a01 = vector1.y, a02 = vector1.z, a03 = vector1.w;\n\n    float a12 = vector2.z, a13 = vector2.w;\n\n    float a23 = vector3.w;\n\n    mat4 m = mat4(\n\n        vector1.x,\n\n        vector2.x,\n\n        vector3.x,\n\n        vector4.x,\n\n        a01,\n\n        vector2.y,\n\n        vector3.y,\n\n        vector4.y,\n\n        a02,\n\n        a12,\n\n        vector3.z,\n\n        vector4.z,\n\n        a03,\n\n        a13,\n\n        a23,\n\n        vector4.w\n\n    );\n\n    return m;\n\n}";
	var instance_vert = "attribute vec4 instance_vectorA;\n\nattribute vec4 instance_vectorB;\n\nattribute vec4 instance_vectorC;\n\nattribute vec4 instance_vectorD;\n\nattribute vec4 instance_color;\n\n\n\nmat4 instance_getAttributeMatrix() {\n\n    mat4 mat = mat4(\n\n        instance_vectorA.x, instance_vectorA.y, instance_vectorA.z, instance_vectorA.w,\n\n        instance_vectorB.x, instance_vectorB.y, instance_vectorB.z, instance_vectorB.w,\n\n        instance_vectorC.x, instance_vectorC.y, instance_vectorC.z, instance_vectorC.w,\n\n        instance_vectorD.x, instance_vectorD.y, instance_vectorD.z, instance_vectorD.w\n\n    );\n\n    return mat;\n\n}\n\n\n\nvec4 instance_getInstanceColor() {\n\n    return instance_color;\n\n}";
	var skin_vert = "attribute vec4 WEIGHTS_0;\n\nattribute vec4 JOINTS_0;\n\n\n\nuniform sampler2D jointTexture;\n\nuniform vec2 jointTextureSize;\n\nuniform float numJoints;\n\n\n\n// these offsets assume the texture is 4 pixels across\n\n#define ROW0_U ((0.5 + 0.0) / 4.)\n\n#define ROW1_U ((0.5 + 1.0) / 4.)\n\n#define ROW2_U ((0.5 + 2.0) / 4.)\n\n#define ROW3_U ((0.5 + 3.0) / 4.)\n\n\n\nmat4 skin_getBoneMatrix(float jointNdx) {\n\n    float v = (jointNdx + 0.5) / numJoints;\n\n    return mat4(\n\n        texture2D(jointTexture, vec2(ROW0_U, v)),\n\n        texture2D(jointTexture, vec2(ROW1_U, v)),\n\n        texture2D(jointTexture, vec2(ROW2_U, v)),\n\n        texture2D(jointTexture, vec2(ROW3_U, v)));\n\n}\n\n\n\nmat4 skin_getSkinMatrix() {\n\n        mat4 skinMatrix = skin_getBoneMatrix(JOINTS_0[0]) * WEIGHTS_0[0] +\n\n                        skin_getBoneMatrix(JOINTS_0[1]) * WEIGHTS_0[1] +\n\n                        skin_getBoneMatrix(JOINTS_0[2]) * WEIGHTS_0[2] +\n\n                        skin_getBoneMatrix(JOINTS_0[3]) * WEIGHTS_0[3];\n\n        return skinMatrix;\n\n}\n\n";
	var fl_common_math_glsl = "//------------------------------------------------------------------------------\n\n// Common math\n\n//------------------------------------------------------------------------------\n\n\n\n\n\n#define PI                 3.14159265359\n\n\n\n#define HALF_PI            1.570796327\n\n\n\n#define MEDIUMP_FLT_MAX    65504.0\n\n#define MEDIUMP_FLT_MIN    0.00006103515625\n\n\n\n#ifdef TARGET_MOBILE\n\n#define FLT_EPS            MEDIUMP_FLT_MIN\n\n#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\n\n#else\n\n#define FLT_EPS            1e-5\n\n#define saturateMediump(x) x\n\n#endif\n\n\n\n#define saturate(x)        clamp(x, 0.0, 1.0)\n\n\n\n//------------------------------------------------------------------------------\n\n// Scalar operations\n\n//------------------------------------------------------------------------------\n\n\n\n\n\nfloat pow5(float x) {\n\n    float x2 = x * x;\n\n    return x2 * x2 * x;\n\n}\n\n\n\n\n\nfloat sq(float x) {\n\n    return x * x;\n\n}\n\n\n\n\n\nfloat max3(const vec3 v) {\n\n    return max(v.x, max(v.y, v.z));\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Matrix and quaternion operations\n\n//------------------------------------------------------------------------------\n\n\n\n\n\nvec4 mulMat4x4Float3(const highp mat4 m, const highp vec3 v) {\n\n    return v.x * m[0] + (v.y * m[1] + (v.z * m[2] + m[3]));\n\n}\n\n\n\n\n\nvec3 mulMat3x3Float3(const highp mat4 m, const highp vec3 v) {\n\n    return v.x * m[0].xyz + (v.y * m[1].xyz + (v.z * m[2].xyz));\n\n}\n\n\n\n\n\nvoid toTangentFrame(const highp vec4 q, out highp vec3 n) {\n\n    n = vec3( 0.0,  0.0,  1.0) +\n\n        vec3( 2.0, -2.0, -2.0) * q.x * q.zwx +\n\n        vec3( 2.0,  2.0, -2.0) * q.y * q.wzy;\n\n}\n\n\n\n\n\nvoid toTangentFrame(const highp vec4 q, out highp vec3 n, out highp vec3 t) {\n\n    toTangentFrame(q, n);\n\n    t = vec3( 1.0,  0.0,  0.0) +\n\n        vec3(-2.0,  2.0, -2.0) * q.y * q.yxw +\n\n        vec3(-2.0,  2.0,  2.0) * q.z * q.zwx;\n\n}\n\n";
	var fl_uniforms_glsl = "\n\n\n\nstruct FrameUniforms {\n\n    // transforms\n\n    // mat4 viewFromWorldMatrix, //viewMatrix\n\n    // mat4 worldFromViewMatrix,\n\n    // mat4 clipFromViewMatrix,\n\n    // mat4 viewFromClipMatrix,\n\n    // mat4 clipFromWorldMatrix,\n\n    // mat4 worldFromClipMatrix,\n\n    // mat4 lightFromWorldMatrix,\n\n    // view\n\n    highp vec4 resolution; //viewport width, height, 1/width, 1/height\n\n    // camera\n\n    highp vec3 cameraPosition;\n\n    // time\n\n    highp float time;// time in seconds, with a 1 second period\n\n    // directional light\n\n    mediump vec4 lightColorIntensity;\n\n    mediump vec4 sun; // cos(sunAngle), sin(sunAngle), 1/(sunAngle*HALO_SIZE-sunAngle), HALO_EXP\n\n    highp vec3 lightDirection;\n\n    // int fParamsX,\n\n    // shadow\n\n    mediump vec3 shadowBias;\n\n    // oneOverFroxelDimensionY,\n\n    // froxels\n\n    // zParams,\n\n    // fParams,\n\n    // origin,\n\n    // froxels (again, for alignment purposes)\n\n    // oneOverFroxelDimension,\n\n    // ibl\n\n    mediump float iblLuminance; //TODO 干嘛的？\n\n    // camera\n\n    mediump float exposure; //TODO\n\n    mediump float ev100; //TODO\n\n    // ibl\n\n    highp vec3 iblSH[9];\n\n    mediump vec2 iblMaxMipLevel;\n\n    // user time\n\n    // vec4 userTime,\n\n};\n\n\n\nFrameUniforms frameUniforms;\n\n\n\nuniform highp vec4 resolution;\n\nuniform highp vec3 cameraPosition;\n\nuniform highp float time;\n\nuniform mediump vec4 lightColorIntensity;\n\nuniform mediump vec4 sun;\n\nuniform highp vec3 lightDirection;\n\nuniform mediump float iblLuminance;\n\nuniform mediump float exposure;\n\nuniform mediump float ev100;\n\nuniform highp vec3 iblSH[9];\n\nuniform mediump vec2 iblMaxMipLevel;\n\n\n\nvoid initFrameUniforms() {\n\n    frameUniforms.iblMaxMipLevel = iblMaxMipLevel;\n\n    frameUniforms.resolution = resolution;\n\n    frameUniforms.cameraPosition = cameraPosition;\n\n    frameUniforms.time = time;\n\n    frameUniforms.lightColorIntensity = lightColorIntensity * vec4(1.0, 1.0, 1.0, exposure);\n\n    frameUniforms.sun = sun;\n\n    frameUniforms.lightDirection = normalize(lightDirection);\n\n    frameUniforms.iblLuminance = iblLuminance * exposure;\n\n    frameUniforms.exposure = exposure;\n\n    frameUniforms.ev100 = ev100;\n\n    for (int i = 0; i < 9; i++)\n\n    {\n\n        frameUniforms.iblSH[i] = iblSH[i];\n\n    }\n\n    // frameUniforms.iblSH = iblSH;\n\n    frameUniforms.shadowBias = vec3(0.0, 0.0, 0.0);\n\n}\n\n";
	var fl_material_inputs_vert = "struct MaterialVertexInputs {\n\n#ifdef HAS_ATTRIBUTE_COLOR\n\n    vec4 color;\n\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV0\n\n    vec2 uv0;\n\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV1\n\n    vec2 uv1;\n\n#endif\n\n#ifdef VARIABLE_CUSTOM0\n\n    vec4 VARIABLE_CUSTOM0;\n\n#endif\n\n#ifdef VARIABLE_CUSTOM1\n\n    vec4 VARIABLE_CUSTOM1;\n\n#endif\n\n#ifdef VARIABLE_CUSTOM2\n\n    vec4 VARIABLE_CUSTOM2;\n\n#endif\n\n#ifdef VARIABLE_CUSTOM3\n\n    vec4 VARIABLE_CUSTOM3;\n\n#endif\n\n#ifdef HAS_ATTRIBUTE_TANGENTS\n\n    vec3 worldNormal;\n\n#endif\n\n    vec4 worldPosition;\n\n};\n\n\n\n// Workaround for a driver bug on ARM Bifrost GPUs. Assigning a structure member\n\n// (directly or inside an expression) to an invariant causes a driver crash.\n\nvec4 getWorldPosition(const MaterialVertexInputs material) {\n\n    return material.worldPosition;\n\n}\n\n\n\nvoid initMaterialVertex(out MaterialVertexInputs material) {\n\n#ifdef HAS_ATTRIBUTE_COLOR\n\n    material.color = mesh_color;\n\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV0\n\n    #ifdef FLIP_UV_ATTRIBUTE\n\n    material.uv0 = vec2(mesh_uv0.x, 1.0 - mesh_uv0.y);\n\n    #else\n\n    material.uv0 = mesh_uv0;\n\n    #endif\n\n#endif\n\n#ifdef HAS_ATTRIBUTE_UV1\n\n    #ifdef FLIP_UV_ATTRIBUTE\n\n    material.uv1 = vec2(mesh_uv1.x, 1.0 - mesh_uv1.y);\n\n    #else\n\n    material.uv1 = mesh_uv1;\n\n    #endif\n\n#endif\n\n#ifdef VARIABLE_CUSTOM0\n\n    material.VARIABLE_CUSTOM0 = vec4(0.0);\n\n#endif\n\n#ifdef VARIABLE_CUSTOM1\n\n    material.VARIABLE_CUSTOM1 = vec4(0.0);\n\n#endif\n\n#ifdef VARIABLE_CUSTOM2\n\n    material.VARIABLE_CUSTOM2 = vec4(0.0);\n\n#endif\n\n#ifdef VARIABLE_CUSTOM3\n\n    material.VARIABLE_CUSTOM3 = vec4(0.0);\n\n#endif\n\n    material.worldPosition = computeWorldPosition();\n\n}\n\n";
	var fl_inputs_vert = "vec4 mesh_position;\n\n\n\n#if defined(HAS_ATTRIBUTE_TANGENTS)\n\nvec4 mesh_tangents;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_COLOR)\n\nvec4 mesh_color;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_UV0)\n\nvec2 mesh_uv0;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_UV1)\n\nvec2 mesh_uv1;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_BONE_INDICES)\n\nvec4 mesh_bone_indices;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_BONE_WEIGHTS)\n\nvec4 mesh_bone_weights;\n\n#endif\n\n\n\nvarying highp vec3 vertex_worldPosition;\n\n#if defined(HAS_ATTRIBUTE_TANGENTS)\n\nvarying mediump vec3 vertex_worldNormal;\n\n#if defined(MATERIAL_HAS_ANISOTROPY) || defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\nvarying mediump vec3 vertex_worldTangent;\n\nvarying mediump vec3 vertex_worldBitangent;\n\n#endif\n\n#if defined(GEOMETRIC_SPECULAR_AA_NORMAL)\n\nvarying centroid vec3 vertex_worldNormalCentroid;\n\n#endif\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_COLOR)\n\nvarying mediump vec4 vertex_color;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_UV0) && !defined(HAS_ATTRIBUTE_UV1)\n\nvarying highp vec2 vertex_uv01;\n\n#elif defined(HAS_ATTRIBUTE_UV1)\n\nvarying highp vec4 vertex_uv01;\n\n#endif\n\n";
	var fl_header_frag = "#define SHADER_NAME standard\n\n    #extension GL_OES_standard_derivatives : enable\n\n#if defined(GL_EXT_shader_texture_lod)\n\n    #extension GL_EXT_shader_texture_lod : enable\n\n#endif\n\n\n\nprecision mediump float;\n\n\n\nvec4 textureLod(sampler2D sampler, vec2 coord, float lod) {\n\n    return texture2DLodEXT(sampler, coord, lod);\n\n}\n\n\n\nvec4 textureLod(samplerCube sampler, vec3 coord, float lod) {\n\n    return textureCubeLodEXT(sampler, coord, lod);\n\n}\n\n";
	var fl_common_graphics_glsl = "//------------------------------------------------------------------------------\n\n// Common color operations\n\n//------------------------------------------------------------------------------\n\n\n\n\n\nfloat luminance(const vec3 linear) {\n\n    return dot(linear, vec3(0.2126, 0.7152, 0.0722));\n\n}\n\n\n\n\n\nfloat computePreExposedIntensity(const highp float intensity, const highp float exposure) {\n\n    return intensity * exposure;\n\n}\n\n\n\nvoid unpremultiply(inout vec4 color) {\n\n    color.rgb /= max(color.a, FLT_EPS);\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Tone mapping operations\n\n//------------------------------------------------------------------------------\n\n\n\n\n\nvec3 Inverse_Tonemap_Unreal(const vec3 x) {\n\n    return (x * -0.155) / (x - 1.019);\n\n}\n\n\n\n\n\nvec3 inverseTonemapSRGB(vec3 color) {\n\n    // sRGB input\n\n    color = clamp(color, 0.0, 1.0);\n\n    return Inverse_Tonemap_Unreal(color);\n\n}\n\n\n\n\n\nvec3 inverseTonemap(vec3 linear) {\n\n    // Linear input\n\n    linear = clamp(linear, 0.0, 1.0);\n\n    return Inverse_Tonemap_Unreal(pow(linear, vec3(1.0 / 2.2)));\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Common texture operations\n\n//------------------------------------------------------------------------------\n\n\n\n\n\nvec3 decodeRGBM(vec4 c) {\n\n    c.rgb *= (c.a * 16.0);\n\n    return c.rgb * c.rgb;\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Common debug\n\n//------------------------------------------------------------------------------\n\n\n\nvec3 heatmap(float v) {\n\n    vec3 r = v * 2.1 - vec3(1.8, 1.14, 0.3);\n\n    return 1.0 - r * r;\n\n}\n\n";
	var fl_inputs_frag = "//------------------------------------------------------------------------------\n\n// Attributes and uniforms\n\n//------------------------------------------------------------------------------\n\n\n\n#if !defined(DEPTH_PREPASS)\n\nvarying highp vec3 vertex_worldPosition;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_TANGENTS)\n\nvarying mediump vec3 vertex_worldNormal;\n\n#if defined(MATERIAL_HAS_ANISOTROPY) || defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\nvarying mediump vec3 vertex_worldTangent;\n\nvarying mediump vec3 vertex_worldBitangent;\n\n#endif\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_COLOR)\n\nvarying mediump vec4 vertex_color;\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_UV0) && !defined(HAS_ATTRIBUTE_UV1)\n\n varying highp vec2 vertex_uv01;\n\n#elif defined(HAS_ATTRIBUTE_UV1)\n\n varying highp vec4 vertex_uv01;\n\n#endif\n\n\n\n";
	var fl_brdf_frag = "//------------------------------------------------------------------------------\n\n// BRDF configuration\n\n//------------------------------------------------------------------------------\n\n\n\n// Diffuse BRDFs\n\n#define DIFFUSE_LAMBERT             0\n\n#define DIFFUSE_BURLEY              1\n\n\n\n// Specular BRDF\n\n// Normal distribution functions\n\n#define SPECULAR_D_GGX              0\n\n\n\n// Anisotropic NDFs\n\n#define SPECULAR_D_GGX_ANISOTROPIC  0\n\n\n\n// Cloth NDFs\n\n#define SPECULAR_D_CHARLIE          0\n\n\n\n// Visibility functions\n\n#define SPECULAR_V_SMITH_GGX        0\n\n#define SPECULAR_V_SMITH_GGX_FAST   1\n\n#define SPECULAR_V_GGX_ANISOTROPIC  2\n\n#define SPECULAR_V_KELEMEN          3\n\n#define SPECULAR_V_NEUBELT          4\n\n\n\n// Fresnel functions\n\n#define SPECULAR_F_SCHLICK          0\n\n\n\n#define BRDF_DIFFUSE                DIFFUSE_LAMBERT\n\n\n\n#if defined(TARGET_MOBILE)\n\n#define BRDF_SPECULAR_D             SPECULAR_D_GGX\n\n#define BRDF_SPECULAR_V             SPECULAR_V_SMITH_GGX_FAST\n\n#define BRDF_SPECULAR_F             SPECULAR_F_SCHLICK\n\n#else\n\n#define BRDF_SPECULAR_D             SPECULAR_D_GGX\n\n#define BRDF_SPECULAR_V             SPECULAR_V_SMITH_GGX\n\n#define BRDF_SPECULAR_F             SPECULAR_F_SCHLICK\n\n#endif\n\n\n\n#define BRDF_CLEAR_COAT_D           SPECULAR_D_GGX\n\n#define BRDF_CLEAR_COAT_V           SPECULAR_V_KELEMEN\n\n\n\n#define BRDF_ANISOTROPIC_D          SPECULAR_D_GGX_ANISOTROPIC\n\n#define BRDF_ANISOTROPIC_V          SPECULAR_V_GGX_ANISOTROPIC\n\n\n\n#define BRDF_CLOTH_D                SPECULAR_D_CHARLIE\n\n#define BRDF_CLOTH_V                SPECULAR_V_NEUBELT\n\n\n\n//------------------------------------------------------------------------------\n\n// Specular BRDF implementations\n\n//------------------------------------------------------------------------------\n\n\n\nfloat D_GGX(float roughness, float NoH, const vec3 h) {\n\n    // Walter et al. 2007, \"Microfacet Models for Refraction through Rough Surfaces\"\n\n\n\n    // In mediump, there are two problems computing 1.0 - NoH^2\n\n    // 1) 1.0 - NoH^2 suffers floating point cancellation when NoH^2 is close to 1 (highlights)\n\n    // 2) NoH doesn't have enough precision around 1.0\n\n    // Both problem can be fixed by computing 1-NoH^2 in highp and providing NoH in highp as well\n\n\n\n    // However, we can do better using Lagrange's identity:\n\n    //      ||a x b||^2 = ||a||^2 ||b||^2 - (a . b)^2\n\n    // since N and H are unit vectors: ||N x H||^2 = 1.0 - NoH^2\n\n    // This computes 1.0 - NoH^2 directly (which is close to zero in the highlights and has\n\n    // enough precision).\n\n    // Overall this yields better performance, keeping all computations in mediump\n\n#if defined(TARGET_MOBILE)\n\n    vec3 NxH = cross(shading_normal, h);\n\n    float oneMinusNoHSquared = dot(NxH, NxH);\n\n#else\n\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\n\n#endif\n\n\n\n    float a = NoH * roughness;\n\n    float k = roughness / (oneMinusNoHSquared + a * a);\n\n    float d = k * k * (1.0 / PI);\n\n    return saturateMediump(d);\n\n}\n\n\n\nfloat D_GGX_Anisotropic(float at, float ab, float ToH, float BoH, float NoH) {\n\n    // Burley 2012, \"Physically-Based Shading at Disney\"\n\n\n\n    // The values at and ab are perceptualRoughness^2, a2 is therefore perceptualRoughness^4\n\n    // The dot product below computes perceptualRoughness^8. We cannot fit in fp16 without clamping\n\n    // the roughness to too high values so we perform the dot product and the division in fp32\n\n    float a2 = at * ab;\n\n    highp vec3 d = vec3(ab * ToH, at * BoH, a2 * NoH);\n\n    highp float d2 = dot(d, d);\n\n    float b2 = a2 / d2;\n\n    return a2 * b2 * b2 * (1.0 / PI);\n\n}\n\n\n\nfloat D_Charlie(float roughness, float NoH) {\n\n    // Estevez and Kulla 2017, \"Production Friendly Microfacet Sheen BRDF\"\n\n    float invAlpha  = 1.0 / roughness;\n\n    float cos2h = NoH * NoH;\n\n    float sin2h = max(1.0 - cos2h, 0.0078125); // 2^(-14/2), so sin2h^2 > 0 in fp16\n\n    return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n\n}\n\n\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL) {\n\n    // Heitz 2014, \"Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs\"\n\n    float a2 = roughness * roughness;\n\n    // TODO: lambdaV can be pre-computed for all the lights, it should be moved out of this function\n\n    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\n\n    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\n\n    float v = 0.5 / (lambdaV + lambdaL);\n\n    // a2=0 => v = 1 / 4*NoL*NoV   => min=1/4, max=+inf\n\n    // a2=1 => v = 1 / 2*(NoL+NoV) => min=1/4, max=+inf\n\n    // clamp to the maximum value representable in mediump\n\n    return saturateMediump(v);\n\n}\n\n\n\nfloat V_SmithGGXCorrelated_Fast(float roughness, float NoV, float NoL) {\n\n    // Hammon 2017, \"PBR Diffuse Lighting for GGX+Smith Microsurfaces\"\n\n    float v = 0.5 / mix(2.0 * NoL * NoV, NoL + NoV, roughness);\n\n    return saturateMediump(v);\n\n}\n\n\n\nfloat V_SmithGGXCorrelated_Anisotropic(float at, float ab, float ToV, float BoV,\n\n        float ToL, float BoL, float NoV, float NoL) {\n\n    // Heitz 2014, \"Understanding the Masking-Shadowing Function in Microfacet-Based BRDFs\"\n\n    // TODO: lambdaV can be pre-computed for all the lights, it should be moved out of this function\n\n    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\n\n    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\n\n    float v = 0.5 / (lambdaV + lambdaL);\n\n    return saturateMediump(v);\n\n}\n\n\n\nfloat V_Kelemen(float LoH) {\n\n    // Kelemen 2001, \"A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling\"\n\n    return saturateMediump(0.25 / (LoH * LoH));\n\n}\n\n\n\nfloat V_Neubelt(float NoV, float NoL) {\n\n    // Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n\n    return saturateMediump(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n\n}\n\n\n\nvec3 F_Schlick(const vec3 f0, float f90, float VoH) {\n\n    // Schlick 1994, \"An Inexpensive BRDF Model for Physically-Based Rendering\"\n\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n\n}\n\n\n\nvec3 F_Schlick(const vec3 f0, float VoH) {\n\n    float f = pow(1.0 - VoH, 5.0);\n\n    return f + f0 * (1.0 - f);\n\n}\n\n\n\nfloat F_Schlick(float f0, float f90, float VoH) {\n\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Specular BRDF dispatch\n\n//------------------------------------------------------------------------------\n\n\n\nfloat distribution(float roughness, float NoH, const vec3 h) {\n\n#if BRDF_SPECULAR_D == SPECULAR_D_GGX\n\n    return D_GGX(roughness, NoH, h);\n\n#endif\n\n}\n\n\n\nfloat visibility(float roughness, float NoV, float NoL, float LoH) {\n\n#if BRDF_SPECULAR_V == SPECULAR_V_SMITH_GGX\n\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\n\n#elif BRDF_SPECULAR_V == SPECULAR_V_SMITH_GGX_FAST\n\n    return V_SmithGGXCorrelated_Fast(roughness, NoV, NoL);\n\n#endif\n\n}\n\n\n\nvec3 fresnel(const vec3 f0, float LoH) {\n\n#if BRDF_SPECULAR_F == SPECULAR_F_SCHLICK\n\n#if defined(TARGET_MOBILE)\n\n    // f90 = 1.0\n\n    return F_Schlick(f0, LoH);\n\n#else\n\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\n\n    return F_Schlick(f0, f90, LoH);\n\n#endif\n\n#endif\n\n}\n\n\n\nfloat distributionAnisotropic(float at, float ab, float ToH, float BoH, float NoH) {\n\n#if BRDF_ANISOTROPIC_D == SPECULAR_D_GGX_ANISOTROPIC\n\n    return D_GGX_Anisotropic(at, ab, ToH, BoH, NoH);\n\n#endif\n\n}\n\n\n\nfloat visibilityAnisotropic(float roughness, float at, float ab,\n\n        float ToV, float BoV, float ToL, float BoL, float NoV, float NoL) {\n\n#if BRDF_ANISOTROPIC_V == SPECULAR_V_SMITH_GGX\n\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\n\n#elif BRDF_ANISOTROPIC_V == SPECULAR_V_GGX_ANISOTROPIC\n\n    return V_SmithGGXCorrelated_Anisotropic(at, ab, ToV, BoV, ToL, BoL, NoV, NoL);\n\n#endif\n\n}\n\n\n\nfloat distributionClearCoat(float roughness, float NoH, const vec3 h) {\n\n#if BRDF_CLEAR_COAT_D == SPECULAR_D_GGX\n\n    return D_GGX(roughness, NoH, h);\n\n#endif\n\n}\n\n\n\nfloat visibilityClearCoat(float LoH) {\n\n#if BRDF_CLEAR_COAT_V == SPECULAR_V_KELEMEN\n\n    return V_Kelemen(LoH);\n\n#endif\n\n}\n\n\n\nfloat distributionCloth(float roughness, float NoH) {\n\n#if BRDF_CLOTH_D == SPECULAR_D_CHARLIE\n\n    return D_Charlie(roughness, NoH);\n\n#endif\n\n}\n\n\n\nfloat visibilityCloth(float NoV, float NoL) {\n\n#if BRDF_CLOTH_V == SPECULAR_V_NEUBELT\n\n    return V_Neubelt(NoV, NoL);\n\n#endif\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Diffuse BRDF implementations\n\n//------------------------------------------------------------------------------\n\n\n\nfloat Fd_Lambert() {\n\n    return 1.0 / PI;\n\n}\n\n\n\nfloat Fd_Burley(float roughness, float NoV, float NoL, float LoH) {\n\n    // Burley 2012, \"Physically-Based Shading at Disney\"\n\n    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;\n\n    float lightScatter = F_Schlick(1.0, f90, NoL);\n\n    float viewScatter  = F_Schlick(1.0, f90, NoV);\n\n    return lightScatter * viewScatter * (1.0 / PI);\n\n}\n\n\n\n// Energy conserving wrap diffuse term, does *not* include the divide by pi\n\nfloat Fd_Wrap(float NoL, float w) {\n\n    return saturate((NoL + w) / sq(1.0 + w));\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Diffuse BRDF dispatch\n\n//------------------------------------------------------------------------------\n\n\n\nfloat diffuse(float roughness, float NoV, float NoL, float LoH) {\n\n#if BRDF_DIFFUSE == DIFFUSE_LAMBERT\n\n    return Fd_Lambert();\n\n#elif BRDF_DIFFUSE == DIFFUSE_BURLEY\n\n    return Fd_Burley(roughness, NoV, NoL, LoH);\n\n#endif\n\n}\n\n";
	var fl_shading_params = "//------------------------------------------------------------------------------\n\n// Material evaluation\n\n//------------------------------------------------------------------------------\n\n\n\n\n\nvoid computeShadingParams() {\n\n#if defined(HAS_ATTRIBUTE_TANGENTS)\n\n    highp vec3 n = vertex_worldNormal;\n\n\n\n#if defined(MATERIAL_HAS_DOUBLE_SIDED_CAPABILITY)\n\n    if (isDoubleSided()) {\n\n        n = gl_FrontFacing ? n : -n;\n\n    }\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_ANISOTROPY) || defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    // Re-normalize post-interpolation values\n\n    shading_tangentToWorld = mat3(\n\n            normalize(vertex_worldTangent), normalize(vertex_worldBitangent), normalize(n));\n\n#endif\n\n    // Leave the tangent and bitangent uninitialized, we won't use them\n\n    shading_tangentToWorld[2] = normalize(n);\n\n#endif\n\n\n\n    shading_position = vertex_worldPosition;\n\n    shading_view = normalize(frameUniforms.cameraPosition - shading_position);\n\n}\n\n\n\n\n\nvoid prepareMaterial(const MaterialInputs material) {\n\n#if defined(HAS_ATTRIBUTE_TANGENTS)\n\n#if defined(MATERIAL_HAS_NORMAL)\n\n    shading_normal = normalize(shading_tangentToWorld * material.normal);\n\n#else\n\n    shading_normal = getWorldGeometricNormalVector();\n\n#endif\n\n    shading_NoV = clampNoV(dot(shading_normal, shading_view));\n\n    shading_reflected = reflect(-shading_view, shading_normal);\n\n\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n#if defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    shading_clearCoatNormal = normalize(shading_tangentToWorld * material.clearCoatNormal);\n\n#else\n\n    shading_clearCoatNormal = getWorldGeometricNormalVector();\n\n#endif\n\n#endif\n\n#endif\n\n}\n\n";
	var fl_common_shading_frag = "// These variables should be in a struct but some GPU drivers ignore the\n\n// precision qualifier on individual struct members\n\n      // TBN matrix\n\nhighp mat3  shading_tangentToWorld;\n\n      // position of the fragment in world space\n\nhighp vec3  shading_position;\n\n      // normalized vector from the fragment to the eye\n\n      vec3  shading_view;\n\n      // normalized normal, in world space\n\n      vec3  shading_normal;\n\n      // reflection of view about normal\n\n      vec3  shading_reflected;\n\n      // dot(normal, view), always strictly >= MIN_N_DOT_V\n\n      float shading_NoV;\n\n\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n      // normalized clear coat layer normal, in world space\n\n      vec3  shading_clearCoatNormal;\n\n#endif\n\n";
	var fl_getters_frag = "#if defined(HAS_ATTRIBUTE_COLOR)\n\n\n\nvec4 getColor() {\n\n    return vertex_color;\n\n}\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_UV0)\n\n\n\nvec2 getUV0() {\n\n    return vertex_uv01.xy;\n\n}\n\n#endif\n\n\n\n#if defined(HAS_ATTRIBUTE_UV1)\n\n\n\nvec2 getUV1() {\n\n    return vertex_uv01.zw;\n\n}\n\n#endif\n\n\n\n#if defined(BLEND_MODE_MASKED)\n\n\n\nfloat getMaskThreshold() {\n\n    return materialParams._maskThreshold;\n\n}\n\n#endif\n\n\n\n\n\nhighp mat3 getWorldTangentFrame() {\n\n    return shading_tangentToWorld;\n\n}\n\n\n\n\n\nhighp vec3 getWorldPosition() {\n\n    return shading_position;\n\n}\n\n\n\n\n\nvec3 getWorldViewVector() {\n\n    return shading_view;\n\n}\n\n\n\n\n\nvec3 getWorldNormalVector() {\n\n    return shading_normal;\n\n}\n\n\n\n\n\nvec3 getWorldGeometricNormalVector() {\n\n    return shading_tangentToWorld[2];\n\n}\n\n\n\n\n\nvec3 getWorldReflectedVector() {\n\n    return shading_reflected;\n\n}\n\n\n\n\n\nfloat getNdotV() {\n\n    return shading_NoV;\n\n}\n\n\n\n\n\n#if defined(MATERIAL_HAS_DOUBLE_SIDED_CAPABILITY)\n\nbool isDoubleSided() {\n\n    return materialParams._doubleSided;\n\n}\n\n#endif\n\n";
	var fl_material_inputs_frag = "// Decide if we can skip lighting when dot(n, l) <= 0.0\n\n#if defined(SHADING_MODEL_CLOTH)\n\n#if !defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    #define MATERIAL_CAN_SKIP_LIGHTING\n\n#endif\n\n#elif defined(SHADING_MODEL_SUBSURFACE)\n\n    // Cannot skip lighting\n\n#else\n\n    #define MATERIAL_CAN_SKIP_LIGHTING\n\n#endif\n\n\n\nstruct MaterialInputs {\n\n    vec4  baseColor;\n\n#if !defined(SHADING_MODEL_UNLIT)\n\n#if !defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    float roughness;\n\n#endif\n\n#if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    float metallic;\n\n    float reflectance;\n\n#endif\n\n    float ambientOcclusion;\n\n#endif\n\n    vec4  emissive;\n\n\n\n    float clearCoat;\n\n    float clearCoatRoughness;\n\n\n\n    float anisotropy;\n\n    vec3  anisotropyDirection;\n\n\n\n#if defined(SHADING_MODEL_SUBSURFACE)\n\n    float thickness;\n\n    float subsurfacePower;\n\n    vec3  subsurfaceColor;\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_CLOTH)\n\n    vec3  sheenColor;\n\n#if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    vec3  subsurfaceColor;\n\n#endif\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    vec3  specularColor;\n\n    float glossiness;\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_NORMAL)\n\n    vec3  normal;\n\n#endif\n\n#if defined(MATERIAL_HAS_CLEAR_COAT) && defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    vec3  clearCoatNormal;\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_POST_LIGHTING_COLOR)\n\n    vec4  postLightingColor;\n\n#endif\n\n};\n\n\n\nvoid initMaterial(out MaterialInputs material) {\n\n    material.baseColor = vec4(1.0);\n\n#if !defined(SHADING_MODEL_UNLIT)\n\n#if !defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    material.roughness = 1.0;\n\n#endif\n\n#if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    material.metallic = 0.0;\n\n    material.reflectance = 0.5;\n\n#endif\n\n    material.ambientOcclusion = 1.0;\n\n#endif\n\n    material.emissive = vec4(0.0);\n\n\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n    material.clearCoat = 1.0;\n\n    material.clearCoatRoughness = 0.0;\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\n    material.anisotropy = 0.0;\n\n    material.anisotropyDirection = vec3(1.0, 0.0, 0.0);\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_SUBSURFACE)\n\n    material.thickness = 0.5;\n\n    material.subsurfacePower = 12.234;\n\n    material.subsurfaceColor = vec3(1.0);\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_CLOTH)\n\n    material.sheenColor = sqrt(material.baseColor.rgb);\n\n#if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    material.subsurfaceColor = vec3(0.0);\n\n#endif\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    material.glossiness = 0.0;\n\n    material.specularColor = vec3(0.0);\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_NORMAL)\n\n    material.normal = vec3(0.0, 0.0, 1.0);\n\n#endif\n\n#if defined(MATERIAL_HAS_CLEAR_COAT) && defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    material.clearCoatNormal = vec3(0.0, 0.0, 1.0);\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_POST_LIGHTING_COLOR)\n\n    material.postLightingColor = vec4(0.0);\n\n#endif\n\n}\n\n";
	var fl_common_material_frag = "#if defined(TARGET_MOBILE)\n\n    // min roughness such that (MIN_PERCEPTUAL_ROUGHNESS^4) > 0 in fp16 (i.e. 2^(-14/4), rounded up)\n\n    #define MIN_PERCEPTUAL_ROUGHNESS 0.089\n\n    #define MIN_ROUGHNESS            0.007921\n\n#else\n\n    #define MIN_PERCEPTUAL_ROUGHNESS 0.045\n\n    #define MIN_ROUGHNESS            0.002025\n\n#endif\n\n\n\n#define MAX_CLEAR_COAT_PERCEPTUAL_ROUGHNESS 0.6\n\n\n\n#define MIN_N_DOT_V 1e-4\n\n\n\nfloat clampNoV(float NoV) {\n\n    // Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n\n    return max(dot(shading_normal, shading_view), MIN_N_DOT_V);\n\n}\n\n\n\nvec3 computeDiffuseColor(const vec4 baseColor, float metallic) {\n\n    return baseColor.rgb * (1.0 - metallic);\n\n}\n\n\n\nvec3 computeF0(const vec4 baseColor, float metallic, float reflectance) {\n\n    return baseColor.rgb * metallic + (reflectance * (1.0 - metallic));\n\n}\n\n\n\nfloat computeDielectricF0(float reflectance) {\n\n    return 0.16 * reflectance * reflectance;\n\n}\n\n\n\nfloat computeMetallicFromSpecularColor(const vec3 specularColor) {\n\n    return max3(specularColor);\n\n}\n\n\n\nfloat computeRoughnessFromGlossiness(float glossiness) {\n\n    return 1.0 - glossiness;\n\n}\n\n\n\nfloat perceptualRoughnessToRoughness(float perceptualRoughness) {\n\n    return perceptualRoughness * perceptualRoughness;\n\n}\n\n\n\nfloat roughnessToPerceptualRoughness(float roughness) {\n\n    return sqrt(roughness);\n\n}\n\n\n\nfloat iorToF0(float transmittedIor, float incidentIor) {\n\n    return sq((transmittedIor - incidentIor) / (transmittedIor + incidentIor));\n\n}\n\n\n\nfloat f0ToIor(float f0) {\n\n    float r = sqrt(f0);\n\n    return (1.0 + r) / (1.0 - r);\n\n}\n\n\n\nvec3 f0ClearCoatToSurface(const vec3 f0) {\n\n    // Approximation of iorTof0(f0ToIor(f0), 1.5)\n\n    // This assumes that the clear coat layer has an IOR of 1.5\n\n#if defined(TARGET_MOBILE)\n\n    return saturate(f0 * (f0 * 0.526868 + 0.529324) - 0.0482256);\n\n#else\n\n    return saturate(f0 * (f0 * (0.941892 - 0.263008 * f0) + 0.346479) - 0.0285998);\n\n#endif\n\n}\n\n";
	var fl_common_lighting_frag = "struct Light {\n\n    vec4 colorIntensity;  // rgb, pre-exposed intensity\n\n    vec3 l;\n\n    float attenuation;\n\n    float NoL;\n\n};\n\n\n\nstruct PixelParams {\n\n    vec3  diffuseColor;\n\n    float perceptualRoughness;\n\n    vec3  f0;\n\n    float roughness;\n\n    vec3  dfg;\n\n    vec3  energyCompensation;\n\n\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n    float clearCoat;\n\n    float clearCoatPerceptualRoughness;\n\n    float clearCoatRoughness;\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\n    vec3  anisotropicT;\n\n    vec3  anisotropicB;\n\n    float anisotropy;\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_SUBSURFACE)\n\n    float thickness;\n\n    vec3  subsurfaceColor;\n\n    float subsurfacePower;\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_CLOTH) && defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    vec3  subsurfaceColor;\n\n#endif\n\n};\n\n\n\nfloat computeMicroShadowing(float NoL, float visibility) {\n\n    // Chan 2018, \"Material Advances in Call of Duty: WWII\"\n\n    float aperture = inversesqrt(1.0 - visibility);\n\n    float microShadow = saturate(NoL * aperture);\n\n    return microShadow * microShadow;\n\n}\n\n";
	var fl_material_uniforms_frag = "//maptalksgl的material定义\n\nuniform struct Material {\n\n    //https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#reference-pbrmetallicroughness\n\n    #if defined(MATERIAL_HAS_BASECOLOR_MAP)\n\n        sampler2D   baseColorTexture;\n\n    #else\n\n        vec4        baseColorFactor;\n\n    #endif\n\n    #if defined(MATERIAL_HAS_METALLICROUGHNESS_MAP)\n\n        //G: roughness B: metallic\n\n        sampler2D   metallicRoughnessTexture;\n\n    #else\n\n        #if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SUBSURFACE)\n\n            float       metallicFactor;\n\n        #endif\n\n        float       roughnessFactor;\n\n    #endif\n\n\n\n    //https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#occlusiontextureinfo\n\n    #if defined(MATERIAL_HAS_AMBIENT_OCCLUSION)\n\n        #if defined(MATERIAL_HAS_AO_MAP)\n\n            // default: 0.0\n\n            sampler2D occlusionTexture;\n\n        #else\n\n            float occlusion;\n\n        #endif\n\n            float occlusionStrength;\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_EMISSIVE)\n\n        #if defined(MATERIAL_HAS_EMISSIVE_MAP)\n\n            sampler2D emissiveTexture;\n\n        #else\n\n            float emissiveFactor;\n\n        #endif\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_POST_LIGHTING_COLOR)\n\n        // default: vec4(0.0)\n\n        vec4 postLightingColor;\n\n    #endif\n\n\n\n    #if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SUBSURFACE)\n\n        //TODO reflectance 是否能做成材质？\n\n        // default: 0.5, not available with cloth\n\n            float reflectance;\n\n        #if defined(MATERIAL_HAS_CLEAR_COAT)\n\n                // default: 1.0, 是否是clearCoat, 0 or 1\n\n                float clearCoat;\n\n            #if defined(MATERIAL_HAS_CLEARCOAT_ROUGNESS_MAP)\n\n                sampler2D clearCoatRoughnessTexture;\n\n            #else\n\n                // default: 0.0\n\n                float clearCoatRoughness;\n\n            #endif\n\n\n\n            #if defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n                // default: vec3(0.0, 0.0, 1.0)\n\n                sampler2D clearCoatNormalTexture;\n\n            #endif\n\n        #endif\n\n\n\n        #if defined(MATERIAL_HAS_ANISOTROPY)\n\n            // default: 0.0\n\n            float anisotropy;\n\n            // default: vec3(1.0, 0.0, 0.0)\n\n            vec3 anisotropyDirection;\n\n        #endif\n\n\n\n    #elif defined(SHADING_MODEL_CLOTH)\n\n        vec3 sheenColor;\n\n        #if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n        vec3 subsurfaceColor;\n\n        #endif\n\n    #else\n\n        float thickness;\n\n        float subsurfacePower;\n\n        vec3 subsurfaceColor;\n\n    #endif\n\n\n\n    // not available when the shading model is unlit\n\n    // must be set before calling prepareMaterial()\n\n    #if defined(MATERIAL_HAS_NORMAL)\n\n        // default: vec3(0.0, 0.0, 1.0)\n\n        sampler2D normalTexture;\n\n    #endif\n\n} material;\n\n\n\nvec3 gammaCorrectInput(vec3 color) {\n\n    #if defined(GAMMA_CORRECT_INPUT)\n\n        return pow(color, vec3(2.2));\n\n    #else\n\n        return color;\n\n    #endif\n\n}\n\n\n\nvec4 gammaCorrectInput(vec4 color) {\n\n    #if defined(GAMMA_CORRECT_INPUT)\n\n        return vec4(gammaCorrectInput(color.rgb), color.a);\n\n    #else\n\n        return color;\n\n    #endif\n\n}\n\n\n\nvoid getMaterial(out MaterialInputs materialInputs) {\n\n    #if defined(MATERIAL_HAS_BASECOLOR_MAP)\n\n        materialInputs.baseColor = gammaCorrectInput(texture2D(material.baseColorTexture, vertex_uv01.xy));\n\n    #else\n\n        materialInputs.baseColor = material.baseColorFactor;\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_METALLICROUGHNESS_MAP)\n\n        vec2 roughnessMetallic = texture2D(material.metallicRoughnessTexture, vertex_uv01.xy).gb;\n\n        materialInputs.roughness = roughnessMetallic[0];\n\n        #if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SUBSURFACE)\n\n            materialInputs.metallic = roughnessMetallic[1];\n\n        #endif\n\n    #else\n\n        materialInputs.roughness = material.roughnessFactor;\n\n        #if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SUBSURFACE)\n\n            materialInputs.metallic = material.metallicFactor;\n\n        #endif\n\n    #endif\n\n\n\n    #if !defined(SHADING_MODEL_CLOTH) && !defined(SHADING_MODEL_SUBSURFACE)\n\n        //TODO 可能需要从纹理中读取\n\n        materialInputs.reflectance = material.reflectance;\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_AMBIENT_OCCLUSION)\n\n        #if defined(MATERIAL_HAS_AO_MAP)\n\n            materialInputs.ambientOcclusion = texture2D(material.occlusionTexture, vertex_uv01.xy).r;\n\n        #else\n\n            materialInputs.ambientOcclusion = material.occlusion;\n\n        #endif\n\n        materialInputs.ambientOcclusion *= material.occlusionStrength;\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_EMISSIVE)\n\n        #if defined(MATERIAL_HAS_EMISSIVE_MAP)\n\n            materialInputs.emissive = gammaCorrectInput(texture2D(material.emissiveTexture, vertex_uv01.xy));\n\n        #else\n\n            materialInputs.emissive = material.emissiveFactor;\n\n        #endif\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_CLEAR_COAT)\n\n        materialInputs.clearCoat = material.clearCoat;\n\n        #if defined(MATERIAL_HAS_CLEARCOAT_ROUGNESS_MAP)\n\n            materialInputs.clearCoatRoughness = texture2D(material.clearCoatRoughnessTexture, vertex_uv01.xy).g;\n\n        #else\n\n            materialInputs.clearCoatRoughness = material.clearCoatRoughness;\n\n        #endif\n\n\n\n        #if defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n            materialInputs.clearCoatNormal = texture2D(material.clearCoatNormalTexture, vertex_uv01.xy).xyz * 2.0 - 1.0;\n\n        #endif\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_ANISOTROPY)\n\n        //anisotropy为1时，anisotropicLobe 中 at和ab 结果为1，产生anisotropy不再受roughness影响的现象，绘制结果不符合直觉\n\n        //乘以0.95后，最大值不再为1，则能避免此现象\n\n        materialInputs.anisotropy = material.anisotropy * 0.95;\n\n        materialInputs.anisotropyDirection = material.anisotropyDirection;\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_NORMAL)\n\n        materialInputs.normal = texture2D(material.normalTexture, vertex_uv01.xy).xyz * 2.0 - 1.0;\n\n    #endif\n\n\n\n    #if defined(MATERIAL_HAS_POST_LIGHTING_COLOR)\n\n        materialInputs.postLightingColor = material.postLightingColor;\n\n    #endif\n\n\n\n    #if defined(SHADING_MODEL_CLOTH)\n\n        if (material.sheenColor[0] >= 0.0) {\n\n            materialInputs.sheenColor = material.sheenColor;\n\n        }\n\n        #if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n            materialInputs.subsurfaceColor = material.subsurfaceColor;\n\n        #endif\n\n    #endif\n\n\n\n    #if defined(SHADING_MODEL_SUBSURFACE)\n\n        materialInputs.thickness = material.thickness;\n\n        materialInputs.subsurfacePower = material.subsurfacePower;\n\n        materialInputs.subsurfaceColor = material.subsurfaceColor;\n\n    #endif\n\n}\n\n";
	var fl_light_uniforms_frag = "//dfgMap\n\nuniform sampler2D light_iblDFG;\n\n//prefilterMap\n\nuniform samplerCube light_iblSpecular;\n\n";
	var fl_light_indirect = "//------------------------------------------------------------------------------\n\n// Image based lighting configuration\n\n//------------------------------------------------------------------------------\n\n\n\n#ifndef TARGET_MOBILE\n\n#define IBL_OFF_SPECULAR_PEAK\n\n#endif\n\n\n\n// Number of spherical harmonics bands (1, 2 or 3)\n\n#if defined(TARGET_MOBILE)\n\n#define SPHERICAL_HARMONICS_BANDS           2\n\n#else\n\n#define SPHERICAL_HARMONICS_BANDS           3\n\n#endif\n\n\n\n// IBL integration algorithm\n\n#define IBL_INTEGRATION_PREFILTERED_CUBEMAP         0\n\n#define IBL_INTEGRATION_IMPORTANCE_SAMPLING         1\n\n\n\n#define IBL_INTEGRATION                             IBL_INTEGRATION_PREFILTERED_CUBEMAP\n\n\n\n#define IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT   64\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL utilities\n\n//------------------------------------------------------------------------------\n\n\n\nvec3 decodeDataForIBL(const vec4 data) {\n\n    return data.rgb;\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL prefiltered DFG term implementations\n\n//------------------------------------------------------------------------------\n\n\n\nvec3 PrefilteredDFG_LUT(float lod, float NoV) {\n\n    // coord = sqrt(linear_roughness), which is the mapping used by cmgen.\n\n    return textureLod(light_iblDFG, vec2(NoV, lod), 0.0).rgb;\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL environment BRDF dispatch\n\n//------------------------------------------------------------------------------\n\n\n\nvec3 prefilteredDFG(float perceptualRoughness, float NoV) {\n\n    // PrefilteredDFG_LUT() takes a LOD, which is sqrt(roughness) = perceptualRoughness\n\n    return PrefilteredDFG_LUT(perceptualRoughness, NoV);\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL irradiance implementations\n\n//------------------------------------------------------------------------------\n\n\n\n// vec3 Irradiance_SphericalHarmonics(const vec3 n) {\n\n//     return max(\n\n//           frameUniforms.iblSH[0]\n\n// #if SPHERICAL_HARMONICS_BANDS >= 2\n\n//         + frameUniforms.iblSH[1] * (n.y)\n\n//         + frameUniforms.iblSH[2] * (n.z)\n\n//         + frameUniforms.iblSH[3] * (n.x)\n\n// #endif\n\n// #if SPHERICAL_HARMONICS_BANDS >= 3\n\n//         + frameUniforms.iblSH[4] * (n.y * n.x)\n\n//         + frameUniforms.iblSH[5] * (n.y * n.z)\n\n//         + frameUniforms.iblSH[6] * (3.0 * n.z * n.z - 1.0)\n\n//         + frameUniforms.iblSH[7] * (n.z * n.x)\n\n//         + frameUniforms.iblSH[8] * (n.x * n.x - n.y * n.y)\n\n// #endif\n\n//         , 0.0);\n\n// }\n\n\n\nvec3 sh(const vec3 sph[9], const in vec3 normal) {\n\n  float x = normal.x;\n\n  float y = normal.y;\n\n  float z = normal.z;\n\n\n\n  vec3 result = (\n\n    sph[0] +\n\n\n\n    sph[1] * x +\n\n    sph[2] * y +\n\n    sph[3] * z +\n\n\n\n    sph[4] * z * x +\n\n    sph[5] * y * z +\n\n    sph[6] * y * x +\n\n    sph[7] * (3.0 * z * z - 1.0) +\n\n    sph[8] * (x*x - y*y)\n\n  );\n\n\n\n  return max(result, vec3(0.0));\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL irradiance dispatch\n\n//------------------------------------------------------------------------------\n\nvec3 diffuseIrradiance(const vec3 n) {\n\n    // return Irradiance_SphericalHarmonics(n);\n\n    return sh(frameUniforms.iblSH, n);\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL specular\n\n//------------------------------------------------------------------------------\n\n\n\nvec3 prefilteredRadiance(const vec3 r, float perceptualRoughness) {\n\n    // lod = lod_count * sqrt(roughness), which is the mapping used by cmgen\n\n    // where roughness = perceptualRoughness^2\n\n    // using all the mip levels requires seamless cubemap sampling\n\n    float lod = frameUniforms.iblMaxMipLevel.x * perceptualRoughness;\n\n    return decodeDataForIBL(textureLod(light_iblSpecular, r, lod));\n\n}\n\n\n\nvec3 prefilteredRadiance(const vec3 r, float roughness, float offset) {\n\n    float lod = frameUniforms.iblMaxMipLevel.x * roughness;\n\n    return decodeDataForIBL(textureLod(light_iblSpecular, r, lod + offset));\n\n}\n\n\n\nvec3 getSpecularDominantDirection(vec3 n, vec3 r, float roughness) {\n\n#if defined(IBL_OFF_SPECULAR_PEAK)\n\n    float s = 1.0 - roughness;\n\n    return mix(n, r, s * (sqrt(s) + roughness));\n\n#else\n\n    return r;\n\n#endif\n\n}\n\n\n\nvec3 specularDFG(const PixelParams pixel) {\n\n#if defined(SHADING_MODEL_CLOTH)\n\n    return pixel.f0 * pixel.dfg.z;\n\n#elif !defined(USE_MULTIPLE_SCATTERING_COMPENSATION)\n\n    return pixel.f0 * pixel.dfg.x + pixel.dfg.y;\n\n#else\n\n    return mix(pixel.dfg.xxx, pixel.dfg.yyy, pixel.f0);\n\n#endif\n\n}\n\n\n\n\n\n\n\nvec3 getReflectedVector(const PixelParams pixel, const vec3 v, const vec3 n) {\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\n    vec3  anisotropyDirection = pixel.anisotropy >= 0.0 ? pixel.anisotropicB : pixel.anisotropicT;\n\n    vec3  anisotropicTangent  = cross(anisotropyDirection, v);\n\n    vec3  anisotropicNormal   = cross(anisotropicTangent, anisotropyDirection);\n\n    float bendFactor          = abs(pixel.anisotropy) * saturate(5.0 * pixel.perceptualRoughness);\n\n    vec3  bentNormal          = normalize(mix(n, anisotropicNormal, bendFactor));\n\n\n\n    vec3 r = reflect(-v, bentNormal);\n\n#else\n\n    vec3 r = reflect(-v, n);\n\n#endif\n\n    return r;\n\n}\n\n\n\nvec3 getReflectedVector(const PixelParams pixel, const vec3 n) {\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\n    vec3 r = getReflectedVector(pixel, shading_view, n);\n\n#else\n\n    vec3 r = shading_reflected;\n\n#endif\n\n    return getSpecularDominantDirection(n, r, pixel.roughness);\n\n}\n\n\n\n//------------------------------------------------------------------------------\n\n// Prefiltered importance sampling\n\n//------------------------------------------------------------------------------\n\n\n\n#if IBL_INTEGRATION == IBL_INTEGRATION_IMPORTANCE_SAMPLING\n\nvec2 hammersley(uint index) {\n\n    // Compute Hammersley sequence\n\n    // TODO: these should come from uniforms\n\n    // TODO: we should do this with logical bit operations\n\n    const uint numSamples = uint(IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT);\n\n    const uint numSampleBits = uint(log2(float(numSamples)));\n\n    const float invNumSamples = 1.0 / float(numSamples);\n\n    uint i = uint(index);\n\n    uint t = i;\n\n    uint bits = 0u;\n\n    for (uint j = 0u; j < numSampleBits; j++) {\n\n        bits = bits * 2u + (t - (2u * (t / 2u)));\n\n        t /= 2u;\n\n    }\n\n    return vec2(float(i), float(bits)) * invNumSamples;\n\n}\n\n\n\nvec3 importanceSamplingNdfDggx(vec2 u, float roughness) {\n\n    // Importance sampling D_GGX\n\n    float a2 = roughness * roughness;\n\n    float phi = 2.0 * PI * u.x;\n\n    float cosTheta2 = (1.0 - u.y) / (1.0 + (a2 - 1.0) * u.y);\n\n    float cosTheta = sqrt(cosTheta2);\n\n    float sinTheta = sqrt(1.0 - cosTheta2);\n\n    return vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);\n\n}\n\n\n\nvec3 importanceSamplingVNdfDggx(vec2 u, float roughness, vec3 v) {\n\n    // See: \"A Simpler and Exact Sampling Routine for the GGX Distribution of Visible Normals\", Eric Heitz\n\n    float alpha = roughness;\n\n\n\n    // stretch view\n\n    v = normalize(vec3(alpha * v.x, alpha * v.y, v.z));\n\n\n\n    // orthonormal basis\n\n    vec3 up = abs(v.z) < 0.9999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n\n    vec3 t = normalize(cross(up, v));\n\n    vec3 b = cross(t, v);\n\n\n\n    // sample point with polar coordinates (r, phi)\n\n    float a = 1.0 / (1.0 + v.z);\n\n    float r = sqrt(u.x);\n\n    float phi = (u.y < a) ? u.y / a * PI : PI + (u.y - a) / (1.0 - a) * PI;\n\n    float p1 = r * cos(phi);\n\n    float p2 = r * sin(phi) * ((u.y < a) ? 1.0 : v.z);\n\n\n\n    // compute normal\n\n    vec3 h = p1 * t + p2 * b + sqrt(max(0.0, 1.0 - p1*p1 - p2*p2)) * v;\n\n\n\n    // unstretch\n\n    h = normalize(vec3(alpha * h.x, alpha * h.y, max(0.0, h.z)));\n\n    return h;\n\n}\n\n\n\nfloat prefilteredImportanceSampling(float ipdf, vec2 iblMaxMipLevel) {\n\n    // See: \"Real-time Shading with Filtered Importance Sampling\", Jaroslav Krivanek\n\n    // Prefiltering doesn't work with anisotropy\n\n    const float numSamples = float(IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT);\n\n    const float invNumSamples = 1.0 / float(numSamples);\n\n    const float dim = iblMaxMipLevel.y;\n\n    const float omegaP = (4.0 * PI) / (6.0 * dim * dim);\n\n    const float invOmegaP = 1.0 / omegaP;\n\n    const float K = 4.0;\n\n    float omegaS = invNumSamples * ipdf;\n\n    float mipLevel = clamp(log2(K * omegaS * invOmegaP) * 0.5, 0.0, iblMaxMipLevel.x);\n\n    return mipLevel;\n\n}\n\n\n\nvec3 isEvaluateIBL(const PixelParams pixel, vec3 n, vec3 v, float NoV) {\n\n    // TODO: for a true anisotropic BRDF, we need a real tangent space\n\n    vec3 up = abs(n.z) < 0.9999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n\n\n\n    mat3 tangentToWorld;\n\n    tangentToWorld[0] = normalize(cross(up, n));\n\n    tangentToWorld[1] = cross(n, tangentToWorld[0]);\n\n    tangentToWorld[2] = n;\n\n\n\n    float roughness = pixel.roughness;\n\n    float a2 = roughness * roughness;\n\n\n\n    vec2 iblMaxMipLevel = frameUniforms.iblMaxMipLevel;\n\n    const uint numSamples = uint(IBL_INTEGRATION_IMPORTANCE_SAMPLING_COUNT);\n\n    const float invNumSamples = 1.0 / float(numSamples);\n\n\n\n    vec3 indirectSpecular = vec3(0.0);\n\n    for (uint i = 0u; i < numSamples; i++) {\n\n        vec2 u = hammersley(i);\n\n        vec3 h = tangentToWorld * importanceSamplingNdfDggx(u, roughness);\n\n\n\n        // Since anisotropy doesn't work with prefiltering, we use the same \"faux\" anisotropy\n\n        // we do when we use the prefiltered cubemap\n\n        vec3 l = getReflectedVector(pixel, v, h);\n\n\n\n        // Compute this sample's contribution to the brdf\n\n        float NoL = dot(n, l);\n\n        if (NoL > 0.0) {\n\n            float NoH = dot(n, h);\n\n            float LoH = max(dot(l, h), 0.0);\n\n\n\n            // PDF inverse (we must use D_GGX() here, which is used to generate samples)\n\n            float ipdf = (4.0 * LoH) / (D_GGX(roughness, NoH, h) * NoH);\n\n\n\n            float mipLevel = prefilteredImportanceSampling(ipdf, iblMaxMipLevel);\n\n\n\n            // we use texture() instead of textureLod() to take advantage of mipmapping\n\n            vec3 L = decodeDataForIBL(texture(light_iblSpecular, l, mipLevel));\n\n\n\n            float D = distribution(roughness, NoH, h);\n\n            float V = visibility(roughness, NoV, NoL, LoH);\n\n            vec3  F = fresnel(pixel.f0, LoH);\n\n            vec3 Fr = F * (D * V * NoL * ipdf * invNumSamples);\n\n\n\n            indirectSpecular += (Fr * L);\n\n        }\n\n    }\n\n\n\n    return indirectSpecular;\n\n}\n\n\n\nvoid isEvaluateClearCoatIBL(const PixelParams pixel, float specularAO, inout vec3 Fd, inout vec3 Fr) {\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n#if defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    // We want to use the geometric normal for the clear coat layer\n\n    float clearCoatNoV = clampNoV(dot(shading_clearCoatNormal, shading_view));\n\n    vec3 clearCoatNormal = shading_clearCoatNormal;\n\n#else\n\n    float clearCoatNoV = shading_NoV;\n\n    vec3 clearCoatNormal = shading_normal;\n\n#endif\n\n    // The clear coat layer assumes an IOR of 1.5 (4% reflectance)\n\n    float Fc = F_Schlick(0.04, 1.0, clearCoatNoV) * pixel.clearCoat;\n\n    float attenuation = 1.0 - Fc;\n\n    Fd *= attenuation;\n\n    Fr *= sq(attenuation);\n\n\n\n    PixelParams p;\n\n    p.perceptualRoughness = pixel.clearCoatPerceptualRoughness;\n\n    p.f0 = vec3(0.04);\n\n    p.roughness = perceptualRoughnessToRoughness(p.perceptualRoughness);\n\n    p.anisotropy = 0.0;\n\n\n\n    vec3 clearCoatLobe = isEvaluateIBL(p, clearCoatNormal, shading_view, clearCoatNoV);\n\n    Fr += clearCoatLobe * (specularAO * pixel.clearCoat);\n\n#endif\n\n}\n\n#endif\n\n\n\n//------------------------------------------------------------------------------\n\n// IBL evaluation\n\n//------------------------------------------------------------------------------\n\n\n\nvoid evaluateClothIndirectDiffuseBRDF(const PixelParams pixel, inout float diffuse) {\n\n#if defined(SHADING_MODEL_CLOTH)\n\n#if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    // Simulate subsurface scattering with a wrap diffuse term\n\n    diffuse *= Fd_Wrap(shading_NoV, 0.5);\n\n#endif\n\n#endif\n\n}\n\n\n\nvoid evaluateClearCoatIBL(const PixelParams pixel, float specularAO, inout vec3 Fd, inout vec3 Fr) {\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n#if defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    // We want to use the geometric normal for the clear coat layer\n\n    float clearCoatNoV = clampNoV(dot(shading_clearCoatNormal, shading_view));\n\n    vec3 clearCoatR = reflect(-shading_view, shading_clearCoatNormal);\n\n#else\n\n    float clearCoatNoV = shading_NoV;\n\n    vec3 clearCoatR = shading_reflected;\n\n#endif\n\n    // The clear coat layer assumes an IOR of 1.5 (4% reflectance)\n\n    float Fc = F_Schlick(0.04, 1.0, clearCoatNoV) * pixel.clearCoat;\n\n    float attenuation = 1.0 - Fc;\n\n    Fr *= sq(attenuation);\n\n    Fr += prefilteredRadiance(clearCoatR, pixel.clearCoatPerceptualRoughness) * (specularAO * Fc);\n\n    Fd *= attenuation;\n\n#endif\n\n}\n\n\n\nvoid evaluateSubsurfaceIBL(const PixelParams pixel, const vec3 diffuseIrradiance,\n\n        inout vec3 Fd, inout vec3 Fr) {\n\n#if defined(SHADING_MODEL_SUBSURFACE)\n\n    vec3 viewIndependent = diffuseIrradiance;\n\n    vec3 viewDependent = prefilteredRadiance(-shading_view, pixel.roughness, 1.0 + pixel.thickness);\n\n    float attenuation = (1.0 - pixel.thickness) / (2.0 * PI);\n\n    Fd += pixel.subsurfaceColor * (viewIndependent + viewDependent) * attenuation;\n\n#elif defined(SHADING_MODEL_CLOTH) && defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    Fd *= saturate(pixel.subsurfaceColor + shading_NoV);\n\n#endif\n\n}\n\n\n\nvoid evaluateIBL(const MaterialInputs material, const PixelParams pixel, inout vec3 color) {\n\n    // Apply transform here if we wanted to rotate the IBL\n\n    vec3 n = shading_normal;\n\n    vec3 r = getReflectedVector(pixel, n);\n\n\n\n    // float ssao = evaluateSSAO();\n\n    // float diffuseAO = min(material.ambientOcclusion, ssao);\n\n    float diffuseAO = min(material.ambientOcclusion, 0.0);\n\n    float specularAO = computeSpecularAO(shading_NoV, diffuseAO, pixel.roughness);\n\n\n\n    // diffuse indirect\n\n    float diffuseBRDF = singleBounceAO(diffuseAO);// Fd_Lambert() is baked in the SH below\n\n    evaluateClothIndirectDiffuseBRDF(pixel, diffuseBRDF);\n\n\n\n    vec3 diffuseIrradiance = diffuseIrradiance(n);\n\n    vec3 Fd = pixel.diffuseColor * diffuseIrradiance * diffuseBRDF;\n\n\n\n    // specular indirect\n\n    vec3 Fr;\n\n#if IBL_INTEGRATION == IBL_INTEGRATION_PREFILTERED_CUBEMAP\n\n    Fr = specularDFG(pixel) * prefilteredRadiance(r, pixel.perceptualRoughness);\n\n    Fr *= singleBounceAO(specularAO) * pixel.energyCompensation;\n\n    evaluateClearCoatIBL(pixel, specularAO, Fd, Fr);\n\n#elif IBL_INTEGRATION == IBL_INTEGRATION_IMPORTANCE_SAMPLING\n\n    Fr = isEvaluateIBL(pixel, shading_normal, shading_view, shading_NoV);\n\n    Fr *= singleBounceAO(specularAO) * pixel.energyCompensation;\n\n    isEvaluateClearCoatIBL(pixel, specularAO, Fd, Fr);\n\n#endif\n\n    evaluateSubsurfaceIBL(pixel, diffuseIrradiance, Fd, Fr);\n\n\n\n    multiBounceAO(diffuseAO, pixel.diffuseColor, Fd);\n\n    multiBounceSpecularAO(specularAO, pixel.f0, Fr);\n\n\n\n    // Note: iblLuminance is already premultiplied by the exposure\n\n    color.rgb += (Fd + Fr) * frameUniforms.iblLuminance;\n\n}\n\n";
	var fl_ambient_occlusion_frag = "#define MULTI_BOUNCE_AMBIENT_OCCLUSION 0\n\n#define SPECULAR_AMBIENT_OCCLUSION 0\n\n//------------------------------------------------------------------------------\n\n// Ambient occlusion helpers\n\n//------------------------------------------------------------------------------\n\n\n\nfloat evaluateSSAO() {\n\n    // TODO: Don't use gl_FragCoord.xy, use the view bounds\n\n    // vec2 uv = gl_FragCoord.xy * frameUniforms.resolution.zw;\n\n    // return texture(light_ssao, uv, 0.0).r;\n\n    return 1.0;\n\n}\n\n\n\n\n\nfloat computeSpecularAO(float NoV, float visibility, float roughness) {\n\n#if SPECULAR_AMBIENT_OCCLUSION == 1\n\n    return saturate(pow(NoV + visibility, exp2(-16.0 * roughness - 1.0)) - 1.0 + visibility);\n\n#else\n\n    return 1.0;\n\n#endif\n\n}\n\n\n\n#if MULTI_BOUNCE_AMBIENT_OCCLUSION == 1\n\n\n\nvec3 gtaoMultiBounce(float visibility, const vec3 albedo) {\n\n    // Jimenez et al. 2016, \"Practical Realtime Strategies for Accurate Indirect Occlusion\"\n\n    vec3 a =  2.0404 * albedo - 0.3324;\n\n    vec3 b = -4.7951 * albedo + 0.6417;\n\n    vec3 c =  2.7552 * albedo + 0.6903;\n\n\n\n    return max(vec3(visibility), ((visibility * a + b) * visibility + c) * visibility);\n\n}\n\n#endif\n\n\n\nvoid multiBounceAO(float visibility, const vec3 albedo, inout vec3 color) {\n\n#if MULTI_BOUNCE_AMBIENT_OCCLUSION == 1\n\n    color *= gtaoMultiBounce(visibility, albedo);\n\n#endif\n\n}\n\n\n\nvoid multiBounceSpecularAO(float visibility, const vec3 albedo, inout vec3 color) {\n\n#if MULTI_BOUNCE_AMBIENT_OCCLUSION == 1 && SPECULAR_AMBIENT_OCCLUSION == 1\n\n    color *= gtaoMultiBounce(visibility, albedo);\n\n#endif\n\n}\n\n\n\nfloat singleBounceAO(float visibility) {\n\n#if MULTI_BOUNCE_AMBIENT_OCCLUSION == 1\n\n    return 1.0;\n\n#else\n\n    return visibility;\n\n#endif\n\n}\n\n";
	var fl_shading_model_standard_frag = "#if defined(MATERIAL_HAS_CLEAR_COAT)\n\nfloat clearCoatLobe(const PixelParams pixel, const vec3 h, float NoH, float LoH, out float Fcc) {\n\n\n\n#if defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    // If the material has a normal map, we want to use the geometric normal\n\n    // instead to avoid applying the normal map details to the clear coat layer\n\n    float clearCoatNoH = saturate(dot(shading_clearCoatNormal, h));\n\n#else\n\n    float clearCoatNoH = NoH;\n\n#endif\n\n\n\n    // clear coat specular lobe\n\n    float D = distributionClearCoat(pixel.clearCoatRoughness, clearCoatNoH, h);\n\n    float V = visibilityClearCoat(LoH);\n\n    float F = F_Schlick(0.04, 1.0, LoH) * pixel.clearCoat; // fix IOR to 1.5\n\n\n\n    Fcc = F;\n\n    return D * V * F;\n\n}\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\nvec3 anisotropicLobe(const PixelParams pixel, const Light light, const vec3 h,\n\n        float NoV, float NoL, float NoH, float LoH) {\n\n\n\n    vec3 l = light.l;\n\n    vec3 t = pixel.anisotropicT;\n\n    vec3 b = pixel.anisotropicB;\n\n    vec3 v = shading_view;\n\n\n\n    float ToV = dot(t, v);\n\n    float BoV = dot(b, v);\n\n    float ToL = dot(t, l);\n\n    float BoL = dot(b, l);\n\n    float ToH = dot(t, h);\n\n    float BoH = dot(b, h);\n\n\n\n    // Anisotropic parameters: at and ab are the roughness along the tangent and bitangent\n\n    // to simplify materials, we derive them from a single roughness parameter\n\n    // Kulla 2017, \"Revisiting Physically Based Shading at Imageworks\"\n\n    float at = max(pixel.roughness * (1.0 + pixel.anisotropy), MIN_ROUGHNESS);\n\n    float ab = max(pixel.roughness * (1.0 - pixel.anisotropy), MIN_ROUGHNESS);\n\n\n\n    // specular anisotropic BRDF\n\n    float D = distributionAnisotropic(at, ab, ToH, BoH, NoH);\n\n    float V = visibilityAnisotropic(pixel.roughness, at, ab, ToV, BoV, ToL, BoL, NoV, NoL);\n\n    vec3  F = fresnel(pixel.f0, LoH);\n\n\n\n    return (D * V) * F;\n\n}\n\n#endif\n\n\n\nvec3 isotropicLobe(const PixelParams pixel, const Light light, const vec3 h,\n\n        float NoV, float NoL, float NoH, float LoH) {\n\n\n\n    float D = distribution(pixel.roughness, NoH, h);\n\n    float V = visibility(pixel.roughness, NoV, NoL, LoH);\n\n    vec3  F = fresnel(pixel.f0, LoH);\n\n\n\n    return (D * V) * F;\n\n}\n\n\n\nvec3 specularLobe(const PixelParams pixel, const Light light, const vec3 h,\n\n        float NoV, float NoL, float NoH, float LoH) {\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\n    return anisotropicLobe(pixel, light, h, NoV, NoL, NoH, LoH);\n\n#else\n\n    return isotropicLobe(pixel, light, h, NoV, NoL, NoH, LoH);\n\n#endif\n\n}\n\n\n\nvec3 diffuseLobe(const PixelParams pixel, float NoV, float NoL, float LoH) {\n\n    return pixel.diffuseColor * diffuse(pixel.roughness, NoV, NoL, LoH);\n\n}\n\n\n\n\n\nvec3 surfaceShading(const PixelParams pixel, const Light light, float occlusion) {\n\n    vec3 h = normalize(shading_view + light.l);\n\n\n\n    float NoV = shading_NoV;\n\n    float NoL = saturate(light.NoL);\n\n    float NoH = saturate(dot(shading_normal, h));\n\n    float LoH = saturate(dot(light.l, h));\n\n\n\n    vec3 Fr = specularLobe(pixel, light, h, NoV, NoL, NoH, LoH);\n\n    vec3 Fd = diffuseLobe(pixel, NoV, NoL, LoH);\n\n\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n    float Fcc;\n\n    float clearCoat = clearCoatLobe(pixel, h, NoH, LoH, Fcc);\n\n    // Energy compensation and absorption; the clear coat Fresnel term is\n\n    // squared to take into account both entering through and exiting through\n\n    // the clear coat layer\n\n    float attenuation = 1.0 - Fcc;\n\n\n\n#if defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n    vec3 color = (Fd + Fr * (pixel.energyCompensation * attenuation)) * attenuation * NoL;\n\n\n\n    // If the material has a normal map, we want to use the geometric normal\n\n    // instead to avoid applying the normal map details to the clear coat layer\n\n    float clearCoatNoL = saturate(dot(shading_clearCoatNormal, light.l));\n\n    color += clearCoat * clearCoatNoL;\n\n\n\n    // Early exit to avoid the extra multiplication by NoL\n\n    return (color * light.colorIntensity.rgb) *\n\n            (light.colorIntensity.w * light.attenuation * occlusion);\n\n#else\n\n    vec3 color = (Fd + Fr * (pixel.energyCompensation * attenuation)) * attenuation + clearCoat;\n\n#endif\n\n#else\n\n    // The energy compensation term is used to counteract the darkening effect\n\n    // at high roughness\n\n    vec3 color = Fd + Fr * pixel.energyCompensation;\n\n#endif\n\n\n\n    return (color * light.colorIntensity.rgb) *\n\n            (light.colorIntensity.w * light.attenuation * NoL * occlusion);\n\n}\n\n";
	var fl_shading_model_cloth_frag = "\n\nvec3 surfaceShading(const PixelParams pixel, const Light light, float occlusion) {\n\n    vec3 h = normalize(shading_view + light.l);\n\n    float NoL = light.NoL;\n\n    float NoH = saturate(dot(shading_normal, h));\n\n    float LoH = saturate(dot(light.l, h));\n\n\n\n    // specular BRDF\n\n    float D = distributionCloth(pixel.roughness, NoH);\n\n    float V = visibilityCloth(shading_NoV, NoL);\n\n    vec3  F = pixel.f0;\n\n    // Ignore pixel.energyCompensation since we use a different BRDF here\n\n    vec3 Fr = (D * V) * F;\n\n\n\n    // diffuse BRDF\n\n    float diffuse = diffuse(pixel.roughness, shading_NoV, NoL, LoH);\n\n#if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    // Energy conservative wrap diffuse to simulate subsurface scattering\n\n    diffuse *= Fd_Wrap(dot(shading_normal, light.l), 0.5);\n\n#endif\n\n\n\n    // We do not multiply the diffuse term by the Fresnel term as discussed in\n\n    // Neubelt and Pettineo 2013, \"Crafting a Next-gen Material Pipeline for The Order: 1886\"\n\n    // The effect is fairly subtle and not deemed worth the cost for mobile\n\n    vec3 Fd = diffuse * pixel.diffuseColor;\n\n\n\n#if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    // Cheap subsurface scatter\n\n    Fd *= saturate(pixel.subsurfaceColor + NoL);\n\n    // We need to apply NoL separately to the specular lobe since we already took\n\n    // it into account in the diffuse lobe\n\n    vec3 color = Fd + Fr * NoL;\n\n    color *= light.colorIntensity.rgb * (light.colorIntensity.w * light.attenuation * occlusion);\n\n#else\n\n    vec3 color = Fd + Fr;\n\n    color *= light.colorIntensity.rgb * (light.colorIntensity.w * light.attenuation * NoL * occlusion);\n\n#endif\n\n\n\n    return color;\n\n}\n\n";
	var fl_shading_model_subsurface_frag = "\n\nvec3 surfaceShading(const PixelParams pixel, const Light light, float occlusion) {\n\n    vec3 h = normalize(shading_view + light.l);\n\n\n\n    float NoL = light.NoL;\n\n    float NoH = saturate(dot(shading_normal, h));\n\n    float LoH = saturate(dot(light.l, h));\n\n\n\n    vec3 Fr = vec3(0.0);\n\n    if (NoL > 0.0) {\n\n        // specular BRDF\n\n        float D = distribution(pixel.roughness, NoH, h);\n\n        float V = visibility(pixel.roughness, shading_NoV, NoL, LoH);\n\n        vec3  F = fresnel(pixel.f0, LoH);\n\n        Fr = (D * V) * F * pixel.energyCompensation;\n\n    }\n\n\n\n    // diffuse BRDF\n\n    vec3 Fd = pixel.diffuseColor * diffuse(pixel.roughness, shading_NoV, NoL, LoH);\n\n\n\n    // NoL does not apply to transmitted light\n\n    vec3 color = (Fd + Fr) * (NoL * occlusion);\n\n\n\n    // subsurface scattering\n\n    // Use a spherical gaussian approximation of pow() for forwardScattering\n\n    // We could include distortion by adding shading_normal * distortion to light.l\n\n    float scatterVoH = saturate(dot(shading_view, -light.l));\n\n    float forwardScatter = exp2(scatterVoH * pixel.subsurfacePower - pixel.subsurfacePower);\n\n    float backScatter = saturate(NoL * pixel.thickness + (1.0 - pixel.thickness)) * 0.5;\n\n    float subsurface = mix(backScatter, 1.0, forwardScatter) * (1.0 - pixel.thickness);\n\n    color += pixel.subsurfaceColor * (subsurface * Fd_Lambert());\n\n\n\n    // TODO: apply occlusion to the transmitted light\n\n    return (color * light.colorIntensity.rgb) * (light.colorIntensity.w * light.attenuation);\n\n}\n\n";
	var fl_light_directional = "//------------------------------------------------------------------------------\n\n// Directional light evaluation\n\n//------------------------------------------------------------------------------\n\n\n\n#if !defined(TARGET_MOBILE)\n\n#define SUN_AS_AREA_LIGHT\n\n#endif\n\n\n\nvec3 sampleSunAreaLight(const vec3 lightDirection) {\n\n#if defined(SUN_AS_AREA_LIGHT)\n\n    if (frameUniforms.sun.w >= 0.0) {\n\n        // simulate sun as disc area light\n\n        float LoR = dot(lightDirection, shading_reflected);\n\n        float d = frameUniforms.sun.x;\n\n        highp vec3 s = shading_reflected - LoR * lightDirection;\n\n        return LoR < d ?\n\n                normalize(lightDirection * d + normalize(s) * frameUniforms.sun.y) : shading_reflected;\n\n    }\n\n#endif\n\n    return lightDirection;\n\n}\n\n\n\nLight getDirectionalLight() {\n\n    Light light;\n\n    // note: lightColorIntensity.w is always premultiplied by the exposure\n\n    light.colorIntensity = frameUniforms.lightColorIntensity;\n\n    light.l = sampleSunAreaLight(frameUniforms.lightDirection);\n\n    light.attenuation = 1.0;\n\n    light.NoL = saturate(dot(shading_normal, light.l));\n\n    return light;\n\n}\n\n\n\nvoid evaluateDirectionalLight(const MaterialInputs material,\n\n        const PixelParams pixel, inout vec3 color) {\n\n\n\n    Light light = getDirectionalLight();\n\n\n\n    float visibility = 1.0;\n\n#if defined(HAS_SHADOWING)\n\n    if (light.NoL > 0.0) {\n\n        visibility = shadow_computeShadow();\n\n        // visibility = shadow(light_shadowMap, getLightSpacePosition());\n\n        #if defined(MATERIAL_HAS_AMBIENT_OCCLUSION)\n\n        visibility *= computeMicroShadowing(light.NoL, material.ambientOcclusion);\n\n        #endif\n\n    } else {\n\n#if defined(MATERIAL_CAN_SKIP_LIGHTING)\n\n        return;\n\n#endif\n\n    }\n\n#elif defined(MATERIAL_CAN_SKIP_LIGHTING)\n\n    if (light.NoL <= 0.0) return;\n\n#endif\n\n\n\n    color.rgb += surfaceShading(pixel, light, visibility);\n\n}\n\n";
	var fl_shading_lit = "//------------------------------------------------------------------------------\n\n// Lighting\n\n//------------------------------------------------------------------------------\n\n\n\nfloat computeDiffuseAlpha(float a) {\n\n#if defined(BLEND_MODE_TRANSPARENT) || defined(BLEND_MODE_FADE) || defined(BLEND_MODE_MASKED)\n\n    return a;\n\n#else\n\n    return 1.0;\n\n#endif\n\n}\n\n\n\n#if defined(BLEND_MODE_MASKED)\n\nfloat computeMaskedAlpha(float a) {\n\n    // Use derivatives to smooth alpha tested edges\n\n    return (a - getMaskThreshold()) / max(fwidth(a), 1e-3) + 0.5;\n\n}\n\n#endif\n\n\n\nvoid applyAlphaMask(inout vec4 baseColor) {\n\n#if defined(BLEND_MODE_MASKED)\n\n    baseColor.a = computeMaskedAlpha(baseColor.a);\n\n    if (baseColor.a <= 0.0) {\n\n        discard;\n\n    }\n\n#endif\n\n}\n\n\n\n#if defined(GEOMETRIC_SPECULAR_AA)\n\nfloat normalFiltering(float perceptualRoughness, const vec3 worldNormal) {\n\n    // Kaplanyan 2016, \"Stable specular highlights\"\n\n    // Tokuyoshi 2017, \"Error Reduction and Simplification for Shading Anti-Aliasing\"\n\n    // Tokuyoshi and Kaplanyan 2019, \"Improved Geometric Specular Antialiasing\"\n\n\n\n    // This implementation is meant for deferred rendering in the original paper but\n\n    // we use it in forward rendering as well (as discussed in Tokuyoshi and Kaplanyan\n\n    // 2019). The main reason is that the forward version requires an expensive transform\n\n    // of the half vector by the tangent frame for every light. This is therefore an\n\n    // approximation but it works well enough for our needs and provides an improvement\n\n    // over our original implementation based on Vlachos 2015, \"Advanced VR Rendering\".\n\n\n\n    vec3 du = dFdx(worldNormal);\n\n    vec3 dv = dFdy(worldNormal);\n\n\n\n    float variance = materialParams._specularAntiAliasingVariance * (dot(du, du) + dot(dv, dv));\n\n\n\n    float roughness = perceptualRoughnessToRoughness(perceptualRoughness);\n\n    float kernelRoughness = min(2.0 * variance, materialParams._specularAntiAliasingThreshold);\n\n    float squareRoughness = saturate(roughness * roughness + kernelRoughness);\n\n\n\n    return roughnessToPerceptualRoughness(sqrt(squareRoughness));\n\n}\n\n#endif\n\n\n\nvoid getCommonPixelParams(const MaterialInputs material, inout PixelParams pixel) {\n\n    vec4 baseColor = material.baseColor;\n\n    applyAlphaMask(baseColor);\n\n\n\n#if defined(BLEND_MODE_FADE) && !defined(SHADING_MODEL_UNLIT)\n\n    // Since we work in premultiplied alpha mode, we need to un-premultiply\n\n    // in fade mode so we can apply alpha to both the specular and diffuse\n\n    // components at the end\n\n    unpremultiply(baseColor);\n\n#endif\n\n\n\n#if defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    // This is from KHR_materials_pbrSpecularGlossiness.\n\n    vec3 specularColor = material.specularColor;\n\n    float metallic = computeMetallicFromSpecularColor(specularColor);\n\n\n\n    pixel.diffuseColor = computeDiffuseColor(baseColor, metallic);\n\n    pixel.f0 = specularColor;\n\n#elif !defined(SHADING_MODEL_CLOTH)\n\n    pixel.diffuseColor = computeDiffuseColor(baseColor, material.metallic);\n\n\n\n    // Assumes an interface from air to an IOR of 1.5 for dielectrics\n\n    float reflectance = computeDielectricF0(material.reflectance);\n\n    pixel.f0 = computeF0(baseColor, material.metallic, reflectance);\n\n#else\n\n    pixel.diffuseColor = baseColor.rgb;\n\n    pixel.f0 = material.sheenColor;\n\n#if defined(MATERIAL_HAS_SUBSURFACE_COLOR)\n\n    pixel.subsurfaceColor = material.subsurfaceColor;\n\n#endif\n\n#endif\n\n}\n\n\n\nvoid getClearCoatPixelParams(const MaterialInputs material, inout PixelParams pixel) {\n\n#if defined(MATERIAL_HAS_CLEAR_COAT)\n\n    pixel.clearCoat = material.clearCoat;\n\n\n\n    // Clamp the clear coat roughness to avoid divisions by 0\n\n    float clearCoatPerceptualRoughness = material.clearCoatRoughness;\n\n    clearCoatPerceptualRoughness = mix(MIN_PERCEPTUAL_ROUGHNESS,\n\n            MAX_CLEAR_COAT_PERCEPTUAL_ROUGHNESS, clearCoatPerceptualRoughness);\n\n\n\n#if defined(GEOMETRIC_SPECULAR_AA)\n\n    clearCoatPerceptualRoughness =\n\n            normalFiltering(clearCoatPerceptualRoughness, getWorldGeometricNormalVector());\n\n#endif\n\n\n\n    pixel.clearCoatPerceptualRoughness = clearCoatPerceptualRoughness;\n\n    pixel.clearCoatRoughness = perceptualRoughnessToRoughness(clearCoatPerceptualRoughness);\n\n\n\n#if defined(CLEAR_COAT_IOR_CHANGE)\n\n    // The base layer's f0 is computed assuming an interface from air to an IOR\n\n    // of 1.5, but the clear coat layer forms an interface from IOR 1.5 to IOR\n\n    // 1.5. We recompute f0 by first computing its IOR, then reconverting to f0\n\n    // by using the correct interface\n\n    pixel.f0 = mix(pixel.f0, f0ClearCoatToSurface(pixel.f0), pixel.clearCoat);\n\n#endif\n\n#endif\n\n}\n\n\n\nvoid getRoughnessPixelParams(const MaterialInputs material, inout PixelParams pixel) {\n\n#if defined(SHADING_MODEL_SPECULAR_GLOSSINESS)\n\n    float perceptualRoughness = computeRoughnessFromGlossiness(material.glossiness);\n\n#else\n\n    float perceptualRoughness = material.roughness;\n\n#endif\n\n\n\n    // Clamp the roughness to a minimum value to avoid divisions by 0 during lighting\n\n    perceptualRoughness = clamp(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\n\n\n\n#if defined(GEOMETRIC_SPECULAR_AA)\n\n    perceptualRoughness = normalFiltering(perceptualRoughness, getWorldGeometricNormalVector());\n\n#endif\n\n\n\n#if defined(MATERIAL_HAS_CLEAR_COAT) && defined(MATERIAL_HAS_CLEAR_COAT_ROUGHNESS)\n\n    // This is a hack but it will do: the base layer must be at least as rough\n\n    // as the clear coat layer to take into account possible diffusion by the\n\n    // top layer\n\n    float basePerceptualRoughness = max(perceptualRoughness, pixel.clearCoatPerceptualRoughness);\n\n    perceptualRoughness = mix(perceptualRoughness, basePerceptualRoughness, pixel.clearCoat);\n\n#endif\n\n\n\n    // Remaps the roughness to a perceptually linear roughness (roughness^2)\n\n    pixel.perceptualRoughness = perceptualRoughness;\n\n    pixel.roughness = perceptualRoughnessToRoughness(perceptualRoughness);\n\n}\n\n\n\nvoid getSubsurfacePixelParams(const MaterialInputs material, inout PixelParams pixel) {\n\n#if defined(SHADING_MODEL_SUBSURFACE)\n\n    pixel.subsurfacePower = material.subsurfacePower;\n\n    pixel.subsurfaceColor = material.subsurfaceColor;\n\n    pixel.thickness = saturate(material.thickness);\n\n#endif\n\n}\n\n\n\nvoid getAnisotropyPixelParams(const MaterialInputs material, inout PixelParams pixel) {\n\n#if defined(MATERIAL_HAS_ANISOTROPY)\n\n    vec3 direction = material.anisotropyDirection;\n\n    pixel.anisotropy = material.anisotropy;\n\n    pixel.anisotropicT = normalize(shading_tangentToWorld * direction);\n\n    pixel.anisotropicB = normalize(cross(getWorldGeometricNormalVector(), pixel.anisotropicT));\n\n#endif\n\n}\n\n\n\nvoid getEnergyCompensationPixelParams(inout PixelParams pixel) {\n\n    // Pre-filtered DFG term used for image-based lighting\n\n    pixel.dfg = prefilteredDFG(pixel.perceptualRoughness, shading_NoV);\n\n\n\n#if defined(USE_MULTIPLE_SCATTERING_COMPENSATION) && !defined(SHADING_MODEL_CLOTH)\n\n    // Energy compensation for multiple scattering in a microfacet model\n\n    // See \"Multiple-Scattering Microfacet BSDFs with the Smith Model\"\n\n    pixel.energyCompensation = 1.0 + pixel.f0 * (1.0 / pixel.dfg.y - 1.0);\n\n#else\n\n    pixel.energyCompensation = vec3(1.0);\n\n#endif\n\n}\n\n\n\n\n\nvoid getPixelParams(const MaterialInputs material, out PixelParams pixel) {\n\n    getCommonPixelParams(material, pixel);\n\n    getClearCoatPixelParams(material, pixel);\n\n    getRoughnessPixelParams(material, pixel);\n\n    getSubsurfacePixelParams(material, pixel);\n\n    getAnisotropyPixelParams(material, pixel);\n\n    getEnergyCompensationPixelParams(pixel);\n\n}\n\n\n\n\n\nvec4 evaluateLights(const MaterialInputs material) {\n\n    PixelParams pixel;\n\n    getPixelParams(material, pixel);\n\n\n\n    // Ideally we would keep the diffuse and specular components separate\n\n    // until the very end but it costs more ALUs on mobile. The gains are\n\n    // currently not worth the extra operations\n\n    vec3 color = vec3(0.0);\n\n\n\n    // We always evaluate the IBL as not having one is going to be uncommon,\n\n    // it also saves 1 shader variant\n\n    evaluateIBL(material, pixel, color);\n\n\n\n#if defined(HAS_DIRECTIONAL_LIGHTING)\n\n    evaluateDirectionalLight(material, pixel, color);\n\n#endif\n\n\n\n#if defined(HAS_DYNAMIC_LIGHTING)\n\n    //TODO 目前暂时没有点光源的需求，但未来基于Deferred Rendering绘制大量夜景点光源（路灯）时，才需要\n\n    // evaluatePunctualLights(pixel, color);\n\n#endif\n\n\n\n#if defined(BLEND_MODE_FADE) && !defined(SHADING_MODEL_UNLIT)\n\n    // In fade mode we un-premultiply baseColor early on, so we need to\n\n    // premultiply again at the end (affects diffuse and specular lighting)\n\n    color *= material.baseColor.a;\n\n#endif\n\n\n\n    return vec4(color, computeDiffuseAlpha(material.baseColor.a));\n\n}\n\n\n\nvoid addEmissive(const MaterialInputs material, inout vec4 color) {\n\n#if defined(MATERIAL_HAS_EMISSIVE)\n\n    // The emissive property applies independently of the shading model\n\n    // It is defined as a color + exposure compensation\n\n    highp vec4 emissive = material.emissive;\n\n    highp float attenuation = computePreExposedIntensity(\n\n            pow(2.0, frameUniforms.ev100 + emissive.w - 3.0), frameUniforms.exposure);\n\n    color.rgb += emissive.rgb * attenuation;\n\n#endif\n\n}\n\n\n\n\n\nvec4 evaluateMaterial(const MaterialInputs material) {\n\n    vec4 color = evaluateLights(material);\n\n    addEmissive(material, color);\n\n    return color;\n\n}\n\n";
	var fl_gl_post_process_frag = "float linearToSRGB(float c) {\n\n    return (c <= 0.0031308) ? c * 12.92 : (pow(abs(c), 1.0 / 2.4) * 1.055) - 0.055;\n\n}\n\nvec3 linearToSRGB(vec3 c) {\n\n    return vec3(linearToSRGB(c.r), linearToSRGB(c.g), linearToSRGB(c.b));\n\n}\n\n\n\nvec3 HDR_ACES(const vec3 x) {\n\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n\n    const float a = 2.51;\n\n    const float b = 0.03;\n\n    const float c = 2.43;\n\n    const float d = 0.59;\n\n    const float e = 0.14;\n\n    return (x * (a * x + b)) / (x * (c * x + d) + e);\n\n}\n\nvec3 tonemap(const vec3 x) {\n\n    return HDR_ACES(x);\n\n}\n\n\n\nvec3 postProcess(vec3 color) {\n\n    vec3 c = color;\n\n    c = linearToSRGB(tonemap(c));\n\n    return c;\n\n}\n\n";
	var fl_main = "#if defined(MATERIAL_HAS_POST_LIGHTING_COLOR)\n\nvoid blendPostLightingColor(const MaterialInputs material, inout vec4 color) {\n\n#if defined(POST_LIGHTING_BLEND_MODE_OPAQUE)\n\n    color = material.postLightingColor;\n\n#elif defined(POST_LIGHTING_BLEND_MODE_TRANSPARENT)\n\n    color = material.postLightingColor + color * (1.0 - material.postLightingColor.a);\n\n#elif defined(POST_LIGHTING_BLEND_MODE_ADD)\n\n    color += material.postLightingColor;\n\n#endif\n\n}\n\n#endif\n\n\n\n#include <fl_gl_post_process_frag>\n\n\n\nvoid main() {\n\n    //uniforms.glsl\n\n    initFrameUniforms();\n\n    // See shading_parameters.frag\n\n    // Computes global variables we need to evaluate material and lighting\n\n    computeShadingParams();\n\n\n\n    // Initialize the inputs to sensible default values, see common_material.fs\n\n    MaterialInputs inputs;\n\n    initMaterial(inputs);\n\n\n\n    // Invoke user code\n\n    getMaterial(inputs);\n\n    //shading_params\n\n    prepareMaterial(inputs);\n\n\n\n    vec4 color = evaluateMaterial(inputs);\n\n\n\n#if defined(HAS_TONE_MAPPING)\n\n    color.rgb = postProcess(color.rgb);\n\n#endif\n\n\n\n    gl_FragColor = color;\n\n    // gl_FragColor = vec4(vec3(inputs.ambientOcclusion), 1.0);\n\n\n\n#if defined(MATERIAL_HAS_POST_LIGHTING_COLOR)\n\n    blendPostLightingColor(inputs, gl_FragColor);\n\n#endif\n\n}\n\n";
	var ShaderChunk = {
	  vsm_shadow_vert: vsm_shadow_vert,
	  vsm_shadow_frag: vsm_shadow_frag,
	  fbo_picking_vert: fbo_picking_vert,
	  fl_common_math_glsl: fl_common_math_glsl,
	  fl_common_graphics_glsl: fl_common_graphics_glsl,
	  fl_uniforms_glsl: fl_uniforms_glsl,
	  fl_material_inputs_vert: fl_material_inputs_vert,
	  fl_inputs_vert: fl_inputs_vert,
	  fl_header_frag: fl_header_frag,
	  fl_inputs_frag: fl_inputs_frag,
	  fl_brdf_frag: fl_brdf_frag,
	  fl_shading_params: fl_shading_params,
	  fl_common_shading_frag: fl_common_shading_frag,
	  fl_getters_frag: fl_getters_frag,
	  fl_material_inputs_frag: fl_material_inputs_frag,
	  fl_common_material_frag: fl_common_material_frag,
	  fl_common_lighting_frag: fl_common_lighting_frag,
	  fl_material_uniforms_frag: fl_material_uniforms_frag,
	  fl_light_uniforms_frag: fl_light_uniforms_frag,
	  fl_ambient_occlusion_frag: fl_ambient_occlusion_frag,
	  fl_light_indirect: fl_light_indirect,
	  fl_shading_model_standard_frag: fl_shading_model_standard_frag,
	  fl_shading_model_cloth_frag: fl_shading_model_cloth_frag,
	  fl_shading_model_subsurface_frag: fl_shading_model_subsurface_frag,
	  fl_light_directional: fl_light_directional,
	  fl_shading_lit: fl_shading_lit,
	  fl_gl_post_process_frag: fl_gl_post_process_frag,
	  fl_main: fl_main,
	  invert_vert: invert_vert,
	  instance_vert: instance_vert,
	  skin_vert: skin_vert
	};
	var ShaderLib = {
	  register: function register(name, source) {
	    if (ShaderChunk[name]) {
	      throw new Error("Key of " + name + " is already registered in ShaderLib.");
	    }

	    ShaderChunk[name] = source;
	  },
	  compile: function compile(source) {
	    return parseIncludes(source);
	  }
	};
	var pattern = /^[ \t]*#include +<([\w\d.]+)>/gm;

	function parseIncludes(string) {
	  return string.replace(pattern, replace);
	}

	function replace(match, include) {
	  var replace = ShaderChunk[include];

	  if (!replace) {
	    throw new Error('Can not resolve #include <' + include + '>');
	  }

	  return parseIncludes(replace);
	}

	var UNIFORM_TYPE = {
	  function: 'function',
	  array: 'array'
	};

	var Shader = function () {
	  function Shader(_ref3) {
	    var vert = _ref3.vert,
	        frag = _ref3.frag,
	        uniforms = _ref3.uniforms,
	        defines = _ref3.defines,
	        extraCommandProps = _ref3.extraCommandProps;
	    this.vert = vert;
	    this.frag = frag;
	    this.shaderDefines = defines || {};
	    uniforms = uniforms || [];
	    this.contextDesc = {};

	    for (var i = 0, l = uniforms.length; i < l; i++) {
	      var p = uniforms[i];

	      if (isString(p)) {
	        if (p.indexOf('[') > 0) {
	          var _parseArrayName = parseArrayName(p),
	              name = _parseArrayName.name,
	              _len2 = _parseArrayName.len;

	          this.contextDesc[name] = {
	            name: name,
	            type: 'array',
	            length: _len2
	          };
	        } else {
	          this.contextDesc[p] = null;
	        }
	      } else if (p.name.indexOf('[') > 0) {
	        var _parseArrayName2 = parseArrayName(p.name),
	            _name2 = _parseArrayName2.name,
	            _len3 = _parseArrayName2.len;

	        this.contextDesc[_name2] = {
	          name: _name2,
	          type: 'array',
	          length: _len3,
	          fn: p.fn
	        };
	      } else {
	        this.contextDesc[p.name] = p;
	      }
	    }

	    this.extraCommandProps = extraCommandProps || {};
	    this.commands = {};

	    this._compileSource();
	  }

	  var _proto13 = Shader.prototype;

	  _proto13.setFramebuffer = function setFramebuffer(framebuffer) {
	    this.context.framebuffer = framebuffer;
	    return this;
	  };

	  _proto13.appendRenderUniforms = function appendRenderUniforms(meshProps) {
	    var context = this.context;
	    var props = extend(meshProps, context);
	    var uniforms = props;
	    var desc = this.contextDesc;

	    for (var p in desc) {
	      if (desc[p] && desc[p].type === 'array') {
	        var name = p,
	            _len4 = desc[p].length;
	        var values = context[p];

	        if (desc[p].fn) {
	          values = desc[p].fn(context, props);
	        }

	        if (values.length !== _len4) {
	          throw new Error(name + " uniform's length is not " + _len4);
	        }

	        uniforms[name] = {};

	        for (var i = 0; i < _len4; i++) {
	          uniforms[name]["" + i] = values[i];
	        }
	      }
	    }

	    return uniforms;
	  };

	  _proto13.setUniforms = function setUniforms(uniforms) {
	    this.context = uniforms;
	    return this;
	  };

	  _proto13.createREGLCommand = function createREGLCommand(regl, materialDefines, attrProps, uniProps, elements, isInstanced) {
	    uniProps = uniProps || [];
	    attrProps = attrProps || [];
	    var defines = extend({}, this.shaderDefines || {}, materialDefines || {});

	    var vert = this._insertDefines(this.vert, defines);

	    var frag = this._insertDefines(this.frag, defines);

	    var attributes = {};
	    attrProps.forEach(function (p) {
	      attributes[p] = regl.prop(p);
	    });
	    var uniforms = {};
	    uniProps.forEach(function (p) {
	      uniforms[p] = regl.prop(p);
	    });
	    var desc = this.contextDesc;

	    for (var p in desc) {
	      if (desc[p] && desc[p].type === UNIFORM_TYPE['function']) {
	        uniforms[p] = desc[p]['fn'];
	      } else if (desc[p] && desc[p].type === UNIFORM_TYPE['array']) {
	        var name = desc[p].name,
	            _len5 = desc[p].length;

	        for (var i = 0; i < _len5; i++) {
	          var key = name + "[" + i + "]";
	          uniforms[key] = regl.prop(key);
	        }
	      } else {
	        uniforms[p] = regl.prop(p);
	      }
	    }

	    var command = {
	      vert: vert,
	      frag: frag,
	      uniforms: uniforms,
	      attributes: attributes
	    };

	    if (elements && !isNumber(elements)) {
	      command.elements = regl.prop('elements');
	    }

	    command.count = regl.prop('count');
	    command.offset = regl.prop('offset');
	    command.primitive = regl.prop('primitive');
	    command.framebuffer = regl.prop('framebuffer');

	    if (isInstanced) {
	      command.instances = regl.prop('instances');
	    }

	    extend(command, this.extraCommandProps);
	    return regl(command);
	  };

	  _proto13.dispose = function dispose() {};

	  _proto13._insertDefines = function _insertDefines(source, defines) {
	    var defineHeaders = [];

	    for (var p in defines) {
	      if (defines.hasOwnProperty(p) && !isFunction(defines[p])) {
	        defineHeaders.push("#define " + p + " " + defines[p] + "\n");
	      }
	    }

	    return defineHeaders.join('') + source;
	  };

	  _proto13._compileSource = function _compileSource() {
	    this.vert = ShaderLib.compile(this.vert);
	    this.frag = ShaderLib.compile(this.frag);
	  };

	  return Shader;
	}();

	function parseArrayName(p) {
	  var l = p.indexOf('['),
	      r = p.indexOf(']');
	  var name = p.substring(0, l),
	      len$$1 = +p.substring(l + 1, r);
	  return {
	    name: name,
	    len: len$$1
	  };
	}

	var MeshShader = function (_Shader) {
	  _inheritsLoose(MeshShader, _Shader);

	  function MeshShader() {
	    return _Shader.apply(this, arguments) || this;
	  }

	  var _proto14 = MeshShader.prototype;

	  _proto14.draw = function draw(regl, meshes) {
	    var props = [];
	    var preCommand;

	    for (var i = 0, l = meshes.length; i < l; i++) {
	      if (!meshes[i].isValid()) {
	        if (i === l - 1 && preCommand && props.length) {
	          preCommand(props);
	        }

	        continue;
	      }

	      if (!meshes[i].geometry.count || !this.filter(meshes[i])) {
	        if (i === l - 1 && preCommand && props.length) {
	          preCommand(props);
	        }

	        continue;
	      }

	      var _command = this.getMeshCommand(regl, meshes[i]);

	      if (props.length && preCommand !== _command) {
	        preCommand(props);
	        props.length = 0;
	      }

	      var meshProps = meshes[i].getREGLProps(regl);
	      this.appendRenderUniforms(meshProps);
	      props.push(meshProps);

	      if (i < l - 1) {
	        preCommand = _command;
	      } else if (i === l - 1) {
	        _command(props);
	      }
	    }

	    return this;
	  };

	  _proto14.filter = function filter() {
	    return true;
	  };

	  _proto14.getMeshCommand = function getMeshCommand(regl, mesh) {
	    var dKey = mesh.getDefinesKey();
	    var defines = mesh.getDefines();
	    var elementType = isNumber(mesh.getElements()) ? 'count' : 'elements';
	    dKey += '_' + elementType;

	    if (mesh instanceof InstancedMesh) {
	      dKey += '_instanced';
	    }

	    var command = this.commands[dKey];

	    if (!command) {
	      var uniforms = Object.keys(mesh.getUniforms(regl));
	      command = this.commands[dKey] = this.createREGLCommand(regl, defines, mesh.getAttributes(), uniforms, mesh.getElements(), mesh instanceof InstancedMesh);
	    }

	    return command;
	  };

	  return MeshShader;
	}(Shader);

	var wireframeFrag = "\n\nprecision mediump float;\n\nvarying vec3 vBarycentric;\n\nuniform float time;\n\nuniform float thickness;\n\nuniform float secondThickness;\n\n\n\nuniform float dashRepeats;\n\nuniform float dashLength;\n\nuniform bool dashOverlap;\n\nuniform bool dashEnabled;\n\nuniform bool dashAnimate;\n\n\n\nuniform bool seeThrough;\n\nuniform bool insideAltColor;\n\nuniform bool dualStroke;\n\n\n\nuniform bool squeeze;\n\nuniform float squeezeMin;\n\nuniform float squeezeMax;\n\n\n\nuniform vec4 stroke;\n\nuniform vec4 fill;\n\nuniform float opacity;\n\n\n\n#ifdef USE_INSTANCE\n\n  varying vec4 vInstanceColor;\n\n#endif\n\n#extension GL_OES_standard_derivatives : enable\n\n\n\nconst float PI = 3.14159265;\n\n\n\n// This is like\n\nfloat aastep (float threshold, float dist) {\n\n  float afwidth = fwidth(dist) * 0.5;\n\n  return smoothstep(threshold - afwidth, threshold + afwidth, dist);\n\n}\n\n\n\n// This function returns the fragment color for our styled wireframe effect\n\n// based on the barycentric coordinates for this fragment\n\nvec4 getStyledWireframe (vec3 barycentric) {\n\n  // this will be our signed distance for the wireframe edge\n\n  float d = min(min(barycentric.x, barycentric.y), barycentric.z);\n\n  // for dashed rendering, we can use this to get the 0 .. 1 value of the line length\n\n  float positionAlong = max(barycentric.x, barycentric.y);\n\n  if (barycentric.y < barycentric.x && barycentric.y < barycentric.z) {\n\n    positionAlong = 1.0 - positionAlong;\n\n  }\n\n\n\n  // the thickness of the stroke\n\n  float computedThickness = thickness;\n\n\n\n  // if we want to shrink the thickness toward the center of the line segment\n\n  if (squeeze) {\n\n    computedThickness *= mix(squeezeMin, squeezeMax, (1.0 - sin(positionAlong * PI)));\n\n  }\n\n\n\n  // if we should create a dash pattern\n\n  if (dashEnabled) {\n\n    // here we offset the stroke position depending on whether it\n\n    // should overlap or not\n\n    float offset = 1.0 / dashRepeats * dashLength / 2.0;\n\n    if (!dashOverlap) {\n\n      offset += 1.0 / dashRepeats / 2.0;\n\n    }\n\n\n\n    // if we should animate the dash or not\n\n    if (dashAnimate) {\n\n      offset += time * 0.22;\n\n    }\n\n\n\n    // create the repeating dash pattern\n\n    float pattern = fract((positionAlong + offset) * dashRepeats);\n\n    computedThickness *= 1.0 - aastep(dashLength, pattern);\n\n  }\n\n\n\n  // compute the anti-aliased stroke edge  \n\n  float edge = 1.0 - aastep(computedThickness, d);\n\n\n\n  // now compute the final color of the mesh\n\n  #ifdef USE_INSTANCE\n\n    vec4 strokeColor = vInstanceColor;\n\n  #else\n\n    vec4 strokeColor = stroke;\n\n  #endif\n\n  vec4 outColor = vec4(0.0);\n\n  if (seeThrough) {\n\n    outColor = vec4(strokeColor.xyz, edge);\n\n    if (insideAltColor && !gl_FrontFacing) {\n\n       outColor.rgb = fill.xyz;\n\n    }\n\n  } else {\n\n    vec3 mainStroke = mix(fill.xyz, strokeColor.xyz, edge);\n\n    outColor.a = fill.a;\n\n    if (dualStroke) {\n\n      float inner = 1.0 - aastep(secondThickness, d);\n\n      vec3 wireColor = mix(fill.xyz, stroke.xyz, abs(inner - edge));\n\n      outColor.rgb = wireColor;\n\n    } else {\n\n      outColor.rgb = mainStroke;\n\n    }\n\n  }\n\n\n\n  return outColor;\n\n}\n\n\n\nvoid main () {\n\n  gl_FragColor = getStyledWireframe(vBarycentric) * opacity;\n\n}";
	var wireframeVert = "attribute vec3 aPosition;\n\nattribute vec3 aBarycentric;\n\nvarying vec3 vBarycentric;\n\n\n\nuniform mat4 modelMatrix;\n\nuniform mat4 projViewMatrix;\n\nuniform mat4 projViewModelMatrix;\n\n\n\n#ifdef USE_INSTANCE\n\n    #include <instance_vert>\n\n    varying vec4 vInstanceColor;\n\n#endif\n\n\n\n#ifdef USE_SKIN\n\n    #include <skin_vert>\n\n#endif\n\nvoid main () {\n\n  #ifdef USE_INSTANCE\n\n      mat4 attributeMatrix = instance_getAttributeMatrix();\n\n          #ifdef USE_SKIN\n\n              mat4 worldMatrix = attributeMatrix * skin_getSkinMatrix();\n\n              mat4 pvmMatrix = projViewMatrix * worldMatrix;\n\n          #else\n\n              mat4 pvmMatrix = projViewMatrix * attributeMatrix;\n\n          #endif\n\n      gl_Position = = pvmMatrix * vec4(aPosition, 1.0);\n\n      vInstanceColor = instance_getInstanceColor();\n\n  #else\n\n      #ifdef USE_SKIN\n\n          mat4 worldMatrix = modelMatrix * skin_getSkinMatrix();\n\n          mat4 pvmMatrix = projViewMatrix * worldMatrix;\n\n          gl_Position = pvmMatrix * vec4(aPosition, 1.0);\n\n      #else\n\n          gl_Position = projViewModelMatrix * vec4(aPosition, 1.0);\n\n      #endif\n\n  #endif\n\n  vBarycentric = aBarycentric;\n\n}";

	var WireframeShader = function (_MeshShader) {
	  _inheritsLoose(WireframeShader, _MeshShader);

	  function WireframeShader(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    var extraCommandProps = config.extraCommandProps || {};
	    var positionAttribute = config.positionAttribute || 'aPosition',
	        barycentricAttribute = config.barycentricAttribute || 'aBarycentric';
	    extraCommandProps = extend({}, extraCommandProps, {
	      blend: {
	        enable: true,
	        func: {
	          src: 'src alpha',
	          dst: 'one minus src alpha'
	        },
	        equation: 'add'
	      },
	      sample: {
	        alpha: true
	      }
	    });
	    var vert = wireframeVert;

	    if (positionAttribute !== 'aPosition') {
	      vert = vert.replace(/aPosition/g, positionAttribute);
	    }

	    if (barycentricAttribute !== 'aBarycentric') {
	      vert = vert.replace(/aBarycentric/g, barycentricAttribute);
	    }

	    return _MeshShader.call(this, {
	      vert: vert,
	      frag: wireframeFrag,
	      uniforms: ['time', 'fill', 'stroke', 'dualStroke', 'seeThrough', 'insideAltColor', 'thickness', 'secondThickness', 'dashEnabled', 'dashRepeats', 'dashOverlap', 'dashLength', 'dashAnimate', 'squeeze', 'squeezeMin', 'squeezeMax', 'opacity', 'projViewMatrix', {
	        name: 'projViewModelMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          return multiply$3([], props['projViewMatrix'], props['modelMatrix']);
	        }
	      }],
	      extraCommandProps: extraCommandProps
	    }) || this;
	  }

	  return WireframeShader;
	}(MeshShader);

	var phongFrag = "\n\nprecision mediump float;\n\nvarying vec2 vTexCoords;\n\nuniform float materialShininess;//反光度，即影响镜面高光的散射/半径\n\nuniform float opacity;\n\nuniform float ambientStrength;\n\nuniform float specularStrength;\n\n\n\n\n\nuniform vec3 lightPosition;\n\nuniform vec4 lightAmbient;\n\nuniform vec4 lightDiffuse;\n\nuniform vec4 lightSpecular;\n\n\n\nvarying vec3 vNormal;\n\nvarying vec4 vFragPos;\n\nuniform vec3 viewPos;\n\n\n\n#ifdef USE_INSTANCE\n\n    varying vec4 vInstanceColor;\n\n#endif\n\n\n\n#ifdef USE_BASECOLORTEXTURE\n\n    uniform sampler2D baseColorTexture;\n\n#endif\n\nuniform vec4 baseColorFactor;\n\n\n\nvoid main() {\n\n    //环境光\n\n    #ifdef USE_BASECOLORTEXTURE\n\n        #ifdef USE_INSTANCE\n\n            vec3 ambientColor = ambientStrength * vInstanceColor.xyz * texture2D(baseColorTexture, vTexCoords).rgb;\n\n        #else\n\n            vec3 ambientColor = ambientStrength * lightAmbient.xyz * texture2D(baseColorTexture, vTexCoords).rgb;\n\n        #endif\n\n    #else\n\n        #ifdef USE_INSTANCE\n\n            vec3 ambientColor = ambientStrength * vInstanceColor.xyz ;\n\n        #else\n\n            vec3 ambientColor = ambientStrength * lightAmbient.xyz;\n\n        #endif\n\n    #endif\n\n    vec3 ambient = ambientColor * baseColorFactor.xyz;\n\n\n\n    //漫反射光\n\n    vec3 norm = normalize(vNormal);\n\n    vec3 lightDir = vec3(normalize(lightPosition -vec3(vFragPos)));\n\n    float diff = max(dot(norm, lightDir), 0.0);\n\n    #ifdef USE_BASECOLORTEXTURE\n\n        vec3 diffuse = lightDiffuse.xyz * diff * texture2D(baseColorTexture, vTexCoords).rgb;\n\n    #else\n\n        vec3 diffuse = lightDiffuse.xyz * diff;\n\n    #endif\n\n\n\n    //镜面反色光\n\n    vec3 viewDir = vec3(normalize(viewPos -vec3(vFragPos)));\n\n    // vec3 reflectDir = reflect(-lightDir, norm);\n\n    vec3 halfwayDir = normalize(lightDir + viewDir);\n\n    float spec = pow(max(dot(norm, halfwayDir), 0.0), materialShininess);\n\n    vec3 specular = specularStrength * lightSpecular.xyz * spec;\n\n\n\n\n\n    vec3 result = ambient +diffuse +specular;\n\n    gl_FragColor = vec4(result, 1.0) * opacity;\n\n}\n\n";
	var phongVert = "attribute vec3 aPosition;\n\n#ifdef USE_BASECOLORTEXTURE\n\n    attribute vec2 TEXCOORD_0;\n\n    varying vec2 vTexCoords;\n\n#endif\n\nattribute vec3 NORMAL;\n\n\n\nvarying vec4 vFragPos;\n\nvarying vec3 vNormal;\n\nuniform mat4 projViewModelMatrix;\n\nuniform mat4 projViewMatrix;\n\nuniform mat4 normalMatrix;\n\nuniform mat4 modelMatrix;\n\n\n\n#ifdef USE_INSTANCE\n\n    #include <invert_vert>\n\n    #include <instance_vert>\n\n    varying vec4 vInstanceColor;\n\n#endif\n\n\n\n#ifdef USE_SKIN\n\n    #include <invert_vert>\n\n    #include <skin_vert>\n\n#endif\n\nvoid main()\n\n{\n\n    #ifdef USE_INSTANCE\n\n        mat4 attributeMatrix = instance_getAttributeMatrix();\n\n        vFragPos = attributeMatrix * vec4(aPosition, 1.0);\n\n        mat4 inverseMat = invert(attributeMatrix);\n\n        mat4 normalMat = transpose(inverseMat);\n\n        vNormal = normalize(vec3(normalMat * vec4(NORMAL, 1.0)));\n\n        #ifdef USE_SKIN\n\n            mat4 worldMatrix = attributeMatrix * skin_getSkinMatrix();\n\n            mat4 pvmMatrix = projViewMatrix * worldMatrix;\n\n        #else\n\n            mat4 pvmMatrix = projViewMatrix * attributeMatrix;\n\n        #endif\n\n        gl_Position = = pvmMatrix * vec4(aPosition, 1.0);\n\n        vInstanceColor = instance_getInstanceColor();\n\n    #else\n\n        #ifdef USE_SKIN\n\n            mat4 worldMatrix =  modelMatrix * skin_getSkinMatrix();\n\n            vFragPos = worldMatrix * vec4(aPosition, 1.0);\n\n            gl_Position = projViewMatrix * worldMatrix * vec4(aPosition, 1.0);\n\n            mat4 inverseMat = invert(worldMatrix);\n\n            mat4 normalMat = transpose(worldMatrix);\n\n            vNormal = normalize(vec3(normalMat * vec4(NORMAL, 1.0)));\n\n        #else\n\n            vFragPos = modelMatrix * vec4(aPosition, 1.0);\n\n            gl_Position = projViewModelMatrix * vec4(aPosition, 1.0);\n\n            vNormal = normalize(vec3(normalMatrix * vec4(NORMAL, 1.0)));\n\n        #endif\n\n    #endif\n\n    #ifdef USE_BASECOLORTEXTURE\n\n        vTexCoords = TEXCOORD_0;\n\n    #endif\n\n}\n\n";

	var PhongShader = function (_MeshShader2) {
	  _inheritsLoose(PhongShader, _MeshShader2);

	  function PhongShader(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    var extraCommandProps = config.extraCommandProps || {};
	    var positionAttribute = config.positionAttribute || 'aPosition';
	    var vert = phongVert;

	    if (positionAttribute !== 'aPosition') {
	      vert = vert.replace(/aPosition/g, positionAttribute);
	    }

	    return _MeshShader2.call(this, {
	      vert: vert,
	      frag: phongFrag,
	      uniforms: ['viewPos', 'lightAmbient', 'lightDiffuse', 'lightSpecular', 'ambientStrength', 'specularStrength', 'materialShininess', 'projViewMatrix', 'opacity', 'baseColorTexture', 'baseColorFactor', 'lightPosition', {
	        name: 'normalMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          var normalMatrix = [];
	          invert$3(normalMatrix, props['modelMatrix']);
	          transpose$2(normalMatrix, normalMatrix);
	          return normalMatrix;
	        }
	      }, {
	        name: 'projViewModelMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          return multiply$3([], props['projViewMatrix'], props['modelMatrix']);
	        }
	      }],
	      defines: {},
	      extraCommandProps: extraCommandProps
	    }) || this;
	  }

	  return PhongShader;
	}(MeshShader);

	var skyboxData = {
	  vertices: [-1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0]
	};
	var skyboxVS = "    attribute vec3 aPosition;\n\n\n\n    uniform mat4 projMatrix;\n\n    uniform mat4 viewMatrix;\n\n\n\n    varying vec3 vWorldPos;\n\n\n\n    void main()\n\n    {\n\n        vWorldPos = aPosition;\n\n\n\n        mat4 rotViewMatrix = mat4(mat3(viewMatrix)); // remove translation from the view matrix\n\n        vec4 clipPos = projMatrix * rotViewMatrix * vec4(vWorldPos, 1.0);\n\n\n\n        gl_Position = clipPos.xyww;\n\n    }\n\n";
	var skyboxFrag = "precision mediump float;\n\n\n\nvarying vec3 vWorldPos;\n\n\n\nuniform samplerCube cubeMap;\n\n\n\nvoid main()\n\n{\n\n    vec3 envColor = textureCube(cubeMap, vWorldPos).rgb;\n\n\n\n    #ifdef USE_HDR\n\n    envColor = envColor / (envColor + vec3(1.0));\n\n    envColor = pow(envColor, vec3(1.0/2.2));\n\n    #endif\n\n\n\n    gl_FragColor = vec4(envColor, 1.0);\n\n}\n\n";
	var command, commandHDR;
	var config;

	function drawSkybox(regl, cubeMap, viewMatrix, projMatrix, useHDR, frameBuffer) {
	  var drawCommand;
	  config = config || {
	    vert: skyboxVS,
	    attributes: {
	      'aPosition': skyboxData.vertices
	    },
	    uniforms: {
	      'cubeMap': regl.prop('cubeMap'),
	      'viewMatrix': regl.prop('viewMatrix'),
	      'projMatrix': regl.prop('projMatrix')
	    },
	    count: skyboxData.vertices.length / 3,
	    framebuffer: regl.prop('frameBuffer'),
	    depth: {
	      enable: true,
	      func: 'lequal'
	    }
	  };

	  if (useHDR) {
	    config['frag'] = '#define USE_HDR \n' + skyboxFrag;
	    drawCommand = commandHDR = commandHDR || regl(config);
	  } else {
	    config['frag'] = skyboxFrag;
	    drawCommand = command = command || regl(config);
	  }

	  drawCommand({
	    cubeMap: cubeMap,
	    viewMatrix: viewMatrix,
	    projMatrix: projMatrix,
	    frameBuffer: frameBuffer
	  });
	}

	var SkyboxHelper = Object.freeze({
	  drawSkybox: drawSkybox
	});

	var renderToCube = function () {
	  var cameraPos = [0, 0, 0];
	  var captureViews = [lookAt([], cameraPos, [1, 0, 0], [0, -1, 0]), lookAt([], cameraPos, [-1, 0, 0], [0, -1, 0]), lookAt([], cameraPos, [0, 1, 0], [0, 0, 1]), lookAt([], cameraPos, [0, -1, 0], [0, 0, -1]), lookAt([], cameraPos, [0, 0, 1], [0, -1, 0]), lookAt([], cameraPos, [0, 0, -1], [0, -1, 0])];
	  var fov = 90 * Math.PI / 180;
	  var clearColor = [0, 0, 0, 0];
	  var pmat = new Array(16);
	  return function (regl, fbo, drawCommand, props, cb) {
	    var aspect = 1;
	    var near = 0.5;
	    var far = 1.1;
	    var projMatrix = perspective(pmat, fov, aspect, near, far);
	    var config = {
	      context: {
	        viewMatrix: function viewMatrix(context, props, batchId) {
	          return captureViews[batchId];
	        },
	        projMatrix: projMatrix
	      }
	    };

	    if (fbo) {
	      if (fbo.faces) {
	        config.framebuffer = function (context, props, batchId) {
	          return fbo.faces[batchId];
	        };
	      } else {
	        config.framebuffer = fbo;
	      }
	    }

	    var setupFace = regl(config);
	    setupFace(6, function () {
	      regl.clear({
	        color: clearColor,
	        depth: 1
	      });
	      drawCommand(props);
	      if (cb) cb();
	    });
	    return fbo;
	  };
	}();

	var cubeData = {
	  vertices: [1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0],
	  textures: [1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0],
	  indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23]
	};
	var cubemapVS = "attribute vec3 aPosition;\n\n\n\nvarying vec3 vWorldPos;\n\n\n\nuniform mat4 projMatrix;\n\nuniform mat4 viewMatrix;\n\n\n\nvoid main()\n\n{\n\n    vWorldPos = aPosition;\n\n    gl_Position =  projMatrix * viewMatrix * vec4(vWorldPos, 1.0);\n\n}\n\n";
	var equirectangularMapFS = "//平面图转成cubemap\n\nprecision mediump float;\n\n\n\nvarying vec3 vWorldPos;\n\n\n\nuniform sampler2D equirectangularMap;\n\n\n\nconst vec2 invAtan = vec2(0.1591, 0.3183);\n\nvec2 SampleSphericalMap(vec3 v)\n\n{\n\n    vec2 uv = vec2(atan(v.y, v.x), asin(v.z));\n\n    uv *= invAtan;\n\n    uv += 0.5;\n\n    return uv;\n\n}\n\n\n\nvoid main()\n\n{\n\n    vec2 uv = SampleSphericalMap(normalize(vWorldPos)); // make sure to normalize localPos\n\n    vec3 color = texture2D(equirectangularMap, uv).rgb;\n\n\n\n    gl_FragColor = vec4(color, 1.0);\n\n    // gl_FragColor = vec4(uv, 0.0, 1.0);\n\n}\n\n\n\n";
	var prefilterFS = "precision mediump float;\n\n\n\nvarying vec3 vWorldPos;\n\n\n\nuniform samplerCube environmentMap;\n\nuniform sampler2D distributionMap;\n\nuniform float roughness;\n\nuniform float resolution; // resolution of source cubemap (per face)\n\n\n\nconst float PI = 3.14159265359;\n\n\n\n// ----------------------------------------------------------------------------\n\nfloat DistributionGGX(vec3 N, vec3 H, float roughness)\n\n{\n\n    float a = roughness*roughness;\n\n    float a2 = a*a;\n\n    float NdotH = max(dot(N, H), 0.0);\n\n    float NdotH2 = NdotH*NdotH;\n\n\n\n    float nom   = a2;\n\n    float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n\n    denom = PI * denom * denom;\n\n\n\n    return nom / denom;\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\nvec3 ImportanceSampleGGX(float Xi, vec3 N, float roughness)\n\n{\n\n    vec3 H = texture2D(distributionMap, vec2(roughness, Xi)).rgb;\n\n\n\n    // from tangent-space H vector to world-space sample vector\n\n    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n\n    vec3 tangent   = normalize(cross(up, N));\n\n    vec3 bitangent = cross(N, tangent);\n\n\n\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n    return normalize(sampleVec);\n\n}\n\n// ----------------------------------------------------------------------------\n\nvoid main()\n\n{\n\n    vec3 N = normalize(vWorldPos);\n\n\n\n    // make the simplyfying assumption that V equals R equals the normal\n\n    vec3 R = N;\n\n    vec3 V = R;\n\n\n\n    const int SAMPLE_COUNT = 1024;\n\n    vec3 prefilteredColor = vec3(0.0);\n\n    float totalWeight = 0.0;\n\n\n\n    for(int i = 0; i < SAMPLE_COUNT; ++i)\n\n    {\n\n        // generates a sample vector that's biased towards the preferred alignment direction (importance sampling).\n\n        vec3 H = ImportanceSampleGGX(float(i) / float(SAMPLE_COUNT), N, roughness);\n\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n\n\n        float NdotL = max(dot(N, L), 0.0);\n\n        if(NdotL > 0.0)\n\n        {\n\n            // a more precision method,  sample from the environment's mip level based on roughness/pdf\n\n            float D   = DistributionGGX(N, H, roughness);\n\n            float NdotH = max(dot(N, H), 0.0);\n\n            float HdotV = max(dot(H, V), 0.0);\n\n            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n\n\n\n            float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);\n\n            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);\n\n\n\n            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);\n\n\n\n            prefilteredColor += textureCube(environmentMap, L, mipLevel).rgb * NdotL;\n\n            totalWeight      += NdotL;\n\n            //--------------------------------------------------------\n\n            // prefilteredColor += textureCube(environmentMap, L).rgb * NdotL;\n\n            // totalWeight      += NdotL;\n\n        }\n\n    }\n\n\n\n    prefilteredColor = prefilteredColor / totalWeight;\n\n\n\n    gl_FragColor = vec4(prefilteredColor, 1.0);\n\n    // gl_FragColor = vec4(totalWeight, 0.0, 0.0, 1.0);\n\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n\n}\n\n";
	var dfgFS = "//生成 BRDF LUT\n\nprecision mediump float;\n\n\n\nvarying vec2 vTexCoords;\n\nuniform sampler2D distributionMap;\n\n\n\nconst float PI = 3.14159265359;\n\n\n\nvec3 ImportanceSampleGGX(float Xi, vec3 N, float roughness)\n\n{\n\n    vec3 H = texture2D(distributionMap, vec2(roughness, Xi)).rgb;\n\n    \n\n    // from tangent-space H vector to world-space sample vector\n\n    vec3 up          = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n\n    vec3 tangent   = normalize(cross(up, N));\n\n    vec3 bitangent = cross(N, tangent);\n\n    \n\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n\n    return normalize(sampleVec);\n\n}\n\n// ----------------------------------------------------------------------------\n\nfloat GeometrySchlickGGX(float NdotV, float roughness)\n\n{\n\n    // note that we use a different k for IBL\n\n    float a = roughness;\n\n    float k = (a * a) / 2.0;\n\n\n\n    float nom   = NdotV;\n\n    float denom = NdotV * (1.0 - k) + k;\n\n\n\n    return nom / denom;\n\n}\n\n// ----------------------------------------------------------------------------\n\nfloat GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)\n\n{\n\n    float NdotV = max(dot(N, V), 0.0);\n\n    float NdotL = max(dot(N, L), 0.0);\n\n    float ggx2 = GeometrySchlickGGX(NdotV, roughness);\n\n    float ggx1 = GeometrySchlickGGX(NdotL, roughness);\n\n\n\n    return ggx1 * ggx2;\n\n}\n\n// ----------------------------------------------------------------------------\n\nvec2 IntegrateBRDF(float NdotV, float roughness)\n\n{\n\n    vec3 V;\n\n    V.x = sqrt(1.0 - NdotV*NdotV);\n\n    V.y = 0.0;\n\n    V.z = NdotV;\n\n\n\n    float A = 0.0;\n\n    float B = 0.0; \n\n\n\n    vec3 N = vec3(0.0, 0.0, 1.0);\n\n    \n\n    const int SAMPLE_COUNT = 1024;\n\n    for(int i = 0; i < SAMPLE_COUNT; ++i)\n\n    {\n\n        // generates a sample vector that's biased towards the\n\n        // preferred alignment direction (importance sampling).\n\n        vec3 H = ImportanceSampleGGX(float(i) / float(SAMPLE_COUNT), N, roughness);\n\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n\n\n        float NdotL = max(L.z, 0.0);\n\n        float NdotH = max(H.z, 0.0);\n\n        float VdotH = max(dot(V, H), 0.0);\n\n\n\n        if(NdotL > 0.0)\n\n        {\n\n            float G = GeometrySmith(N, V, L, roughness);\n\n            float G_Vis = (G * VdotH) / (NdotH * NdotV);\n\n            float Fc = pow(1.0 - VdotH, 5.0);\n\n\n\n            A += (1.0 - Fc) * G_Vis;\n\n            B += Fc * G_Vis;\n\n        }\n\n    }\n\n    A /= float(SAMPLE_COUNT);\n\n    B /= float(SAMPLE_COUNT);\n\n    return vec2(A, B);\n\n}\n\n// ----------------------------------------------------------------------------\n\nvoid main() \n\n{\n\n    vec2 integratedBRDF = IntegrateBRDF(vTexCoords.x, vTexCoords.y);\n\n    gl_FragColor = vec4(integratedBRDF, 0.0, 1.0);\n\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n\n}\n\n";
	var dfgVS = "attribute vec3 aPosition;\n\nattribute vec2 aTexCoord;\n\n\n\nvarying vec2 vTexCoords;\n\n\n\nvoid main()\n\n{\n\n    vTexCoords = aTexCoord;\n\n    gl_Position = vec4(aPosition, 1.0);\n\n}\n\n";
	var epsilon = 0.000001;
	var create_1 = create$9;

	function create$9() {
	  var out = new Float32Array(3);
	  out[0] = 0;
	  out[1] = 0;
	  out[2] = 0;
	  return out;
	}

	var clone_1 = clone$9;

	function clone$9(a) {
	  var out = new Float32Array(3);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  return out;
	}

	var fromValues_1 = fromValues$9;

	function fromValues$9(x, y, z) {
	  var out = new Float32Array(3);
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}

	var normalize_1 = normalize$1$1;

	function normalize$1$1(out, a) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  var len$$1 = x * x + y * y + z * z;

	  if (len$$1 > 0) {
	    len$$1 = 1 / Math.sqrt(len$$1);
	    out[0] = a[0] * len$$1;
	    out[1] = a[1] * len$$1;
	    out[2] = a[2] * len$$1;
	  }

	  return out;
	}

	var dot_1 = dot$5;

	function dot$5(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	var angle_1 = angle$2;

	function angle$2(a, b) {
	  var tempA = fromValues_1(a[0], a[1], a[2]);
	  var tempB = fromValues_1(b[0], b[1], b[2]);
	  normalize_1(tempA, tempA);
	  normalize_1(tempB, tempB);
	  var cosine = dot_1(tempA, tempB);

	  if (cosine > 1.0) {
	    return 0;
	  } else {
	    return Math.acos(cosine);
	  }
	}

	var copy_1 = copy$9;

	function copy$9(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  return out;
	}

	var set_1 = set$a;

	function set$a(out, x, y, z) {
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}

	var equals_1 = equals$a;

	function equals$a(a, b) {
	  var a0 = a[0];
	  var a1 = a[1];
	  var a2 = a[2];
	  var b0 = b[0];
	  var b1 = b[1];
	  var b2 = b[2];
	  return Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2));
	}

	var exactEquals_1 = exactEquals$9;

	function exactEquals$9(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
	}

	var add_1 = add$9;

	function add$9(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  return out;
	}

	var subtract_1 = subtract$7;

	function subtract$7(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  return out;
	}

	var sub$7 = subtract_1;
	var multiply_1 = multiply$9;

	function multiply$9(out, a, b) {
	  out[0] = a[0] * b[0];
	  out[1] = a[1] * b[1];
	  out[2] = a[2] * b[2];
	  return out;
	}

	var mul$9 = multiply_1;
	var divide_1 = divide$3;

	function divide$3(out, a, b) {
	  out[0] = a[0] / b[0];
	  out[1] = a[1] / b[1];
	  out[2] = a[2] / b[2];
	  return out;
	}

	var div$3 = divide_1;
	var min_1 = min$3;

	function min$3(out, a, b) {
	  out[0] = Math.min(a[0], b[0]);
	  out[1] = Math.min(a[1], b[1]);
	  out[2] = Math.min(a[2], b[2]);
	  return out;
	}

	var max_1 = max$3;

	function max$3(out, a, b) {
	  out[0] = Math.max(a[0], b[0]);
	  out[1] = Math.max(a[1], b[1]);
	  out[2] = Math.max(a[2], b[2]);
	  return out;
	}

	var floor_1 = floor$3;

	function floor$3(out, a) {
	  out[0] = Math.floor(a[0]);
	  out[1] = Math.floor(a[1]);
	  out[2] = Math.floor(a[2]);
	  return out;
	}

	var ceil_1 = ceil$3;

	function ceil$3(out, a) {
	  out[0] = Math.ceil(a[0]);
	  out[1] = Math.ceil(a[1]);
	  out[2] = Math.ceil(a[2]);
	  return out;
	}

	var round_1 = round$3;

	function round$3(out, a) {
	  out[0] = Math.round(a[0]);
	  out[1] = Math.round(a[1]);
	  out[2] = Math.round(a[2]);
	  return out;
	}

	var scale_1 = scale$9;

	function scale$9(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  return out;
	}

	var scaleAndAdd_1 = scaleAndAdd$3;

	function scaleAndAdd$3(out, a, b, scale$$1) {
	  out[0] = a[0] + b[0] * scale$$1;
	  out[1] = a[1] + b[1] * scale$$1;
	  out[2] = a[2] + b[2] * scale$$1;
	  return out;
	}

	var distance_1 = distance$3;

	function distance$3(a, b) {
	  var x = b[0] - a[0],
	      y = b[1] - a[1],
	      z = b[2] - a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}

	var dist$3 = distance_1;
	var squaredDistance_1 = squaredDistance$3;

	function squaredDistance$3(a, b) {
	  var x = b[0] - a[0],
	      y = b[1] - a[1],
	      z = b[2] - a[2];
	  return x * x + y * y + z * z;
	}

	var sqrDist$3 = squaredDistance_1;
	var length_1 = length$5;

	function length$5(a) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}

	var len$5 = length_1;
	var squaredLength_1 = squaredLength$5;

	function squaredLength$5(a) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  return x * x + y * y + z * z;
	}

	var sqrLen$5 = squaredLength_1;
	var negate_1 = negate$3;

	function negate$3(out, a) {
	  out[0] = -a[0];
	  out[1] = -a[1];
	  out[2] = -a[2];
	  return out;
	}

	var inverse_1 = inverse$3;

	function inverse$3(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  return out;
	}

	var cross_1 = cross$2;

	function cross$2(out, a, b) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      bx = b[0],
	      by = b[1],
	      bz = b[2];
	  out[0] = ay * bz - az * by;
	  out[1] = az * bx - ax * bz;
	  out[2] = ax * by - ay * bx;
	  return out;
	}

	var lerp_1 = lerp$5;

	function lerp$5(out, a, b, t) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2];
	  out[0] = ax + t * (b[0] - ax);
	  out[1] = ay + t * (b[1] - ay);
	  out[2] = az + t * (b[2] - az);
	  return out;
	}

	var random_1 = random$4;

	function random$4(out, scale$$1) {
	  scale$$1 = scale$$1 || 1.0;
	  var r = Math.random() * 2.0 * Math.PI;
	  var z = Math.random() * 2.0 - 1.0;
	  var zScale = Math.sqrt(1.0 - z * z) * scale$$1;
	  out[0] = Math.cos(r) * zScale;
	  out[1] = Math.sin(r) * zScale;
	  out[2] = z * scale$$1;
	  return out;
	}

	var transformMat4_1 = transformMat4$3;

	function transformMat4$3(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2],
	      w = m[3] * x + m[7] * y + m[11] * z + m[15];
	  w = w || 1.0;
	  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	  return out;
	}

	var transformMat3_1 = transformMat3$2;

	function transformMat3$2(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  out[0] = x * m[0] + y * m[3] + z * m[6];
	  out[1] = x * m[1] + y * m[4] + z * m[7];
	  out[2] = x * m[2] + y * m[5] + z * m[8];
	  return out;
	}

	var transformQuat_1 = transformQuat$2;

	function transformQuat$2(out, a, q) {
	  var x = a[0],
	      y = a[1],
	      z = a[2],
	      qx = q[0],
	      qy = q[1],
	      qz = q[2],
	      qw = q[3],
	      ix = qw * x + qy * z - qz * y,
	      iy = qw * y + qz * x - qx * z,
	      iz = qw * z + qx * y - qy * x,
	      iw = -qx * x - qy * y - qz * z;
	  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	  return out;
	}

	var rotateX_1 = rotateX$4;

	function rotateX$4(out, a, b, c) {
	  var by = b[1];
	  var bz = b[2];
	  var py = a[1] - by;
	  var pz = a[2] - bz;
	  var sc = Math.sin(c);
	  var cc = Math.cos(c);
	  out[0] = a[0];
	  out[1] = by + py * cc - pz * sc;
	  out[2] = bz + py * sc + pz * cc;
	  return out;
	}

	var rotateY_1 = rotateY$4;

	function rotateY$4(out, a, b, c) {
	  var bx = b[0];
	  var bz = b[2];
	  var px = a[0] - bx;
	  var pz = a[2] - bz;
	  var sc = Math.sin(c);
	  var cc = Math.cos(c);
	  out[0] = bx + pz * sc + px * cc;
	  out[1] = a[1];
	  out[2] = bz + pz * cc - px * sc;
	  return out;
	}

	var rotateZ_1 = rotateZ$4;

	function rotateZ$4(out, a, b, c) {
	  var bx = b[0];
	  var by = b[1];
	  var px = a[0] - bx;
	  var py = a[1] - by;
	  var sc = Math.sin(c);
	  var cc = Math.cos(c);
	  out[0] = bx + px * cc - py * sc;
	  out[1] = by + px * sc + py * cc;
	  out[2] = a[2];
	  return out;
	}

	var forEach_1 = forEach$3;
	var vec = create_1();

	function forEach$3(a, stride, offset, count, fn, arg) {
	  var i, l;

	  if (!stride) {
	    stride = 3;
	  }

	  if (!offset) {
	    offset = 0;
	  }

	  if (count) {
	    l = Math.min(count * stride + offset, a.length);
	  } else {
	    l = a.length;
	  }

	  for (i = offset; i < l; i += stride) {
	    vec[0] = a[i];
	    vec[1] = a[i + 1];
	    vec[2] = a[i + 2];
	    fn(vec, vec, arg);
	    a[i] = vec[0];
	    a[i + 1] = vec[1];
	    a[i + 2] = vec[2];
	  }

	  return a;
	}

	var glVec3 = {
	  EPSILON: epsilon,
	  create: create_1,
	  clone: clone_1,
	  angle: angle_1,
	  fromValues: fromValues_1,
	  copy: copy_1,
	  set: set_1,
	  equals: equals_1,
	  exactEquals: exactEquals_1,
	  add: add_1,
	  subtract: subtract_1,
	  sub: sub$7,
	  multiply: multiply_1,
	  mul: mul$9,
	  divide: divide_1,
	  div: div$3,
	  min: min_1,
	  max: max_1,
	  floor: floor_1,
	  ceil: ceil_1,
	  round: round_1,
	  scale: scale_1,
	  scaleAndAdd: scaleAndAdd_1,
	  distance: distance_1,
	  dist: dist$3,
	  squaredDistance: squaredDistance_1,
	  sqrDist: sqrDist$3,
	  length: length_1,
	  len: len$5,
	  squaredLength: squaredLength_1,
	  sqrLen: sqrLen$5,
	  negate: negate_1,
	  inverse: inverse_1,
	  normalize: normalize_1,
	  dot: dot_1,
	  cross: cross_1,
	  lerp: lerp_1,
	  random: random_1,
	  transformMat4: transformMat4_1,
	  transformMat3: transformMat3_1,
	  transformQuat: transformQuat_1,
	  rotateX: rotateX_1,
	  rotateY: rotateY_1,
	  rotateZ: rotateZ_1,
	  forEach: forEach_1
	};
	var cubemapFaceNormals = [[[0, 0, -1], [0, -1, 0], [1, 0, 0]], [[0, 0, 1], [0, -1, 0], [-1, 0, 0]], [[1, 0, 0], [0, 0, 1], [0, 1, 0]], [[1, 0, 0], [0, 0, -1], [0, -1, 0]], [[1, 0, 0], [0, -1, 0], [0, 0, 1]], [[-1, 0, 0], [0, -1, 0], [0, 0, -1]]];

	var cubemapSh = function cubemapSh(faces, cubemapSize, ch) {
	  var size = cubemapSize || 128;
	  var channels = ch || 4;
	  var cubeMapVecs = [];
	  faces.forEach(function (face, index) {
	    var faceVecs = [];

	    for (var v = 0; v < size; v++) {
	      for (var u = 0; u < size; u++) {
	        var fU = 2.0 * u / (size - 1.0) - 1.0;
	        var fV = 2.0 * v / (size - 1.0) - 1.0;
	        var vecX = [];
	        glVec3.scale(vecX, cubemapFaceNormals[index][0], fU);
	        var vecY = [];
	        glVec3.scale(vecY, cubemapFaceNormals[index][1], fV);
	        var vecZ = cubemapFaceNormals[index][2];
	        var res = [];
	        glVec3.add(res, vecX, vecY);
	        glVec3.add(res, res, vecZ);
	        glVec3.normalize(res, res);
	        faceVecs.push(res);
	      }
	    }

	    cubeMapVecs.push(faceVecs);
	  });
	  var sh = [new Float32Array(3), new Float32Array(3), new Float32Array(3), new Float32Array(3), new Float32Array(3), new Float32Array(3), new Float32Array(3), new Float32Array(3), new Float32Array(3)];
	  var weightAccum = 0;
	  faces.forEach(function (face, index) {
	    var pixels = face;
	    var gammaCorrect = true;
	    if (Object.prototype.toString.call(pixels) === '[object Float32Array]') gammaCorrect = false;

	    for (var y = 0; y < size; y++) {
	      for (var x = 0; x < size; x++) {
	        var texelVect = cubeMapVecs[index][y * size + x];
	        var weight = texelSolidAngle(x, y, size, size);
	        var weight1 = weight * 4 / 17;
	        var weight2 = weight * 8 / 17;
	        var weight3 = weight * 15 / 17;
	        var weight4 = weight * 5 / 68;
	        var weight5 = weight * 15 / 68;
	        var dx = texelVect[0];
	        var dy = texelVect[1];
	        var dz = texelVect[2];

	        for (var c = 0; c < 3; c++) {
	          var value = pixels[y * size * channels + x * channels + c] / 255;
	          if (gammaCorrect) value = Math.pow(value, 2.2);
	          sh[0][c] += value * weight1;
	          sh[1][c] += value * weight2 * dx;
	          sh[2][c] += value * weight2 * dy;
	          sh[3][c] += value * weight2 * dz;
	          sh[4][c] += value * weight3 * dx * dz;
	          sh[5][c] += value * weight3 * dz * dy;
	          sh[6][c] += value * weight3 * dy * dx;
	          sh[7][c] += value * weight4 * (3.0 * dz * dz - 1.0);
	          sh[8][c] += value * weight5 * (dx * dx - dy * dy);
	          weightAccum += weight;
	        }
	      }
	    }
	  });

	  for (var i = 0; i < sh.length; i++) {
	    sh[i][0] *= 4 * Math.PI / weightAccum;
	    sh[i][1] *= 4 * Math.PI / weightAccum;
	    sh[i][2] *= 4 * Math.PI / weightAccum;
	  }

	  return sh;
	};

	function texelSolidAngle(aU, aV, width, height) {
	  var U = 2.0 * (aU + 0.5) / width - 1.0;
	  var V = 2.0 * (aV + 0.5) / height - 1.0;
	  var invResolutionW = 1.0 / width;
	  var invResolutionH = 1.0 / height;
	  var x0 = U - invResolutionW;
	  var y0 = V - invResolutionH;
	  var x1 = U + invResolutionW;
	  var y1 = V + invResolutionH;
	  var angle$$1 = areaElement(x0, y0) - areaElement(x0, y1) - areaElement(x1, y0) + areaElement(x1, y1);
	  return angle$$1;
	}

	function areaElement(x, y) {
	  return Math.atan2(x * y, Math.sqrt(x * x + y * y + 1.0));
	}

	function createIBLMaps(regl, config) {
	  if (config === void 0) {
	    config = {};
	  }

	  var envTexture = config.envTexture;
	  var envCubeSize = config.envCubeSize || 512;
	  var sampleSize = config.sampleSize || 1024;
	  var roughnessLevels = config.roughnessLevels || 256;
	  var prefilterCubeSize = config.prefilterCubeSize || 256;
	  var dfgSize = config.dfgSize || 512;
	  var envMap;

	  if (!Array.isArray(envTexture)) {
	    envMap = createEquirectangularMapCube(regl, envTexture, envCubeSize);
	  } else {
	    var cube = regl.cube.apply(regl, envTexture);
	    envMap = createSkybox(regl, cube, envCubeSize);
	    cube.destroy();
	  }

	  var prefilterMap = createPrefilterCube(regl, envMap, prefilterCubeSize, sampleSize, roughnessLevels);
	  var dfgLUT = generateDFGLUT(regl, dfgSize, sampleSize, roughnessLevels);
	  var sh;

	  if (!config.ignoreSH) {
	    var faces = getEnvmapPixels(regl, envMap, envCubeSize);
	    sh = cubemapSh(faces, envCubeSize, 4);
	  }

	  var maps = {
	    envMap: envMap,
	    prefilterMap: prefilterMap,
	    dfgLUT: dfgLUT
	  };

	  if (sh) {
	    maps['sh'] = sh;
	  }

	  return maps;
	}

	function createSkybox(regl, cubemap, envCubeSize) {
	  var drawCube = regl({
	    frag: skyboxFrag,
	    vert: cubemapVS,
	    attributes: {
	      'aPosition': cubeData.vertices
	    },
	    uniforms: {
	      'projMatrix': regl.context('projMatrix'),
	      'viewMatrix': regl.context('viewMatrix'),
	      'cubeMap': cubemap
	    },
	    elements: cubeData.indices
	  });
	  var tmpFBO = regl.framebufferCube(envCubeSize);
	  renderToCube(regl, tmpFBO, drawCube);
	  return tmpFBO;
	}

	function getEnvmapPixels(regl, cubemap, envCubeSize) {
	  var drawCube = regl({
	    frag: skyboxFrag,
	    vert: cubemapVS,
	    attributes: {
	      'aPosition': cubeData.vertices
	    },
	    uniforms: {
	      'projMatrix': regl.context('projMatrix'),
	      'viewMatrix': regl.context('viewMatrix'),
	      'cubeMap': cubemap
	    },
	    elements: cubeData.indices
	  });
	  var faces = [];
	  var tmpFBO = regl.framebuffer(envCubeSize);
	  renderToCube(regl, tmpFBO, drawCube, {
	    size: envCubeSize
	  }, function () {
	    var pixels = regl.read();
	    faces.push(pixels);
	  });
	  tmpFBO.destroy();
	  return faces;
	}

	function createEquirectangularMapCube(regl, texture, size) {
	  size = size || 512;
	  var drawCube = regl({
	    frag: equirectangularMapFS,
	    vert: cubemapVS,
	    attributes: {
	      'aPosition': cubeData.vertices
	    },
	    uniforms: {
	      'projMatrix': regl.context('projMatrix'),
	      'viewMatrix': regl.context('viewMatrix'),
	      'equirectangularMap': texture
	    },
	    elements: cubeData.indices
	  });
	  var envMapFBO = regl.framebufferCube(size);
	  renderToCube(regl, envMapFBO, drawCube);
	  return envMapFBO;
	}

	function createPrefilterMipmap(regl, fromCubeMap, SIZE, sampleSize, roughnessLevels) {
	  sampleSize = sampleSize || 1024;
	  roughnessLevels = roughnessLevels || 256;
	  var distro = generateNormalDistribution(sampleSize, roughnessLevels);
	  var distributionMap = regl.texture({
	    data: distro,
	    width: roughnessLevels,
	    height: sampleSize,
	    min: 'nearest',
	    mag: 'nearest'
	  });
	  var drawCube = regl({
	    frag: prefilterFS,
	    vert: cubemapVS,
	    attributes: {
	      'aPosition': cubeData.vertices
	    },
	    uniforms: {
	      'projMatrix': regl.context('projMatrix'),
	      'viewMatrix': regl.context('viewMatrix'),
	      'environmentMap': fromCubeMap,
	      'distributionMap': distributionMap,
	      'roughness': regl.prop('roughness'),
	      'resolution': SIZE
	    },
	    elements: cubeData.indices,
	    viewport: {
	      x: 0,
	      y: 0,
	      width: regl.prop('size'),
	      height: regl.prop('size')
	    }
	  });
	  var size = SIZE;
	  var tmpFBO = regl.framebuffer(size);
	  var maxLevels = Math.log(size) / Math.log(2);
	  var mipmap = [];

	  var _loop4 = function _loop4(i) {
	    var roughness = i / (maxLevels - 1);
	    var faceId = 0;
	    renderToCube(regl, tmpFBO, drawCube, {
	      roughness: Math.sqrt(roughness),
	      size: size
	    }, function () {
	      var pixels = regl.read();

	      if (!mipmap[faceId]) {
	        mipmap[faceId] = {
	          mipmap: []
	        };
	      }

	      mipmap[faceId].mipmap.push(pixels);
	      faceId++;
	    });
	    size /= 2;
	    tmpFBO.resize(size);
	  };

	  for (var i = 0; i <= maxLevels; i++) {
	    _loop4(i);
	  }

	  tmpFBO.destroy();
	  return mipmap;
	}

	function createPrefilterCube(regl, fromCubeMap, SIZE, sampleSize, roughnessLevels) {
	  var mipmap = createPrefilterMipmap(regl, fromCubeMap, SIZE, sampleSize, roughnessLevels);
	  var prefilterMapFBO = regl.cube({
	    radius: SIZE,
	    min: 'linear mipmap linear',
	    mag: 'linear',
	    faces: mipmap
	  });
	  return prefilterMapFBO;
	}

	var quadVertices = [-1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0];
	var quadTexcoords = [0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0];
	var DFG_CACHE = {};

	function generateDFGLUT(regl, size, sampleSize, roughnessLevels) {
	  sampleSize = sampleSize || 1024;
	  roughnessLevels = roughnessLevels || 256;
	  var key = size + '-' + sampleSize + '-' + roughnessLevels;
	  var distro;

	  if (DFG_CACHE[key]) {
	    distro = DFG_CACHE[key];
	  } else {
	    distro = generateNormalDistribution(sampleSize, roughnessLevels);
	    DFG_CACHE[key] = distro;
	  }

	  var distributionMap = regl.texture({
	    data: distro,
	    width: roughnessLevels,
	    height: sampleSize,
	    type: 'float',
	    min: 'nearest',
	    mag: 'nearest'
	  });
	  var quadBuf = regl.buffer(quadVertices);
	  var quadTexBuf = regl.buffer(quadTexcoords);
	  var fbo = regl.framebuffer({
	    radius: size,
	    type: 'float',
	    min: 'nearest',
	    mag: 'nearest'
	  });
	  var drawLUT = regl({
	    frag: dfgFS,
	    vert: dfgVS,
	    attributes: {
	      'aPosition': {
	        buffer: quadBuf
	      },
	      'aTexCoord': {
	        buffer: quadTexBuf
	      }
	    },
	    uniforms: {
	      'distributionMap': distributionMap
	    },
	    framebuffer: fbo,
	    viewport: {
	      x: 0,
	      y: 0,
	      width: size,
	      height: size
	    },
	    count: quadVertices.length / 3,
	    primitive: 'triangle strip'
	  });
	  drawLUT();
	  quadBuf.destroy();
	  quadTexBuf.destroy();
	  return fbo;
	}

	function generateNormalDistribution(sampleSize, roughnessLevels) {
	  var pixels = new Array(sampleSize * roughnessLevels * 4);

	  for (var i = 0; i < sampleSize; i++) {
	    var _hammersley = hammersley(i, sampleSize),
	        x = _hammersley.x,
	        y = _hammersley.y;

	    for (var j = 0; j < roughnessLevels; j++) {
	      var roughness = j / roughnessLevels;
	      var a = roughness * roughness;
	      var phi = 2.0 * Math.PI * x;
	      var cosTheta = Math.sqrt((1 - y) / (1 + (a * a - 1.0) * y));
	      var sinTheta = Math.sqrt(1.0 - cosTheta * cosTheta);
	      var offset = (i * roughnessLevels + j) * 4;
	      pixels[offset] = sinTheta * Math.cos(phi);
	      pixels[offset + 1] = sinTheta * Math.sin(phi);
	      pixels[offset + 2] = cosTheta;
	      pixels[offset + 3] = 1.0;
	    }
	  }

	  return pixels;
	}

	function hammersley(i, sampleSize) {
	  var x = i / sampleSize;
	  var y = (i << 16 | i >>> 16) >>> 0;
	  y = ((y & 1431655765) << 1 | (y & 2863311530) >>> 1) >>> 0;
	  y = ((y & 858993459) << 2 | (y & 3435973836) >>> 2) >>> 0;
	  y = ((y & 252645135) << 4 | (y & 4042322160) >>> 4) >>> 0;
	  y = (((y & 16711935) << 8 | (y & 4278255360) >>> 8) >>> 0) / 4294967296;
	  return {
	    x: x,
	    y: y
	  };
	}

	var PBRHelper = Object.freeze({
	  createIBLMaps: createIBLMaps
	});
	var DEFAULT_UNIFORMS = {
	  baseColorTexture: null,
	  baseColorFactor: [1, 1, 1, 1],
	  metallicRoughnessTexture: null,
	  metallicFactor: 1,
	  roughnessFactor: 1,
	  occlusionTexture: null,
	  occlusion: 0,
	  occlusionStrength: 1,
	  normalTexture: null,
	  normalStrength: 1,
	  reflectance: 0.5,
	  emissiveTexture: null,
	  emissiveFactor: [0, 0, 0, 0],
	  clearCoat: undefined,
	  clearCoatRoughnessTexture: null,
	  clearCoatRoughness: 0,
	  clearCoatNormalTexture: null,
	  clearCoatIorChange: true,
	  anisotropy: undefined,
	  anisotropyDirection: [1, 0, 0],
	  postLightingColor: [0, 0, 0, 0],
	  HAS_TONE_MAPPING: 1,
	  GAMMA_CORRECT_INPUT: 1,
	  uvScale: [1, 1],
	  uvOffset: [0, 0]
	};

	var LitMaterial = function (_Material$3) {
	  _inheritsLoose(LitMaterial, _Material$3);

	  function LitMaterial(uniforms) {
	    return _Material$3.call(this, uniforms, DEFAULT_UNIFORMS) || this;
	  }

	  var _proto15 = LitMaterial.prototype;

	  _proto15.createDefines = function createDefines() {
	    var uniforms = this.uniforms;
	    var defines = {
	      BLEND_MODE_TRANSPARENT: 1
	    };

	    if (uniforms['baseColorFactor'] && uniforms['baseColorFactor'][3] < 1) {
	      defines['BLEND_MODE_TRANSPARENT'] = 1;
	      defines['TRANSPARENT_MATERIAL'] = 1;
	    }

	    if (uniforms['baseColorTexture']) {
	      defines['MATERIAL_HAS_BASECOLOR_MAP'] = 1;
	    }

	    if (uniforms['metallicRoughnessTexture']) {
	      defines['MATERIAL_HAS_METALLICROUGHNESS_MAP'] = 1;
	    }

	    if (uniforms['occlusionTexture']) {
	      defines['MATERIAL_HAS_AO_MAP'] = 1;
	      defines['MATERIAL_HAS_AMBIENT_OCCLUSION'] = 1;
	    }

	    if (uniforms['emissiveTexture']) {
	      defines['MATERIAL_HAS_EMISSIVE_MAP'] = 1;
	      defines['MATERIAL_HAS_EMISSIVE'] = 1;
	    }

	    if (uniforms['clearCoatRoughnessTexture']) {
	      defines['MATERIAL_HAS_CLEARCOAT_ROUGNESS_MAP'] = 1;
	    }

	    if (uniforms['clearCoatNormalTexture']) {
	      defines['MATERIAL_HAS_CLEAR_COAT_NORMAL'] = 1;
	    }

	    if (uniforms['anisotropy'] !== undefined) {
	      defines['MATERIAL_HAS_ANISOTROPY'] = 1;
	    }

	    if (uniforms['normalTexture']) {
	      defines['MATERIAL_HAS_NORMAL'] = 1;
	    }

	    if (uniforms['clearCoat'] !== undefined) {
	      defines['MATERIAL_HAS_CLEAR_COAT'] = 1;
	    }

	    if (uniforms['clearCoatIorChange']) {
	      defines['CLEAR_COAT_IOR_CHANGE'] = 1;
	    }

	    if (uniforms['postLightingColor']) {
	      defines['MATERIAL_HAS_POST_LIGHTING_COLOR'] = 1;
	    }

	    if (defines['MATERIAL_HAS_BASECOLOR_MAP'] || defines['MATERIAL_HAS_METALLICROUGHNESS_MAP'] || defines['MATERIAL_HAS_METMATERIAL_HAS_AO_MAPALLICROUGHNESS_MAP'] || defines['MATERIAL_HAS_EMISSIVE_MAP'] || defines['MATERIAL_HAS_CLEARCOAT_ROUGNESS_MAP'] || defines['MATERIAL_HAS_CLEAR_COAT_NORMAL']) {
	      defines['MATERIAL_HAS_MAP'] = 1;
	    }

	    if (uniforms['HAS_TONE_MAPPING']) {
	      defines['HAS_TONE_MAPPING'] = 1;
	    }

	    if (uniforms['GAMMA_CORRECT_INPUT']) {
	      defines['GAMMA_CORRECT_INPUT'] = 1;
	    }

	    return defines;
	  };

	  _proto15.getUniforms = function getUniforms(regl) {
	    var uniforms = _Material$3.prototype.getUniforms.call(this, regl);

	    return {
	      material: uniforms,
	      uvScale: uniforms.uvScale,
	      uvOffset: uniforms.uvOffset
	    };
	  };

	  return LitMaterial;
	}(Material$1);

	var litFrag = "#include <fl_header_frag>\n\n\n\n#if defined(HAS_SHADOWING)\n\n#include <vsm_shadow_frag>\n\n#endif\n\n\n\n//webgl 2.0中的函数实现\n\n#include <fl_common_math_glsl>\n\n#include <fl_common_graphics_glsl>\n\n//initialize frameUniforms\n\n#include <fl_uniforms_glsl>\n\n//varyings\n\n#include <fl_inputs_frag>\n\n//brdf functions\n\n#include <fl_brdf_frag>\n\n//MaterialInputs结构定义\n\n//mapatalksgl的Material => MaterialInputs\n\n#include <fl_common_shading_frag>\n\n#include <fl_getters_frag>\n\n#include <fl_material_inputs_frag>\n\n#include <fl_common_material_frag>\n\n//构造各类shading_*的值\n\n#include <fl_shading_params>\n\n//PixelParams结构定义\n\n#include <fl_common_lighting_frag>\n\n\n\n#include <fl_material_uniforms_frag>\n\n//初始化light相关的uniforms，如light_iblDFG等\n\n#include <fl_light_uniforms_frag>\n\n\n\n#include <fl_ambient_occlusion_frag>\n\n//IBL灯光的计算逻辑\n\n#include <fl_light_indirect>\n\n#include <fl_shading_model_standard_frag>\n\n//有向光的计算逻辑\n\n#include <fl_light_directional>\n\n\n\n//lit材质的逻辑\n\n#include <fl_shading_lit>\n\n\n\n#include <fl_main>\n\n";
	var vertSource = "#define SHADER_NAME standard_vertex\n\n\n\n    attribute vec3 aPosition;\n\n#ifdef IS_LINE_EXTRUSION\n\n    #define EXTRUDE_SCALE 63.0;\n\n    attribute vec2 aExtrude;\n\n    uniform float lineWidth;\n\n    uniform float lineHeight;\n\n    uniform float linePixelScale;\n\n#endif\n\n#ifdef HAS_ATTRIBUTE_TANGENTS\n\n    #ifndef HAS_ATTRIBUTE_NORMALS\n\n    attribute vec4 aTangent;\n\n    #else\n\n    attribute vec3 aNormal;\n\n    #endif\n\n#endif\n\n#ifdef HAS_COLOR\n\n    attribute vec3 aColor;\n\n#endif\n\n\n\n\n\n#if defined(HAS_ATTRIBUTE_UV0)\n\n    attribute vec2 aTexCoord0;\n\n    uniform vec2 uvScale;\n\n    uniform vec2 uvOffset;\n\n#endif\n\n#if defined(HAS_ATTRIBUTE_UV1)\n\n    attribute vec2 aTexCoord1;\n\n#endif\n\n\n\n    uniform mat3 normalMatrix;\n\n    uniform mat4 modelMatrix;\n\n    uniform mat4 modelViewMatrix;\n\n    uniform mat4 projViewMatrix;\n\n    uniform mat4 projViewModelMatrix;\n\n\n\n#include <fl_uniforms_glsl>\n\n#include <fl_inputs_vert>\n\n\n\n    struct ObjectUniforms {\n\n        mat4 worldFromModelMatrix;\n\n        mat3 worldFromModelNormalMatrix;\n\n    } objectUniforms;\n\n\n\n    vec4 computeWorldPosition() {\n\n        return modelMatrix * mesh_position;\n\n    }\n\n\n\n#include <fl_material_inputs_vert>\n\n#include <fl_common_math_glsl>\n\n\n\n#ifdef HAS_SHADOWING\n\n    #include <vsm_shadow_vert>\n\n#endif\n\n\n\n    void initMeshPosition() {\n\n        #ifdef IS_LINE_EXTRUSION\n\n            float halfwidth = lineWidth / 2.0;\n\n            float outset = halfwidth;\n\n            vec2 dist = outset * aExtrude / EXTRUDE_SCALE;\n\n            //linePixelScale = tileRatio * resolution / tileResolution\n\n            mesh_position = vec4(aPosition + vec3(dist, 0.0) * linePixelScale, 1.0);\n\n        #else\n\n            mesh_position = vec4(aPosition, 1.0);\n\n        #endif\n\n    }\n\n\n\n    void initAttributes() {\n\n        initMeshPosition();\n\n        #if defined(MATERIAL_HAS_ANISOTROPY) || defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n            mesh_tangents = aTangent;\n\n        #endif\n\n        #if defined(HAS_ATTRIBUTE_COLOR)\n\n            mesh_color = vec4(aColor, 1.0);\n\n        #endif\n\n        #if defined(HAS_ATTRIBUTE_UV0)\n\n            mesh_uv0 = (aTexCoord0 + uvOffset) * uvScale;\n\n        #endif\n\n        #if defined(HAS_ATTRIBUTE_UV1)\n\n            mesh_uv1 = aTexCoord1;\n\n        #endif\n\n\n\n        //TODO SKINNING的相关属性\n\n        // mesh_bone_indices // vec4\n\n        // mesh_bone_weights // vec4\n\n    }\n\n\n\n    void initObjectUniforms() {\n\n        objectUniforms.worldFromModelMatrix = modelMatrix;\n\n        objectUniforms.worldFromModelNormalMatrix = normalMatrix;\n\n    }\n\n\n\n    void initTangents(inout MaterialVertexInputs material) {\n\n        #if defined(HAS_ATTRIBUTE_TANGENTS)\n\n            // If the material defines a value for the \"normal\" property, we need to output\n\n            // the full orthonormal basis to apply normal mapping\n\n            #if defined(MATERIAL_HAS_ANISOTROPY) || defined(MATERIAL_HAS_NORMAL) || defined(MATERIAL_HAS_CLEAR_COAT_NORMAL)\n\n                // Extract the normal and tangent in world space from the input quaternion\n\n                // We encode the orthonormal basis as a quaternion to save space in the attributes\n\n                toTangentFrame(mesh_tangents, material.worldNormal, vertex_worldTangent);\n\n\n\n                #if defined(HAS_SKINNING)\n\n                    skinNormal(material.worldNormal, mesh_bone_indices, mesh_bone_weights);\n\n                    skinNormal(vertex_worldTangent, mesh_bone_indices, mesh_bone_weights);\n\n                #endif\n\n\n\n                // We don't need to normalize here, even if there's a scale in the matrix\n\n                // because we ensure the worldFromModelNormalMatrix pre-scales the normal such that\n\n                // all its components are < 1.0. This precents the bitangent to exceed the range of fp16\n\n                // in the fragment shader, where we renormalize after interpolation\n\n                vertex_worldTangent = objectUniforms.worldFromModelNormalMatrix * vertex_worldTangent;\n\n                material.worldNormal = objectUniforms.worldFromModelNormalMatrix * material.worldNormal;\n\n\n\n                // Reconstruct the bitangent from the normal and tangent. We don't bother with\n\n                // normalization here since we'll do it after interpolation in the fragment stage\n\n                vertex_worldBitangent =\n\n                        cross(material.worldNormal, vertex_worldTangent) * sign(mesh_tangents.w);\n\n            #else\n\n                #if defined(HAS_ATTRIBUTE_NORMALS)\n\n                    material.worldNormal = aNormal;\n\n                #else\n\n                    // Without anisotropy or normal mapping we only need the normal vector\n\n                    toTangentFrame(mesh_tangents, material.worldNormal);\n\n                #endif\n\n                material.worldNormal = objectUniforms.worldFromModelNormalMatrix * material.worldNormal;\n\n                #if defined(HAS_SKINNING)\n\n                    skinNormal(material.worldNormal, mesh_bone_indices, mesh_bone_weights);\n\n                #endif\n\n            #endif\n\n        #endif\n\n    }\n\n    #ifdef USE_INSTANCE\n\n        #include <invert_vert>\n\n        #include <instance_vert>\n\n        varying vec4 vInstanceColor;\n\n    #endif\n\n\n\n    #ifdef USE_SKIN\n\n        #include <invert_vert>\n\n        #include <skin_vert>\n\n    #endif\n\n    void main()\n\n    {\n\n        initAttributes();\n\n        initFrameUniforms();\n\n        initObjectUniforms();\n\n        MaterialVertexInputs material;\n\n        initMaterialVertex(material);\n\n        initTangents(material);\n\n\n\n         // Handle built-in interpolated attributes\n\n        #if defined(HAS_ATTRIBUTE_COLOR)\n\n            vertex_color = material.color;\n\n        #endif\n\n        #if defined(HAS_ATTRIBUTE_UV0)\n\n            vertex_uv01.xy = material.uv0;\n\n        #endif\n\n        #if defined(HAS_ATTRIBUTE_UV1)\n\n            vertex_uv01.zw = material.uv1;\n\n        #endif\n\n\n\n\n\n            // The world position can be changed by the user in materialVertex()\n\n            vertex_worldPosition = material.worldPosition.xyz;\n\n        #ifdef HAS_ATTRIBUTE_TANGENTS\n\n            vertex_worldNormal = material.worldNormal;\n\n        #endif\n\n\n\n\n\n        #ifdef USE_INSTANCE\n\n            mat4 attributeMatrix = instance_getAttributeMatrix();\n\n            #ifdef USE_SKIN\n\n                mat4 worldMatrix = attributeMatrix * skin_getSkinMatrix();\n\n                mat4 pvmMatrix = projViewMatrix * worldMatrix;\n\n            #else\n\n                mat4 pvmMatrix = projViewMatrix * attributeMatrix;\n\n            #endif\n\n            gl_Position = = pvmMatrix * mesh_position;\n\n        #else\n\n            #ifdef USE_SKIN\n\n                mat4 worldMatrix =  modelMatrix * skin_getSkinMatrix();\n\n                gl_Position = projViewMatrix * worldMatrix * mesh_position;\n\n            #else\n\n                gl_Position = projViewModelMatrix * mesh_position;\n\n            #endif\n\n        #endif\n\n        // gl_Position =  projViewModelMatrix * mesh_position;\n\n\n\n        #ifdef HAS_SHADOWING\n\n            shadow_computeShadowPars(mesh_position);\n\n        #endif\n\n    }\n\n\n\n    //------------------------------------------------------------------------------\n\n    // Shadowing\n\n    //------------------------------------------------------------------------------\n\n\n\n    // #if defined(HAS_SHADOWING) && defined(HAS_DIRECTIONAL_LIGHTING)\n\n    //\n\n    // vec4 getLightSpacePosition(const vec3 p, const vec3 n) {\n\n    //     float NoL = saturate(dot(n, frameUniforms.lightDirection));\n\n\n\n    // #ifdef TARGET_MOBILE\n\n    //     float normalBias = 1.0 - NoL * NoL;\n\n    // #else\n\n    //     float normalBias = sqrt(1.0 - NoL * NoL);\n\n    // #endif\n\n\n\n    //     vec3 offsetPosition = p + n * (normalBias * frameUniforms.shadowBias.y);\n\n    //     vec4 lightSpacePosition = (getLightFromWorldMatrix() * vec4(offsetPosition, 1.0));\n\n    //     lightSpacePosition.z -= frameUniforms.shadowBias.x;\n\n\n\n    //     return lightSpacePosition;\n\n    // }\n\n    // #endif\n\n\n\n";

	var StandardShader = function (_MeshShader3) {
	  _inheritsLoose(StandardShader, _MeshShader3);

	  function StandardShader(config, frag, materialUniforms) {
	    var _this9;

	    if (config === void 0) {
	      config = {};
	    }

	    var extraCommandProps = config.extraCommandProps || {};
	    var positionAttribute = config.positionAttribute || 'aPosition';
	    var normalAttribute = config.normalAttribute || 'aNormal';
	    var tangentAttribute = config.tangentAttribute || 'aTangent';
	    var colorAttribute = config.colorAttribute || 'aColor';
	    var uv0Attribute = config.uv0Attribute || 'aTexCoord0';
	    var uv1Attribute = config.uv1Attribute || 'aTexCoord1';
	    extraCommandProps = extend({}, extraCommandProps, {
	      blend: {
	        enable: true,
	        func: {
	          src: 'one',
	          dst: 'one minus src alpha'
	        },
	        equation: 'add'
	      },
	      sample: {
	        alpha: true
	      }
	    });
	    var vert = vertSource;

	    if (positionAttribute !== 'aPosition') {
	      vert = vert.replace(/aPosition/g, positionAttribute);
	    }

	    if (normalAttribute !== 'aNormal') {
	      vert = vert.replace(/aNormal/g, normalAttribute);
	    }

	    if (tangentAttribute !== 'aTangent') {
	      vert = vert.replace(/aTangent/g, tangentAttribute);
	    }

	    if (colorAttribute !== 'aColor') {
	      vert = vert.replace(/aColor/g, colorAttribute);
	    }

	    if (uv0Attribute !== 'aTexCoord0') {
	      vert = vert.replace(/aTexCoord0/g, uv0Attribute);
	    }

	    if (uv1Attribute !== 'aTexCoord1') {
	      vert = vert.replace(/aTexCoord1/g, uv1Attribute);
	    }

	    _this9 = _MeshShader3.call(this, {
	      vert: vert,
	      frag: frag,
	      uniforms: [{
	        name: 'normalMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          return fromMat4([], props['modelMatrix']);
	        }
	      }, 'modelMatrix', {
	        name: 'projViewModelMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          return multiply$3([], props['projViewMatrix'], props['modelMatrix']);
	        }
	      }, {
	        name: 'modelViewMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          return multiply$3([], props['viewMatrix'], props['modelMatrix']);
	        }
	      }, 'uvScale', 'uvOffset', 'resolution', 'cameraPosition', 'time', 'lightColorIntensity', 'sun', 'lightDirection', 'iblLuminance', 'exposure', 'ev100', 'light_iblDFG', 'light_iblSpecular', 'iblSH[9]', 'iblMaxMipLevel', 'projViewMatrix'].concat(materialUniforms).concat(config.uniforms || []),
	      extraCommandProps: extraCommandProps,
	      defines: config.defines
	    }) || this;
	    _this9.positionAttribute = positionAttribute;
	    _this9.normalAttribute = normalAttribute;
	    _this9.tangentAttribute = tangentAttribute;
	    _this9.colorAttribute = colorAttribute;
	    _this9.uv0Attribute = uv0Attribute;
	    _this9.uv1Attribute = uv1Attribute;
	    return _this9;
	  }

	  var _proto16 = StandardShader.prototype;

	  _proto16.getGeometryDefines = function getGeometryDefines(geometry) {
	    var defines = {};

	    if (geometry.data[this.tangentAttribute] || geometry.data[this.normalAttribute]) {
	      defines['HAS_ATTRIBUTE_TANGENTS'] = 1;

	      if (!geometry.data[this.tangentAttribute]) {
	        defines['HAS_ATTRIBUTE_NORMALS'] = 1;
	      }
	    }

	    if (geometry.data[this.colorAttribute]) {
	      defines['HAS_COLOR'] = 1;
	      defines['HAS_ATTRIBUTE_COLOR'] = 1;
	    }

	    if (geometry.data[this.uv0Attribute]) {
	      defines['HAS_ATTRIBUTE_UV0'] = 1;
	    }

	    if (geometry.data[this.uv1Attribute]) {
	      defines['HAS_ATTRIBUTE_UV1'] = 1;
	    }

	    return defines;
	  };

	  return StandardShader;
	}(MeshShader);

	var UNIFORMS = ['material.baseColorTexture', 'material.baseColorFactor', 'material.metallicRoughnessTexture', 'material.metallicFactor', 'material.roughnessFactor', 'material.occlusionTexture', 'material.occlusion', 'material.occlusionStrength', 'material.emissiveTexture', 'material.emissiveFactor', 'material.postLightingColor', 'material.reflectance', 'material.clearCoat', 'material.clearCoatRoughnessTexture', 'material.clearCoatRoughness', 'material.clearCoatNormalTexture', 'material.anisotropy', 'material.anisotropyDirection', 'material.normalTexture'];

	var LitShader = function (_StandardShader) {
	  _inheritsLoose(LitShader, _StandardShader);

	  function LitShader(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    return _StandardShader.call(this, config, litFrag, UNIFORMS) || this;
	  }

	  return LitShader;
	}(StandardShader);

	var DEFAULT_UNIFORMS$1 = {
	  baseColorTexture: null,
	  baseColorFactor: [1, 1, 1, 1],
	  metallicRoughnessTexture: null,
	  roughnessFactor: 1,
	  occlusionTexture: null,
	  occlusion: 0,
	  occlusionStrength: 1,
	  normalTexture: null,
	  normalStrength: 1,
	  emissiveTexture: null,
	  emissiveFactor: [0, 0, 0, 0],
	  postLightingColor: [0, 0, 0, 0],
	  HAS_TONE_MAPPING: 1,
	  sheenColor: [-1, -1, -1],
	  subsurfaceColor: undefined,
	  uvScale: [1, 1],
	  uvOffset: [0, 0]
	};

	var ClothMaterial = function (_Material$4) {
	  _inheritsLoose(ClothMaterial, _Material$4);

	  function ClothMaterial(uniforms) {
	    return _Material$4.call(this, uniforms, DEFAULT_UNIFORMS$1) || this;
	  }

	  var _proto17 = ClothMaterial.prototype;

	  _proto17.createDefines = function createDefines() {
	    var uniforms = this.uniforms;
	    var defines = {
	      'SHADING_MODEL_CLOTH': 1
	    };

	    if (uniforms['baseColorTexture']) {
	      defines['MATERIAL_HAS_BASECOLOR_MAP'] = 1;
	    }

	    if (uniforms['metallicRoughnessTexture']) {
	      defines['MATERIAL_HAS_METALLICROUGHNESS_MAP'] = 1;
	    }

	    if (uniforms['occlusionTexture']) {
	      defines['MATERIAL_HAS_AO_MAP'] = 1;
	      defines['MATERIAL_HAS_AMBIENT_OCCLUSION'] = 1;
	    }

	    if (uniforms['emissiveTexture']) {
	      defines['MATERIAL_HAS_EMISSIVE_MAP'] = 1;
	      defines['MATERIAL_HAS_EMISSIVE'] = 1;
	    }

	    if (uniforms['normalTexture']) {
	      defines['MATERIAL_HAS_NORMAL'] = 1;
	    }

	    if (uniforms['postLightingColor']) {
	      defines['MATERIAL_HAS_POST_LIGHTING_COLOR'] = 1;
	    }

	    if (defines['MATERIAL_HAS_BASECOLOR_MAP'] || defines['MATERIAL_HAS_METALLICROUGHNESS_MAP'] || defines['MATERIAL_HAS_METMATERIAL_HAS_AO_MAPALLICROUGHNESS_MAP'] || defines['MATERIAL_HAS_EMISSIVE_MAP']) {
	      defines['MATERIAL_HAS_MAP'] = 1;
	    }

	    if (uniforms['HAS_TONE_MAPPING']) {
	      defines['HAS_TONE_MAPPING'] = 1;
	    }

	    if (uniforms['subsurfaceColor'] !== undefined) {
	      defines['MATERIAL_HAS_SUBSURFACE_COLOR'] = 1;
	    }

	    return defines;
	  };

	  _proto17.getUniforms = function getUniforms(regl) {
	    var uniforms = _Material$4.prototype.getUniforms.call(this, regl);

	    return {
	      material: uniforms,
	      uvScale: uniforms.uvScale,
	      uvOffset: uniforms.uvOffset
	    };
	  };

	  return ClothMaterial;
	}(Material$1);

	var clothFrag = "#include <fl_header_frag>\n\n\n\n#if defined(HAS_SHADOWING)\n\n#include <vsm_shadow_frag>\n\n#endif\n\n\n\n//webgl 2.0中的函数实现\n\n#include <fl_common_math_glsl>\n\n#include <fl_common_graphics_glsl>\n\n//initialize frameUniforms\n\n#include <fl_uniforms_glsl>\n\n//varyings\n\n#include <fl_inputs_frag>\n\n//brdf functions\n\n#include <fl_brdf_frag>\n\n//MaterialInputs结构定义\n\n//mapatalksgl的Material => MaterialInputs\n\n#include <fl_common_shading_frag>\n\n#include <fl_getters_frag>\n\n#include <fl_material_inputs_frag>\n\n#include <fl_common_material_frag>\n\n//构造各类shading_*的值\n\n#include <fl_shading_params>\n\n//PixelParams结构定义\n\n#include <fl_common_lighting_frag>\n\n\n\n#include <fl_material_uniforms_frag>\n\n//初始化light相关的uniforms，如light_iblDFG等\n\n#include <fl_light_uniforms_frag>\n\n\n\n#include <fl_ambient_occlusion_frag>\n\n//IBL灯光的计算逻辑\n\n#include <fl_light_indirect>\n\n#include <fl_shading_model_cloth_frag>\n\n//有向光的计算逻辑\n\n#include <fl_light_directional>\n\n\n\n//lit材质的逻辑\n\n#include <fl_shading_lit>\n\n\n\n#include <fl_main>\n\n";
	var UNIFORMS$1 = ['material.baseColorTexture', 'material.baseColorFactor', 'material.metallicRoughnessTexture', 'material.roughnessFactor', 'material.occlusionTexture', 'material.occlusion', 'material.occlusionStrength', 'material.emissiveTexture', 'material.emissiveFactor', 'material.postLightingColor', 'material.normalTexture', 'material.sheenColor', 'material.subsurfaceColor'];

	var ClothShader = function (_StandardShader2) {
	  _inheritsLoose(ClothShader, _StandardShader2);

	  function ClothShader(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    return _StandardShader2.call(this, config, clothFrag, UNIFORMS$1) || this;
	  }

	  return ClothShader;
	}(StandardShader);

	var DEFAULT_UNIFORMS$2 = {
	  baseColorTexture: null,
	  baseColorFactor: [1, 1, 1, 1],
	  metallicRoughnessTexture: null,
	  roughnessFactor: 1,
	  occlusionTexture: null,
	  occlusion: 0,
	  occlusionStrength: 1,
	  normalTexture: null,
	  normalStrength: 1,
	  emissiveTexture: null,
	  emissiveFactor: [0, 0, 0, 0],
	  postLightingColor: [0, 0, 0, 0],
	  HAS_TONE_MAPPING: 1,
	  thickness: 0.5,
	  subsurfacePower: 12.234,
	  subsurfaceColor: [1, 1, 1],
	  uvScale: [1, 1],
	  uvOffset: [0, 0]
	};

	var ClothMaterial$1 = function (_Material$5) {
	  _inheritsLoose(ClothMaterial$1, _Material$5);

	  function ClothMaterial$1(uniforms) {
	    return _Material$5.call(this, uniforms, DEFAULT_UNIFORMS$2) || this;
	  }

	  var _proto18 = ClothMaterial$1.prototype;

	  _proto18.createDefines = function createDefines() {
	    var uniforms = this.uniforms;
	    var defines = {
	      'SHADING_MODEL_SUBSURFACE': 1,
	      'BLEND_MODE_TRANSPARENT': 1
	    };

	    if (uniforms['baseColorTexture']) {
	      defines['MATERIAL_HAS_BASECOLOR_MAP'] = 1;
	    }

	    if (uniforms['metallicRoughnessTexture']) {
	      defines['MATERIAL_HAS_METALLICROUGHNESS_MAP'] = 1;
	    }

	    if (uniforms['occlusionTexture']) {
	      defines['MATERIAL_HAS_AO_MAP'] = 1;
	      defines['MATERIAL_HAS_AMBIENT_OCCLUSION'] = 1;
	    }

	    if (uniforms['emissiveTexture']) {
	      defines['MATERIAL_HAS_EMISSIVE_MAP'] = 1;
	      defines['MATERIAL_HAS_EMISSIVE'] = 1;
	    }

	    if (uniforms['normalTexture']) {
	      defines['MATERIAL_HAS_NORMAL'] = 1;
	    }

	    if (uniforms['postLightingColor']) {
	      defines['MATERIAL_HAS_POST_LIGHTING_COLOR'] = 1;
	    }

	    if (defines['MATERIAL_HAS_BASECOLOR_MAP'] || defines['MATERIAL_HAS_METALLICROUGHNESS_MAP'] || defines['MATERIAL_HAS_METMATERIAL_HAS_AO_MAPALLICROUGHNESS_MAP'] || defines['MATERIAL_HAS_EMISSIVE_MAP']) {
	      defines['MATERIAL_HAS_MAP'] = 1;
	    }

	    if (uniforms['HAS_TONE_MAPPING']) {
	      defines['HAS_TONE_MAPPING'] = 1;
	    }

	    return defines;
	  };

	  _proto18.getUniforms = function getUniforms(regl) {
	    var uniforms = _Material$5.prototype.getUniforms.call(this, regl);

	    return {
	      material: uniforms,
	      uvScale: uniforms.uvScale,
	      uvOffset: uniforms.uvOffset
	    };
	  };

	  return ClothMaterial$1;
	}(Material$1);

	var subsurfaceFrag = "#include <fl_header_frag>\n\n\n\n#if defined(HAS_SHADOWING)\n\n#include <vsm_shadow_frag>\n\n#endif\n\n\n\n//webgl 2.0中的函数实现\n\n#include <fl_common_math_glsl>\n\n#include <fl_common_graphics_glsl>\n\n//initialize frameUniforms\n\n#include <fl_uniforms_glsl>\n\n//varyings\n\n#include <fl_inputs_frag>\n\n//brdf functions\n\n#include <fl_brdf_frag>\n\n//MaterialInputs结构定义\n\n//mapatalksgl的Material => MaterialInputs\n\n#include <fl_common_shading_frag>\n\n#include <fl_getters_frag>\n\n#include <fl_material_inputs_frag>\n\n#include <fl_common_material_frag>\n\n#include <fl_shading_params>\n\n//PixelParams结构定义\n\n#include <fl_common_lighting_frag>\n\n\n\n#include <fl_material_uniforms_frag>\n\n//初始化light相关的uniforms，如light_iblDFG等\n\n#include <fl_light_uniforms_frag>\n\n\n\n#include <fl_ambient_occlusion_frag>\n\n//IBL灯光的计算逻辑\n\n#include <fl_light_indirect>\n\n#include <fl_shading_model_subsurface_frag>\n\n//有向光的计算逻辑\n\n#include <fl_light_directional>\n\n\n\n//lit材质的逻辑\n\n#include <fl_shading_lit>\n\n\n\n#include <fl_main>\n\n";
	var UNIFORMS$2 = ['material.baseColorTexture', 'material.baseColorFactor', 'material.metallicRoughnessTexture', 'material.roughnessFactor', 'material.occlusionTexture', 'material.occlusion', 'material.occlusionStrength', 'material.emissiveTexture', 'material.emissiveFactor', 'material.postLightingColor', 'material.normalTexture', 'material.thickness', 'material.subsurfacePower', 'material.subsurfaceColor'];

	var ClothShader$1 = function (_StandardShader3) {
	  _inheritsLoose(ClothShader$1, _StandardShader3);

	  function ClothShader$1(config) {
	    if (config === void 0) {
	      config = {};
	    }

	    return _StandardShader3.call(this, config, subsurfaceFrag, UNIFORMS$2) || this;
	  }

	  return ClothShader$1;
	}(StandardShader);

	var vsmFrag = "#define SHADER_NAME vsm_mapping\n\n// #extension GL_OES_standard_derivatives : enable\n\n\n\n// precision mediump float;\n\n\n\n// varying vec4 vPosition;\n\n\n\n//VSM\n\nvoid main()\n\n{\n\n    // float depth = gl_FragCoord.z;//vPosition.z / vPosition.w;\n\n    // depth = depth * 0.5 + 0.5;\n\n    // float moment1 = depth;\n\n    // float moment2 = depth * depth;\n\n\n\n    // // Adjusting moments using partial derivative\n\n    // float dx = dFdx(depth);\n\n    // float dy = dFdy(depth);\n\n    // // Resovle shadow acne\n\n    // moment2 += 0.25 * (dx * dx + dy * dy);\n\n    // gl_FragColor = vec4(moment1, moment2, depth, 0.0);\n\n\n\n    gl_FragColor = vec4(gl_FragCoord.z, 0.0, 0.0, 1.0);\n\n}\n\n";
	var vsmVert = "attribute vec3 aPosition;\n\n\n\nuniform mat4 lightProjViewModelMatrix;\n\n\n\nvarying vec4 vPosition;\n\n\n\nvoid main()\n\n{\n\n    gl_Position = lightProjViewModelMatrix * vec4(aPosition, 1.);\n\n    vPosition = gl_Position;\n\n}\n\n";

	var ShadowMapShader = function (_MeshShader4) {
	  _inheritsLoose(ShadowMapShader, _MeshShader4);

	  function ShadowMapShader() {
	    return _MeshShader4.call(this, {
	      vert: vsmVert,
	      frag: vsmFrag,
	      uniforms: [{
	        name: 'lightProjViewModelMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          return multiply$3([], props['lightProjViewMatrix'], props['modelMatrix']);
	        }
	      }],
	      extraCommandProps: {}
	    }) || this;
	  }

	  var _proto19 = ShadowMapShader.prototype;

	  _proto19.filter = function filter(mesh) {
	    return mesh.castShadow;
	  };

	  _proto19.getMeshCommand = function getMeshCommand(regl, mesh) {
	    if (!this.commands['shadowmap']) {
	      this.commands['shadowmap'] = this.createREGLCommand(regl, null, mesh.getAttributes(), null, mesh.getElements());
	    }

	    return this.commands['shadowmap'];
	  };

	  return ShadowMapShader;
	}(MeshShader);

	var boxBlurFrag = "precision mediump float;\n\n\n\nvarying vec2 vTexCoord;\n\n\n\nuniform sampler2D textureSource;\n\nuniform vec2 textureSize;\n\n\n\nvoid main()\n\n{\n\n    float c = 0.0;\n\n    for (int x = -BOXBLUR_OFFSET; x <= BOXBLUR_OFFSET; ++x)\n\n    for (int y = -BOXBLUR_OFFSET; y <= BOXBLUR_OFFSET; ++y)\n\n	{\n\n        c += texture2D(textureSource, vTexCoord.st + vec2(float(x) / textureSize.x, float(y) / textureSize.y)).r;\n\n	}\n\n    float color = c / float((2 * BOXBLUR_OFFSET + 1) * (2 * BOXBLUR_OFFSET + 1));\n\n    gl_FragColor = vec4(color, 0.0, 0.0, 1.0);\n\n}\n\n";
	var boxBlurVert = "attribute vec3 aPosition;\n\nattribute vec2 aTexCoord;\n\n\n\nvarying vec2 vTexCoord;\n\n\n\nvoid main()\n\n{\n\n  gl_Position = vec4(aPosition, 1.);\n\n  vTexCoord = aTexCoord;\n\n}\n\n";
	var quadVertices$1 = new Float32Array([-1.0, 1.0, 0.0, -1.0, -1.0, 0.0, 1.0, 1.0, 0.0, 1.0, -1.0, 0.0]);
	var quadTexcoords$1 = new Float32Array([0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0]);

	var QuadShader = function (_MeshShader5) {
	  _inheritsLoose(QuadShader, _MeshShader5);

	  function QuadShader() {
	    return _MeshShader5.apply(this, arguments) || this;
	  }

	  var _proto20 = QuadShader.prototype;

	  _proto20.draw = function draw(regl) {
	    if (!this._quadMesh) {
	      this._createQuadMesh(regl);
	    }

	    return _MeshShader5.prototype.draw.call(this, regl, this._quadMesh);
	  };

	  _proto20.getMeshCommand = function getMeshCommand(regl) {
	    if (!this.commands['quad']) {
	      this.commands['quad'] = this.createREGLCommand(regl, null, this._quadMesh[0].getAttributes(), null, this._quadMesh[0].getElements());
	    }

	    return this.commands['quad'];
	  };

	  _proto20._createQuadMesh = function _createQuadMesh(regl) {
	    var geometry = new Geometry({
	      aPosition: quadVertices$1,
	      aTexCoord: quadTexcoords$1
	    }, null, quadVertices$1.length / 3, {
	      primitive: 'triangle strip'
	    });
	    geometry.generateBuffers(regl);
	    this._quadMesh = [new Mesh(geometry)];
	  };

	  _proto20.dispose = function dispose() {
	    if (this._quadMesh) {
	      var mesh = this._quadMesh[0];
	      mesh.geometry.dispose();
	      mesh.dispose();
	    }

	    delete this._quadMesh;
	    return _MeshShader5.prototype.dispose.call(this);
	  };

	  return QuadShader;
	}(MeshShader);

	var BoxBlurShader = function (_QuadShader) {
	  _inheritsLoose(BoxBlurShader, _QuadShader);

	  function BoxBlurShader(_ref4) {
	    var blurOffset = _ref4.blurOffset;
	    return _QuadShader.call(this, {
	      vert: boxBlurVert,
	      frag: boxBlurFrag,
	      uniforms: ['textureSource', 'textureSize'],
	      defines: {
	        'BOXBLUR_OFFSET': blurOffset || 2
	      }
	    }) || this;
	  }

	  var _proto21 = BoxBlurShader.prototype;

	  _proto21.getMeshCommand = function getMeshCommand(regl, mesh) {
	    if (!this.commands['shadow']) {
	      this.commands['shadow'] = this.createREGLCommand(regl, null, mesh.getAttributes(), null, mesh.getElements());
	    }

	    return this.commands['shadow'];
	  };

	  return BoxBlurShader;
	}(QuadShader);

	var getFrustumWorldSpace, getDirLightCameraProjView;

	var ShadowPass = function () {
	  function ShadowPass(renderer, _ref5) {
	    var width = _ref5.width,
	        height = _ref5.height,
	        blurOffset = _ref5.blurOffset;
	    this.renderer = renderer;
	    this.width = width || 512;
	    this.height = height || 512;
	    this.blurOffset = isNil(blurOffset) ? 2 : blurOffset;

	    this._init();
	  }

	  var _proto22 = ShadowPass.prototype;

	  _proto22.render = function render(scene, _ref6) {
	    var cameraProjViewMatrix = _ref6.cameraProjViewMatrix,
	        lightDir = _ref6.lightDir,
	        farPlane = _ref6.farPlane;

	    if (!this.isSupported()) {
	      return null;
	    }

	    var lightProjViewMatrix = this._renderShadow(scene, cameraProjViewMatrix, lightDir, farPlane);

	    return {
	      lightProjViewMatrix: lightProjViewMatrix,
	      shadowMap: this.blurTex || this.depthTex,
	      depthFBO: this.depthFBO,
	      blurFBO: this.blurFBO
	    };
	  };

	  _proto22.resize = function resize(width, height) {
	    if (this.depthTex) {
	      this.depthTex.resize(width, height);
	      this.depthFBO.resize(width, height);
	    }

	    if (this.blurFBO) {
	      this.blurTex.resize(width, height);
	      this.blurFBO.resize(width, height);
	    }

	    return this;
	  };

	  _proto22.isSupported = function isSupported() {
	    return this._supported;
	  };

	  _proto22._renderShadow = function _renderShadow(scene, cameraProjViewMatrix, lightDir, farPlane) {
	    var renderer = this.renderer;

	    if (!this.vsmShader) {
	      this.vsmShader = new ShadowMapShader();
	    }

	    var frustum$$1 = getFrustumWorldSpace(cameraProjViewMatrix);

	    if (farPlane) {
	      for (var i = 4; i < 8; i++) {
	        frustum$$1[i] = farPlane[i - 4];
	      }
	    }

	    var lightProjViewMatrix = getDirLightCameraProjView(frustum$$1, lightDir);
	    renderer.clear({
	      color: [0, 0, 0, 1],
	      depth: 1,
	      framebuffer: this.depthFBO
	    });
	    renderer.render(this.vsmShader, {
	      lightProjViewMatrix: lightProjViewMatrix
	    }, scene, this.depthFBO);

	    if (this.blurFBO) {
	      if (!this.boxBlurShader) {
	        this.boxBlurShader = new BoxBlurShader({
	          blurOffset: this.blurOffset
	        });
	      }

	      renderer.clear({
	        color: [0, 0, 0, 1],
	        depth: 1,
	        framebuffer: this.blurFBO
	      });
	      renderer.render(this.boxBlurShader, {
	        textureSize: [this.depthTex.width, this.depthTex.height],
	        textureSource: this.depthTex
	      }, null, this.blurFBO);
	    }

	    return lightProjViewMatrix;
	  };

	  _proto22._init = function _init() {
	    var regl = this.renderer.regl;
	    this._supported = regl.hasExtension('oes_texture_float_linear');

	    if (!this.isSupported()) {
	      console.warn('WebGL oes_texture_float_linear extension is not supported, shadow rendering is disabled.');
	      return;
	    }

	    var width = this.width,
	        height = this.height;
	    this.depthTex = regl.texture({
	      width: width,
	      height: height,
	      format: 'rgb',
	      type: 'float',
	      min: 'linear',
	      mag: 'linear'
	    });
	    this.depthFBO = regl.framebuffer({
	      color: this.depthTex
	    });

	    if (this.blurOffset <= 0) {
	      return;
	    }

	    this.blurTex = regl.texture({
	      width: width,
	      height: height,
	      format: 'rgb',
	      type: 'float',
	      min: 'linear',
	      mag: 'linear'
	    });
	    this.blurFBO = regl.framebuffer({
	      color: this.blurTex
	    });
	  };

	  _proto22.dispose = function dispose() {
	    if (this.depthTex) {
	      this.depthTex.destroy();
	      this.depthFBO.destroy();
	      delete this.depthTex;
	      delete this.depthFBO;
	    }

	    if (this.blurTex) {
	      this.blurTex.destroy();
	      this.blurFBO.destroy();
	      delete this.blurTex;
	      delete this.blurFBO;
	    }

	    if (this.vsmShader) {
	      this.vsmShader.dispose();
	      delete this.vsmShader;
	    }

	    if (this.boxBlurShader) {
	      this.boxBlurShader.dispose();
	      delete this.boxBlurShader;
	    }
	  };

	  return ShadowPass;
	}();

	getFrustumWorldSpace = function () {
	  var clipPlanes = [[-1, -1, -1, 1], [1, -1, -1, 1], [1, 1, -1, 1], [-1, 1, -1, 1], [-1, -1, 1, 1], [1, -1, 1, 1], [1, 1, 1, 1], [-1, 1, 1, 1]];
	  var inverseProjectionMatrix = new Array(16);
	  return function (cameraProjView) {
	    invert$3(inverseProjectionMatrix, cameraProjView);
	    var frustum$$1 = [];

	    for (var i = 0; i < clipPlanes.length; i++) {
	      var projWorldSpacePosition = transformMat4$1([], clipPlanes[i], inverseProjectionMatrix);
	      scale$5(projWorldSpacePosition, projWorldSpacePosition, 1 / projWorldSpacePosition[3]);
	      frustum$$1.push(projWorldSpacePosition);
	    }

	    return frustum$$1;
	  };
	}();

	getDirLightCameraProjView = function () {
	  var transf = new Array(4);
	  var frustumCenter = [0, 0, 0, 0];
	  var cameraUp = [0, 1, 0];
	  var v3 = new Array(3);
	  var lvMatrix = new Array(16);
	  var lpMatrix = new Array(16);
	  var cropMatrix = new Array(16);
	  var scaleV = [1, 1, 1];
	  var offsetV = [0, 0, 0];
	  return function (frustum$$1, lightDir) {
	    scale$5(frustumCenter, frustumCenter, 0);

	    for (var i = 4; i < frustum$$1.length; i++) {
	      add$5(frustumCenter, frustumCenter, frustum$$1[i]);
	    }

	    scale$5(frustumCenter, frustumCenter, 1 / 4);
	    lvMatrix = lookAt(lvMatrix, add$4(v3, frustumCenter, normalize(v3, lightDir)), frustumCenter, cameraUp);
	    transformMat4$1(transf, frustum$$1[0], lvMatrix);
	    var minZ = transf[2],
	        maxZ = transf[2],
	        minX = transf[0],
	        maxX = transf[0],
	        minY = transf[1],
	        maxY = transf[1];

	    for (var _i5 = 1; _i5 < 8; _i5++) {
	      transf = transformMat4$1(transf, frustum$$1[_i5], lvMatrix);
	      if (transf[2] > maxZ) maxZ = transf[2];
	      if (transf[2] < minZ) minZ = transf[2];
	      if (transf[0] > maxX) maxX = transf[0];
	      if (transf[0] < minX) minX = transf[0];
	      if (transf[1] > maxY) maxY = transf[1];
	      if (transf[1] < minY) minY = transf[1];
	    }

	    lpMatrix = ortho(lpMatrix, -1, 1, -1, 1, -maxZ, -minZ);
	    var scaleX = scaleV[0] = 2 / (maxX - minX);
	    var scaleY = scaleV[1] = -2 / (maxY - minY);
	    offsetV[0] = -0.5 * (minX + maxX) * scaleX;
	    offsetV[1] = -0.5 * (minY + maxY) * scaleY;
	    identity$3(cropMatrix);
	    translate$2(cropMatrix, cropMatrix, offsetV);
	    scale$3(cropMatrix, cropMatrix, scaleV);
	    var projMatrix = multiply$3(lpMatrix, cropMatrix, lpMatrix);
	    return multiply$3(new Array(16), projMatrix, lvMatrix);
	  };
	}();

	var shadowDisplayFrag = "precision mediump float;\n\n\n\nuniform vec3 color;\n\n\n\n#include <vsm_shadow_frag>\n\n\n\nvoid main() {\n\n    float shadow = shadow_computeShadow();\n\n    float alpha = 1.0 - shadow;\n\n	gl_FragColor = vec4(color, alpha);\n\n}\n\n";
	var shadowDisplayVert = "attribute vec3 aPosition;\n\n\n\nuniform mat4 projViewModelMatrix;\n\n\n\nvarying vec4 vPosition;\n\n\n\n#include <vsm_shadow_vert>\n\n\n\nvoid main() {\n\n    vec4 pos = vec4(aPosition, 1.);\n\n\n\n    gl_Position = projViewModelMatrix * pos;\n\n    vPosition = gl_Position;\n\n\n\n    shadow_computeShadowPars(pos);\n\n}\n\n";

	var ShadowDisplayShader = function (_MeshShader6) {
	  _inheritsLoose(ShadowDisplayShader, _MeshShader6);

	  function ShadowDisplayShader(viewport, defines) {
	    return _MeshShader6.call(this, {
	      vert: shadowDisplayVert,
	      frag: shadowDisplayFrag,
	      uniforms: [{
	        name: 'projViewModelMatrix',
	        type: 'function',
	        fn: function fn(context, props) {
	          var projViewModelMatrix = [];
	          multiply$3(projViewModelMatrix, props['viewMatrix'], props['modelMatrix']);
	          multiply$3(projViewModelMatrix, props['projMatrix'], projViewModelMatrix);
	          return projViewModelMatrix;
	        }
	      }, 'vsm_shadow_lightProjViewModelMatrix', 'vsm_shadow_shadowMap', 'vsm_shadow_threshold', 'color', 'vsm_shadow_opacity'],
	      defines: defines || {
	        'USE_ESM': 1
	      },
	      extraCommandProps: {
	        viewport: viewport
	      }
	    }) || this;
	  }

	  var _proto23 = ShadowDisplayShader.prototype;

	  _proto23.getMeshCommand = function getMeshCommand(regl, mesh) {
	    if (!this.commands['shadow_display']) {
	      this.commands['shadow_display'] = this.createREGLCommand(regl, null, mesh.getAttributes(), null, mesh.getElements());
	    }

	    return this.commands['shadow_display'];
	  };

	  return ShadowDisplayShader;
	}(MeshShader);

	function pack3(array) {
	  return array[2] * 256 * 256 + array[1] * 256 + array[0];
	}

	var UINT8_VIEW = new Uint8Array(4);
	var FLOAT_VIEW = new Float32Array(UINT8_VIEW.buffer);

	function packDepth(array) {
	  UINT8_VIEW[0] = array[3];
	  UINT8_VIEW[1] = array[2];
	  UINT8_VIEW[2] = array[1];
	  UINT8_VIEW[3] = array[0];
	  return FLOAT_VIEW[0];
	}

	var unpackFun = "\n    vec3 unpack(highp float f) {\n        highp vec3 color;\n        color.b = floor(f / 65536.0);\n        color.g = floor((f - color.b * 65536.0) / 256.0);\n        color.r = f - floor(color.b * 65536.0) - floor(color.g * 256.0);\n        // now we have a vec3 with the 3 components in range [0..255]. Let's normalize it!\n        return color / 255.0;\n    }\n";
	var frag0 = "\n    precision highp float;\n\n    varying float vPickingId;\n    varying float vFbo_picking_visible;\n\n    uniform float fbo_picking_meshId;\n\n    " + unpackFun + "\n\n    void main() {\n        if (vFbo_picking_visible == 0.0) {\n            discard;\n            return;\n        }\n        gl_FragColor = vec4(unpack(vPickingId), fbo_picking_meshId / 255.0);\n    }\n";
	var frag1 = "\n    precision highp float;\n\n    uniform int fbo_picking_meshId;\n    varying float vFbo_picking_visible;\n\n    " + unpackFun + "\n\n    void main() {\n        if (vFbo_picking_visible == 0.0) {\n            discard;\n            return;\n        }\n        gl_FragColor = vec4(unpack(float(fbo_picking_meshId)), 1.0);\n        // gl_FragColor = vec4(unpack(float(35)), 1.0);\n    }\n";
	var frag2 = "\n    precision highp float;\n\n    varying float vPickingId;\n    varying float vFbo_picking_visible;\n\n    " + unpackFun + "\n\n    void main() {\n        if (vFbo_picking_visible == 0.0) {\n            discard;\n            return;\n        }\n        gl_FragColor = vec4(unpack(vPickingId), 1.0);\n    }\n";
	var depthFrag = "\n    #define SHADER_NAME depth\n    #define FLOAT_MAX  1.70141184e38\n    #define FLOAT_MIN  1.17549435e-38\n\n    precision highp float;\n    varying float vFbo_picking_viewZ;\n\n    lowp vec4 unpack(highp float v) {\n        highp float av = abs(v);\n\n        //Handle special cases\n        if(av < FLOAT_MIN) {\n            return vec4(0.0, 0.0, 0.0, 0.0);\n        } else if(v > FLOAT_MAX) {\n            return vec4(127.0, 128.0, 0.0, 0.0) / 255.0;\n        } else if(v < -FLOAT_MAX) {\n            return vec4(255.0, 128.0, 0.0, 0.0) / 255.0;\n        }\n\n        highp vec4 c = vec4(0,0,0,0);\n\n        //Compute exponent and mantissa\n        highp float e = floor(log2(av));\n        highp float m = av * pow(2.0, -e) - 1.0;\n\n        //Unpack mantissa\n        c[1] = floor(128.0 * m);\n        m -= c[1] / 128.0;\n        c[2] = floor(32768.0 * m);\n        m -= c[2] / 32768.0;\n        c[3] = floor(8388608.0 * m);\n\n        //Unpack exponent\n        highp float ebias = e + 127.0;\n        c[0] = floor(ebias / 2.0);\n        ebias -= c[0] * 2.0;\n        c[1] += floor(ebias) * 128.0;\n\n        //Unpack sign bit\n        c[0] += 128.0 * step(0.0, -v);\n\n        //Scale back to range\n        return c / 255.0;\n    }\n\n    void main() {\n        gl_FragColor = unpack(vFbo_picking_viewZ);\n        // gl_FragColor = unpack(34678.3456789);\n    }\n";

	var FBORayPicking = function () {
	  function FBORayPicking(renderer, _ref7, fbo) {
	    var vert = _ref7.vert,
	        uniforms = _ref7.uniforms,
	        defines = _ref7.defines,
	        extraCommandProps = _ref7.extraCommandProps;
	    this._renderer = renderer;
	    this._fbo = fbo;

	    this._clearFbo(fbo);

	    this._vert = vert;
	    this._uniforms = uniforms;
	    this._defines = defines;
	    this._extraCommandProps = extraCommandProps;
	    this._currentMeshes = [];

	    this._init();
	  }

	  var _proto24 = FBORayPicking.prototype;

	  _proto24._init = function _init() {
	    var uniforms = ['fbo_picking_meshId'];

	    if (this._uniforms) {
	      uniforms.push.apply(uniforms, this._uniforms);
	    }

	    var defines = {
	      'ENABLE_PICKING': 1,
	      'USE_PICKING_ID': 1
	    };

	    if (this._defines) {
	      for (var p in this._defines) {
	        defines[p] = this._defines[p];
	      }
	    }

	    var vert = this._vert,
	        extraCommandProps = this._extraCommandProps;
	    this._shader0 = new MeshShader({
	      vert: vert,
	      frag: frag0,
	      uniforms: uniforms,
	      defines: defines,
	      extraCommandProps: extraCommandProps
	    });
	    this._shader2 = new MeshShader({
	      vert: vert,
	      frag: frag2,
	      uniforms: uniforms,
	      defines: defines,
	      extraCommandProps: extraCommandProps
	    });
	    var defines1 = {
	      'ENABLE_PICKING': 1,
	      'USE_PICKING_ID': 1
	    };

	    if (this._defines) {
	      for (var _p2 in this._defines) {
	        defines1[_p2] = this._defines[_p2];
	      }
	    }

	    this._shader1 = new MeshShader({
	      vert: vert,
	      frag: frag1,
	      uniforms: uniforms,
	      defines: defines1,
	      extraCommandProps: extraCommandProps
	    });
	    this._depthShader = new MeshShader({
	      vert: vert,
	      frag: depthFrag,
	      uniforms: uniforms,
	      defines: defines1,
	      extraCommandProps: extraCommandProps
	    });
	    this._scene = new Scene();
	    this._scene1 = new Scene();
	  };

	  _proto24.filter = function filter() {
	    return true;
	  };

	  _proto24.render = function render(meshes, uniforms, once) {
	    var _this10 = this;

	    if (once === void 0) {
	      once = false;
	    }

	    if (!meshes || !meshes.length) {
	      return this;
	    }

	    var fbo = this._fbo;

	    if (once) {
	      this.clear();
	    }

	    this._scene.setMeshes(meshes);

	    var shader = this._getShader(meshes, once);

	    shader.filter = this.filter;

	    if (this._currentShader && shader !== this._currentShader) {
	      this.clear();
	    }

	    this._currentShader = shader;
	    meshes.forEach(function (m, idx) {
	      m.setUniform('fbo_picking_meshId', idx + _this10._currentMeshes.length);
	    });

	    for (var i = 0; i < meshes.length; i++) {
	      this._currentMeshes.push(meshes[i]);
	    }

	    this._renderer.render(shader, uniforms, this._scene, fbo);

	    return this;
	  };

	  _proto24.pick = function pick(x, y, tolerance, uniforms, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var shader = this._currentShader;
	    var meshes = this._currentMeshes;

	    if (!shader || !meshes || !meshes.length) {
	      return {
	        pickingId: null,
	        meshId: null,
	        point: null
	      };
	    }

	    x = Math.round(x);
	    y = Math.round(y);
	    var fbo = this._fbo;

	    if (x < 0 || x > fbo.width || y < 0 || y > fbo.height) {
	      return {
	        pickingId: null,
	        meshId: null,
	        point: null
	      };
	    }

	    var _this$_getParams = this._getParams(x, y, tolerance, fbo),
	        px = _this$_getParams.px,
	        py = _this$_getParams.py,
	        width = _this$_getParams.width,
	        height = _this$_getParams.height;

	    var pixels = new Uint8Array(4 * width * height);
	    var regl = this._renderer.regl;
	    var data = regl.read({
	      data: pixels,
	      x: px,
	      y: py,
	      framebuffer: fbo,
	      width: width,
	      height: height
	    });
	    var meshIds = [];
	    var pickingIds = [];

	    for (var i = 0; i < data.length; i += 4) {
	      var _this$_packData = this._packData(data.subarray(i, i + 4), shader),
	          pickingId = _this$_packData.pickingId,
	          meshId = _this$_packData.meshId;

	      meshIds.push(meshId);
	      pickingIds.push(pickingId);
	    }

	    var visited = {};
	    var pickedMeshes = meshIds.filter(function (id) {
	      if (id != null && !visited[id]) {
	        visited[id] = 1;
	        return true;
	      }

	      return false;
	    }).map(function (id) {
	      return meshes[id];
	    });

	    if (meshIds.length && shader === this._shader1 && meshes[0].geometry.data['aPickingId']) {
	      pickingIds = this._getPickingId(px, py, width, height, pixels, pickedMeshes, uniforms);
	    }

	    var points = [];

	    if (meshIds.length && options['returnPoint']) {
	      var _options = options,
	          viewMatrix = _options.viewMatrix,
	          projMatrix = _options.projMatrix;

	      var depths = this._pickDepth(px, py, width, height, pixels, pickedMeshes, uniforms);

	      for (var _i6 = 0; _i6 < depths.length; _i6++) {
	        if (depths[_i6] && meshIds[_i6] != null && pickingIds[_i6] != null) {
	          var point = this._getWorldPos(x, y, depths[_i6], viewMatrix, projMatrix);

	          points.push(point);
	        } else {
	          points.push(null);
	        }
	      }
	    }

	    var iterDists = [];

	    for (var _i7 = 0; _i7 <= tolerance; _i7++) {
	      iterDists.push(_i7);

	      if (_i7 > 0) {
	        iterDists.push(-_i7);
	      }
	    }

	    for (var _i8 = 0; _i8 < iterDists.length; _i8++) {
	      for (var j = 0; j < iterDists.length; j++) {
	        var ii = (iterDists[j] + tolerance) * width + (iterDists[_i8] + tolerance);

	        if (meshIds[ii] != null && pickingIds[ii] != null) {
	          return {
	            meshId: meshIds[ii],
	            pickingId: pickingIds[ii],
	            point: points[ii] || null
	          };
	        }
	      }
	    }

	    return {
	      pickingId: null,
	      meshId: null,
	      point: null
	    };
	  };

	  _proto24.clear = function clear() {
	    if (this._fbo) {
	      this._clearFbo(this._fbo);
	    }

	    this._currentMeshes = [];
	    delete this._currentShader;
	    return this;
	  };

	  _proto24.getMeshAt = function getMeshAt(idx) {
	    if (!this._currentMeshes) {
	      return null;
	    }

	    return this._currentMeshes[idx];
	  };

	  _proto24.getRenderedMeshes = function getRenderedMeshes() {
	    return this._currentMeshes;
	  };

	  _proto24.dispose = function dispose() {
	    this.clear();

	    if (this._shader0) {
	      this._shader0.dispose();
	    }

	    if (this._shader1) {
	      this._shader1.dispose();
	    }

	    if (this._shader2) {
	      this._shader2.dispose();
	    }

	    if (this._scene) {
	      this._scene.clear();
	    }

	    if (this._scene1) {
	      this._scene1.clear();
	    }
	  };

	  _proto24._getWorldPos = function _getWorldPos(x, y, depth, viewMatrix, projMatrix) {
	    var fbo = this._fbo;
	    var mat = [];
	    var w2 = fbo.width / 2 || 1,
	        h2 = fbo.height / 2 || 1;
	    var cp0 = [(x - w2) / w2, (h2 - y) / h2, 0, 1],
	        cp1 = [(x - w2) / w2, (h2 - y) / h2, 1, 1];
	    var inverseProjMatrix = invert$3(mat, projMatrix);
	    var vcp0 = [],
	        vcp1 = [];
	    applyMatrix(vcp0, cp0, inverseProjMatrix);
	    applyMatrix(vcp1, cp1, inverseProjMatrix);
	    var n = -vcp0[2],
	        f = -vcp1[2];
	    var t = (depth - n) / (f - n);
	    var projViewMatrix = multiply$3(mat, projMatrix, viewMatrix);
	    var inverseProjViewMatrix = invert$3(mat, projViewMatrix);
	    var near = applyMatrix(cp0, cp0, inverseProjViewMatrix),
	        far = applyMatrix(cp1, cp1, inverseProjViewMatrix);
	    return [interpolate(near[0], far[0], t), interpolate(near[1], far[1], t), interpolate(near[2], far[2], t)];
	  };

	  _proto24._getPickingId = function _getPickingId(x, y, width, height, pixels, meshes, uniforms) {
	    var regl = this._renderer.regl;

	    var fbo1 = this._getFBO1();

	    this._clearFbo(fbo1);

	    this._scene1.setMeshes(meshes);

	    this._renderer.render(this._shader2, uniforms, this._scene1, fbo1);

	    var data = regl.read({
	      data: pixels,
	      x: x,
	      y: y,
	      framebuffer: fbo1,
	      width: width,
	      height: height
	    });
	    var ids = [];

	    for (var i = 0; i < data.length; i += 4) {
	      ids.push(pack3(data.subarray(i, i + 4)));
	    }

	    return ids;
	  };

	  _proto24._pickDepth = function _pickDepth(x, y, width, height, pixels, meshes, uniforms) {
	    var regl = this._renderer.regl;

	    var fbo1 = this._getFBO1();

	    this._scene1.setMeshes(meshes);

	    this._clearFbo(fbo1);

	    this._renderer.render(this._depthShader, uniforms, this._scene1, fbo1);

	    var data = regl.read({
	      data: pixels,
	      x: x,
	      y: y,
	      framebuffer: fbo1,
	      width: width,
	      height: height
	    });
	    var depths = [];

	    for (var i = 0; i < data.length; i += 4) {
	      depths.push(packDepth(data.subarray(i, i + 4)));
	    }

	    return depths;
	  };

	  _proto24._packData = function _packData(data, shader) {
	    if (data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255) {
	      return {
	        meshId: null,
	        pickingId: null
	      };
	    }

	    var pickingId = null;
	    var meshId = null;

	    if (shader === this._shader1) {
	      meshId = pack3(data);
	    } else if (shader === this._shader0) {
	      meshId = data[3];
	      pickingId = pack3(data);
	    } else {
	      meshId = null;
	      pickingId = pack3(data);
	    }

	    return {
	      meshId: meshId,
	      pickingId: pickingId
	    };
	  };

	  _proto24._clearFbo = function _clearFbo(framebuffer) {
	    this._renderer.regl.clear({
	      color: [1, 1, 1, 1],
	      depth: 1,
	      stencil: 0,
	      framebuffer: framebuffer
	    });
	  };

	  _proto24._getShader = function _getShader(meshes, once) {
	    if (once && meshes.length < 256) {
	      return this._shader0;
	    }

	    return this._shader1;
	  };

	  _proto24._getFBO1 = function _getFBO1() {
	    var regl = this._renderer.regl;
	    var fbo = this._fbo;

	    if (!this._fbo1) {
	      this._fbo1 = regl.framebuffer(fbo.width, fbo.height);
	    } else if (this._fbo1.width !== fbo.width || this._fbo1.height !== fbo.height) {
	      this._fbo1.resize(fbo.width, fbo.height);
	    }

	    return this._fbo1;
	  };

	  _proto24._getParams = function _getParams(px, py, tolerance, fbo) {
	    px -= tolerance;
	    py = fbo.height - py;
	    py -= tolerance;
	    var width = 2 * tolerance + 1;
	    var height = 2 * tolerance + 1;
	    var right = px + width;
	    var top = py + height;

	    if (right > fbo.width) {
	      width -= right - fbo.width;
	    }

	    if (top > fbo.height) {
	      height -= top - fbo.height;
	    }

	    px = px < 0 ? 0 : px;
	    py = py < 0 ? 0 : py;
	    return {
	      px: px,
	      py: py,
	      width: width,
	      height: height
	    };
	  };

	  return FBORayPicking;
	}();

	function applyMatrix(out, v, e) {
	  var x = v[0],
	      y = v[1],
	      z = v[2];
	  var w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);
	  out[0] = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;
	  out[1] = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;
	  out[2] = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;
	  return out;
	}

	var HDR = {
	  parseHDR: parseRGBE
	};
	var pbr = {
	  PBRHelper: PBRHelper,
	  LitShader: LitShader,
	  LitMaterial: LitMaterial,
	  ClothShader: ClothShader,
	  ClothMaterial: ClothMaterial,
	  SubsurfaceShader: ClothShader$1,
	  SubsurfaceMaterial: ClothMaterial$1
	};

	var reshadergl_es = /*#__PURE__*/Object.freeze({
		AbstractTexture: Texture,
		DeferredRenderer: DeferredRenderer,
		FBORayPicking: FBORayPicking,
		Geometry: Geometry,
		HDR: HDR,
		InstancedMesh: InstancedMesh,
		Material: Material$1,
		Mesh: Mesh,
		MeshShader: MeshShader,
		PhongMaterial: PhongMaterial,
		PhongShader: PhongShader,
		Plane: Plane,
		Renderer: Renderer,
		ResourceLoader: ResourceLoader$1,
		Scene: Scene,
		Shader: Shader,
		ShadowDisplayShader: ShadowDisplayShader,
		ShadowPass: ShadowPass,
		SkyboxHelper: SkyboxHelper,
		Texture2D: Texture2D,
		TextureCube: TextureCube,
		Util: Util,
		WireFrameMaterial: WireFrameMaterial,
		WireframeShader: WireframeShader,
		pbr: pbr
	});

	var EPSILON$1 = 0.000001;
	var ARRAY_TYPE$1 = typeof Float32Array !== 'undefined' ? Float32Array : Array;
	var RANDOM$1 = Math.random;
	function setMatrixArrayType$1(type) {
	  ARRAY_TYPE$1 = type;
	}
	var degree$1 = Math.PI / 180;
	function toRadian$1(a) {
	  return a * degree$1;
	}
	function equals$b(a, b) {
	  return Math.abs(a - b) <= EPSILON$1 * Math.max(1.0, Math.abs(a), Math.abs(b));
	}

	var common = /*#__PURE__*/Object.freeze({
		EPSILON: EPSILON$1,
		get ARRAY_TYPE () { return ARRAY_TYPE$1; },
		RANDOM: RANDOM$1,
		setMatrixArrayType: setMatrixArrayType$1,
		toRadian: toRadian$1,
		equals: equals$b
	});

	function create$a() {
	  var out = new ARRAY_TYPE$1(4);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[1] = 0;
	    out[2] = 0;
	  }

	  out[0] = 1;
	  out[3] = 1;
	  return out;
	}
	function clone$a(a) {
	  var out = new ARRAY_TYPE$1(4);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}
	function copy$a(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}
	function identity$6(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  return out;
	}
	function fromValues$a(m00, m01, m10, m11) {
	  var out = new ARRAY_TYPE$1(4);
	  out[0] = m00;
	  out[1] = m01;
	  out[2] = m10;
	  out[3] = m11;
	  return out;
	}
	function set$b(out, m00, m01, m10, m11) {
	  out[0] = m00;
	  out[1] = m01;
	  out[2] = m10;
	  out[3] = m11;
	  return out;
	}
	function transpose$3(out, a) {
	  if (out === a) {
	    var a1 = a[1];
	    out[1] = a[2];
	    out[2] = a1;
	  } else {
	    out[0] = a[0];
	    out[1] = a[2];
	    out[2] = a[1];
	    out[3] = a[3];
	  }

	  return out;
	}
	function invert$6(out, a) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var det = a0 * a3 - a2 * a1;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = a3 * det;
	  out[1] = -a1 * det;
	  out[2] = -a2 * det;
	  out[3] = a0 * det;
	  return out;
	}
	function adjoint$3(out, a) {
	  var a0 = a[0];
	  out[0] = a[3];
	  out[1] = -a[1];
	  out[2] = -a[2];
	  out[3] = a0;
	  return out;
	}
	function determinant$4(a) {
	  return a[0] * a[3] - a[2] * a[1];
	}
	function multiply$a(out, a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3];
	  out[0] = a0 * b0 + a2 * b1;
	  out[1] = a1 * b0 + a3 * b1;
	  out[2] = a0 * b2 + a2 * b3;
	  out[3] = a1 * b2 + a3 * b3;
	  return out;
	}
	function rotate$5(out, a, rad) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  out[0] = a0 * c + a2 * s;
	  out[1] = a1 * c + a3 * s;
	  out[2] = a0 * -s + a2 * c;
	  out[3] = a1 * -s + a3 * c;
	  return out;
	}
	function scale$a(out, a, v) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var v0 = v[0],
	      v1 = v[1];
	  out[0] = a0 * v0;
	  out[1] = a1 * v0;
	  out[2] = a2 * v1;
	  out[3] = a3 * v1;
	  return out;
	}
	function fromRotation$5(out, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  out[0] = c;
	  out[1] = s;
	  out[2] = -s;
	  out[3] = c;
	  return out;
	}
	function fromScaling$4(out, v) {
	  out[0] = v[0];
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = v[1];
	  return out;
	}
	function str$9(a) {
	  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	}
	function frob$4(a) {
	  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2));
	}
	function LDU$1(L, D, U, a) {
	  L[2] = a[2] / a[0];
	  U[0] = a[0];
	  U[1] = a[1];
	  U[3] = a[3] - L[2] * U[1];
	  return [L, D, U];
	}
	function add$a(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  return out;
	}
	function subtract$8(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  out[3] = a[3] - b[3];
	  return out;
	}
	function exactEquals$a(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
	}
	function equals$c(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3));
	}
	function multiplyScalar$4(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  return out;
	}
	function multiplyScalarAndAdd$4(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  out[2] = a[2] + b[2] * scale;
	  out[3] = a[3] + b[3] * scale;
	  return out;
	}
	var mul$a = multiply$a;
	var sub$8 = subtract$8;

	var mat2 = /*#__PURE__*/Object.freeze({
		create: create$a,
		clone: clone$a,
		copy: copy$a,
		identity: identity$6,
		fromValues: fromValues$a,
		set: set$b,
		transpose: transpose$3,
		invert: invert$6,
		adjoint: adjoint$3,
		determinant: determinant$4,
		multiply: multiply$a,
		rotate: rotate$5,
		scale: scale$a,
		fromRotation: fromRotation$5,
		fromScaling: fromScaling$4,
		str: str$9,
		frob: frob$4,
		LDU: LDU$1,
		add: add$a,
		subtract: subtract$8,
		exactEquals: exactEquals$a,
		equals: equals$c,
		multiplyScalar: multiplyScalar$4,
		multiplyScalarAndAdd: multiplyScalarAndAdd$4,
		mul: mul$a,
		sub: sub$8
	});

	function create$b() {
	  var out = new ARRAY_TYPE$1(6);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[1] = 0;
	    out[2] = 0;
	    out[4] = 0;
	    out[5] = 0;
	  }

	  out[0] = 1;
	  out[3] = 1;
	  return out;
	}
	function clone$b(a) {
	  var out = new ARRAY_TYPE$1(6);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  return out;
	}
	function copy$b(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  return out;
	}
	function identity$7(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = 0;
	  out[5] = 0;
	  return out;
	}
	function fromValues$b(a, b, c, d, tx, ty) {
	  var out = new ARRAY_TYPE$1(6);
	  out[0] = a;
	  out[1] = b;
	  out[2] = c;
	  out[3] = d;
	  out[4] = tx;
	  out[5] = ty;
	  return out;
	}
	function set$c(out, a, b, c, d, tx, ty) {
	  out[0] = a;
	  out[1] = b;
	  out[2] = c;
	  out[3] = d;
	  out[4] = tx;
	  out[5] = ty;
	  return out;
	}
	function invert$7(out, a) {
	  var aa = a[0],
	      ab = a[1],
	      ac = a[2],
	      ad = a[3];
	  var atx = a[4],
	      aty = a[5];
	  var det = aa * ad - ab * ac;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = ad * det;
	  out[1] = -ab * det;
	  out[2] = -ac * det;
	  out[3] = aa * det;
	  out[4] = (ac * aty - ad * atx) * det;
	  out[5] = (ab * atx - aa * aty) * det;
	  return out;
	}
	function determinant$5(a) {
	  return a[0] * a[3] - a[1] * a[2];
	}
	function multiply$b(out, a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3],
	      b4 = b[4],
	      b5 = b[5];
	  out[0] = a0 * b0 + a2 * b1;
	  out[1] = a1 * b0 + a3 * b1;
	  out[2] = a0 * b2 + a2 * b3;
	  out[3] = a1 * b2 + a3 * b3;
	  out[4] = a0 * b4 + a2 * b5 + a4;
	  out[5] = a1 * b4 + a3 * b5 + a5;
	  return out;
	}
	function rotate$6(out, a, rad) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5];
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  out[0] = a0 * c + a2 * s;
	  out[1] = a1 * c + a3 * s;
	  out[2] = a0 * -s + a2 * c;
	  out[3] = a1 * -s + a3 * c;
	  out[4] = a4;
	  out[5] = a5;
	  return out;
	}
	function scale$b(out, a, v) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5];
	  var v0 = v[0],
	      v1 = v[1];
	  out[0] = a0 * v0;
	  out[1] = a1 * v0;
	  out[2] = a2 * v1;
	  out[3] = a3 * v1;
	  out[4] = a4;
	  out[5] = a5;
	  return out;
	}
	function translate$4(out, a, v) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5];
	  var v0 = v[0],
	      v1 = v[1];
	  out[0] = a0;
	  out[1] = a1;
	  out[2] = a2;
	  out[3] = a3;
	  out[4] = a0 * v0 + a2 * v1 + a4;
	  out[5] = a1 * v0 + a3 * v1 + a5;
	  return out;
	}
	function fromRotation$6(out, rad) {
	  var s = Math.sin(rad),
	      c = Math.cos(rad);
	  out[0] = c;
	  out[1] = s;
	  out[2] = -s;
	  out[3] = c;
	  out[4] = 0;
	  out[5] = 0;
	  return out;
	}
	function fromScaling$5(out, v) {
	  out[0] = v[0];
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = v[1];
	  out[4] = 0;
	  out[5] = 0;
	  return out;
	}
	function fromTranslation$4(out, v) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = v[0];
	  out[5] = v[1];
	  return out;
	}
	function str$a(a) {
	  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
	}
	function frob$5(a) {
	  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1);
	}
	function add$b(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  out[4] = a[4] + b[4];
	  out[5] = a[5] + b[5];
	  return out;
	}
	function subtract$9(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  out[3] = a[3] - b[3];
	  out[4] = a[4] - b[4];
	  out[5] = a[5] - b[5];
	  return out;
	}
	function multiplyScalar$5(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  out[4] = a[4] * b;
	  out[5] = a[5] * b;
	  return out;
	}
	function multiplyScalarAndAdd$5(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  out[2] = a[2] + b[2] * scale;
	  out[3] = a[3] + b[3] * scale;
	  out[4] = a[4] + b[4] * scale;
	  out[5] = a[5] + b[5] * scale;
	  return out;
	}
	function exactEquals$b(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
	}
	function equals$d(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3],
	      b4 = b[4],
	      b5 = b[5];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON$1 * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON$1 * Math.max(1.0, Math.abs(a5), Math.abs(b5));
	}
	var mul$b = multiply$b;
	var sub$9 = subtract$9;

	var mat2d = /*#__PURE__*/Object.freeze({
		create: create$b,
		clone: clone$b,
		copy: copy$b,
		identity: identity$7,
		fromValues: fromValues$b,
		set: set$c,
		invert: invert$7,
		determinant: determinant$5,
		multiply: multiply$b,
		rotate: rotate$6,
		scale: scale$b,
		translate: translate$4,
		fromRotation: fromRotation$6,
		fromScaling: fromScaling$5,
		fromTranslation: fromTranslation$4,
		str: str$a,
		frob: frob$5,
		add: add$b,
		subtract: subtract$9,
		multiplyScalar: multiplyScalar$5,
		multiplyScalarAndAdd: multiplyScalarAndAdd$5,
		exactEquals: exactEquals$b,
		equals: equals$d,
		mul: mul$b,
		sub: sub$9
	});

	function create$c() {
	  var out = new ARRAY_TYPE$1(9);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	  }

	  out[0] = 1;
	  out[4] = 1;
	  out[8] = 1;
	  return out;
	}
	function fromMat4$2(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[4];
	  out[4] = a[5];
	  out[5] = a[6];
	  out[6] = a[8];
	  out[7] = a[9];
	  out[8] = a[10];
	  return out;
	}
	function clone$c(a) {
	  var out = new ARRAY_TYPE$1(9);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  out[6] = a[6];
	  out[7] = a[7];
	  out[8] = a[8];
	  return out;
	}
	function copy$c(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  out[6] = a[6];
	  out[7] = a[7];
	  out[8] = a[8];
	  return out;
	}
	function fromValues$c(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	  var out = new ARRAY_TYPE$1(9);
	  out[0] = m00;
	  out[1] = m01;
	  out[2] = m02;
	  out[3] = m10;
	  out[4] = m11;
	  out[5] = m12;
	  out[6] = m20;
	  out[7] = m21;
	  out[8] = m22;
	  return out;
	}
	function set$d(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	  out[0] = m00;
	  out[1] = m01;
	  out[2] = m02;
	  out[3] = m10;
	  out[4] = m11;
	  out[5] = m12;
	  out[6] = m20;
	  out[7] = m21;
	  out[8] = m22;
	  return out;
	}
	function identity$8(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 1;
	  out[5] = 0;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 1;
	  return out;
	}
	function transpose$4(out, a) {
	  if (out === a) {
	    var a01 = a[1],
	        a02 = a[2],
	        a12 = a[5];
	    out[1] = a[3];
	    out[2] = a[6];
	    out[3] = a01;
	    out[5] = a[7];
	    out[6] = a02;
	    out[7] = a12;
	  } else {
	    out[0] = a[0];
	    out[1] = a[3];
	    out[2] = a[6];
	    out[3] = a[1];
	    out[4] = a[4];
	    out[5] = a[7];
	    out[6] = a[2];
	    out[7] = a[5];
	    out[8] = a[8];
	  }

	  return out;
	}
	function invert$8(out, a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2];
	  var a10 = a[3],
	      a11 = a[4],
	      a12 = a[5];
	  var a20 = a[6],
	      a21 = a[7],
	      a22 = a[8];
	  var b01 = a22 * a11 - a12 * a21;
	  var b11 = -a22 * a10 + a12 * a20;
	  var b21 = a21 * a10 - a11 * a20;
	  var det = a00 * b01 + a01 * b11 + a02 * b21;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = b01 * det;
	  out[1] = (-a22 * a01 + a02 * a21) * det;
	  out[2] = (a12 * a01 - a02 * a11) * det;
	  out[3] = b11 * det;
	  out[4] = (a22 * a00 - a02 * a20) * det;
	  out[5] = (-a12 * a00 + a02 * a10) * det;
	  out[6] = b21 * det;
	  out[7] = (-a21 * a00 + a01 * a20) * det;
	  out[8] = (a11 * a00 - a01 * a10) * det;
	  return out;
	}
	function adjoint$4(out, a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2];
	  var a10 = a[3],
	      a11 = a[4],
	      a12 = a[5];
	  var a20 = a[6],
	      a21 = a[7],
	      a22 = a[8];
	  out[0] = a11 * a22 - a12 * a21;
	  out[1] = a02 * a21 - a01 * a22;
	  out[2] = a01 * a12 - a02 * a11;
	  out[3] = a12 * a20 - a10 * a22;
	  out[4] = a00 * a22 - a02 * a20;
	  out[5] = a02 * a10 - a00 * a12;
	  out[6] = a10 * a21 - a11 * a20;
	  out[7] = a01 * a20 - a00 * a21;
	  out[8] = a00 * a11 - a01 * a10;
	  return out;
	}
	function determinant$6(a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2];
	  var a10 = a[3],
	      a11 = a[4],
	      a12 = a[5];
	  var a20 = a[6],
	      a21 = a[7],
	      a22 = a[8];
	  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
	}
	function multiply$c(out, a, b) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2];
	  var a10 = a[3],
	      a11 = a[4],
	      a12 = a[5];
	  var a20 = a[6],
	      a21 = a[7],
	      a22 = a[8];
	  var b00 = b[0],
	      b01 = b[1],
	      b02 = b[2];
	  var b10 = b[3],
	      b11 = b[4],
	      b12 = b[5];
	  var b20 = b[6],
	      b21 = b[7],
	      b22 = b[8];
	  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
	  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
	  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
	  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
	  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
	  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
	  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
	  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
	  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
	  return out;
	}
	function translate$5(out, a, v) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a10 = a[3],
	      a11 = a[4],
	      a12 = a[5],
	      a20 = a[6],
	      a21 = a[7],
	      a22 = a[8],
	      x = v[0],
	      y = v[1];
	  out[0] = a00;
	  out[1] = a01;
	  out[2] = a02;
	  out[3] = a10;
	  out[4] = a11;
	  out[5] = a12;
	  out[6] = x * a00 + y * a10 + a20;
	  out[7] = x * a01 + y * a11 + a21;
	  out[8] = x * a02 + y * a12 + a22;
	  return out;
	}
	function rotate$7(out, a, rad) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a10 = a[3],
	      a11 = a[4],
	      a12 = a[5],
	      a20 = a[6],
	      a21 = a[7],
	      a22 = a[8],
	      s = Math.sin(rad),
	      c = Math.cos(rad);
	  out[0] = c * a00 + s * a10;
	  out[1] = c * a01 + s * a11;
	  out[2] = c * a02 + s * a12;
	  out[3] = c * a10 - s * a00;
	  out[4] = c * a11 - s * a01;
	  out[5] = c * a12 - s * a02;
	  out[6] = a20;
	  out[7] = a21;
	  out[8] = a22;
	  return out;
	}
	function scale$c(out, a, v) {
	  var x = v[0],
	      y = v[1];
	  out[0] = x * a[0];
	  out[1] = x * a[1];
	  out[2] = x * a[2];
	  out[3] = y * a[3];
	  out[4] = y * a[4];
	  out[5] = y * a[5];
	  out[6] = a[6];
	  out[7] = a[7];
	  out[8] = a[8];
	  return out;
	}
	function fromTranslation$5(out, v) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 1;
	  out[5] = 0;
	  out[6] = v[0];
	  out[7] = v[1];
	  out[8] = 1;
	  return out;
	}
	function fromRotation$7(out, rad) {
	  var s = Math.sin(rad),
	      c = Math.cos(rad);
	  out[0] = c;
	  out[1] = s;
	  out[2] = 0;
	  out[3] = -s;
	  out[4] = c;
	  out[5] = 0;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 1;
	  return out;
	}
	function fromScaling$6(out, v) {
	  out[0] = v[0];
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = v[1];
	  out[5] = 0;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 1;
	  return out;
	}
	function fromMat2d$1(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = 0;
	  out[3] = a[2];
	  out[4] = a[3];
	  out[5] = 0;
	  out[6] = a[4];
	  out[7] = a[5];
	  out[8] = 1;
	  return out;
	}
	function fromQuat$2(out, q) {
	  var x = q[0],
	      y = q[1],
	      z = q[2],
	      w = q[3];
	  var x2 = x + x;
	  var y2 = y + y;
	  var z2 = z + z;
	  var xx = x * x2;
	  var yx = y * x2;
	  var yy = y * y2;
	  var zx = z * x2;
	  var zy = z * y2;
	  var zz = z * z2;
	  var wx = w * x2;
	  var wy = w * y2;
	  var wz = w * z2;
	  out[0] = 1 - yy - zz;
	  out[3] = yx - wz;
	  out[6] = zx + wy;
	  out[1] = yx + wz;
	  out[4] = 1 - xx - zz;
	  out[7] = zy - wx;
	  out[2] = zx - wy;
	  out[5] = zy + wx;
	  out[8] = 1 - xx - yy;
	  return out;
	}
	function normalFromMat4$1(out, a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  var b00 = a00 * a11 - a01 * a10;
	  var b01 = a00 * a12 - a02 * a10;
	  var b02 = a00 * a13 - a03 * a10;
	  var b03 = a01 * a12 - a02 * a11;
	  var b04 = a01 * a13 - a03 * a11;
	  var b05 = a02 * a13 - a03 * a12;
	  var b06 = a20 * a31 - a21 * a30;
	  var b07 = a20 * a32 - a22 * a30;
	  var b08 = a20 * a33 - a23 * a30;
	  var b09 = a21 * a32 - a22 * a31;
	  var b10 = a21 * a33 - a23 * a31;
	  var b11 = a22 * a33 - a23 * a32;
	  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	  return out;
	}
	function projection$1(out, width, height) {
	  out[0] = 2 / width;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = -2 / height;
	  out[5] = 0;
	  out[6] = -1;
	  out[7] = 1;
	  out[8] = 1;
	  return out;
	}
	function str$b(a) {
	  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
	}
	function frob$6(a) {
	  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
	}
	function add$c(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  out[4] = a[4] + b[4];
	  out[5] = a[5] + b[5];
	  out[6] = a[6] + b[6];
	  out[7] = a[7] + b[7];
	  out[8] = a[8] + b[8];
	  return out;
	}
	function subtract$a(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  out[3] = a[3] - b[3];
	  out[4] = a[4] - b[4];
	  out[5] = a[5] - b[5];
	  out[6] = a[6] - b[6];
	  out[7] = a[7] - b[7];
	  out[8] = a[8] - b[8];
	  return out;
	}
	function multiplyScalar$6(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  out[4] = a[4] * b;
	  out[5] = a[5] * b;
	  out[6] = a[6] * b;
	  out[7] = a[7] * b;
	  out[8] = a[8] * b;
	  return out;
	}
	function multiplyScalarAndAdd$6(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  out[2] = a[2] + b[2] * scale;
	  out[3] = a[3] + b[3] * scale;
	  out[4] = a[4] + b[4] * scale;
	  out[5] = a[5] + b[5] * scale;
	  out[6] = a[6] + b[6] * scale;
	  out[7] = a[7] + b[7] * scale;
	  out[8] = a[8] + b[8] * scale;
	  return out;
	}
	function exactEquals$c(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
	}
	function equals$e(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5],
	      a6 = a[6],
	      a7 = a[7],
	      a8 = a[8];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3],
	      b4 = b[4],
	      b5 = b[5],
	      b6 = b[6],
	      b7 = b[7],
	      b8 = b[8];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON$1 * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON$1 * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON$1 * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON$1 * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON$1 * Math.max(1.0, Math.abs(a8), Math.abs(b8));
	}
	var mul$c = multiply$c;
	var sub$a = subtract$a;

	var mat3 = /*#__PURE__*/Object.freeze({
		create: create$c,
		fromMat4: fromMat4$2,
		clone: clone$c,
		copy: copy$c,
		fromValues: fromValues$c,
		set: set$d,
		identity: identity$8,
		transpose: transpose$4,
		invert: invert$8,
		adjoint: adjoint$4,
		determinant: determinant$6,
		multiply: multiply$c,
		translate: translate$5,
		rotate: rotate$7,
		scale: scale$c,
		fromTranslation: fromTranslation$5,
		fromRotation: fromRotation$7,
		fromScaling: fromScaling$6,
		fromMat2d: fromMat2d$1,
		fromQuat: fromQuat$2,
		normalFromMat4: normalFromMat4$1,
		projection: projection$1,
		str: str$b,
		frob: frob$6,
		add: add$c,
		subtract: subtract$a,
		multiplyScalar: multiplyScalar$6,
		multiplyScalarAndAdd: multiplyScalarAndAdd$6,
		exactEquals: exactEquals$c,
		equals: equals$e,
		mul: mul$c,
		sub: sub$a
	});

	function create$d() {
	  var out = new ARRAY_TYPE$1(16);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	  }

	  out[0] = 1;
	  out[5] = 1;
	  out[10] = 1;
	  out[15] = 1;
	  return out;
	}
	function clone$d(a) {
	  var out = new ARRAY_TYPE$1(16);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  out[6] = a[6];
	  out[7] = a[7];
	  out[8] = a[8];
	  out[9] = a[9];
	  out[10] = a[10];
	  out[11] = a[11];
	  out[12] = a[12];
	  out[13] = a[13];
	  out[14] = a[14];
	  out[15] = a[15];
	  return out;
	}
	function copy$d(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  out[6] = a[6];
	  out[7] = a[7];
	  out[8] = a[8];
	  out[9] = a[9];
	  out[10] = a[10];
	  out[11] = a[11];
	  out[12] = a[12];
	  out[13] = a[13];
	  out[14] = a[14];
	  out[15] = a[15];
	  return out;
	}
	function fromValues$d(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
	  var out = new ARRAY_TYPE$1(16);
	  out[0] = m00;
	  out[1] = m01;
	  out[2] = m02;
	  out[3] = m03;
	  out[4] = m10;
	  out[5] = m11;
	  out[6] = m12;
	  out[7] = m13;
	  out[8] = m20;
	  out[9] = m21;
	  out[10] = m22;
	  out[11] = m23;
	  out[12] = m30;
	  out[13] = m31;
	  out[14] = m32;
	  out[15] = m33;
	  return out;
	}
	function set$e(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
	  out[0] = m00;
	  out[1] = m01;
	  out[2] = m02;
	  out[3] = m03;
	  out[4] = m10;
	  out[5] = m11;
	  out[6] = m12;
	  out[7] = m13;
	  out[8] = m20;
	  out[9] = m21;
	  out[10] = m22;
	  out[11] = m23;
	  out[12] = m30;
	  out[13] = m31;
	  out[14] = m32;
	  out[15] = m33;
	  return out;
	}
	function identity$9(out) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = 1;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = 1;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function transpose$5(out, a) {
	  if (out === a) {
	    var a01 = a[1],
	        a02 = a[2],
	        a03 = a[3];
	    var a12 = a[6],
	        a13 = a[7];
	    var a23 = a[11];
	    out[1] = a[4];
	    out[2] = a[8];
	    out[3] = a[12];
	    out[4] = a01;
	    out[6] = a[9];
	    out[7] = a[13];
	    out[8] = a02;
	    out[9] = a12;
	    out[11] = a[14];
	    out[12] = a03;
	    out[13] = a13;
	    out[14] = a23;
	  } else {
	    out[0] = a[0];
	    out[1] = a[4];
	    out[2] = a[8];
	    out[3] = a[12];
	    out[4] = a[1];
	    out[5] = a[5];
	    out[6] = a[9];
	    out[7] = a[13];
	    out[8] = a[2];
	    out[9] = a[6];
	    out[10] = a[10];
	    out[11] = a[14];
	    out[12] = a[3];
	    out[13] = a[7];
	    out[14] = a[11];
	    out[15] = a[15];
	  }

	  return out;
	}
	function invert$9(out, a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  var b00 = a00 * a11 - a01 * a10;
	  var b01 = a00 * a12 - a02 * a10;
	  var b02 = a00 * a13 - a03 * a10;
	  var b03 = a01 * a12 - a02 * a11;
	  var b04 = a01 * a13 - a03 * a11;
	  var b05 = a02 * a13 - a03 * a12;
	  var b06 = a20 * a31 - a21 * a30;
	  var b07 = a20 * a32 - a22 * a30;
	  var b08 = a20 * a33 - a23 * a30;
	  var b09 = a21 * a32 - a22 * a31;
	  var b10 = a21 * a33 - a23 * a31;
	  var b11 = a22 * a33 - a23 * a32;
	  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	  if (!det) {
	    return null;
	  }

	  det = 1.0 / det;
	  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
	  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
	  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
	  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
	  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
	  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
	  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	  return out;
	}
	function adjoint$5(out, a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
	  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
	  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
	  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
	  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
	  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
	  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
	  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
	  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
	  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
	  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
	  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
	  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
	  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
	  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
	  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
	  return out;
	}
	function determinant$7(a) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  var b00 = a00 * a11 - a01 * a10;
	  var b01 = a00 * a12 - a02 * a10;
	  var b02 = a00 * a13 - a03 * a10;
	  var b03 = a01 * a12 - a02 * a11;
	  var b04 = a01 * a13 - a03 * a11;
	  var b05 = a02 * a13 - a03 * a12;
	  var b06 = a20 * a31 - a21 * a30;
	  var b07 = a20 * a32 - a22 * a30;
	  var b08 = a20 * a33 - a23 * a30;
	  var b09 = a21 * a32 - a22 * a31;
	  var b10 = a21 * a33 - a23 * a31;
	  var b11 = a22 * a33 - a23 * a32;
	  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	}
	function multiply$d(out, a, b) {
	  var a00 = a[0],
	      a01 = a[1],
	      a02 = a[2],
	      a03 = a[3];
	  var a10 = a[4],
	      a11 = a[5],
	      a12 = a[6],
	      a13 = a[7];
	  var a20 = a[8],
	      a21 = a[9],
	      a22 = a[10],
	      a23 = a[11];
	  var a30 = a[12],
	      a31 = a[13],
	      a32 = a[14],
	      a33 = a[15];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3];
	  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  b0 = b[4];
	  b1 = b[5];
	  b2 = b[6];
	  b3 = b[7];
	  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  b0 = b[8];
	  b1 = b[9];
	  b2 = b[10];
	  b3 = b[11];
	  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  b0 = b[12];
	  b1 = b[13];
	  b2 = b[14];
	  b3 = b[15];
	  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
	  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
	  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
	  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
	  return out;
	}
	function translate$6(out, a, v) {
	  var x = v[0],
	      y = v[1],
	      z = v[2];
	  var a00 = void 0,
	      a01 = void 0,
	      a02 = void 0,
	      a03 = void 0;
	  var a10 = void 0,
	      a11 = void 0,
	      a12 = void 0,
	      a13 = void 0;
	  var a20 = void 0,
	      a21 = void 0,
	      a22 = void 0,
	      a23 = void 0;

	  if (a === out) {
	    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
	    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
	    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
	    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	  } else {
	    a00 = a[0];
	    a01 = a[1];
	    a02 = a[2];
	    a03 = a[3];
	    a10 = a[4];
	    a11 = a[5];
	    a12 = a[6];
	    a13 = a[7];
	    a20 = a[8];
	    a21 = a[9];
	    a22 = a[10];
	    a23 = a[11];
	    out[0] = a00;
	    out[1] = a01;
	    out[2] = a02;
	    out[3] = a03;
	    out[4] = a10;
	    out[5] = a11;
	    out[6] = a12;
	    out[7] = a13;
	    out[8] = a20;
	    out[9] = a21;
	    out[10] = a22;
	    out[11] = a23;
	    out[12] = a00 * x + a10 * y + a20 * z + a[12];
	    out[13] = a01 * x + a11 * y + a21 * z + a[13];
	    out[14] = a02 * x + a12 * y + a22 * z + a[14];
	    out[15] = a03 * x + a13 * y + a23 * z + a[15];
	  }

	  return out;
	}
	function scale$d(out, a, v) {
	  var x = v[0],
	      y = v[1],
	      z = v[2];
	  out[0] = a[0] * x;
	  out[1] = a[1] * x;
	  out[2] = a[2] * x;
	  out[3] = a[3] * x;
	  out[4] = a[4] * y;
	  out[5] = a[5] * y;
	  out[6] = a[6] * y;
	  out[7] = a[7] * y;
	  out[8] = a[8] * z;
	  out[9] = a[9] * z;
	  out[10] = a[10] * z;
	  out[11] = a[11] * z;
	  out[12] = a[12];
	  out[13] = a[13];
	  out[14] = a[14];
	  out[15] = a[15];
	  return out;
	}
	function rotate$8(out, a, rad, axis) {
	  var x = axis[0],
	      y = axis[1],
	      z = axis[2];
	  var len = Math.sqrt(x * x + y * y + z * z);
	  var s = void 0,
	      c = void 0,
	      t = void 0;
	  var a00 = void 0,
	      a01 = void 0,
	      a02 = void 0,
	      a03 = void 0;
	  var a10 = void 0,
	      a11 = void 0,
	      a12 = void 0,
	      a13 = void 0;
	  var a20 = void 0,
	      a21 = void 0,
	      a22 = void 0,
	      a23 = void 0;
	  var b00 = void 0,
	      b01 = void 0,
	      b02 = void 0;
	  var b10 = void 0,
	      b11 = void 0,
	      b12 = void 0;
	  var b20 = void 0,
	      b21 = void 0,
	      b22 = void 0;

	  if (len < EPSILON$1) {
	    return null;
	  }

	  len = 1 / len;
	  x *= len;
	  y *= len;
	  z *= len;
	  s = Math.sin(rad);
	  c = Math.cos(rad);
	  t = 1 - c;
	  a00 = a[0];
	  a01 = a[1];
	  a02 = a[2];
	  a03 = a[3];
	  a10 = a[4];
	  a11 = a[5];
	  a12 = a[6];
	  a13 = a[7];
	  a20 = a[8];
	  a21 = a[9];
	  a22 = a[10];
	  a23 = a[11];
	  b00 = x * x * t + c;
	  b01 = y * x * t + z * s;
	  b02 = z * x * t - y * s;
	  b10 = x * y * t - z * s;
	  b11 = y * y * t + c;
	  b12 = z * y * t + x * s;
	  b20 = x * z * t + y * s;
	  b21 = y * z * t - x * s;
	  b22 = z * z * t + c;
	  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
	  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
	  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
	  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
	  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
	  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
	  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
	  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
	  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
	  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
	  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
	  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

	  if (a !== out) {
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	  }

	  return out;
	}
	function rotateX$5(out, a, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  var a10 = a[4];
	  var a11 = a[5];
	  var a12 = a[6];
	  var a13 = a[7];
	  var a20 = a[8];
	  var a21 = a[9];
	  var a22 = a[10];
	  var a23 = a[11];

	  if (a !== out) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	  }

	  out[4] = a10 * c + a20 * s;
	  out[5] = a11 * c + a21 * s;
	  out[6] = a12 * c + a22 * s;
	  out[7] = a13 * c + a23 * s;
	  out[8] = a20 * c - a10 * s;
	  out[9] = a21 * c - a11 * s;
	  out[10] = a22 * c - a12 * s;
	  out[11] = a23 * c - a13 * s;
	  return out;
	}
	function rotateY$5(out, a, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  var a00 = a[0];
	  var a01 = a[1];
	  var a02 = a[2];
	  var a03 = a[3];
	  var a20 = a[8];
	  var a21 = a[9];
	  var a22 = a[10];
	  var a23 = a[11];

	  if (a !== out) {
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	  }

	  out[0] = a00 * c - a20 * s;
	  out[1] = a01 * c - a21 * s;
	  out[2] = a02 * c - a22 * s;
	  out[3] = a03 * c - a23 * s;
	  out[8] = a00 * s + a20 * c;
	  out[9] = a01 * s + a21 * c;
	  out[10] = a02 * s + a22 * c;
	  out[11] = a03 * s + a23 * c;
	  return out;
	}
	function rotateZ$5(out, a, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  var a00 = a[0];
	  var a01 = a[1];
	  var a02 = a[2];
	  var a03 = a[3];
	  var a10 = a[4];
	  var a11 = a[5];
	  var a12 = a[6];
	  var a13 = a[7];

	  if (a !== out) {
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	  }

	  out[0] = a00 * c + a10 * s;
	  out[1] = a01 * c + a11 * s;
	  out[2] = a02 * c + a12 * s;
	  out[3] = a03 * c + a13 * s;
	  out[4] = a10 * c - a00 * s;
	  out[5] = a11 * c - a01 * s;
	  out[6] = a12 * c - a02 * s;
	  out[7] = a13 * c - a03 * s;
	  return out;
	}
	function fromTranslation$6(out, v) {
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = 1;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = 1;
	  out[11] = 0;
	  out[12] = v[0];
	  out[13] = v[1];
	  out[14] = v[2];
	  out[15] = 1;
	  return out;
	}
	function fromScaling$7(out, v) {
	  out[0] = v[0];
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = v[1];
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = v[2];
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function fromRotation$8(out, rad, axis) {
	  var x = axis[0],
	      y = axis[1],
	      z = axis[2];
	  var len = Math.sqrt(x * x + y * y + z * z);
	  var s = void 0,
	      c = void 0,
	      t = void 0;

	  if (len < EPSILON$1) {
	    return null;
	  }

	  len = 1 / len;
	  x *= len;
	  y *= len;
	  z *= len;
	  s = Math.sin(rad);
	  c = Math.cos(rad);
	  t = 1 - c;
	  out[0] = x * x * t + c;
	  out[1] = y * x * t + z * s;
	  out[2] = z * x * t - y * s;
	  out[3] = 0;
	  out[4] = x * y * t - z * s;
	  out[5] = y * y * t + c;
	  out[6] = z * y * t + x * s;
	  out[7] = 0;
	  out[8] = x * z * t + y * s;
	  out[9] = y * z * t - x * s;
	  out[10] = z * z * t + c;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function fromXRotation$1(out, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  out[0] = 1;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = c;
	  out[6] = s;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = -s;
	  out[10] = c;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function fromYRotation$1(out, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  out[0] = c;
	  out[1] = 0;
	  out[2] = -s;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = 1;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = s;
	  out[9] = 0;
	  out[10] = c;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function fromZRotation$1(out, rad) {
	  var s = Math.sin(rad);
	  var c = Math.cos(rad);
	  out[0] = c;
	  out[1] = s;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = -s;
	  out[5] = c;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = 1;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function fromRotationTranslation$2(out, q, v) {
	  var x = q[0],
	      y = q[1],
	      z = q[2],
	      w = q[3];
	  var x2 = x + x;
	  var y2 = y + y;
	  var z2 = z + z;
	  var xx = x * x2;
	  var xy = x * y2;
	  var xz = x * z2;
	  var yy = y * y2;
	  var yz = y * z2;
	  var zz = z * z2;
	  var wx = w * x2;
	  var wy = w * y2;
	  var wz = w * z2;
	  out[0] = 1 - (yy + zz);
	  out[1] = xy + wz;
	  out[2] = xz - wy;
	  out[3] = 0;
	  out[4] = xy - wz;
	  out[5] = 1 - (xx + zz);
	  out[6] = yz + wx;
	  out[7] = 0;
	  out[8] = xz + wy;
	  out[9] = yz - wx;
	  out[10] = 1 - (xx + yy);
	  out[11] = 0;
	  out[12] = v[0];
	  out[13] = v[1];
	  out[14] = v[2];
	  out[15] = 1;
	  return out;
	}
	function fromQuat2$1(out, a) {
	  var translation = new ARRAY_TYPE$1(3);
	  var bx = -a[0],
	      by = -a[1],
	      bz = -a[2],
	      bw = a[3],
	      ax = a[4],
	      ay = a[5],
	      az = a[6],
	      aw = a[7];
	  var magnitude = bx * bx + by * by + bz * bz + bw * bw;

	  if (magnitude > 0) {
	    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
	    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
	    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
	  } else {
	    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
	    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
	    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
	  }

	  fromRotationTranslation$2(out, a, translation);
	  return out;
	}
	function getTranslation$2(out, mat) {
	  out[0] = mat[12];
	  out[1] = mat[13];
	  out[2] = mat[14];
	  return out;
	}
	function getScaling$1(out, mat) {
	  var m11 = mat[0];
	  var m12 = mat[1];
	  var m13 = mat[2];
	  var m21 = mat[4];
	  var m22 = mat[5];
	  var m23 = mat[6];
	  var m31 = mat[8];
	  var m32 = mat[9];
	  var m33 = mat[10];
	  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
	  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
	  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
	  return out;
	}
	function getRotation$1(out, mat) {
	  var trace = mat[0] + mat[5] + mat[10];
	  var S = 0;

	  if (trace > 0) {
	    S = Math.sqrt(trace + 1.0) * 2;
	    out[3] = 0.25 * S;
	    out[0] = (mat[6] - mat[9]) / S;
	    out[1] = (mat[8] - mat[2]) / S;
	    out[2] = (mat[1] - mat[4]) / S;
	  } else if (mat[0] > mat[5] && mat[0] > mat[10]) {
	    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
	    out[3] = (mat[6] - mat[9]) / S;
	    out[0] = 0.25 * S;
	    out[1] = (mat[1] + mat[4]) / S;
	    out[2] = (mat[8] + mat[2]) / S;
	  } else if (mat[5] > mat[10]) {
	    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
	    out[3] = (mat[8] - mat[2]) / S;
	    out[0] = (mat[1] + mat[4]) / S;
	    out[1] = 0.25 * S;
	    out[2] = (mat[6] + mat[9]) / S;
	  } else {
	    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
	    out[3] = (mat[1] - mat[4]) / S;
	    out[0] = (mat[8] + mat[2]) / S;
	    out[1] = (mat[6] + mat[9]) / S;
	    out[2] = 0.25 * S;
	  }

	  return out;
	}
	function fromRotationTranslationScale$1(out, q, v, s) {
	  var x = q[0],
	      y = q[1],
	      z = q[2],
	      w = q[3];
	  var x2 = x + x;
	  var y2 = y + y;
	  var z2 = z + z;
	  var xx = x * x2;
	  var xy = x * y2;
	  var xz = x * z2;
	  var yy = y * y2;
	  var yz = y * z2;
	  var zz = z * z2;
	  var wx = w * x2;
	  var wy = w * y2;
	  var wz = w * z2;
	  var sx = s[0];
	  var sy = s[1];
	  var sz = s[2];
	  out[0] = (1 - (yy + zz)) * sx;
	  out[1] = (xy + wz) * sx;
	  out[2] = (xz - wy) * sx;
	  out[3] = 0;
	  out[4] = (xy - wz) * sy;
	  out[5] = (1 - (xx + zz)) * sy;
	  out[6] = (yz + wx) * sy;
	  out[7] = 0;
	  out[8] = (xz + wy) * sz;
	  out[9] = (yz - wx) * sz;
	  out[10] = (1 - (xx + yy)) * sz;
	  out[11] = 0;
	  out[12] = v[0];
	  out[13] = v[1];
	  out[14] = v[2];
	  out[15] = 1;
	  return out;
	}
	function fromRotationTranslationScaleOrigin$1(out, q, v, s, o) {
	  var x = q[0],
	      y = q[1],
	      z = q[2],
	      w = q[3];
	  var x2 = x + x;
	  var y2 = y + y;
	  var z2 = z + z;
	  var xx = x * x2;
	  var xy = x * y2;
	  var xz = x * z2;
	  var yy = y * y2;
	  var yz = y * z2;
	  var zz = z * z2;
	  var wx = w * x2;
	  var wy = w * y2;
	  var wz = w * z2;
	  var sx = s[0];
	  var sy = s[1];
	  var sz = s[2];
	  var ox = o[0];
	  var oy = o[1];
	  var oz = o[2];
	  var out0 = (1 - (yy + zz)) * sx;
	  var out1 = (xy + wz) * sx;
	  var out2 = (xz - wy) * sx;
	  var out4 = (xy - wz) * sy;
	  var out5 = (1 - (xx + zz)) * sy;
	  var out6 = (yz + wx) * sy;
	  var out8 = (xz + wy) * sz;
	  var out9 = (yz - wx) * sz;
	  var out10 = (1 - (xx + yy)) * sz;
	  out[0] = out0;
	  out[1] = out1;
	  out[2] = out2;
	  out[3] = 0;
	  out[4] = out4;
	  out[5] = out5;
	  out[6] = out6;
	  out[7] = 0;
	  out[8] = out8;
	  out[9] = out9;
	  out[10] = out10;
	  out[11] = 0;
	  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
	  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
	  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
	  out[15] = 1;
	  return out;
	}
	function fromQuat$3(out, q) {
	  var x = q[0],
	      y = q[1],
	      z = q[2],
	      w = q[3];
	  var x2 = x + x;
	  var y2 = y + y;
	  var z2 = z + z;
	  var xx = x * x2;
	  var yx = y * x2;
	  var yy = y * y2;
	  var zx = z * x2;
	  var zy = z * y2;
	  var zz = z * z2;
	  var wx = w * x2;
	  var wy = w * y2;
	  var wz = w * z2;
	  out[0] = 1 - yy - zz;
	  out[1] = yx + wz;
	  out[2] = zx - wy;
	  out[3] = 0;
	  out[4] = yx - wz;
	  out[5] = 1 - xx - zz;
	  out[6] = zy + wx;
	  out[7] = 0;
	  out[8] = zx + wy;
	  out[9] = zy - wx;
	  out[10] = 1 - xx - yy;
	  out[11] = 0;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = 0;
	  out[15] = 1;
	  return out;
	}
	function frustum$1(out, left, right, bottom, top, near, far) {
	  var rl = 1 / (right - left);
	  var tb = 1 / (top - bottom);
	  var nf = 1 / (near - far);
	  out[0] = near * 2 * rl;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = near * 2 * tb;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = (right + left) * rl;
	  out[9] = (top + bottom) * tb;
	  out[10] = (far + near) * nf;
	  out[11] = -1;
	  out[12] = 0;
	  out[13] = 0;
	  out[14] = far * near * 2 * nf;
	  out[15] = 0;
	  return out;
	}
	function perspective$1(out, fovy, aspect, near, far) {
	  var f = 1.0 / Math.tan(fovy / 2),
	      nf = void 0;
	  out[0] = f / aspect;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = f;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[11] = -1;
	  out[12] = 0;
	  out[13] = 0;
	  out[15] = 0;

	  if (far != null && far !== Infinity) {
	    nf = 1 / (near - far);
	    out[10] = (far + near) * nf;
	    out[14] = 2 * far * near * nf;
	  } else {
	    out[10] = -1;
	    out[14] = -2 * near;
	  }

	  return out;
	}
	function perspectiveFromFieldOfView$1(out, fov, near, far) {
	  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
	  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
	  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
	  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
	  var xScale = 2.0 / (leftTan + rightTan);
	  var yScale = 2.0 / (upTan + downTan);
	  out[0] = xScale;
	  out[1] = 0.0;
	  out[2] = 0.0;
	  out[3] = 0.0;
	  out[4] = 0.0;
	  out[5] = yScale;
	  out[6] = 0.0;
	  out[7] = 0.0;
	  out[8] = -((leftTan - rightTan) * xScale * 0.5);
	  out[9] = (upTan - downTan) * yScale * 0.5;
	  out[10] = far / (near - far);
	  out[11] = -1.0;
	  out[12] = 0.0;
	  out[13] = 0.0;
	  out[14] = far * near / (near - far);
	  out[15] = 0.0;
	  return out;
	}
	function ortho$1(out, left, right, bottom, top, near, far) {
	  var lr = 1 / (left - right);
	  var bt = 1 / (bottom - top);
	  var nf = 1 / (near - far);
	  out[0] = -2 * lr;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 0;
	  out[4] = 0;
	  out[5] = -2 * bt;
	  out[6] = 0;
	  out[7] = 0;
	  out[8] = 0;
	  out[9] = 0;
	  out[10] = 2 * nf;
	  out[11] = 0;
	  out[12] = (left + right) * lr;
	  out[13] = (top + bottom) * bt;
	  out[14] = (far + near) * nf;
	  out[15] = 1;
	  return out;
	}
	function lookAt$1(out, eye, center, up) {
	  var x0 = void 0,
	      x1 = void 0,
	      x2 = void 0,
	      y0 = void 0,
	      y1 = void 0,
	      y2 = void 0,
	      z0 = void 0,
	      z1 = void 0,
	      z2 = void 0,
	      len = void 0;
	  var eyex = eye[0];
	  var eyey = eye[1];
	  var eyez = eye[2];
	  var upx = up[0];
	  var upy = up[1];
	  var upz = up[2];
	  var centerx = center[0];
	  var centery = center[1];
	  var centerz = center[2];

	  if (Math.abs(eyex - centerx) < EPSILON$1 && Math.abs(eyey - centery) < EPSILON$1 && Math.abs(eyez - centerz) < EPSILON$1) {
	    return identity$9(out);
	  }

	  z0 = eyex - centerx;
	  z1 = eyey - centery;
	  z2 = eyez - centerz;
	  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	  z0 *= len;
	  z1 *= len;
	  z2 *= len;
	  x0 = upy * z2 - upz * z1;
	  x1 = upz * z0 - upx * z2;
	  x2 = upx * z1 - upy * z0;
	  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);

	  if (!len) {
	    x0 = 0;
	    x1 = 0;
	    x2 = 0;
	  } else {
	    len = 1 / len;
	    x0 *= len;
	    x1 *= len;
	    x2 *= len;
	  }

	  y0 = z1 * x2 - z2 * x1;
	  y1 = z2 * x0 - z0 * x2;
	  y2 = z0 * x1 - z1 * x0;
	  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);

	  if (!len) {
	    y0 = 0;
	    y1 = 0;
	    y2 = 0;
	  } else {
	    len = 1 / len;
	    y0 *= len;
	    y1 *= len;
	    y2 *= len;
	  }

	  out[0] = x0;
	  out[1] = y0;
	  out[2] = z0;
	  out[3] = 0;
	  out[4] = x1;
	  out[5] = y1;
	  out[6] = z1;
	  out[7] = 0;
	  out[8] = x2;
	  out[9] = y2;
	  out[10] = z2;
	  out[11] = 0;
	  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
	  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
	  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
	  out[15] = 1;
	  return out;
	}
	function targetTo$1(out, eye, target, up) {
	  var eyex = eye[0],
	      eyey = eye[1],
	      eyez = eye[2],
	      upx = up[0],
	      upy = up[1],
	      upz = up[2];
	  var z0 = eyex - target[0],
	      z1 = eyey - target[1],
	      z2 = eyez - target[2];
	  var len = z0 * z0 + z1 * z1 + z2 * z2;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    z0 *= len;
	    z1 *= len;
	    z2 *= len;
	  }

	  var x0 = upy * z2 - upz * z1,
	      x1 = upz * z0 - upx * z2,
	      x2 = upx * z1 - upy * z0;
	  len = x0 * x0 + x1 * x1 + x2 * x2;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    x0 *= len;
	    x1 *= len;
	    x2 *= len;
	  }

	  out[0] = x0;
	  out[1] = x1;
	  out[2] = x2;
	  out[3] = 0;
	  out[4] = z1 * x2 - z2 * x1;
	  out[5] = z2 * x0 - z0 * x2;
	  out[6] = z0 * x1 - z1 * x0;
	  out[7] = 0;
	  out[8] = z0;
	  out[9] = z1;
	  out[10] = z2;
	  out[11] = 0;
	  out[12] = eyex;
	  out[13] = eyey;
	  out[14] = eyez;
	  out[15] = 1;
	  return out;
	}
	function str$c(a) {
	  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
	}
	function frob$7(a) {
	  return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2));
	}
	function add$d(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  out[4] = a[4] + b[4];
	  out[5] = a[5] + b[5];
	  out[6] = a[6] + b[6];
	  out[7] = a[7] + b[7];
	  out[8] = a[8] + b[8];
	  out[9] = a[9] + b[9];
	  out[10] = a[10] + b[10];
	  out[11] = a[11] + b[11];
	  out[12] = a[12] + b[12];
	  out[13] = a[13] + b[13];
	  out[14] = a[14] + b[14];
	  out[15] = a[15] + b[15];
	  return out;
	}
	function subtract$b(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  out[3] = a[3] - b[3];
	  out[4] = a[4] - b[4];
	  out[5] = a[5] - b[5];
	  out[6] = a[6] - b[6];
	  out[7] = a[7] - b[7];
	  out[8] = a[8] - b[8];
	  out[9] = a[9] - b[9];
	  out[10] = a[10] - b[10];
	  out[11] = a[11] - b[11];
	  out[12] = a[12] - b[12];
	  out[13] = a[13] - b[13];
	  out[14] = a[14] - b[14];
	  out[15] = a[15] - b[15];
	  return out;
	}
	function multiplyScalar$7(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  out[4] = a[4] * b;
	  out[5] = a[5] * b;
	  out[6] = a[6] * b;
	  out[7] = a[7] * b;
	  out[8] = a[8] * b;
	  out[9] = a[9] * b;
	  out[10] = a[10] * b;
	  out[11] = a[11] * b;
	  out[12] = a[12] * b;
	  out[13] = a[13] * b;
	  out[14] = a[14] * b;
	  out[15] = a[15] * b;
	  return out;
	}
	function multiplyScalarAndAdd$7(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  out[2] = a[2] + b[2] * scale;
	  out[3] = a[3] + b[3] * scale;
	  out[4] = a[4] + b[4] * scale;
	  out[5] = a[5] + b[5] * scale;
	  out[6] = a[6] + b[6] * scale;
	  out[7] = a[7] + b[7] * scale;
	  out[8] = a[8] + b[8] * scale;
	  out[9] = a[9] + b[9] * scale;
	  out[10] = a[10] + b[10] * scale;
	  out[11] = a[11] + b[11] * scale;
	  out[12] = a[12] + b[12] * scale;
	  out[13] = a[13] + b[13] * scale;
	  out[14] = a[14] + b[14] * scale;
	  out[15] = a[15] + b[15] * scale;
	  return out;
	}
	function exactEquals$d(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
	}
	function equals$f(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var a4 = a[4],
	      a5 = a[5],
	      a6 = a[6],
	      a7 = a[7];
	  var a8 = a[8],
	      a9 = a[9],
	      a10 = a[10],
	      a11 = a[11];
	  var a12 = a[12],
	      a13 = a[13],
	      a14 = a[14],
	      a15 = a[15];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3];
	  var b4 = b[4],
	      b5 = b[5],
	      b6 = b[6],
	      b7 = b[7];
	  var b8 = b[8],
	      b9 = b[9],
	      b10 = b[10],
	      b11 = b[11];
	  var b12 = b[12],
	      b13 = b[13],
	      b14 = b[14],
	      b15 = b[15];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON$1 * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON$1 * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON$1 * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON$1 * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON$1 * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON$1 * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON$1 * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON$1 * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON$1 * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON$1 * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON$1 * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON$1 * Math.max(1.0, Math.abs(a15), Math.abs(b15));
	}
	var mul$d = multiply$d;
	var sub$b = subtract$b;

	var mat4 = /*#__PURE__*/Object.freeze({
		create: create$d,
		clone: clone$d,
		copy: copy$d,
		fromValues: fromValues$d,
		set: set$e,
		identity: identity$9,
		transpose: transpose$5,
		invert: invert$9,
		adjoint: adjoint$5,
		determinant: determinant$7,
		multiply: multiply$d,
		translate: translate$6,
		scale: scale$d,
		rotate: rotate$8,
		rotateX: rotateX$5,
		rotateY: rotateY$5,
		rotateZ: rotateZ$5,
		fromTranslation: fromTranslation$6,
		fromScaling: fromScaling$7,
		fromRotation: fromRotation$8,
		fromXRotation: fromXRotation$1,
		fromYRotation: fromYRotation$1,
		fromZRotation: fromZRotation$1,
		fromRotationTranslation: fromRotationTranslation$2,
		fromQuat2: fromQuat2$1,
		getTranslation: getTranslation$2,
		getScaling: getScaling$1,
		getRotation: getRotation$1,
		fromRotationTranslationScale: fromRotationTranslationScale$1,
		fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin$1,
		fromQuat: fromQuat$3,
		frustum: frustum$1,
		perspective: perspective$1,
		perspectiveFromFieldOfView: perspectiveFromFieldOfView$1,
		ortho: ortho$1,
		lookAt: lookAt$1,
		targetTo: targetTo$1,
		str: str$c,
		frob: frob$7,
		add: add$d,
		subtract: subtract$b,
		multiplyScalar: multiplyScalar$7,
		multiplyScalarAndAdd: multiplyScalarAndAdd$7,
		exactEquals: exactEquals$d,
		equals: equals$f,
		mul: mul$d,
		sub: sub$b
	});

	function create$e() {
	  var out = new ARRAY_TYPE$1(3);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	  }

	  return out;
	}
	function clone$e(a) {
	  var out = new ARRAY_TYPE$1(3);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  return out;
	}
	function length$6(a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}
	function fromValues$e(x, y, z) {
	  var out = new ARRAY_TYPE$1(3);
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}
	function copy$e(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  return out;
	}
	function set$f(out, x, y, z) {
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  return out;
	}
	function add$e(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  return out;
	}
	function subtract$c(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  return out;
	}
	function multiply$e(out, a, b) {
	  out[0] = a[0] * b[0];
	  out[1] = a[1] * b[1];
	  out[2] = a[2] * b[2];
	  return out;
	}
	function divide$4(out, a, b) {
	  out[0] = a[0] / b[0];
	  out[1] = a[1] / b[1];
	  out[2] = a[2] / b[2];
	  return out;
	}
	function ceil$4(out, a) {
	  out[0] = Math.ceil(a[0]);
	  out[1] = Math.ceil(a[1]);
	  out[2] = Math.ceil(a[2]);
	  return out;
	}
	function floor$4(out, a) {
	  out[0] = Math.floor(a[0]);
	  out[1] = Math.floor(a[1]);
	  out[2] = Math.floor(a[2]);
	  return out;
	}
	function min$4(out, a, b) {
	  out[0] = Math.min(a[0], b[0]);
	  out[1] = Math.min(a[1], b[1]);
	  out[2] = Math.min(a[2], b[2]);
	  return out;
	}
	function max$4(out, a, b) {
	  out[0] = Math.max(a[0], b[0]);
	  out[1] = Math.max(a[1], b[1]);
	  out[2] = Math.max(a[2], b[2]);
	  return out;
	}
	function round$4(out, a) {
	  out[0] = Math.round(a[0]);
	  out[1] = Math.round(a[1]);
	  out[2] = Math.round(a[2]);
	  return out;
	}
	function scale$e(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  return out;
	}
	function scaleAndAdd$4(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  out[2] = a[2] + b[2] * scale;
	  return out;
	}
	function distance$4(a, b) {
	  var x = b[0] - a[0];
	  var y = b[1] - a[1];
	  var z = b[2] - a[2];
	  return Math.sqrt(x * x + y * y + z * z);
	}
	function squaredDistance$4(a, b) {
	  var x = b[0] - a[0];
	  var y = b[1] - a[1];
	  var z = b[2] - a[2];
	  return x * x + y * y + z * z;
	}
	function squaredLength$6(a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  return x * x + y * y + z * z;
	}
	function negate$4(out, a) {
	  out[0] = -a[0];
	  out[1] = -a[1];
	  out[2] = -a[2];
	  return out;
	}
	function inverse$4(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  return out;
	}
	function normalize$6(out, a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var len = x * x + y * y + z * z;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out[0] = a[0] * len;
	    out[1] = a[1] * len;
	    out[2] = a[2] * len;
	  }

	  return out;
	}
	function dot$6(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}
	function cross$3(out, a, b) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2];
	  out[0] = ay * bz - az * by;
	  out[1] = az * bx - ax * bz;
	  out[2] = ax * by - ay * bx;
	  return out;
	}
	function lerp$6(out, a, b, t) {
	  var ax = a[0];
	  var ay = a[1];
	  var az = a[2];
	  out[0] = ax + t * (b[0] - ax);
	  out[1] = ay + t * (b[1] - ay);
	  out[2] = az + t * (b[2] - az);
	  return out;
	}
	function hermite$1(out, a, b, c, d, t) {
	  var factorTimes2 = t * t;
	  var factor1 = factorTimes2 * (2 * t - 3) + 1;
	  var factor2 = factorTimes2 * (t - 2) + t;
	  var factor3 = factorTimes2 * (t - 1);
	  var factor4 = factorTimes2 * (3 - 2 * t);
	  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
	  return out;
	}
	function bezier$1(out, a, b, c, d, t) {
	  var inverseFactor = 1 - t;
	  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
	  var factorTimes2 = t * t;
	  var factor1 = inverseFactorTimesTwo * inverseFactor;
	  var factor2 = 3 * t * inverseFactorTimesTwo;
	  var factor3 = 3 * factorTimes2 * inverseFactor;
	  var factor4 = factorTimes2 * t;
	  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
	  return out;
	}
	function random$5(out, scale) {
	  scale = scale || 1.0;
	  var r = RANDOM$1() * 2.0 * Math.PI;
	  var z = RANDOM$1() * 2.0 - 1.0;
	  var zScale = Math.sqrt(1.0 - z * z) * scale;
	  out[0] = Math.cos(r) * zScale;
	  out[1] = Math.sin(r) * zScale;
	  out[2] = z * scale;
	  return out;
	}
	function transformMat4$4(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
	  w = w || 1.0;
	  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	  return out;
	}
	function transformMat3$3(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  out[0] = x * m[0] + y * m[3] + z * m[6];
	  out[1] = x * m[1] + y * m[4] + z * m[7];
	  out[2] = x * m[2] + y * m[5] + z * m[8];
	  return out;
	}
	function transformQuat$3(out, a, q) {
	  var qx = q[0],
	      qy = q[1],
	      qz = q[2],
	      qw = q[3];
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  var uvx = qy * z - qz * y,
	      uvy = qz * x - qx * z,
	      uvz = qx * y - qy * x;
	  var uuvx = qy * uvz - qz * uvy,
	      uuvy = qz * uvx - qx * uvz,
	      uuvz = qx * uvy - qy * uvx;
	  var w2 = qw * 2;
	  uvx *= w2;
	  uvy *= w2;
	  uvz *= w2;
	  uuvx *= 2;
	  uuvy *= 2;
	  uuvz *= 2;
	  out[0] = x + uvx + uuvx;
	  out[1] = y + uvy + uuvy;
	  out[2] = z + uvz + uuvz;
	  return out;
	}
	function rotateX$6(out, a, b, c) {
	  var p = [],
	      r = [];
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
	  p[2] = a[2] - b[2];
	  r[0] = p[0];
	  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
	  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];
	  return out;
	}
	function rotateY$6(out, a, b, c) {
	  var p = [],
	      r = [];
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
	  p[2] = a[2] - b[2];
	  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
	  r[1] = p[1];
	  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];
	  return out;
	}
	function rotateZ$6(out, a, b, c) {
	  var p = [],
	      r = [];
	  p[0] = a[0] - b[0];
	  p[1] = a[1] - b[1];
	  p[2] = a[2] - b[2];
	  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
	  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
	  r[2] = p[2];
	  out[0] = r[0] + b[0];
	  out[1] = r[1] + b[1];
	  out[2] = r[2] + b[2];
	  return out;
	}
	function angle$3(a, b) {
	  var tempA = fromValues$e(a[0], a[1], a[2]);
	  var tempB = fromValues$e(b[0], b[1], b[2]);
	  normalize$6(tempA, tempA);
	  normalize$6(tempB, tempB);
	  var cosine = dot$6(tempA, tempB);

	  if (cosine > 1.0) {
	    return 0;
	  } else if (cosine < -1.0) {
	    return Math.PI;
	  } else {
	    return Math.acos(cosine);
	  }
	}
	function str$d(a) {
	  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
	}
	function exactEquals$e(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
	}
	function equals$g(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2));
	}
	var sub$c = subtract$c;
	var mul$e = multiply$e;
	var div$4 = divide$4;
	var dist$4 = distance$4;
	var sqrDist$4 = squaredDistance$4;
	var len$6 = length$6;
	var sqrLen$6 = squaredLength$6;
	var forEach$4 = function () {
	  var vec = create$e();
	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;

	    if (!stride) {
	      stride = 3;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];
	      vec[1] = a[i + 1];
	      vec[2] = a[i + 2];
	      fn(vec, vec, arg);
	      a[i] = vec[0];
	      a[i + 1] = vec[1];
	      a[i + 2] = vec[2];
	    }

	    return a;
	  };
	}();

	var vec3 = /*#__PURE__*/Object.freeze({
		create: create$e,
		clone: clone$e,
		length: length$6,
		fromValues: fromValues$e,
		copy: copy$e,
		set: set$f,
		add: add$e,
		subtract: subtract$c,
		multiply: multiply$e,
		divide: divide$4,
		ceil: ceil$4,
		floor: floor$4,
		min: min$4,
		max: max$4,
		round: round$4,
		scale: scale$e,
		scaleAndAdd: scaleAndAdd$4,
		distance: distance$4,
		squaredDistance: squaredDistance$4,
		squaredLength: squaredLength$6,
		negate: negate$4,
		inverse: inverse$4,
		normalize: normalize$6,
		dot: dot$6,
		cross: cross$3,
		lerp: lerp$6,
		hermite: hermite$1,
		bezier: bezier$1,
		random: random$5,
		transformMat4: transformMat4$4,
		transformMat3: transformMat3$3,
		transformQuat: transformQuat$3,
		rotateX: rotateX$6,
		rotateY: rotateY$6,
		rotateZ: rotateZ$6,
		angle: angle$3,
		str: str$d,
		exactEquals: exactEquals$e,
		equals: equals$g,
		sub: sub$c,
		mul: mul$e,
		div: div$4,
		dist: dist$4,
		sqrDist: sqrDist$4,
		len: len$6,
		sqrLen: sqrLen$6,
		forEach: forEach$4
	});

	function create$f() {
	  var out = new ARRAY_TYPE$1(4);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	  }

	  return out;
	}
	function clone$f(a) {
	  var out = new ARRAY_TYPE$1(4);
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}
	function fromValues$f(x, y, z, w) {
	  var out = new ARRAY_TYPE$1(4);
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  out[3] = w;
	  return out;
	}
	function copy$f(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  return out;
	}
	function set$g(out, x, y, z, w) {
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  out[3] = w;
	  return out;
	}
	function add$f(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  return out;
	}
	function subtract$d(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  out[2] = a[2] - b[2];
	  out[3] = a[3] - b[3];
	  return out;
	}
	function multiply$f(out, a, b) {
	  out[0] = a[0] * b[0];
	  out[1] = a[1] * b[1];
	  out[2] = a[2] * b[2];
	  out[3] = a[3] * b[3];
	  return out;
	}
	function divide$5(out, a, b) {
	  out[0] = a[0] / b[0];
	  out[1] = a[1] / b[1];
	  out[2] = a[2] / b[2];
	  out[3] = a[3] / b[3];
	  return out;
	}
	function ceil$5(out, a) {
	  out[0] = Math.ceil(a[0]);
	  out[1] = Math.ceil(a[1]);
	  out[2] = Math.ceil(a[2]);
	  out[3] = Math.ceil(a[3]);
	  return out;
	}
	function floor$5(out, a) {
	  out[0] = Math.floor(a[0]);
	  out[1] = Math.floor(a[1]);
	  out[2] = Math.floor(a[2]);
	  out[3] = Math.floor(a[3]);
	  return out;
	}
	function min$5(out, a, b) {
	  out[0] = Math.min(a[0], b[0]);
	  out[1] = Math.min(a[1], b[1]);
	  out[2] = Math.min(a[2], b[2]);
	  out[3] = Math.min(a[3], b[3]);
	  return out;
	}
	function max$5(out, a, b) {
	  out[0] = Math.max(a[0], b[0]);
	  out[1] = Math.max(a[1], b[1]);
	  out[2] = Math.max(a[2], b[2]);
	  out[3] = Math.max(a[3], b[3]);
	  return out;
	}
	function round$5(out, a) {
	  out[0] = Math.round(a[0]);
	  out[1] = Math.round(a[1]);
	  out[2] = Math.round(a[2]);
	  out[3] = Math.round(a[3]);
	  return out;
	}
	function scale$f(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  return out;
	}
	function scaleAndAdd$5(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  out[2] = a[2] + b[2] * scale;
	  out[3] = a[3] + b[3] * scale;
	  return out;
	}
	function distance$5(a, b) {
	  var x = b[0] - a[0];
	  var y = b[1] - a[1];
	  var z = b[2] - a[2];
	  var w = b[3] - a[3];
	  return Math.sqrt(x * x + y * y + z * z + w * w);
	}
	function squaredDistance$5(a, b) {
	  var x = b[0] - a[0];
	  var y = b[1] - a[1];
	  var z = b[2] - a[2];
	  var w = b[3] - a[3];
	  return x * x + y * y + z * z + w * w;
	}
	function length$7(a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var w = a[3];
	  return Math.sqrt(x * x + y * y + z * z + w * w);
	}
	function squaredLength$7(a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var w = a[3];
	  return x * x + y * y + z * z + w * w;
	}
	function negate$5(out, a) {
	  out[0] = -a[0];
	  out[1] = -a[1];
	  out[2] = -a[2];
	  out[3] = -a[3];
	  return out;
	}
	function inverse$5(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  out[3] = 1.0 / a[3];
	  return out;
	}
	function normalize$7(out, a) {
	  var x = a[0];
	  var y = a[1];
	  var z = a[2];
	  var w = a[3];
	  var len = x * x + y * y + z * z + w * w;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out[0] = x * len;
	    out[1] = y * len;
	    out[2] = z * len;
	    out[3] = w * len;
	  }

	  return out;
	}
	function dot$7(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	}
	function lerp$7(out, a, b, t) {
	  var ax = a[0];
	  var ay = a[1];
	  var az = a[2];
	  var aw = a[3];
	  out[0] = ax + t * (b[0] - ax);
	  out[1] = ay + t * (b[1] - ay);
	  out[2] = az + t * (b[2] - az);
	  out[3] = aw + t * (b[3] - aw);
	  return out;
	}
	function random$6(out, scale) {
	  scale = scale || 1.0;
	  var v1, v2, v3, v4;
	  var s1, s2;

	  do {
	    v1 = RANDOM$1() * 2 - 1;
	    v2 = RANDOM$1() * 2 - 1;
	    s1 = v1 * v1 + v2 * v2;
	  } while (s1 >= 1);

	  do {
	    v3 = RANDOM$1() * 2 - 1;
	    v4 = RANDOM$1() * 2 - 1;
	    s2 = v3 * v3 + v4 * v4;
	  } while (s2 >= 1);

	  var d = Math.sqrt((1 - s1) / s2);
	  out[0] = scale * v1;
	  out[1] = scale * v2;
	  out[2] = scale * v3 * d;
	  out[3] = scale * v4 * d;
	  return out;
	}
	function transformMat4$5(out, a, m) {
	  var x = a[0],
	      y = a[1],
	      z = a[2],
	      w = a[3];
	  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	  return out;
	}
	function transformQuat$4(out, a, q) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  var qx = q[0],
	      qy = q[1],
	      qz = q[2],
	      qw = q[3];
	  var ix = qw * x + qy * z - qz * y;
	  var iy = qw * y + qz * x - qx * z;
	  var iz = qw * z + qx * y - qy * x;
	  var iw = -qx * x - qy * y - qz * z;
	  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	  out[3] = a[3];
	  return out;
	}
	function str$e(a) {
	  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	}
	function exactEquals$f(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
	}
	function equals$h(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3));
	}
	var sub$d = subtract$d;
	var mul$f = multiply$f;
	var div$5 = divide$5;
	var dist$5 = distance$5;
	var sqrDist$5 = squaredDistance$5;
	var len$7 = length$7;
	var sqrLen$7 = squaredLength$7;
	var forEach$5 = function () {
	  var vec = create$f();
	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;

	    if (!stride) {
	      stride = 4;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];
	      vec[1] = a[i + 1];
	      vec[2] = a[i + 2];
	      vec[3] = a[i + 3];
	      fn(vec, vec, arg);
	      a[i] = vec[0];
	      a[i + 1] = vec[1];
	      a[i + 2] = vec[2];
	      a[i + 3] = vec[3];
	    }

	    return a;
	  };
	}();

	var vec4 = /*#__PURE__*/Object.freeze({
		create: create$f,
		clone: clone$f,
		fromValues: fromValues$f,
		copy: copy$f,
		set: set$g,
		add: add$f,
		subtract: subtract$d,
		multiply: multiply$f,
		divide: divide$5,
		ceil: ceil$5,
		floor: floor$5,
		min: min$5,
		max: max$5,
		round: round$5,
		scale: scale$f,
		scaleAndAdd: scaleAndAdd$5,
		distance: distance$5,
		squaredDistance: squaredDistance$5,
		length: length$7,
		squaredLength: squaredLength$7,
		negate: negate$5,
		inverse: inverse$5,
		normalize: normalize$7,
		dot: dot$7,
		lerp: lerp$7,
		random: random$6,
		transformMat4: transformMat4$5,
		transformQuat: transformQuat$4,
		str: str$e,
		exactEquals: exactEquals$f,
		equals: equals$h,
		sub: sub$d,
		mul: mul$f,
		div: div$5,
		dist: dist$5,
		sqrDist: sqrDist$5,
		len: len$7,
		sqrLen: sqrLen$7,
		forEach: forEach$5
	});

	function create$g() {
	  var out = new ARRAY_TYPE$1(4);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	  }

	  out[3] = 1;
	  return out;
	}
	function identity$a(out) {
	  out[0] = 0;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  return out;
	}
	function setAxisAngle$1(out, axis, rad) {
	  rad = rad * 0.5;
	  var s = Math.sin(rad);
	  out[0] = s * axis[0];
	  out[1] = s * axis[1];
	  out[2] = s * axis[2];
	  out[3] = Math.cos(rad);
	  return out;
	}
	function getAxisAngle$1(out_axis, q) {
	  var rad = Math.acos(q[3]) * 2.0;
	  var s = Math.sin(rad / 2.0);

	  if (s > EPSILON$1) {
	    out_axis[0] = q[0] / s;
	    out_axis[1] = q[1] / s;
	    out_axis[2] = q[2] / s;
	  } else {
	    out_axis[0] = 1;
	    out_axis[1] = 0;
	    out_axis[2] = 0;
	  }

	  return rad;
	}
	function multiply$g(out, a, b) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2],
	      bw = b[3];
	  out[0] = ax * bw + aw * bx + ay * bz - az * by;
	  out[1] = ay * bw + aw * by + az * bx - ax * bz;
	  out[2] = az * bw + aw * bz + ax * by - ay * bx;
	  out[3] = aw * bw - ax * bx - ay * by - az * bz;
	  return out;
	}
	function rotateX$7(out, a, rad) {
	  rad *= 0.5;
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var bx = Math.sin(rad),
	      bw = Math.cos(rad);
	  out[0] = ax * bw + aw * bx;
	  out[1] = ay * bw + az * bx;
	  out[2] = az * bw - ay * bx;
	  out[3] = aw * bw - ax * bx;
	  return out;
	}
	function rotateY$7(out, a, rad) {
	  rad *= 0.5;
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var by = Math.sin(rad),
	      bw = Math.cos(rad);
	  out[0] = ax * bw - az * by;
	  out[1] = ay * bw + aw * by;
	  out[2] = az * bw + ax * by;
	  out[3] = aw * bw - ay * by;
	  return out;
	}
	function rotateZ$7(out, a, rad) {
	  rad *= 0.5;
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var bz = Math.sin(rad),
	      bw = Math.cos(rad);
	  out[0] = ax * bw + ay * bz;
	  out[1] = ay * bw - ax * bz;
	  out[2] = az * bw + aw * bz;
	  out[3] = aw * bw - az * bz;
	  return out;
	}
	function calculateW$1(out, a) {
	  var x = a[0],
	      y = a[1],
	      z = a[2];
	  out[0] = x;
	  out[1] = y;
	  out[2] = z;
	  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
	  return out;
	}
	function slerp$1(out, a, b, t) {
	  var ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  var bx = b[0],
	      by = b[1],
	      bz = b[2],
	      bw = b[3];
	  var omega = void 0,
	      cosom = void 0,
	      sinom = void 0,
	      scale0 = void 0,
	      scale1 = void 0;
	  cosom = ax * bx + ay * by + az * bz + aw * bw;

	  if (cosom < 0.0) {
	    cosom = -cosom;
	    bx = -bx;
	    by = -by;
	    bz = -bz;
	    bw = -bw;
	  }

	  if (1.0 - cosom > EPSILON$1) {
	    omega = Math.acos(cosom);
	    sinom = Math.sin(omega);
	    scale0 = Math.sin((1.0 - t) * omega) / sinom;
	    scale1 = Math.sin(t * omega) / sinom;
	  } else {
	    scale0 = 1.0 - t;
	    scale1 = t;
	  }

	  out[0] = scale0 * ax + scale1 * bx;
	  out[1] = scale0 * ay + scale1 * by;
	  out[2] = scale0 * az + scale1 * bz;
	  out[3] = scale0 * aw + scale1 * bw;
	  return out;
	}
	function random$7(out) {
	  var u1 = RANDOM$1();
	  var u2 = RANDOM$1();
	  var u3 = RANDOM$1();
	  var sqrt1MinusU1 = Math.sqrt(1 - u1);
	  var sqrtU1 = Math.sqrt(u1);
	  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
	  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
	  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
	  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
	  return out;
	}
	function invert$a(out, a) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3];
	  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
	  var invDot = dot ? 1.0 / dot : 0;
	  out[0] = -a0 * invDot;
	  out[1] = -a1 * invDot;
	  out[2] = -a2 * invDot;
	  out[3] = a3 * invDot;
	  return out;
	}
	function conjugate$2(out, a) {
	  out[0] = -a[0];
	  out[1] = -a[1];
	  out[2] = -a[2];
	  out[3] = a[3];
	  return out;
	}
	function fromMat3$1(out, m) {
	  var fTrace = m[0] + m[4] + m[8];
	  var fRoot = void 0;

	  if (fTrace > 0.0) {
	    fRoot = Math.sqrt(fTrace + 1.0);
	    out[3] = 0.5 * fRoot;
	    fRoot = 0.5 / fRoot;
	    out[0] = (m[5] - m[7]) * fRoot;
	    out[1] = (m[6] - m[2]) * fRoot;
	    out[2] = (m[1] - m[3]) * fRoot;
	  } else {
	    var i = 0;
	    if (m[4] > m[0]) i = 1;
	    if (m[8] > m[i * 3 + i]) i = 2;
	    var j = (i + 1) % 3;
	    var k = (i + 2) % 3;
	    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
	    out[i] = 0.5 * fRoot;
	    fRoot = 0.5 / fRoot;
	    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
	    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
	    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
	  }

	  return out;
	}
	function fromEuler$1(out, x, y, z) {
	  var halfToRad = 0.5 * Math.PI / 180.0;
	  x *= halfToRad;
	  y *= halfToRad;
	  z *= halfToRad;
	  var sx = Math.sin(x);
	  var cx = Math.cos(x);
	  var sy = Math.sin(y);
	  var cy = Math.cos(y);
	  var sz = Math.sin(z);
	  var cz = Math.cos(z);
	  out[0] = sx * cy * cz - cx * sy * sz;
	  out[1] = cx * sy * cz + sx * cy * sz;
	  out[2] = cx * cy * sz - sx * sy * cz;
	  out[3] = cx * cy * cz + sx * sy * sz;
	  return out;
	}
	function str$f(a) {
	  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	}
	var clone$g = clone$f;
	var fromValues$g = fromValues$f;
	var copy$g = copy$f;
	var set$h = set$g;
	var add$g = add$f;
	var mul$g = multiply$g;
	var scale$g = scale$f;
	var dot$8 = dot$7;
	var lerp$8 = lerp$7;
	var length$8 = length$7;
	var len$8 = length$8;
	var squaredLength$8 = squaredLength$7;
	var sqrLen$8 = squaredLength$8;
	var normalize$8 = normalize$7;
	var exactEquals$g = exactEquals$f;
	var equals$i = equals$h;
	var rotationTo$1 = function () {
	  var tmpvec3 = create$e();
	  var xUnitVec3 = fromValues$e(1, 0, 0);
	  var yUnitVec3 = fromValues$e(0, 1, 0);
	  return function (out, a, b) {
	    var dot = dot$6(a, b);

	    if (dot < -0.999999) {
	      cross$3(tmpvec3, xUnitVec3, a);
	      if (len$6(tmpvec3) < 0.000001) cross$3(tmpvec3, yUnitVec3, a);
	      normalize$6(tmpvec3, tmpvec3);
	      setAxisAngle$1(out, tmpvec3, Math.PI);
	      return out;
	    } else if (dot > 0.999999) {
	      out[0] = 0;
	      out[1] = 0;
	      out[2] = 0;
	      out[3] = 1;
	      return out;
	    } else {
	      cross$3(tmpvec3, a, b);
	      out[0] = tmpvec3[0];
	      out[1] = tmpvec3[1];
	      out[2] = tmpvec3[2];
	      out[3] = 1 + dot;
	      return normalize$8(out, out);
	    }
	  };
	}();
	var sqlerp$1 = function () {
	  var temp1 = create$g();
	  var temp2 = create$g();
	  return function (out, a, b, c, d, t) {
	    slerp$1(temp1, a, d, t);
	    slerp$1(temp2, b, c, t);
	    slerp$1(out, temp1, temp2, 2 * t * (1 - t));
	    return out;
	  };
	}();
	var setAxes$1 = function () {
	  var matr = create$c();
	  return function (out, view, right, up) {
	    matr[0] = right[0];
	    matr[3] = right[1];
	    matr[6] = right[2];
	    matr[1] = up[0];
	    matr[4] = up[1];
	    matr[7] = up[2];
	    matr[2] = -view[0];
	    matr[5] = -view[1];
	    matr[8] = -view[2];
	    return normalize$8(out, fromMat3$1(out, matr));
	  };
	}();

	var quat = /*#__PURE__*/Object.freeze({
		create: create$g,
		identity: identity$a,
		setAxisAngle: setAxisAngle$1,
		getAxisAngle: getAxisAngle$1,
		multiply: multiply$g,
		rotateX: rotateX$7,
		rotateY: rotateY$7,
		rotateZ: rotateZ$7,
		calculateW: calculateW$1,
		slerp: slerp$1,
		random: random$7,
		invert: invert$a,
		conjugate: conjugate$2,
		fromMat3: fromMat3$1,
		fromEuler: fromEuler$1,
		str: str$f,
		clone: clone$g,
		fromValues: fromValues$g,
		copy: copy$g,
		set: set$h,
		add: add$g,
		mul: mul$g,
		scale: scale$g,
		dot: dot$8,
		lerp: lerp$8,
		length: length$8,
		len: len$8,
		squaredLength: squaredLength$8,
		sqrLen: sqrLen$8,
		normalize: normalize$8,
		exactEquals: exactEquals$g,
		equals: equals$i,
		rotationTo: rotationTo$1,
		sqlerp: sqlerp$1,
		setAxes: setAxes$1
	});

	function create$h() {
	  var dq = new ARRAY_TYPE$1(8);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    dq[0] = 0;
	    dq[1] = 0;
	    dq[2] = 0;
	    dq[4] = 0;
	    dq[5] = 0;
	    dq[6] = 0;
	    dq[7] = 0;
	  }

	  dq[3] = 1;
	  return dq;
	}
	function clone$h(a) {
	  var dq = new ARRAY_TYPE$1(8);
	  dq[0] = a[0];
	  dq[1] = a[1];
	  dq[2] = a[2];
	  dq[3] = a[3];
	  dq[4] = a[4];
	  dq[5] = a[5];
	  dq[6] = a[6];
	  dq[7] = a[7];
	  return dq;
	}
	function fromValues$h(x1, y1, z1, w1, x2, y2, z2, w2) {
	  var dq = new ARRAY_TYPE$1(8);
	  dq[0] = x1;
	  dq[1] = y1;
	  dq[2] = z1;
	  dq[3] = w1;
	  dq[4] = x2;
	  dq[5] = y2;
	  dq[6] = z2;
	  dq[7] = w2;
	  return dq;
	}
	function fromRotationTranslationValues$1(x1, y1, z1, w1, x2, y2, z2) {
	  var dq = new ARRAY_TYPE$1(8);
	  dq[0] = x1;
	  dq[1] = y1;
	  dq[2] = z1;
	  dq[3] = w1;
	  var ax = x2 * 0.5,
	      ay = y2 * 0.5,
	      az = z2 * 0.5;
	  dq[4] = ax * w1 + ay * z1 - az * y1;
	  dq[5] = ay * w1 + az * x1 - ax * z1;
	  dq[6] = az * w1 + ax * y1 - ay * x1;
	  dq[7] = -ax * x1 - ay * y1 - az * z1;
	  return dq;
	}
	function fromRotationTranslation$3(out, q, t) {
	  var ax = t[0] * 0.5,
	      ay = t[1] * 0.5,
	      az = t[2] * 0.5,
	      bx = q[0],
	      by = q[1],
	      bz = q[2],
	      bw = q[3];
	  out[0] = bx;
	  out[1] = by;
	  out[2] = bz;
	  out[3] = bw;
	  out[4] = ax * bw + ay * bz - az * by;
	  out[5] = ay * bw + az * bx - ax * bz;
	  out[6] = az * bw + ax * by - ay * bx;
	  out[7] = -ax * bx - ay * by - az * bz;
	  return out;
	}
	function fromTranslation$7(out, t) {
	  out[0] = 0;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = t[0] * 0.5;
	  out[5] = t[1] * 0.5;
	  out[6] = t[2] * 0.5;
	  out[7] = 0;
	  return out;
	}
	function fromRotation$9(out, q) {
	  out[0] = q[0];
	  out[1] = q[1];
	  out[2] = q[2];
	  out[3] = q[3];
	  out[4] = 0;
	  out[5] = 0;
	  out[6] = 0;
	  out[7] = 0;
	  return out;
	}
	function fromMat4$3(out, a) {
	  var outer = create$g();
	  getRotation$1(outer, a);
	  var t = new ARRAY_TYPE$1(3);
	  getTranslation$2(t, a);
	  fromRotationTranslation$3(out, outer, t);
	  return out;
	}
	function copy$h(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  out[2] = a[2];
	  out[3] = a[3];
	  out[4] = a[4];
	  out[5] = a[5];
	  out[6] = a[6];
	  out[7] = a[7];
	  return out;
	}
	function identity$b(out) {
	  out[0] = 0;
	  out[1] = 0;
	  out[2] = 0;
	  out[3] = 1;
	  out[4] = 0;
	  out[5] = 0;
	  out[6] = 0;
	  out[7] = 0;
	  return out;
	}
	function set$i(out, x1, y1, z1, w1, x2, y2, z2, w2) {
	  out[0] = x1;
	  out[1] = y1;
	  out[2] = z1;
	  out[3] = w1;
	  out[4] = x2;
	  out[5] = y2;
	  out[6] = z2;
	  out[7] = w2;
	  return out;
	}
	var getReal$1 = copy$g;
	function getDual$1(out, a) {
	  out[0] = a[4];
	  out[1] = a[5];
	  out[2] = a[6];
	  out[3] = a[7];
	  return out;
	}
	var setReal$1 = copy$g;
	function setDual$1(out, q) {
	  out[4] = q[0];
	  out[5] = q[1];
	  out[6] = q[2];
	  out[7] = q[3];
	  return out;
	}
	function getTranslation$3(out, a) {
	  var ax = a[4],
	      ay = a[5],
	      az = a[6],
	      aw = a[7],
	      bx = -a[0],
	      by = -a[1],
	      bz = -a[2],
	      bw = a[3];
	  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
	  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
	  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
	  return out;
	}
	function translate$7(out, a, v) {
	  var ax1 = a[0],
	      ay1 = a[1],
	      az1 = a[2],
	      aw1 = a[3],
	      bx1 = v[0] * 0.5,
	      by1 = v[1] * 0.5,
	      bz1 = v[2] * 0.5,
	      ax2 = a[4],
	      ay2 = a[5],
	      az2 = a[6],
	      aw2 = a[7];
	  out[0] = ax1;
	  out[1] = ay1;
	  out[2] = az1;
	  out[3] = aw1;
	  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
	  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
	  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
	  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
	  return out;
	}
	function rotateX$8(out, a, rad) {
	  var bx = -a[0],
	      by = -a[1],
	      bz = -a[2],
	      bw = a[3],
	      ax = a[4],
	      ay = a[5],
	      az = a[6],
	      aw = a[7],
	      ax1 = ax * bw + aw * bx + ay * bz - az * by,
	      ay1 = ay * bw + aw * by + az * bx - ax * bz,
	      az1 = az * bw + aw * bz + ax * by - ay * bx,
	      aw1 = aw * bw - ax * bx - ay * by - az * bz;
	  rotateX$7(out, a, rad);
	  bx = out[0];
	  by = out[1];
	  bz = out[2];
	  bw = out[3];
	  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
	  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
	  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
	  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
	  return out;
	}
	function rotateY$8(out, a, rad) {
	  var bx = -a[0],
	      by = -a[1],
	      bz = -a[2],
	      bw = a[3],
	      ax = a[4],
	      ay = a[5],
	      az = a[6],
	      aw = a[7],
	      ax1 = ax * bw + aw * bx + ay * bz - az * by,
	      ay1 = ay * bw + aw * by + az * bx - ax * bz,
	      az1 = az * bw + aw * bz + ax * by - ay * bx,
	      aw1 = aw * bw - ax * bx - ay * by - az * bz;
	  rotateY$7(out, a, rad);
	  bx = out[0];
	  by = out[1];
	  bz = out[2];
	  bw = out[3];
	  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
	  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
	  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
	  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
	  return out;
	}
	function rotateZ$8(out, a, rad) {
	  var bx = -a[0],
	      by = -a[1],
	      bz = -a[2],
	      bw = a[3],
	      ax = a[4],
	      ay = a[5],
	      az = a[6],
	      aw = a[7],
	      ax1 = ax * bw + aw * bx + ay * bz - az * by,
	      ay1 = ay * bw + aw * by + az * bx - ax * bz,
	      az1 = az * bw + aw * bz + ax * by - ay * bx,
	      aw1 = aw * bw - ax * bx - ay * by - az * bz;
	  rotateZ$7(out, a, rad);
	  bx = out[0];
	  by = out[1];
	  bz = out[2];
	  bw = out[3];
	  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
	  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
	  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
	  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
	  return out;
	}
	function rotateByQuatAppend$1(out, a, q) {
	  var qx = q[0],
	      qy = q[1],
	      qz = q[2],
	      qw = q[3],
	      ax = a[0],
	      ay = a[1],
	      az = a[2],
	      aw = a[3];
	  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
	  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
	  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
	  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
	  ax = a[4];
	  ay = a[5];
	  az = a[6];
	  aw = a[7];
	  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
	  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
	  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
	  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
	  return out;
	}
	function rotateByQuatPrepend$1(out, q, a) {
	  var qx = q[0],
	      qy = q[1],
	      qz = q[2],
	      qw = q[3],
	      bx = a[0],
	      by = a[1],
	      bz = a[2],
	      bw = a[3];
	  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
	  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
	  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
	  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
	  bx = a[4];
	  by = a[5];
	  bz = a[6];
	  bw = a[7];
	  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
	  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
	  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
	  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
	  return out;
	}
	function rotateAroundAxis$1(out, a, axis, rad) {
	  if (Math.abs(rad) < EPSILON$1) {
	    return copy$h(out, a);
	  }

	  var axisLength = Math.sqrt(axis[0] * axis[0] + axis[1] * axis[1] + axis[2] * axis[2]);
	  rad = rad * 0.5;
	  var s = Math.sin(rad);
	  var bx = s * axis[0] / axisLength;
	  var by = s * axis[1] / axisLength;
	  var bz = s * axis[2] / axisLength;
	  var bw = Math.cos(rad);
	  var ax1 = a[0],
	      ay1 = a[1],
	      az1 = a[2],
	      aw1 = a[3];
	  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
	  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
	  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
	  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
	  var ax = a[4],
	      ay = a[5],
	      az = a[6],
	      aw = a[7];
	  out[4] = ax * bw + aw * bx + ay * bz - az * by;
	  out[5] = ay * bw + aw * by + az * bx - ax * bz;
	  out[6] = az * bw + aw * bz + ax * by - ay * bx;
	  out[7] = aw * bw - ax * bx - ay * by - az * bz;
	  return out;
	}
	function add$h(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  out[2] = a[2] + b[2];
	  out[3] = a[3] + b[3];
	  out[4] = a[4] + b[4];
	  out[5] = a[5] + b[5];
	  out[6] = a[6] + b[6];
	  out[7] = a[7] + b[7];
	  return out;
	}
	function multiply$h(out, a, b) {
	  var ax0 = a[0],
	      ay0 = a[1],
	      az0 = a[2],
	      aw0 = a[3],
	      bx1 = b[4],
	      by1 = b[5],
	      bz1 = b[6],
	      bw1 = b[7],
	      ax1 = a[4],
	      ay1 = a[5],
	      az1 = a[6],
	      aw1 = a[7],
	      bx0 = b[0],
	      by0 = b[1],
	      bz0 = b[2],
	      bw0 = b[3];
	  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
	  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
	  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
	  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
	  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
	  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
	  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
	  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
	  return out;
	}
	var mul$h = multiply$h;
	function scale$h(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  out[2] = a[2] * b;
	  out[3] = a[3] * b;
	  out[4] = a[4] * b;
	  out[5] = a[5] * b;
	  out[6] = a[6] * b;
	  out[7] = a[7] * b;
	  return out;
	}
	var dot$9 = dot$8;
	function lerp$9(out, a, b, t) {
	  var mt = 1 - t;
	  if (dot$9(a, b) < 0) t = -t;
	  out[0] = a[0] * mt + b[0] * t;
	  out[1] = a[1] * mt + b[1] * t;
	  out[2] = a[2] * mt + b[2] * t;
	  out[3] = a[3] * mt + b[3] * t;
	  out[4] = a[4] * mt + b[4] * t;
	  out[5] = a[5] * mt + b[5] * t;
	  out[6] = a[6] * mt + b[6] * t;
	  out[7] = a[7] * mt + b[7] * t;
	  return out;
	}
	function invert$b(out, a) {
	  var sqlen = squaredLength$9(a);
	  out[0] = -a[0] / sqlen;
	  out[1] = -a[1] / sqlen;
	  out[2] = -a[2] / sqlen;
	  out[3] = a[3] / sqlen;
	  out[4] = -a[4] / sqlen;
	  out[5] = -a[5] / sqlen;
	  out[6] = -a[6] / sqlen;
	  out[7] = a[7] / sqlen;
	  return out;
	}
	function conjugate$3(out, a) {
	  out[0] = -a[0];
	  out[1] = -a[1];
	  out[2] = -a[2];
	  out[3] = a[3];
	  out[4] = -a[4];
	  out[5] = -a[5];
	  out[6] = -a[6];
	  out[7] = a[7];
	  return out;
	}
	var length$9 = length$8;
	var len$9 = length$9;
	var squaredLength$9 = squaredLength$8;
	var sqrLen$9 = squaredLength$9;
	function normalize$9(out, a) {
	  var magnitude = squaredLength$9(a);

	  if (magnitude > 0) {
	    magnitude = Math.sqrt(magnitude);
	    var a0 = a[0] / magnitude;
	    var a1 = a[1] / magnitude;
	    var a2 = a[2] / magnitude;
	    var a3 = a[3] / magnitude;
	    var b0 = a[4];
	    var b1 = a[5];
	    var b2 = a[6];
	    var b3 = a[7];
	    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
	    out[0] = a0;
	    out[1] = a1;
	    out[2] = a2;
	    out[3] = a3;
	    out[4] = (b0 - a0 * a_dot_b) / magnitude;
	    out[5] = (b1 - a1 * a_dot_b) / magnitude;
	    out[6] = (b2 - a2 * a_dot_b) / magnitude;
	    out[7] = (b3 - a3 * a_dot_b) / magnitude;
	  }

	  return out;
	}
	function str$g(a) {
	  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
	}
	function exactEquals$h(a, b) {
	  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
	}
	function equals$j(a, b) {
	  var a0 = a[0],
	      a1 = a[1],
	      a2 = a[2],
	      a3 = a[3],
	      a4 = a[4],
	      a5 = a[5],
	      a6 = a[6],
	      a7 = a[7];
	  var b0 = b[0],
	      b1 = b[1],
	      b2 = b[2],
	      b3 = b[3],
	      b4 = b[4],
	      b5 = b[5],
	      b6 = b[6],
	      b7 = b[7];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON$1 * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON$1 * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON$1 * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON$1 * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON$1 * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON$1 * Math.max(1.0, Math.abs(a7), Math.abs(b7));
	}

	var quat2 = /*#__PURE__*/Object.freeze({
		create: create$h,
		clone: clone$h,
		fromValues: fromValues$h,
		fromRotationTranslationValues: fromRotationTranslationValues$1,
		fromRotationTranslation: fromRotationTranslation$3,
		fromTranslation: fromTranslation$7,
		fromRotation: fromRotation$9,
		fromMat4: fromMat4$3,
		copy: copy$h,
		identity: identity$b,
		set: set$i,
		getReal: getReal$1,
		getDual: getDual$1,
		setReal: setReal$1,
		setDual: setDual$1,
		getTranslation: getTranslation$3,
		translate: translate$7,
		rotateX: rotateX$8,
		rotateY: rotateY$8,
		rotateZ: rotateZ$8,
		rotateByQuatAppend: rotateByQuatAppend$1,
		rotateByQuatPrepend: rotateByQuatPrepend$1,
		rotateAroundAxis: rotateAroundAxis$1,
		add: add$h,
		multiply: multiply$h,
		mul: mul$h,
		scale: scale$h,
		dot: dot$9,
		lerp: lerp$9,
		invert: invert$b,
		conjugate: conjugate$3,
		length: length$9,
		len: len$9,
		squaredLength: squaredLength$9,
		sqrLen: sqrLen$9,
		normalize: normalize$9,
		str: str$g,
		exactEquals: exactEquals$h,
		equals: equals$j
	});

	function create$i() {
	  var out = new ARRAY_TYPE$1(2);

	  if (ARRAY_TYPE$1 != Float32Array) {
	    out[0] = 0;
	    out[1] = 0;
	  }

	  return out;
	}
	function clone$i(a) {
	  var out = new ARRAY_TYPE$1(2);
	  out[0] = a[0];
	  out[1] = a[1];
	  return out;
	}
	function fromValues$i(x, y) {
	  var out = new ARRAY_TYPE$1(2);
	  out[0] = x;
	  out[1] = y;
	  return out;
	}
	function copy$i(out, a) {
	  out[0] = a[0];
	  out[1] = a[1];
	  return out;
	}
	function set$j(out, x, y) {
	  out[0] = x;
	  out[1] = y;
	  return out;
	}
	function add$i(out, a, b) {
	  out[0] = a[0] + b[0];
	  out[1] = a[1] + b[1];
	  return out;
	}
	function subtract$e(out, a, b) {
	  out[0] = a[0] - b[0];
	  out[1] = a[1] - b[1];
	  return out;
	}
	function multiply$i(out, a, b) {
	  out[0] = a[0] * b[0];
	  out[1] = a[1] * b[1];
	  return out;
	}
	function divide$6(out, a, b) {
	  out[0] = a[0] / b[0];
	  out[1] = a[1] / b[1];
	  return out;
	}
	function ceil$6(out, a) {
	  out[0] = Math.ceil(a[0]);
	  out[1] = Math.ceil(a[1]);
	  return out;
	}
	function floor$6(out, a) {
	  out[0] = Math.floor(a[0]);
	  out[1] = Math.floor(a[1]);
	  return out;
	}
	function min$6(out, a, b) {
	  out[0] = Math.min(a[0], b[0]);
	  out[1] = Math.min(a[1], b[1]);
	  return out;
	}
	function max$6(out, a, b) {
	  out[0] = Math.max(a[0], b[0]);
	  out[1] = Math.max(a[1], b[1]);
	  return out;
	}
	function round$6(out, a) {
	  out[0] = Math.round(a[0]);
	  out[1] = Math.round(a[1]);
	  return out;
	}
	function scale$i(out, a, b) {
	  out[0] = a[0] * b;
	  out[1] = a[1] * b;
	  return out;
	}
	function scaleAndAdd$6(out, a, b, scale) {
	  out[0] = a[0] + b[0] * scale;
	  out[1] = a[1] + b[1] * scale;
	  return out;
	}
	function distance$6(a, b) {
	  var x = b[0] - a[0],
	      y = b[1] - a[1];
	  return Math.sqrt(x * x + y * y);
	}
	function squaredDistance$6(a, b) {
	  var x = b[0] - a[0],
	      y = b[1] - a[1];
	  return x * x + y * y;
	}
	function length$a(a) {
	  var x = a[0],
	      y = a[1];
	  return Math.sqrt(x * x + y * y);
	}
	function squaredLength$a(a) {
	  var x = a[0],
	      y = a[1];
	  return x * x + y * y;
	}
	function negate$6(out, a) {
	  out[0] = -a[0];
	  out[1] = -a[1];
	  return out;
	}
	function inverse$6(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  return out;
	}
	function normalize$a(out, a) {
	  var x = a[0],
	      y = a[1];
	  var len = x * x + y * y;

	  if (len > 0) {
	    len = 1 / Math.sqrt(len);
	    out[0] = a[0] * len;
	    out[1] = a[1] * len;
	  }

	  return out;
	}
	function dot$a(a, b) {
	  return a[0] * b[0] + a[1] * b[1];
	}
	function cross$4(out, a, b) {
	  var z = a[0] * b[1] - a[1] * b[0];
	  out[0] = out[1] = 0;
	  out[2] = z;
	  return out;
	}
	function lerp$a(out, a, b, t) {
	  var ax = a[0],
	      ay = a[1];
	  out[0] = ax + t * (b[0] - ax);
	  out[1] = ay + t * (b[1] - ay);
	  return out;
	}
	function random$8(out, scale) {
	  scale = scale || 1.0;
	  var r = RANDOM$1() * 2.0 * Math.PI;
	  out[0] = Math.cos(r) * scale;
	  out[1] = Math.sin(r) * scale;
	  return out;
	}
	function transformMat2$1(out, a, m) {
	  var x = a[0],
	      y = a[1];
	  out[0] = m[0] * x + m[2] * y;
	  out[1] = m[1] * x + m[3] * y;
	  return out;
	}
	function transformMat2d$1(out, a, m) {
	  var x = a[0],
	      y = a[1];
	  out[0] = m[0] * x + m[2] * y + m[4];
	  out[1] = m[1] * x + m[3] * y + m[5];
	  return out;
	}
	function transformMat3$4(out, a, m) {
	  var x = a[0],
	      y = a[1];
	  out[0] = m[0] * x + m[3] * y + m[6];
	  out[1] = m[1] * x + m[4] * y + m[7];
	  return out;
	}
	function transformMat4$6(out, a, m) {
	  var x = a[0];
	  var y = a[1];
	  out[0] = m[0] * x + m[4] * y + m[12];
	  out[1] = m[1] * x + m[5] * y + m[13];
	  return out;
	}
	function rotate$9(out, a, b, c) {
	  var p0 = a[0] - b[0],
	      p1 = a[1] - b[1],
	      sinC = Math.sin(c),
	      cosC = Math.cos(c);
	  out[0] = p0 * cosC - p1 * sinC + b[0];
	  out[1] = p0 * sinC + p1 * cosC + b[1];
	  return out;
	}
	function angle$4(a, b) {
	  var x1 = a[0],
	      y1 = a[1],
	      x2 = b[0],
	      y2 = b[1];
	  var len1 = x1 * x1 + y1 * y1;

	  if (len1 > 0) {
	    len1 = 1 / Math.sqrt(len1);
	  }

	  var len2 = x2 * x2 + y2 * y2;

	  if (len2 > 0) {
	    len2 = 1 / Math.sqrt(len2);
	  }

	  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;

	  if (cosine > 1.0) {
	    return 0;
	  } else if (cosine < -1.0) {
	    return Math.PI;
	  } else {
	    return Math.acos(cosine);
	  }
	}
	function str$h(a) {
	  return 'vec2(' + a[0] + ', ' + a[1] + ')';
	}
	function exactEquals$i(a, b) {
	  return a[0] === b[0] && a[1] === b[1];
	}
	function equals$k(a, b) {
	  var a0 = a[0],
	      a1 = a[1];
	  var b0 = b[0],
	      b1 = b[1];
	  return Math.abs(a0 - b0) <= EPSILON$1 * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON$1 * Math.max(1.0, Math.abs(a1), Math.abs(b1));
	}
	var len$a = length$a;
	var sub$e = subtract$e;
	var mul$i = multiply$i;
	var div$6 = divide$6;
	var dist$6 = distance$6;
	var sqrDist$6 = squaredDistance$6;
	var sqrLen$a = squaredLength$a;
	var forEach$6 = function () {
	  var vec = create$i();
	  return function (a, stride, offset, count, fn, arg) {
	    var i = void 0,
	        l = void 0;

	    if (!stride) {
	      stride = 2;
	    }

	    if (!offset) {
	      offset = 0;
	    }

	    if (count) {
	      l = Math.min(count * stride + offset, a.length);
	    } else {
	      l = a.length;
	    }

	    for (i = offset; i < l; i += stride) {
	      vec[0] = a[i];
	      vec[1] = a[i + 1];
	      fn(vec, vec, arg);
	      a[i] = vec[0];
	      a[i + 1] = vec[1];
	    }

	    return a;
	  };
	}();

	var vec2 = /*#__PURE__*/Object.freeze({
		create: create$i,
		clone: clone$i,
		fromValues: fromValues$i,
		copy: copy$i,
		set: set$j,
		add: add$i,
		subtract: subtract$e,
		multiply: multiply$i,
		divide: divide$6,
		ceil: ceil$6,
		floor: floor$6,
		min: min$6,
		max: max$6,
		round: round$6,
		scale: scale$i,
		scaleAndAdd: scaleAndAdd$6,
		distance: distance$6,
		squaredDistance: squaredDistance$6,
		length: length$a,
		squaredLength: squaredLength$a,
		negate: negate$6,
		inverse: inverse$6,
		normalize: normalize$a,
		dot: dot$a,
		cross: cross$4,
		lerp: lerp$a,
		random: random$8,
		transformMat2: transformMat2$1,
		transformMat2d: transformMat2d$1,
		transformMat3: transformMat3$4,
		transformMat4: transformMat4$6,
		rotate: rotate$9,
		angle: angle$4,
		str: str$h,
		exactEquals: exactEquals$i,
		equals: equals$k,
		len: len$a,
		sub: sub$e,
		mul: mul$i,
		div: div$6,
		dist: dist$6,
		sqrDist: sqrDist$6,
		sqrLen: sqrLen$a,
		forEach: forEach$6
	});

	function E(E) {
	  for (var _2 = 1; _2 < arguments.length; _2++) {
	    var _R = arguments[_2];

	    for (var _3 in _R) {
	      E[_3] = _R[_3];
	    }
	  }

	  return E;
	}

	function _(_) {
	  for (var _T = 0; _T < (arguments.length <= 1 ? 0 : arguments.length - 1); _T++) {
	    E(_, _T + 1 < 1 || arguments.length <= _T + 1 ? undefined : arguments[_T + 1]);
	  }
	}

	var R = 1;

	var T = function () {
	  function T(E) {
	    this.uid = R++, this.states = function (E) {
	      return {
	        scissor: [0, 0, E.canvas.width, E.canvas.height],
	        viewport: [0, 0, E.canvas.width, E.canvas.height],
	        blendColor: [0, 0, 0, 0],
	        blendEquationSeparate: [E.FUNC_ADD, E.FUNC_ADD],
	        blendFuncSeparate: [E.ONE, E.ZERO, E.ONE, E.ZERO],
	        clearColor: [0, 0, 0, 0],
	        clearDepth: [1],
	        clearStencil: [0],
	        colorMask: [!0, !0, !0, !0],
	        cullFace: [E.BACK],
	        depthFunc: [E.LESS],
	        depthMask: [!0],
	        depthRange: [0, 1],
	        capabilities: {
	          3042: !1,
	          2884: !1,
	          2929: !1,
	          3024: !1,
	          32823: !1,
	          32926: !1,
	          32928: !1,
	          3089: !1,
	          2960: !1
	        },
	        frontFace: [E.CCW],
	        hint: {
	          33170: [E.DONT_CARE],
	          35723: [E.DONT_CARE]
	        },
	        lineWidth: [1],
	        pixelStorei: {
	          3333: [4],
	          3317: [4],
	          37440: [!1],
	          37441: [!1],
	          37443: [E.BROWSER_DEFAULT_WEBGL]
	        },
	        polygonOffset: [0, 0],
	        sampleCoverage: [1, !1],
	        stencilFuncSeparate: {
	          1028: [E.ALWAYS, 0, 4294967295],
	          1029: [E.ALWAYS, 0, 4294967295]
	        },
	        stencilMaskSeparate: {
	          1028: [4294967295],
	          1029: [4294967295]
	        },
	        stencilOpSeparate: {
	          1028: [E.KEEP, E.KEEP, E.KEEP],
	          1029: [E.KEEP, E.KEEP, E.KEEP]
	        },
	        program: null,
	        framebuffer: {
	          36160: null,
	          36008: null,
	          36009: null
	        },
	        renderbuffer: {
	          36161: null
	        },
	        textures: {
	          active: -1,
	          units: function () {
	            var _ = [],
	                R = E.getParameter(E.MAX_COMBINED_TEXTURE_IMAGE_UNITS);

	            for (var _E = 0; _E < R; _E++) {
	              _.push({
	                3553: null,
	                34067: null
	              });
	            }

	            return _[-1] = {
	              3553: null,
	              34067: null
	            }, _;
	          }()
	        },
	        attributes: {},
	        arrayBuffer: null,
	        elementArrayBuffer: null
	      };
	    }(E), this._ = E;
	  }

	  var _proto = T.prototype;

	  _proto.attachShader = function attachShader(E, _) {
	    return this._.attachShader(E, _);
	  };

	  _proto.shaderSource = function shaderSource(E, _) {
	    return this._.shaderSource(E, _);
	  };

	  _proto.compileShader = function compileShader(E) {
	    return this._.compileShader(E);
	  };

	  _proto.createShader = function createShader(E) {
	    return this._.createShader(E);
	  };

	  _proto.createProgram = function createProgram() {
	    return this._.createProgram();
	  };

	  _proto.createVertexArray = function createVertexArray() {
	    return this.R || (this.R = this._.getExtension("OES_vertex_array_object")), this.R.createVertexArrayOES();
	  };

	  _proto.deleteVertexArray = function deleteVertexArray(E) {
	    return this.R || (this.R = this._.getExtension("OES_vertex_array_object")), this.R.deleteVertexArrayOES(E);
	  };

	  _proto.bindVertexArray = function bindVertexArray(E) {
	    return this.R || (this.R = this._.getExtension("OES_vertex_array_object")), this.R.bindVertexArrayOES(E);
	  };

	  _proto.deleteProgram = function deleteProgram(E) {
	    return this.states.program === E && (this.states.program = null), this._.deleteProgram(E);
	  };

	  _proto.deleteShader = function deleteShader(E) {
	    return this._.deleteShader(E);
	  };

	  _proto.detachShader = function detachShader(E, _) {
	    return this._.detachShader(E, _);
	  };

	  _proto.getAttachedShaders = function getAttachedShaders(E) {
	    return this._.getAttachedShaders(E);
	  };

	  _proto.linkProgram = function linkProgram(E) {
	    return this.T(), this._.linkProgram(E);
	  };

	  _proto.getShaderParameter = function getShaderParameter(E, _) {
	    return this._.getShaderParameter(E, _);
	  };

	  _proto.getShaderPrecisionFormat = function getShaderPrecisionFormat(E, _) {
	    return this._.getShaderPrecisionFormat(E, _);
	  };

	  _proto.getShaderInfoLog = function getShaderInfoLog(E) {
	    return this._.getShaderInfoLog(E);
	  };

	  _proto.getShaderSource = function getShaderSource(E) {
	    return this._.getShaderSource(E);
	  };

	  _proto.getProgramInfoLog = function getProgramInfoLog(E) {
	    return this._.getProgramInfoLog(E);
	  };

	  _proto.getProgramParameter = function getProgramParameter(E, _) {
	    return this._.getProgramParameter(E, _);
	  };

	  _proto.getError = function getError() {
	    return this._.getError();
	  };

	  _proto.getContextAttributes = function getContextAttributes() {
	    return this._.getContextAttributes();
	  };

	  _proto.getExtension = function getExtension(E) {
	    return this._.getExtension(E);
	  };

	  _proto.getSupportedExtensions = function getSupportedExtensions() {
	    return this._.getSupportedExtensions();
	  };

	  _proto.getParameter = function getParameter(E) {
	    return this.T(), this._.getParameter(E);
	  };

	  _proto.isEnabled = function isEnabled(E) {
	    return this._.isEnabled(E);
	  };

	  _proto.isProgram = function isProgram(E) {
	    return this._.isProgram(E);
	  };

	  _proto.isShader = function isShader(E) {
	    return this._.isShader(E);
	  };

	  _proto.validateProgram = function validateProgram(E) {
	    return this._.validateProgram(E);
	  };

	  _proto.clear = function clear(E) {
	    return this.T(), this._.clear(E);
	  };

	  _proto.drawArrays = function drawArrays(E, _, R) {
	    return this.T(), this._.drawArrays(E, _, R);
	  };

	  _proto.drawElements = function drawElements(E, _, R, T) {
	    return this.T(), this._.drawElements(E, _, R, T);
	  };

	  _proto.A = function A() {
	    var E = this._,
	        _ = E.getParameter(E.CURRENT_PROGRAM),
	        R = E.getProgramParameter(_, E.ACTIVE_ATTRIBUTES),
	        T = [];

	    for (var _4 = 0; _4 < R; _4++) {
	      T.push(E.getVertexAttrib(_4, E.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING));
	    }

	    this.t = {
	      buffers: T,
	      elements: E.getParameter(E.ELEMENT_ARRAY_BUFFER_BINDING),
	      framebuffer: E.getParameter(E.FRAMEBUFFER_BINDING)
	    }, window.DEBUGGING && (console.log(this.uid, this.t), console.log(this.uid, this.states.attributes), console.log(this.states.attributes[0].buffer === this.t.buffers[0]), console.log(this.states.attributes[1].buffer === this.t.buffers[1]), console.log(this.states.attributes[2].buffer === this.t.buffers[2]));
	  };

	  _proto.finish = function finish() {};

	  _proto.flush = function flush() {
	    return this.T(), this._.flush();
	  };

	  _proto.commit = function commit() {
	    return this.T(), this._.commit();
	  };

	  _proto.isContextLost = function isContextLost() {
	    return this._.isContextLost();
	  };

	  _createClass(T, [{
	    key: "canvas",
	    get: function get() {
	      return this._.canvas;
	    }
	  }, {
	    key: "drawingBufferWidth",
	    get: function get() {
	      return this._.drawingBufferWidth;
	    }
	  }, {
	    key: "drawingBufferHeight",
	    get: function get() {
	      return this._.drawingBufferHeight;
	    }
	  }, {
	    key: "gl",
	    get: function get() {
	      return this._;
	    }
	  }]);

	  return T;
	}();

	_(T.prototype, {
	  DEPTH_BUFFER_BIT: 256,
	  STENCIL_BUFFER_BIT: 1024,
	  COLOR_BUFFER_BIT: 16384,
	  POINTS: 0,
	  LINES: 1,
	  LINE_LOOP: 2,
	  LINE_STRIP: 3,
	  TRIANGLES: 4,
	  TRIANGLE_STRIP: 5,
	  TRIANGLE_FAN: 6,
	  ZERO: 0,
	  ONE: 1,
	  SRC_COLOR: 768,
	  ONE_MINUS_SRC_COLOR: 769,
	  SRC_ALPHA: 770,
	  ONE_MINUS_SRC_ALPHA: 771,
	  DST_ALPHA: 772,
	  ONE_MINUS_DST_ALPHA: 773,
	  DST_COLOR: 774,
	  ONE_MINUS_DST_COLOR: 775,
	  SRC_ALPHA_SATURATE: 776,
	  CONSTANT_COLOR: 32769,
	  ONE_MINUS_CONSTANT_COLOR: 32770,
	  CONSTANT_ALPHA: 32771,
	  ONE_MINUS_CONSTANT_ALPHA: 32772,
	  FUNC_ADD: 32774,
	  FUNC_SUBSTRACT: 32778,
	  FUNC_REVERSE_SUBTRACT: 32779,
	  BLEND_EQUATION: 32777,
	  BLEND_EQUATION_RGB: 32777,
	  BLEND_EQUATION_ALPHA: 34877,
	  BLEND_DST_RGB: 32968,
	  BLEND_SRC_RGB: 32969,
	  BLEND_DST_ALPHA: 32970,
	  BLEND_SRC_ALPHA: 32971,
	  BLEND_COLOR: 32773,
	  ARRAY_BUFFER_BINDING: 34964,
	  ELEMENT_ARRAY_BUFFER_BINDING: 34965,
	  LINE_WIDTH: 2849,
	  ALIASED_POINT_SIZE_RANGE: 33901,
	  ALIASED_LINE_WIDTH_RANGE: 33902,
	  CULL_FACE_MODE: 2885,
	  FRONT_FACE: 2886,
	  DEPTH_RANGE: 2928,
	  DEPTH_WRITEMASK: 2930,
	  DEPTH_CLEAR_VALUE: 2931,
	  DEPTH_FUNC: 2932,
	  STENCIL_CLEAR_VALUE: 2961,
	  STENCIL_FUNC: 2962,
	  STENCIL_FAIL: 2964,
	  STENCIL_PASS_DEPTH_FAIL: 2965,
	  STENCIL_PASS_DEPTH_PASS: 2966,
	  STENCIL_REF: 2967,
	  STENCIL_VALUE_MASK: 2963,
	  STENCIL_WRITEMASK: 2968,
	  STENCIL_BACK_FUNC: 34816,
	  STENCIL_BACK_FAIL: 34817,
	  STENCIL_BACK_PASS_DEPTH_FAIL: 34818,
	  STENCIL_BACK_PASS_DEPTH_PASS: 34819,
	  STENCIL_BACK_REF: 36003,
	  STENCIL_BACK_VALUE_MASK: 36004,
	  STENCIL_BACK_WRITEMASK: 36005,
	  VIEWPORT: 2978,
	  SCISSOR_BOX: 3088,
	  COLOR_CLEAR_VALUE: 3106,
	  COLOR_WRITEMASK: 3107,
	  UNPACK_ALIGNMENT: 3317,
	  PACK_ALIGNMENT: 3333,
	  MAX_TEXTURE_SIZE: 3379,
	  MAX_VIEWPORT_DIMS: 3386,
	  SUBPIXEL_BITS: 3408,
	  RED_BITS: 3410,
	  GREEN_BITS: 3411,
	  BLUE_BITS: 3412,
	  ALPHA_BITS: 3413,
	  DEPTH_BITS: 3414,
	  STENCIL_BITS: 3415,
	  POLYGON_OFFSET_UNITS: 10752,
	  POLYGON_OFFSET_FACTOR: 32824,
	  TEXTURE_BINDING_2D: 32873,
	  SAMPLE_BUFFERS: 32936,
	  SAMPLES: 32937,
	  SAMPLE_COVERAGE_VALUE: 32938,
	  SAMPLE_COVERAGE_INVERT: 32939,
	  COMPRESSED_TEXTURE_FORMATS: 34467,
	  VENDOR: 7936,
	  RENDERER: 7937,
	  VERSION: 7938,
	  IMPLEMENTATION_COLOR_READ_TYPE: 35738,
	  IMPLEMENTATION_COLOR_READ_FORMAT: 35739,
	  BROWSER_DEFAULT_WEBGL: 37444,
	  STATIC_DRAW: 35044,
	  STREAM_DRAW: 35040,
	  DYNAMIC_DRAW: 35048,
	  ARRAY_BUFFER: 34962,
	  ELEMENT_ARRAY_BUFFER: 34963,
	  BUFFER_SIZE: 34660,
	  BUFFER_USAGE: 34661,
	  CURRENT_VERTEX_ATTRIB: 34342,
	  VERTEX_ATTRIB_ARRAY_ENABLED: 34338,
	  VERTEX_ATTRIB_ARRAY_SIZE: 34339,
	  VERTEX_ATTRIB_ARRAY_STRIDE: 34340,
	  VERTEX_ATTRIB_ARRAY_TYPE: 34341,
	  VERTEX_ATTRIB_ARRAY_NORMALIZED: 34922,
	  VERTEX_ATTRIB_ARRAY_POINTER: 34373,
	  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 34975,
	  CULL_FACE: 2884,
	  FRONT: 1028,
	  BACK: 1029,
	  FRONT_AND_BACK: 1032,
	  BLEND: 3042,
	  DEPTH_TEST: 2929,
	  DITHER: 3024,
	  POLYGON_OFFSET_FILL: 32823,
	  SAMPLE_ALPHA_TO_COVERAGE: 32926,
	  SAMPLE_COVERAGE: 32928,
	  SCISSOR_TEST: 3089,
	  STENCIL_TEST: 2960,
	  NO_ERROR: 0,
	  INVALID_ENUM: 1280,
	  INVALID_VALUE: 1281,
	  INVALID_OPERATION: 1282,
	  OUT_OF_MEMORY: 1285,
	  CONTEXT_LOST_WEBGL: 37442,
	  CW: 2304,
	  CCW: 2305,
	  DONT_CARE: 4352,
	  FASTEST: 4353,
	  NICEST: 4354,
	  GENERATE_MIPMAP_HINT: 33170,
	  BYTE: 5120,
	  UNSIGNED_BYTE: 5121,
	  SHORT: 5122,
	  UNSIGNED_SHORT: 5123,
	  INT: 5124,
	  UNSIGNED_INT: 5125,
	  FLOAT: 5126,
	  DEPTH_COMPONENT: 6402,
	  ALPHA: 6406,
	  RGB: 6407,
	  RGBA: 6408,
	  LUMINANCE: 6409,
	  LUMINANCE_ALPHA: 6410,
	  UNSIGNED_SHORT_4_4_4_4: 32819,
	  UNSIGNED_SHORT_5_5_5_1: 32820,
	  UNSIGNED_SHORT_5_6_5: 33635,
	  FRAGMENT_SHADER: 35632,
	  VERTEX_SHADER: 35633,
	  COMPILE_STATUS: 35713,
	  DELETE_STATUS: 35712,
	  LINK_STATUS: 35714,
	  VALIDATE_STATUS: 35715,
	  ATTACHED_SHADERS: 35717,
	  ACTIVE_ATTRIBUTES: 35721,
	  ACTIVE_UNIFORMS: 35718,
	  MAX_VERTEX_ATTRIBS: 34921,
	  MAX_VERTEX_UNIFORM_VECTORS: 36347,
	  MAX_VARYING_VECTORS: 36348,
	  MAX_COMBINED_TEXTURE_IMAGE_UNITS: 35661,
	  MAX_VERTEX_TEXTURE_IMAGE_UNITS: 35660,
	  MAX_TEXTURE_IMAGE_UNITS: 34930,
	  MAX_FRAGMENT_UNIFORM_VECTORS: 36349,
	  SHADER_TYPE: 35663,
	  SHADING_LANGUAGE_VERSION: 35724,
	  CURRENT_PROGRAM: 35725,
	  NEVER: 512,
	  ALWAYS: 519,
	  LESS: 513,
	  EQUAL: 514,
	  LEQUAL: 515,
	  GREATER: 516,
	  GEQUAL: 518,
	  NOTEQUAL: 517,
	  KEEP: 7680,
	  REPLACE: 7681,
	  INCR: 7682,
	  DECR: 7683,
	  INVERT: 5386,
	  INCR_WRAP: 34055,
	  DECR_WRAP: 34056,
	  NEAREST: 9728,
	  LINEAR: 9729,
	  NEAREST_MIPMAP_NEAREST: 9984,
	  LINEAR_MIPMAP_NEAREST: 9985,
	  NEAREST_MIPMAP_LINEAR: 9986,
	  LINEAR_MIPMAP_LINEAR: 9987,
	  TEXTURE_MAG_FILTER: 10240,
	  TEXTURE_MIN_FILTER: 10241,
	  TEXTURE_WRAP_S: 10242,
	  TEXTURE_WRAP_T: 10243,
	  TEXTURE_2D: 3553,
	  TEXTURE: 5890,
	  TEXTURE_CUBE_MAP: 34067,
	  TEXTURE_BINDING_CUBE_MAP: 34068,
	  TEXTURE_CUBE_MAP_POSITIVE_X: 34069,
	  TEXTURE_CUBE_MAP_NEGATIVE_X: 34070,
	  TEXTURE_CUBE_MAP_POSITIVE_Y: 34071,
	  TEXTURE_CUBE_MAP_NEGATIVE_Y: 34072,
	  TEXTURE_CUBE_MAP_POSITIVE_Z: 34073,
	  TEXTURE_CUBE_MAP_NEGATIVE_Z: 34074,
	  MAX_CUBE_MAP_TEXTURE_SIZE: 34076,
	  TEXTURE0: 33984,
	  TEXTURE1: 33985,
	  TEXTURE2: 33986,
	  TEXTURE3: 33987,
	  TEXTURE4: 33988,
	  TEXTURE5: 33989,
	  TEXTURE6: 33990,
	  TEXTURE7: 33991,
	  TEXTURE8: 33992,
	  TEXTURE9: 33993,
	  TEXTURE10: 33994,
	  TEXTURE11: 33995,
	  TEXTURE12: 33996,
	  TEXTURE13: 33997,
	  TEXTURE14: 33998,
	  TEXTURE15: 33999,
	  TEXTURE16: 34e3,
	  ACTIVE_TEXTURE: 34016,
	  REPEAT: 10497,
	  CLAMP_TO_EDGE: 33071,
	  MIRRORED_REPEAT: 33648,
	  TEXTURE_WIDTH: 4096,
	  TEXTURE_HEIGHT: 4097,
	  FLOAT_VEC2: 35664,
	  FLOAT_VEC3: 35665,
	  FLOAT_VEC4: 35666,
	  INT_VEC2: 35667,
	  INT_VEC3: 35668,
	  INT_VEC4: 35669,
	  BOOL: 35670,
	  BOOL_VEC2: 35671,
	  BOOL_VEC3: 35672,
	  BOOL_VEC4: 35673,
	  FLOAT_MAT2: 35674,
	  FLOAT_MAT3: 35675,
	  FLOAT_MAT4: 35676,
	  SAMPLER_2D: 35678,
	  SAMPLER_CUBE: 35680,
	  LOW_FLOAT: 36336,
	  MEDIUM_FLOAT: 36337,
	  HIGH_FLOAT: 36338,
	  LOW_INT: 36339,
	  MEDIUM_INT: 36340,
	  HIGH_INT: 36341,
	  FRAMEBUFFER: 36160,
	  RENDERBUFFER: 36161,
	  RGBA4: 32854,
	  RGB5_A1: 32855,
	  RGB565: 36194,
	  DEPTH_COMPONENT16: 33189,
	  STENCIL_INDEX: 6401,
	  STENCIL_INDEX8: 36168,
	  DEPTH_STENCIL: 34041,
	  RENDERBUFFER_WIDTH: 36162,
	  RENDERBUFFER_HEIGHT: 36163,
	  RENDERBUFFER_INTERNAL_FORMAT: 36164,
	  RENDERBUFFER_RED_SIZE: 36176,
	  RENDERBUFFER_GREEN_SIZE: 36177,
	  RENDERBUFFER_BLUE_SIZE: 36178,
	  RENDERBUFFER_ALPHA_SIZE: 36179,
	  RENDERBUFFER_DEPTH_SIZE: 36180,
	  RENDERBUFFER_STENCIL_SIZE: 36181,
	  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 36048,
	  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 36049,
	  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 36050,
	  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 36051,
	  COLOR_ATTACHMENT0: 36064,
	  DEPTH_ATTACHMENT: 36096,
	  STENCIL_ATTACHMENT: 36128,
	  DEPTH_STENCIL_ATTACHMENT: 33306,
	  NONE: 0,
	  FRAMEBUFFER_COMPLETE: 36053,
	  FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 36054,
	  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 36055,
	  FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 36057,
	  FRAMEBUFFER_UNSUPPORTED: 36061,
	  FRAMEBUFFER_BINDING: 36006,
	  RENDERBUFFER_BINDING: 36007,
	  MAX_RENDERBUFFER_SIZE: 34024,
	  INVALID_FRAMEBUFFER_OPERATION: 1286,
	  UNPACK_FLIP_Y_WEBGL: 37440,
	  UNPACK_PREMULTIPLY_ALPHA_WEBGL: 37441,
	  UNPACK_COLORSPACE_CONVERSION_WEBGL: 37443,
	  READ_BUFFER: 3074,
	  UNPACK_ROW_LENGTH: 3314,
	  UNPACK_SKIP_ROWS: 3315,
	  UNPACK_SKIP_PIXELS: 3316,
	  PACK_ROW_LENGTH: 3330,
	  PACK_SKIP_ROWS: 3331,
	  PACK_SKIP_PIXELS: 3332,
	  UNPACK_SKIP_IMAGES: 32877,
	  UNPACK_IMAGE_HEIGHT: 32878,
	  MAX_3D_TEXTURE_SIZE: 32883,
	  MAX_ELEMENTS_VERTICES: 33e3,
	  MAX_ELEMENTS_INDICES: 33001,
	  MAX_TEXTURE_LOD_BIAS: 34045,
	  MAX_FRAGMENT_UNIFORM_COMPONENTS: 35657,
	  MAX_VERTEX_UNIFORM_COMPONENTS: 35658,
	  MAX_ARRAY_TEXTURE_LAYERS: 35071,
	  MIN_PROGRAM_TEXEL_OFFSET: 35076,
	  MAX_PROGRAM_TEXEL_OFFSET: 35077,
	  MAX_VARYING_COMPONENTS: 35659,
	  FRAGMENT_SHADER_DERIVATIVE_HINT: 35723,
	  RASTERIZER_DISCARD: 35977,
	  VERTEX_ARRAY_BINDING: 34229,
	  MAX_VERTEX_OUTPUT_COMPONENTS: 37154,
	  MAX_FRAGMENT_INPUT_COMPONENTS: 37157,
	  MAX_SERVER_WAIT_TIMEOUT: 37137,
	  MAX_ELEMENT_INDEX: 36203,
	  RED: 6403,
	  RGB8: 32849,
	  RGBA8: 32856,
	  RGB10_A2: 32857,
	  TEXTURE_3D: 32879,
	  TEXTURE_WRAP_R: 32882,
	  TEXTURE_MIN_LOD: 33082,
	  TEXTURE_MAX_LOD: 33083,
	  TEXTURE_BASE_LEVEL: 33084,
	  TEXTURE_MAX_LEVEL: 33085,
	  TEXTURE_COMPARE_MODE: 34892,
	  TEXTURE_COMPARE_FUNC: 34893,
	  SRGB: 35904,
	  SRGB8: 35905,
	  SRGB8_ALPHA8: 35907,
	  COMPARE_REF_TO_TEXTURE: 34894,
	  RGBA32F: 34836,
	  RGB32F: 34837,
	  RGBA16F: 34842,
	  RGB16F: 34843,
	  TEXTURE_2D_ARRAY: 35866,
	  TEXTURE_BINDING_2D_ARRAY: 35869,
	  R11F_G11F_B10F: 35898,
	  RGB9_E5: 35901,
	  RGBA32UI: 36208,
	  RGB32UI: 36209,
	  RGBA16UI: 36214,
	  RGB16UI: 36215,
	  RGBA8UI: 36220,
	  RGB8UI: 36221,
	  RGBA32I: 36226,
	  RGB32I: 36227,
	  RGBA16I: 36232,
	  RGB16I: 36233,
	  RGBA8I: 36238,
	  RGB8I: 36239,
	  RED_INTEGER: 36244,
	  RGB_INTEGER: 36248,
	  RGBA_INTEGER: 36249,
	  R8: 33321,
	  RG8: 33323,
	  R16F: 33325,
	  R32F: 33326,
	  RG16F: 33327,
	  RG32F: 33328,
	  R8I: 33329,
	  R8UI: 33330,
	  R16I: 33331,
	  R16UI: 33332,
	  R32I: 33333,
	  R32UI: 33334,
	  RG8I: 33335,
	  RG8UI: 33336,
	  RG16I: 33337,
	  RG16UI: 33338,
	  RG32I: 33339,
	  RG32UI: 33340,
	  R8_SNORM: 36756,
	  RG8_SNORM: 36757,
	  RGB8_SNORM: 36758,
	  RGBA8_SNORM: 36759,
	  RGB10_A2UI: 36975,
	  TEXTURE_IMMUTABLE_FORMAT: 37167,
	  TEXTURE_IMMUTABLE_LEVELS: 33503,
	  UNSIGNED_INT_2_10_10_10_REV: 33640,
	  UNSIGNED_INT_10F_11F_11F_REV: 35899,
	  UNSIGNED_INT_5_9_9_9_REV: 35902,
	  FLOAT_32_UNSIGNED_INT_24_8_REV: 36269,
	  UNSIGNED_INT_24_8: 34042,
	  HALF_FLOAT: 5131,
	  RG: 33319,
	  RG_INTEGER: 33320,
	  INT_2_10_10_10_REV: 36255,
	  CURRENT_QUERY: 34917,
	  QUERY_RESULT: 34918,
	  QUERY_RESULT_AVAILABLE: 34919,
	  ANY_SAMPLES_PASSED: 35887,
	  ANY_SAMPLES_PASSED_CONSERVATIVE: 36202,
	  MAX_DRAW_BUFFERS: 34852,
	  DRAW_BUFFER0: 34853,
	  DRAW_BUFFER1: 34854,
	  DRAW_BUFFER2: 34855,
	  DRAW_BUFFER3: 34856,
	  DRAW_BUFFER4: 34857,
	  DRAW_BUFFER5: 34858,
	  DRAW_BUFFER6: 34859,
	  DRAW_BUFFER7: 34860,
	  DRAW_BUFFER8: 34861,
	  DRAW_BUFFER9: 34862,
	  DRAW_BUFFER10: 34863,
	  DRAW_BUFFER11: 34864,
	  DRAW_BUFFER12: 34865,
	  DRAW_BUFFER13: 34866,
	  DRAW_BUFFER14: 34867,
	  DRAW_BUFFER15: 34868,
	  MAX_COLOR_ATTACHMENTS: 36063,
	  COLOR_ATTACHMENT1: 36065,
	  COLOR_ATTACHMENT2: 36066,
	  COLOR_ATTACHMENT3: 36067,
	  COLOR_ATTACHMENT4: 36068,
	  COLOR_ATTACHMENT5: 36069,
	  COLOR_ATTACHMENT6: 36070,
	  COLOR_ATTACHMENT7: 36071,
	  COLOR_ATTACHMENT8: 36072,
	  COLOR_ATTACHMENT9: 36073,
	  COLOR_ATTACHMENT10: 36074,
	  COLOR_ATTACHMENT11: 36075,
	  COLOR_ATTACHMENT12: 36076,
	  COLOR_ATTACHMENT13: 36077,
	  COLOR_ATTACHMENT14: 36078,
	  COLOR_ATTACHMENT15: 36079,
	  SAMPLER_3D: 35679,
	  SAMPLER_2D_SHADOW: 35682,
	  SAMPLER_2D_ARRAY: 36289,
	  SAMPLER_2D_ARRAY_SHADOW: 36292,
	  SAMPLER_CUBE_SHADOW: 36293,
	  INT_SAMPLER_2D: 36298,
	  INT_SAMPLER_3D: 36299,
	  INT_SAMPLER_CUBE: 36300,
	  INT_SAMPLER_2D_ARRAY: 36303,
	  UNSIGNED_INT_SAMPLER_2D: 36306,
	  UNSIGNED_INT_SAMPLER_3D: 36307,
	  UNSIGNED_INT_SAMPLER_CUBE: 36308,
	  UNSIGNED_INT_SAMPLER_2D_ARRAY: 36311,
	  MAX_SAMPLES: 36183,
	  SAMPLER_BINDING: 35097,
	  PIXEL_PACK_BUFFER: 35051,
	  PIXEL_UNPACK_BUFFER: 35052,
	  PIXEL_PACK_BUFFER_BINDING: 35053,
	  PIXEL_UNPACK_BUFFER_BINDING: 35055,
	  COPY_READ_BUFFER: 36662,
	  COPY_WRITE_BUFFER: 36663,
	  COPY_READ_BUFFER_BINDING: 36662,
	  COPY_WRITE_BUFFER_BINDING: 36663,
	  FLOAT_MAT2x3: 35685,
	  FLOAT_MAT2x4: 35686,
	  FLOAT_MAT3x2: 35687,
	  FLOAT_MAT3x4: 35688,
	  FLOAT_MAT4x2: 35689,
	  FLOAT_MAT4x3: 35690,
	  UNSIGNED_INT_VEC2: 36294,
	  UNSIGNED_INT_VEC3: 36295,
	  UNSIGNED_INT_VEC4: 36296,
	  UNSIGNED_NORMALIZED: 35863,
	  SIGNED_NORMALIZED: 36764,
	  VERTEX_ATTRIB_ARRAY_INTEGER: 35069,
	  VERTEX_ATTRIB_ARRAY_DIVISOR: 35070,
	  TRANSFORM_FEEDBACK_BUFFER_MODE: 35967,
	  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 35968,
	  TRANSFORM_FEEDBACK_VARYINGS: 35971,
	  TRANSFORM_FEEDBACK_BUFFER_START: 35972,
	  TRANSFORM_FEEDBACK_BUFFER_SIZE: 35973,
	  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 35976,
	  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 35978,
	  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 35979,
	  INTERLEAVED_ATTRIBS: 35980,
	  SEPARATE_ATTRIBS: 35981,
	  TRANSFORM_FEEDBACK_BUFFER: 35982,
	  TRANSFORM_FEEDBACK_BUFFER_BINDING: 35983,
	  TRANSFORM_FEEDBACK: 36386,
	  TRANSFORM_FEEDBACK_PAUSED: 36387,
	  TRANSFORM_FEEDBACK_ACTIVE: 36388,
	  TRANSFORM_FEEDBACK_BINDING: 36389,
	  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 33296,
	  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 33297,
	  FRAMEBUFFER_ATTACHMENT_RED_SIZE: 33298,
	  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 33299,
	  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 33300,
	  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 33301,
	  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 33302,
	  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 33303,
	  FRAMEBUFFER_DEFAULT: 33304,
	  DEPTH24_STENCIL8: 35056,
	  DRAW_FRAMEBUFFER_BINDING: 36006,
	  READ_FRAMEBUFFER_BINDING: 36010,
	  RENDERBUFFER_SAMPLES: 36011,
	  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 36052,
	  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 36182,
	  UNIFORM_BUFFER: 35345,
	  UNIFORM_BUFFER_BINDING: 35368,
	  UNIFORM_BUFFER_START: 35369,
	  UNIFORM_BUFFER_SIZE: 35370,
	  MAX_VERTEX_UNIFORM_BLOCKS: 35371,
	  MAX_FRAGMENT_UNIFORM_BLOCKS: 35373,
	  MAX_COMBINED_UNIFORM_BLOCKS: 35374,
	  MAX_UNIFORM_BUFFER_BINDINGS: 35375,
	  MAX_UNIFORM_BLOCK_SIZE: 35376,
	  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 35377,
	  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 35379,
	  UNIFORM_BUFFER_OFFSET_ALIGNMENT: 35380,
	  ACTIVE_UNIFORM_BLOCKS: 35382,
	  UNIFORM_TYPE: 35383,
	  UNIFORM_SIZE: 35384,
	  UNIFORM_BLOCK_INDEX: 35386,
	  UNIFORM_OFFSET: 35387,
	  UNIFORM_ARRAY_STRIDE: 35388,
	  UNIFORM_MATRIX_STRIDE: 35389,
	  UNIFORM_IS_ROW_MAJOR: 35390,
	  UNIFORM_BLOCK_BINDING: 35391,
	  UNIFORM_BLOCK_DATA_SIZE: 35392,
	  UNIFORM_BLOCK_ACTIVE_UNIFORMS: 35394,
	  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 35395,
	  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 35396,
	  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 35398,
	  OBJECT_TYPE: 37138,
	  SYNC_CONDITION: 37139,
	  SYNC_STATUS: 37140,
	  SYNC_FLAGS: 37141,
	  SYNC_FENCE: 37142,
	  SYNC_GPU_COMMANDS_COMPLETE: 37143,
	  UNSIGNALED: 37144,
	  SIGNALED: 37145,
	  ALREADY_SIGNALED: 37146,
	  TIMEOUT_EXPIRED: 37147,
	  CONDITION_SATISFIED: 37148,
	  WAIT_FAILED: 37149,
	  SYNC_FLUSH_COMMANDS_BIT: 1,
	  COLOR: 6144,
	  DEPTH: 6145,
	  STENCIL: 6146,
	  MIN: 32775,
	  MAX: 32776,
	  DEPTH_COMPONENT24: 33190,
	  STREAM_READ: 35041,
	  STREAM_COPY: 35042,
	  STATIC_READ: 35045,
	  STATIC_COPY: 35046,
	  DYNAMIC_READ: 35049,
	  DYNAMIC_COPY: 35050,
	  DEPTH_COMPONENT32F: 36012,
	  DEPTH32F_STENCIL8: 36013,
	  INVALID_INDEX: 4294967295,
	  TIMEOUT_IGNORED: -1,
	  MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 37447,
	  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 35070,
	  UNMASKED_VENDOR_WEBGL: 37445,
	  UNMASKED_RENDERER_WEBGL: 37446,
	  MAX_TEXTURE_MAX_ANISOTROPY_EXT: 34047,
	  TEXTURE_MAX_ANISOTROPY_EXT: 34046,
	  COMPRESSED_RGB_S3TC_DXT1_EXT: 33776,
	  COMPRESSED_RGBA_S3TC_DXT1_EXT: 33777,
	  COMPRESSED_RGBA_S3TC_DXT3_EXT: 33778,
	  COMPRESSED_RGBA_S3TC_DXT5_EXT: 33779,
	  COMPRESSED_R11_EAC: 37488,
	  COMPRESSED_SIGNED_R11_EAC: 37489,
	  COMPRESSED_RG11_EAC: 37490,
	  COMPRESSED_SIGNED_RG11_EAC: 37491,
	  COMPRESSED_RGB8_ETC2: 37492,
	  COMPRESSED_RGBA8_ETC2_EAC: 37493,
	  COMPRESSED_SRGB8_ETC2: 37494,
	  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 37495,
	  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 37496,
	  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 37497,
	  COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 35840,
	  COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 35842,
	  COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 35841,
	  COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 35843,
	  COMPRESSED_RGB_ETC1_WEBGL: 36196,
	  COMPRESSED_RGB_ATC_WEBGL: 35986,
	  COMPRESSED_RGBA_ATC_EXPLICIT_ALPHA_WEBGL: 35986,
	  COMPRESSED_RGBA_ATC_INTERPOLATED_ALPHA_WEBGL: 34798,
	  UNSIGNED_INT_24_8_WEBGL: 34042,
	  HALF_FLOAT_OES: 36193,
	  RGBA32F_EXT: 34836,
	  RGB32F_EXT: 34837,
	  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 33297,
	  UNSIGNED_NORMALIZED_EXT: 35863,
	  MIN_EXT: 32775,
	  MAX_EXT: 32776,
	  SRGB_EXT: 35904,
	  SRGB_ALPHA_EXT: 35906,
	  SRGB8_ALPHA8_EXT: 35907,
	  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 33296,
	  FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 35723,
	  COLOR_ATTACHMENT0_WEBGL: 36064,
	  COLOR_ATTACHMENT1_WEBGL: 36065,
	  COLOR_ATTACHMENT2_WEBGL: 36066,
	  COLOR_ATTACHMENT3_WEBGL: 36067,
	  COLOR_ATTACHMENT4_WEBGL: 36068,
	  COLOR_ATTACHMENT5_WEBGL: 36069,
	  COLOR_ATTACHMENT6_WEBGL: 36070,
	  COLOR_ATTACHMENT7_WEBGL: 36071,
	  COLOR_ATTACHMENT8_WEBGL: 36072,
	  COLOR_ATTACHMENT9_WEBGL: 36073,
	  COLOR_ATTACHMENT10_WEBGL: 36074,
	  COLOR_ATTACHMENT11_WEBGL: 36075,
	  COLOR_ATTACHMENT12_WEBGL: 36076,
	  COLOR_ATTACHMENT13_WEBGL: 36077,
	  COLOR_ATTACHMENT14_WEBGL: 36078,
	  COLOR_ATTACHMENT15_WEBGL: 36079,
	  DRAW_BUFFER0_WEBGL: 34853,
	  DRAW_BUFFER1_WEBGL: 34854,
	  DRAW_BUFFER2_WEBGL: 34855,
	  DRAW_BUFFER3_WEBGL: 34856,
	  DRAW_BUFFER4_WEBGL: 34857,
	  DRAW_BUFFER5_WEBGL: 34858,
	  DRAW_BUFFER6_WEBGL: 34859,
	  DRAW_BUFFER7_WEBGL: 34860,
	  DRAW_BUFFER8_WEBGL: 34861,
	  DRAW_BUFFER9_WEBGL: 34862,
	  DRAW_BUFFER10_WEBGL: 34863,
	  DRAW_BUFFER11_WEBGL: 34864,
	  DRAW_BUFFER12_WEBGL: 34865,
	  DRAW_BUFFER13_WEBGL: 34866,
	  DRAW_BUFFER14_WEBGL: 34867,
	  DRAW_BUFFER15_WEBGL: 34868,
	  MAX_COLOR_ATTACHMENTS_WEBGL: 36063,
	  MAX_DRAW_BUFFERS_WEBGL: 34852,
	  VERTEX_ARRAY_BINDING_OES: 34229,
	  QUERY_COUNTER_BITS_EXT: 34916,
	  CURRENT_QUERY_EXT: 34917,
	  QUERY_RESULT_EXT: 34918,
	  QUERY_RESULT_AVAILABLE_EXT: 34919,
	  TIME_ELAPSED_EXT: 35007,
	  TIMESTAMP_EXT: 36392,
	  GPU_DISJOINT_EXT: 36795
	}), _(T.prototype, {
	  bufferData: function bufferData() {
	    var _this$_;

	    return this.T(), (_this$_ = this._).bufferData.apply(_this$_, arguments);
	  },
	  bufferSubData: function bufferSubData() {
	    var _this$_2;

	    return this.T(), (_this$_2 = this._).bufferSubData.apply(_this$_2, arguments);
	  },
	  createBuffer: function createBuffer() {
	    return this._.createBuffer();
	  },
	  deleteBuffer: function deleteBuffer(E) {
	    var _ = this.states;
	    _.arrayBuffer === E ? _.arrayBuffer = null : _.elementArrayBuffer === E && (_.elementArrayBuffer = null);
	    var R = _.attributes;

	    for (var _5 in R) {
	      R[_5].buffer === E && (R[_5].buffer = null);
	    }

	    return this._.deleteBuffer(E);
	  },
	  getBufferParameter: function getBufferParameter(E, _) {
	    return this.T(), this._.getBufferParameter(E, _);
	  },
	  isBuffer: function isBuffer(E) {
	    return this._.isBuffer(E);
	  }
	}), _(T.prototype, {
	  checkFramebufferStatus: function checkFramebufferStatus(E) {
	    return this._.checkFramebufferStatus(E);
	  },
	  createFramebuffer: function createFramebuffer() {
	    return this._.createFramebuffer();
	  },
	  deleteFramebuffer: function deleteFramebuffer(E) {
	    var _ = this.states.framebuffer;

	    for (var _R2 in _) {
	      _[_R2] === E && (_[_R2] = null);
	    }

	    return this._.deleteFramebuffer(E);
	  },
	  framebufferRenderbuffer: function framebufferRenderbuffer(E, _, R, T) {
	    return this.T(), this._.framebufferRenderbuffer(E, _, R, T);
	  },
	  framebufferTexture2D: function framebufferTexture2D(E, _, R, T, A) {
	    return this.T(), this._.framebufferTexture2D(E, _, R, T, A);
	  },
	  getFramebufferAttachmentParameter: function getFramebufferAttachmentParameter(E, _, R) {
	    return this.T(), this._.getFramebufferAttachmentParameter(E, _, R);
	  },
	  isFramebuffer: function isFramebuffer(E) {
	    return this._.isFramebuffer(E);
	  },
	  readPixels: function readPixels(E, _, R, T, A, t, r) {
	    return this.T(), this._.readPixels(E, _, R, T, A, t, r);
	  }
	}), _(T.prototype, {
	  createRenderbuffer: function createRenderbuffer() {
	    return this._.createRenderbuffer();
	  },
	  deleteRenderbuffer: function deleteRenderbuffer(E) {
	    var _ = this.states.renderbuffer;

	    for (var _R3 in _) {
	      _[_R3] === E && (_[_R3] = null);
	    }

	    return this._.deleteRenderbuffer(E);
	  },
	  getRenderbufferParameter: function getRenderbufferParameter(E, _) {
	    return this.T(), this._.getRenderbufferParameter(E, _);
	  },
	  isRenderbuffer: function isRenderbuffer(E) {
	    return this._.isRenderbuffer(E);
	  },
	  renderbufferStorage: function renderbufferStorage(E, _, R, T) {
	    return this.T(), this._.renderbufferStorage(E, _, R, T);
	  }
	});

	var A = Array.isArray,
	    t = Object.keys,
	    r = Object.prototype.hasOwnProperty,
	    N = function E(_, R) {
	  if (_ === R) return !0;

	  if (_ && R && "object" == typeof _ && "object" == typeof R) {
	    var T,
	        N,
	        e,
	        i = A(_),
	        I = A(R);

	    if (i && I) {
	      if ((N = _.length) != R.length) return !1;

	      for (T = N; 0 != T--;) {
	        if (!E(_[T], R[T])) return !1;
	      }

	      return !0;
	    }

	    if (i != I) return !1;
	    var s = _ instanceof Date,
	        S = R instanceof Date;
	    if (s != S) return !1;
	    if (s && S) return _.getTime() == R.getTime();
	    var F = _ instanceof RegExp,
	        O = R instanceof RegExp;
	    if (F != O) return !1;
	    if (F && O) return _.toString() == R.toString();
	    var M = t(_);
	    if ((N = M.length) !== t(R).length) return !1;

	    for (T = N; 0 != T--;) {
	      if (!r.call(R, M[T])) return !1;
	    }

	    for (T = N; 0 != T--;) {
	      if (!E(_[e = M[T]], R[e])) return !1;
	    }

	    return !0;
	  }

	  return _ != _ && R != R;
	};

	_(T.prototype, {
	  scissor: function scissor(E, _, R, T) {
	    this.T();
	    var A = this.states.scissor;
	    A[0] === E && A[1] === _ && A[2] === R && A[3] === T || (A[0] = E, A[1] = _, A[2] = R, A[3] = T, this._.scissor(E, _, R, T));
	  },
	  viewport: function viewport(E, _, R, T) {
	    this.T();
	    var A = this.states.viewport;
	    A[0] === E && A[1] === _ && A[2] === R && A[3] === T || (A[0] = E, A[1] = _, A[2] = R, A[3] = T, this._.viewport(E, _, R, T));
	  },
	  blendColor: function blendColor(E, _, R, T) {
	    this.T();
	    var A = this.states.blendColor;
	    A[0] === E && A[1] === _ && A[2] === R && A[3] === T || (A[0] = E, A[1] = _, A[2] = R, A[3] = T, this._.blendColor(E, _, R, T));
	  },
	  blendEquation: function blendEquation(E) {
	    this.T();
	    var _ = this.states.blendEquationSeparate;
	    _[0] === E && _[1] === E || (_[0] = E, _[1] = E, this._.blendEquation(E));
	  },
	  blendEquationSeparate: function blendEquationSeparate(E, _) {
	    this.T();
	    var R = this.states.blendEquationSeparate;
	    R[0] === E && R[1] === _ || (R[0] = E, R[1] = _, this._.blendEquationSeparate(E, _));
	  },
	  blendFunc: function blendFunc(E, _) {
	    this.T();
	    var R = this.states.blendFuncSeparate;
	    R[0] === E && R[2] === E && R[1] === _ && R[3] === _ || (R[0] = E, R[1] = _, R[2] = E, R[3] = _, this._.blendFunc(E, _));
	  },
	  blendFuncSeparate: function blendFuncSeparate(E, _, R, T) {
	    this.T();
	    var A = this.states.blendFuncSeparate;
	    A[0] === E && A[1] === _ && A[2] === R && A[3] === T || (A[0] = E, A[1] = _, A[2] = R, A[3] = T, this._.blendFuncSeparate(E, _, R, T));
	  },
	  clearColor: function clearColor(E, _, R, T) {
	    this.T();
	    var A = this.states.clearColor;
	    A[0] === E && A[1] === _ && A[2] === R && A[3] === T || (A[0] = E, A[1] = _, A[2] = R, A[3] = T, this._.clearColor(E, _, R, T));
	  },
	  clearDepth: function clearDepth(E) {
	    this.T();
	    var _ = this.states.clearDepth;
	    _[0] !== E && (_[0] = E, this._.clearDepth(E));
	  },
	  clearStencil: function clearStencil(E) {
	    this.T();
	    var _ = this.states.clearStencil;
	    _[0] !== E && (_[0] = E, this._.clearStencil(E));
	  },
	  colorMask: function colorMask(E, _, R, T) {
	    this.T();
	    var A = this.states.colorMask;
	    A[0] === E && A[1] === _ && A[2] === R && A[3] === T || (A[0] = E, A[1] = _, A[2] = R, A[3] = T, this._.colorMask(E, _, R, T));
	  },
	  cullFace: function cullFace(E) {
	    this.T();
	    var _ = this.states.cullFace;
	    _[0] !== E && (_[0] = E, this._.cullFace(E));
	  },
	  depthFunc: function depthFunc(E) {
	    this.T();
	    var _ = this.states.depthFunc;
	    _[0] !== E && (_[0] = E, this._.depthFunc(E));
	  },
	  depthMask: function depthMask(E) {
	    this.T();
	    var _ = this.states.depthMask;
	    _[0] !== E && (_[0] = E, this._.depthMask(E));
	  },
	  depthRange: function depthRange(E, _) {
	    this.T();
	    var R = this.states.depthRange;
	    R[0] === E && R[1] === _ || (R[0] = E, R[1] = _, this._.depthRange(E, _));
	  },
	  disable: function disable(E) {
	    this.T();
	    var _ = this.states.capabilities;
	    _[E] && (_[E] = !1, this._.disable(E));
	  },
	  enable: function enable(E) {
	    this.T();
	    var _ = this.states.capabilities;
	    _[E] || (_[E] = !0, this._.enable(E));
	  },
	  frontFace: function frontFace(E) {
	    this.T();
	    var _ = this.states.frontFace;
	    _[0] !== E && (_[0] = E, this._.frontFace(E));
	  },
	  hint: function hint(E, _) {
	    this.T();
	    var R = this.states.hint;
	    R[E][0] !== _ && (R[E][0] = _, this._.hint(E, _));
	  },
	  lineWidth: function lineWidth(E) {
	    this.T();
	    var _ = this.states.lineWidth;
	    _[0] !== E && (_[0] = E, this._.lineWidth(E));
	  },
	  pixelStorei: function pixelStorei(E, _) {
	    this.T();
	    var R = this.states.pixelStorei;
	    R[E] !== _ && (R[E] && (R[E][0] = _), this._.pixelStorei(E, _));
	  },
	  polygonOffset: function polygonOffset(E, _) {
	    this.T();
	    var R = this.states.polygonOffset;
	    R[0] === E && R[1] === _ || (R[0] = E, R[1] = _, this._.polygonOffset(E, _));
	  },
	  sampleCoverage: function sampleCoverage(E, _) {
	    this.T();
	    var R = this.states.sampleCoverage;
	    R[0] === E && R[1] === _ || (R[0] = E, R[1] = _, this._.sampleCoverage(E, _));
	  },
	  stencilFunc: function stencilFunc(E, _, R) {
	    this.T();
	    var T = this.states.stencilFuncSeparate,
	        A = this._;
	    T[A.FRONT][0] === E && T[A.FRONT][1] === _ && T[A.FRONT][2] === R && T[A.BACK][0] === E && T[A.BACK][1] === _ && T[A.BACK][2] === R || (T[A.FRONT][0] = T[A.BACK][0] = E, T[A.FRONT][1] = T[A.BACK][1] = _, T[A.FRONT][2] = T[A.BACK][2] = R, this._.stencilFunc(E, _, R));
	  },
	  stencilFuncSeparate: function stencilFuncSeparate(E, _, R, T) {
	    if (this.T(), E === this._.FRONT_AND_BACK) return void this.stencilFunc(_, R, T);
	    var A = this.states.stencilFuncSeparate;
	    A[E][0] === _ && A[E][1] === R && A[E][2] === T || (A[E][0] = _, A[E][1] = R, A[E][2] = T, this._.stencilFuncSeparate(E, _, R, T));
	  },
	  stencilMask: function stencilMask(E) {
	    this.T();
	    var _ = this._,
	        R = this.states.stencilMaskSeparate;
	    R[_.FRONT][0] === E && R[_.BACK][0] === E || (R[_.FRONT][0] = E, R[_.BACK][0] = E, this._.stencilMask(E));
	  },
	  stencilMaskSeparate: function stencilMaskSeparate(E, _) {
	    if (this.T(), E === this._.FRONT_AND_BACK) return void this.stencilMask(_);
	    var R = this.states.stencilMaskSeparate;
	    R[E][0] !== _ && (R[E][0] = _, this._.stencilMaskSeparate(E, _));
	  },
	  stencilOp: function stencilOp(E, _, R) {
	    this.T();
	    var T = this.states.stencilOpSeparate,
	        A = this._;
	    T[A.FRONT][0] === E && T[A.FRONT][1] === _ && T[A.FRONT][2] === R && T[A.BACK][0] === E && T[A.BACK][1] === _ && T[A.BACK][2] === R || (T[A.FRONT][0] = T[A.BACK][0] = E, T[A.FRONT][1] = T[A.BACK][1] = _, T[A.FRONT][2] = T[A.BACK][2] = R, this._.stencilOp(E, _, R));
	  },
	  stencilOpSeparate: function stencilOpSeparate(E, _, R, T) {
	    if (this.T(), E === this._.FRONT_AND_BACK) return void this.stencilOp(_, R, T);
	    var A = this.states.stencilOpSeparate;
	    A[E][0] === _ && A[E][1] === R && A[E][2] === T || (A[E][0] = _, A[E][1] = R, A[E][2] = T, this._.stencilOpSeparate(E, _, R, T));
	  },
	  bindFramebuffer: function bindFramebuffer(E, _) {
	    this.T();
	    var R = this.states.framebuffer;
	    R[E] !== _ && (R[E] = _, this._.bindFramebuffer(E, _));
	  },
	  bindRenderbuffer: function bindRenderbuffer(E, _) {
	    this.T();
	    var R = this.states.renderbuffer;
	    R[E] !== _ && (R[E] = _, this._.bindRenderbuffer(E, _));
	  },
	  bindTexture: function bindTexture(E, _) {
	    this.T();
	    var R = this.states.textures,
	        T = -1 !== R.active ? R.active - 33984 : -1;
	    R.units[T][E] = _, this._.bindTexture(E, _);
	  },
	  activeTexture: function activeTexture(E) {
	    this.T();
	    var _ = this._,
	        R = this.states.textures,
	        T = R.active;
	    R.active = E, _.activeTexture(E), -1 === T && (R.units[E - 33984][_.TEXTURE_2D] = R.units[-1][_.TEXTURE_2D], R.units[E - 33984][_.TEXTURE_CUBE_MAP] = R.units[-1][_.TEXTURE_CUBE_MAP], R.units[-1][_.TEXTURE_2D] = null, R.units[-1][_.TEXTURE_CUBE_MAP] = null);
	  },
	  useProgram: function useProgram(E) {
	    this.T();
	    var _ = this.states;
	    _.program !== E && (_.program = E, this._.useProgram(E));
	  },
	  bindBuffer: function bindBuffer(E, _) {
	    this.T();
	    var R = this._,
	        T = this.states;

	    if (E === R.ELEMENT_ARRAY_BUFFER) {
	      if (T.elementArrayBuffer === _) return;
	      T.elementArrayBuffer = _;
	    } else {
	      if (T.arrayBuffer === _) return;
	      T.arrayBuffer = _;
	    }

	    R.bindBuffer(E, _);
	  },
	  vertexAttribPointer: function vertexAttribPointer(E, _, R, T, A, t) {
	    this.T();
	    var r = [E, _, R, T, A, t];
	    this.states.attributes[E] || (this.states.attributes[E] = {
	      enable: !0
	    });
	    var N = this.states.attributes[E];
	    return N.buffer = this.states.arrayBuffer, N.args = r, this._.vertexAttribPointer(E, _, R, T, A, t);
	  }
	}, {
	  T: function T() {
	    var E = this._;

	    if (E.N && E.N !== this) {
	      var _6 = E.N;
	      this.i(_6.states), E.N = this;
	    }

	    E.N = this;
	  },
	  i: function i(E) {
	    var _ = this.states,
	        R = this._;

	    for (var _T2 in _) {
	      if ("capabilities" !== _T2 && "textures" !== _T2 && "attributes" !== _T2 && "arrayBuffer" !== _T2 && "elementArrayBuffer" !== _T2) if ("program" === _T2) _.program !== E.program && R.useProgram(_.program);else if ("framebuffer" === _T2) for (var _A in _[_T2]) {
	        _[_T2][_A] !== E[_T2][_A] && R.bindFramebuffer(+_A, _[_T2][_A]);
	      } else if ("renderbuffer" === _T2) for (var _A2 in _[_T2]) {
	        _[_T2][_A2] !== E[_T2][_A2] && R.bindRenderbuffer(+_A2, _[_T2][_A2]);
	      } else if (!N(_[_T2], E[_T2])) if (Array.isArray(E[_T2])) R[_T2].apply(R, _[_T2]);else for (var _A3 in _[_T2]) {
	        N(_[_T2][_A3], E[_T2][_A3]) || R[_T2].apply(R, [+_A3].concat(_[_T2][_A3]));
	      }
	    }

	    for (var _T3 in _.capabilities) {
	      _.capabilities[_T3] !== E.capabilities[_T3] && R[_.capabilities[_T3] ? "enable" : "disable"](+_T3);
	    }

	    var T = _.textures,
	        A = E.textures,
	        t = T.units,
	        r = A.units,
	        e = T.active - R.TEXTURE0;

	    for (var _E2 = 0; _E2 < t.length; _E2++) {
	      _E2 === e || t[_E2][R.TEXTURE_2D] === r[_E2][R.TEXTURE_2D] && t[_E2][R.TEXTURE_CUBE_MAP] === r[_E2][R.TEXTURE_CUBE_MAP] || (R.activeTexture(R.TEXTURE0 + _E2), R.bindTexture(R.TEXTURE_2D, t[_E2][R.TEXTURE_2D]), R.bindTexture(R.TEXTURE_CUBE_MAP, t[_E2][R.TEXTURE_CUBE_MAP]));
	    }

	    if (T.active > -1) {
	      var _E3 = t[e];
	      _E3[R.TEXTURE_2D] === r[e][R.TEXTURE_2D] && _E3[R.TEXTURE_CUBE_MAP] === r[e][R.TEXTURE_CUBE_MAP] || (R.activeTexture(T.active), R.bindTexture(R.TEXTURE_2D, _E3[R.TEXTURE_2D]), R.bindTexture(R.TEXTURE_CUBE_MAP, _E3[R.TEXTURE_CUBE_MAP]));
	    }

	    var i = _.attributes,
	        I = E.attributes;

	    for (var _E4 in i) {
	      I[_E4] && i[_E4].buffer === I[_E4].buffer && N(i[_E4].args, I[_E4].args) || i[_E4].buffer && (R.bindBuffer(R.ARRAY_BUFFER, i[_E4].buffer), R.vertexAttribPointer.apply(R, i[_E4].args), i[_E4].enable ? R.enableVertexAttribArray(i[_E4].args[0]) : R.disableVertexAttribArray(i[_E4].args[0]));
	    }

	    R.bindBuffer(R.ARRAY_BUFFER, _.arrayBuffer), R.bindBuffer(R.ELEMENT_ARRAY_BUFFER, _.elementArrayBuffer);
	  }
	}), _(T.prototype, {
	  compressedTexImage2D: function compressedTexImage2D(E, _, R, T, A, t, r) {
	    return this.T(), this._.compressedTexImage2D(E, _, R, T, A, t, r);
	  },
	  copyTexImage2D: function copyTexImage2D(E, _, R, T, A, t, r, N) {
	    return this.T(), this._.copyTexImage2D(E, _, R, T, A, t, r, N);
	  },
	  copyTexSubImage2D: function copyTexSubImage2D(E, _, R, T, A, t, r, N) {
	    return this.T(), this._.copyTexSubImage2D(E, _, R, T, A, t, r, N);
	  },
	  createTexture: function createTexture() {
	    return this._.createTexture();
	  },
	  deleteTexture: function deleteTexture(E) {
	    return this._.deleteTexture(E);
	  },
	  generateMipmap: function generateMipmap(E) {
	    return this.T(), this._.generateMipmap(E);
	  },
	  getTexParameter: function getTexParameter(E, _) {
	    return this.T(), this._.getTexParameter(E, _);
	  },
	  isTexture: function isTexture(E) {
	    return this._.isTexture(E);
	  },
	  texImage2D: function texImage2D() {
	    var _this$_3;

	    return this.T(), (_this$_3 = this._).texImage2D.apply(_this$_3, arguments);
	  },
	  texSubImage2D: function texSubImage2D(E) {
	    var _this$_4;

	    return this.T(), (_this$_4 = this._).texSubImage2D.apply(_this$_4, E);
	  },
	  texParameterf: function texParameterf(E, _, R) {
	    return this.T(), this._.texParameterf(E, _, R);
	  },
	  texParameteri: function texParameteri(E, _, R) {
	    return this.T(), this._.texParameteri(E, _, R);
	  }
	}), _(T.prototype, {
	  bindAttribLocation: function bindAttribLocation(E, _, R) {
	    return this._.bindAttribLocation(E, _, R);
	  },
	  enableVertexAttribArray: function enableVertexAttribArray(E) {
	    return this.T(), this.states.attributes[E] || (this.states.attributes[E] = {}), this.states.attributes[E].enable = !0, this._.enableVertexAttribArray(E);
	  },
	  disableVertexAttribArray: function disableVertexAttribArray(E) {
	    return this.T(), this.states.attributes[E] || (this.states.attributes[E] = {}), this.states.attributes[E].enable = !1, this._.disableVertexAttribArray(E);
	  },
	  getActiveAttrib: function getActiveAttrib(E, _) {
	    return this._.getActiveAttrib(E, _);
	  },
	  getActiveUniform: function getActiveUniform(E, _) {
	    return this._.getActiveUniform(E, _);
	  },
	  getAttribLocation: function getAttribLocation(E, _) {
	    return this._.getAttribLocation(E, _);
	  },
	  getUniformLocation: function getUniformLocation(E, _) {
	    return this._.getUniformLocation(E, _);
	  },
	  getVertexAttrib: function getVertexAttrib(E, _) {
	    return this.T(), this._.getVertexAttrib(E, _);
	  },
	  getVertexAttribOffset: function getVertexAttribOffset(E, _) {
	    return this.T(), this._.getVertexAttribOffset(E, _);
	  },
	  uniformMatrix2fv: function uniformMatrix2fv(E, _, R) {
	    return this.T(), this._.uniformMatrix2fv(E, _, R);
	  },
	  uniformMatrix3fv: function uniformMatrix3fv(E, _, R) {
	    return this.T(), this._.uniformMatrix3fv(E, _, R);
	  },
	  uniformMatrix4fv: function uniformMatrix4fv(E, _, R) {
	    return this.T(), this._.uniformMatrix4fv(E, _, R);
	  },
	  uniform1f: function uniform1f(E, _) {
	    return this.T(), this._.uniform1f(E, _);
	  },
	  uniform1fv: function uniform1fv(E, _) {
	    return this.T(), this._.uniform1fv(E, _);
	  },
	  uniform1i: function uniform1i(E, _) {
	    return this.T(), this._.uniform1i(E, _);
	  },
	  uniform1iv: function uniform1iv(E, _) {
	    return this.T(), this._.uniform1iv(E, _);
	  },
	  uniform2f: function uniform2f(E, _, R) {
	    return this.T(), this._.uniform2f(E, _, R);
	  },
	  uniform2fv: function uniform2fv(E, _) {
	    return this.T(), this._.uniform2fv(E, _);
	  },
	  uniform2i: function uniform2i(E, _, R) {
	    return this.T(), this._.uniform2i(E, _, R);
	  },
	  uniform2iv: function uniform2iv(E, _) {
	    return this.T(), this._.uniform2iv(E, _);
	  },
	  uniform3f: function uniform3f(E, _, R, T) {
	    return this.T(), this._.uniform3f(E, _, R, T);
	  },
	  uniform3fv: function uniform3fv(E, _) {
	    return this.T(), this._.uniform3fv(E, _);
	  },
	  uniform3i: function uniform3i(E, _, R, T) {
	    return this.T(), this._.uniform3i(E, _, R, T);
	  },
	  uniform3iv: function uniform3iv(E, _) {
	    return this.T(), this._.uniform3iv(E, _);
	  },
	  uniform4f: function uniform4f(E, _, R, T, A) {
	    return this.T(), this._.uniform4f(E, _, R, T, A);
	  },
	  uniform4fv: function uniform4fv(E, _) {
	    return this.T(), this._.uniform4fv(E, _);
	  },
	  uniform4i: function uniform4i(E, _, R, T, A) {
	    return this.T(), this._.uniform4i(E, _, R, T, A);
	  },
	  uniform4iv: function uniform4iv(E, _) {
	    return this.T(), this._.uniform4iv(E, _);
	  },
	  vertexAttrib1f: function vertexAttrib1f(E, _) {
	    return this.T(), this._.vertexAttrib1f(E, _);
	  },
	  vertexAttrib2f: function vertexAttrib2f(E, _, R) {
	    return this.T(), this._.vertexAttrib2f(E, _, R);
	  },
	  vertexAttrib3f: function vertexAttrib3f(E, _, R, T) {
	    return this.T(), this._.vertexAttrib3f(E, _, R, T);
	  },
	  vertexAttrib4f: function vertexAttrib4f(E, _, R, T, A) {
	    return this.T(), this._.vertexAttrib4f(E, _, R, T, A);
	  },
	  vertexAttrib1fv: function vertexAttrib1fv(E, _) {
	    return this.T(), this._.vertexAttrib1fv(E, _);
	  },
	  vertexAttrib2fv: function vertexAttrib2fv(E, _) {
	    return this.T(), this._.vertexAttrib2fv(E, _);
	  },
	  vertexAttrib3fv: function vertexAttrib3fv(E, _) {
	    return this.T(), this._.vertexAttrib3fv(E, _);
	  },
	  vertexAttrib4fv: function vertexAttrib4fv(E, _) {
	    return this.T(), this._.vertexAttrib4fv(E, _);
	  }
	});

	var options = {
	  renderer: 'gl',
	  antialias: true,
	  extensions: ['ANGLE_instanced_arrays', 'OES_texture_float', 'OES_element_index_uint', 'OES_standard_derivatives'],
	  optionalExtensions: ['WEBGL_draw_buffers', 'EXT_shader_texture_lod', 'OES_texture_float_linear'],
	  forceRenderOnZooming: true,
	  forceRenderOnMoving: true,
	  forceRenderOnRotating: true
	};

	var GroupGLLayer = function (_maptalks$Layer) {
	  _inheritsLoose(GroupGLLayer, _maptalks$Layer);

	  GroupGLLayer.fromJSON = function fromJSON(layerJSON) {
	    if (!layerJSON || layerJSON['type'] !== 'GroupGLLayer') {
	      return null;
	    }

	    var layers = layerJSON['layers'].map(function (json) {
	      return maptalks.Layer.fromJSON(json);
	    });
	    return new GroupGLLayer(layerJSON['id'], layers, layerJSON['options']);
	  };

	  function GroupGLLayer(id, layers, options) {
	    var _this;

	    _this = _maptalks$Layer.call(this, id, options) || this;
	    _this.layers = layers || [];

	    _this._checkChildren();

	    _this._layerMap = {};
	    return _this;
	  }

	  var _proto = GroupGLLayer.prototype;

	  _proto.addLayer = function addLayer(layer, idx) {
	    if (layer.getMap()) {
	      throw new Error("layer(" + layer.getId() + " is already added on map");
	    }

	    if (idx === undefined) {
	      this.layers.push(layer);
	    } else {
	      this.layers.splice(idx, 0, layer);
	    }

	    this._checkChildren();

	    var renderer = this.getRenderer();

	    if (!renderer) {
	      return this;
	    }

	    this._prepareLayer(layer);

	    renderer.setToRedraw();
	    return this;
	  };

	  _proto.removeLayer = function removeLayer(layer) {
	    if (maptalks.Util.isString(layer)) {
	      layer = this.getChildLayer(layer);
	    }

	    var idx = this.layers.indexOf(layer);

	    if (idx < 0) {
	      return this;
	    }

	    layer._doRemove();

	    layer.off('show hide', this._onLayerShowHide, this);
	    delete this._layerMap[layer.getId()];
	    this.layers.splice(idx, 1);
	    this.getRenderer().setToRedraw();
	    return this;
	  };

	  _proto.getLayers = function getLayers() {
	    return this.layers;
	  };

	  _proto.toJSON = function toJSON() {
	    var layers = [];

	    if (this.layers) {
	      for (var i = 0; i < this.layers.length; i++) {
	        var layer = this.layers[i];

	        if (!layer) {
	          continue;
	        }

	        if (layer && layer.toJSON) {
	          layers.push(layer.toJSON());
	        }
	      }
	    }

	    var profile = {
	      'type': this.getJSONType(),
	      'id': this.getId(),
	      'layers': layers,
	      'options': this.config()
	    };
	    return profile;
	  };

	  _proto.onLoadEnd = function onLoadEnd() {
	    var _this2 = this;

	    this.layers.forEach(function (layer) {
	      _this2._prepareLayer(layer);
	    });

	    _maptalks$Layer.prototype.onLoadEnd.call(this);
	  };

	  _proto._prepareLayer = function _prepareLayer(layer) {
	    var map = this.getMap();
	    this._layerMap[layer.getId()] = layer;
	    layer['_canvas'] = this.getRenderer().canvas;
	    layer['_bindMap'](map);
	    layer.once('renderercreate', this._onChildRendererCreate, this);
	    layer.load();

	    this._bindChildListeners(layer);
	  };

	  _proto.onRemove = function onRemove() {
	    var _this3 = this;

	    this.layers.forEach(function (layer) {
	      layer._doRemove();

	      layer.off('show hide', _this3._onLayerShowHide, _this3);
	    });
	    delete this._layerMap;

	    _maptalks$Layer.prototype.onRemove.call(this);
	  };

	  _proto.getChildLayer = function getChildLayer(id) {
	    var layer = this._layerMap[id];
	    return layer || null;
	  };

	  _proto._bindChildListeners = function _bindChildListeners(layer) {
	    layer.on('show hide', this._onLayerShowHide, this);
	  };

	  _proto._onLayerShowHide = function _onLayerShowHide() {
	    var renderer = this.getRenderer();

	    if (renderer) {
	      renderer.setToRedraw();
	    }
	  };

	  _proto._onChildRendererCreate = function _onChildRendererCreate(e) {
	    e.renderer.clearCanvas = empty;
	  };

	  _proto.isVisible = function isVisible() {
	    if (!_maptalks$Layer.prototype.isVisible.call(this)) {
	      return false;
	    }

	    var children = this.layers;

	    for (var i = 0, l = children.length; i < l; i++) {
	      if (children[i].isVisible()) {
	        return true;
	      }
	    }

	    return false;
	  };

	  _proto._checkChildren = function _checkChildren() {
	    var _this4 = this;

	    var ids = {};
	    this.layers.forEach(function (layer) {
	      var layerId = layer.getId();

	      if (ids[layerId]) {
	        throw new Error("Duplicate child layer id (" + layerId + ") in the GroupGLLayer (" + _this4.getId() + ")");
	      } else {
	        ids[layerId] = 1;
	      }
	    });
	  };

	  return GroupGLLayer;
	}(maptalks.Layer);
	GroupGLLayer.mergeOptions(options);
	GroupGLLayer.registerJSONType('GroupGLLayer');

	var Renderer$1 = function (_maptalks$renderer$Ca) {
	  _inheritsLoose(Renderer, _maptalks$renderer$Ca);

	  function Renderer() {
	    return _maptalks$renderer$Ca.apply(this, arguments) || this;
	  }

	  var _proto2 = Renderer.prototype;

	  _proto2.onAdd = function onAdd() {
	    _maptalks$renderer$Ca.prototype.onAdd.call(this);

	    this.prepareCanvas();
	  };

	  _proto2.render = function render() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (!this.getMap() || !this.layer.isVisible()) {
	      return;
	    }

	    this.prepareRender();
	    this.prepareCanvas();
	    this.forEachRenderer(function (renderer, layer) {
	      if (!layer.isVisible()) {
	        return;
	      }

	      var gl = renderer.gl;

	      if (gl && gl instanceof T) {
	        gl.clear(gl.STENCIL_BUFFER_BIT);
	      }

	      renderer.render.apply(renderer, args);
	    });
	    this['_toRedraw'] = false;
	  };

	  _proto2.drawOnInteracting = function drawOnInteracting() {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    if (!this.getMap() || !this.layer.isVisible()) {
	      return;
	    }

	    this.forEachRenderer(function (renderer, layer) {
	      if (!layer.isVisible()) {
	        return;
	      }

	      var gl = renderer.gl;

	      if (gl && gl instanceof T) {
	        gl.clear(gl.STENCIL_BUFFER_BIT);
	      }

	      renderer.drawOnInteracting.apply(renderer, args);
	    });
	    this['_toRedraw'] = false;
	  };

	  _proto2.testIfNeedRedraw = function testIfNeedRedraw() {
	    if (this['_toRedraw']) {
	      this['_toRedraw'] = false;
	      return true;
	    }

	    var layers = this.layer.getLayers();

	    for (var _iterator = layers, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var layer = _ref;
	      var renderer = layer.getRenderer();

	      if (renderer && renderer.testIfNeedRedraw()) {
	        return true;
	      }
	    }

	    return false;
	  };

	  _proto2.isRenderComplete = function isRenderComplete() {
	    var layers = this.layer.getLayers();

	    for (var _iterator2 = layers, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var layer = _ref2;
	      var renderer = layer.getRenderer();

	      if (renderer && !renderer.isRenderComplete()) {
	        return false;
	      }
	    }

	    return true;
	  };

	  _proto2.mustRenderOnInteracting = function mustRenderOnInteracting() {
	    var layers = this.layer.getLayers();

	    for (var _iterator3 = layers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var layer = _ref3;
	      var renderer = layer.getRenderer();

	      if (renderer && renderer.mustRenderOnInteracting()) {
	        return true;
	      }
	    }

	    return false;
	  };

	  _proto2.isCanvasUpdated = function isCanvasUpdated() {
	    var layers = this.layer.getLayers();

	    for (var _iterator4 = layers, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var layer = _ref4;
	      var renderer = layer.getRenderer();

	      if (renderer && renderer.isCanvasUpdated()) {
	        return true;
	      }
	    }

	    return false;
	  };

	  _proto2.isBlank = function isBlank() {
	    var layers = this.layer.getLayers();

	    for (var _iterator5 = layers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
	      var _ref5;

	      if (_isArray5) {
	        if (_i5 >= _iterator5.length) break;
	        _ref5 = _iterator5[_i5++];
	      } else {
	        _i5 = _iterator5.next();
	        if (_i5.done) break;
	        _ref5 = _i5.value;
	      }

	      var layer = _ref5;
	      var renderer = layer.getRenderer();

	      if (renderer && !renderer.isBlank()) {
	        return false;
	      }
	    }

	    return true;
	  };

	  _proto2.createContext = function createContext() {
	    var _this5 = this;

	    var layer = this.layer;
	    var attributes = layer.options['glOptions'] || {
	      alpha: true,
	      depth: true,
	      stencil: true
	    };
	    attributes.preserveDrawingBuffer = true;
	    attributes.antialias = layer.options['antialias'];
	    this.glOptions = attributes;

	    var gl = this.gl = this._createGLContext(this.canvas, attributes);

	    this._initGL(gl);

	    gl.wrap = function () {
	      return new T(_this5.gl);
	    };

	    this.glCtx = gl.wrap();
	    this.canvas.gl = this.gl;
	  };

	  _proto2._initGL = function _initGL() {
	    var layer = this.layer;
	    var gl = this.gl;
	    var extensions = layer.options['extensions'];

	    if (extensions) {
	      extensions.forEach(function (ext) {
	        gl.getExtension(ext);
	      });
	    }

	    var optionalExtensions = layer.options['optionalExtensions'];

	    if (optionalExtensions) {
	      optionalExtensions.forEach(function (ext) {
	        gl.getExtension(ext);
	      });
	    }

	    this.gl.clearColor(0.0, 0.0, 0.0, 0.0);
	  };

	  _proto2.clearCanvas = function clearCanvas() {
	    _maptalks$renderer$Ca.prototype.clearCanvas.call(this);

	    var gl = this.glCtx;
	    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
	    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
	    gl.clear(gl.COLOR_BUFFER_BIT | gl.STENCIL_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	  };

	  _proto2.resizeCanvas = function resizeCanvas() {
	    _maptalks$renderer$Ca.prototype.resizeCanvas.call(this);

	    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
	    this.forEachRenderer(function (renderer) {
	      if (renderer.canvas) {
	        renderer.resizeCanvas();
	      }
	    });
	  };

	  _proto2.getCanvasImage = function getCanvasImage() {
	    this.forEachRenderer(function (renderer) {
	      renderer.getCanvasImage();
	    });
	    return _maptalks$renderer$Ca.prototype.getCanvasImage.call(this);
	  };

	  _proto2.forEachRenderer = function forEachRenderer(fn) {
	    var layers = this.layer.getLayers();

	    for (var _iterator6 = layers, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
	      var _ref6;

	      if (_isArray6) {
	        if (_i6 >= _iterator6.length) break;
	        _ref6 = _iterator6[_i6++];
	      } else {
	        _i6 = _iterator6.next();
	        if (_i6.done) break;
	        _ref6 = _i6.value;
	      }

	      var layer = _ref6;
	      var renderer = layer.getRenderer();

	      if (renderer) {
	        fn(renderer, layer);
	      }
	    }
	  };

	  _proto2._createGLContext = function _createGLContext(canvas, options) {
	    var names = ['webgl', 'experimental-webgl'];
	    var gl = null;

	    for (var i = 0; i < names.length; ++i) {
	      try {
	        gl = canvas.getContext(names[i], options);
	      } catch (e) {}

	      if (gl) {
	        break;
	      }
	    }

	    return gl;
	  };

	  _proto2.onRemove = function onRemove() {
	    if (this.canvas.pickingFBO && this.canvas.pickingFBO.destroy) {
	      this.canvas.pickingFBO.destroy();
	    }

	    _maptalks$renderer$Ca.prototype.onRemove.call(this);
	  };

	  return Renderer;
	}(maptalks.renderer.CanvasRenderer);

	GroupGLLayer.registerRenderer('gl', Renderer$1);
	GroupGLLayer.registerRenderer('canvas', null);

	function empty() {}

	if (typeof window !== 'undefined') {
	  if (window.maptalks) window.maptalks.GroupGLLayer = GroupGLLayer;
	}

	exports.createREGL = regl;
	exports.reshader = reshadergl_es;
	exports.glMatrix = common;
	exports.mat2 = mat2;
	exports.mat2d = mat2d;
	exports.mat3 = mat3;
	exports.mat4 = mat4;
	exports.quat = quat;
	exports.quat2 = quat2;
	exports.vec2 = vec2;
	exports.vec3 = vec3;
	exports.vec4 = vec4;
	exports.GroupGLLayer = GroupGLLayer;
	exports.GLContext = T;

	Object.defineProperty(exports, '__esModule', { value: true });

	typeof console !== 'undefined' && console.log('@maptalks/gl v0.2.4');

}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwdGFsa3NnbC1kZXYuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWFwdGFsa3MvcmVnbC9kaXN0L3JlZ2wuanMiLCIuLi8uLi9yZXNoYWRlci5nbC9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXgvY29tbW9uLmpzIiwiLi4vLi4vcmVzaGFkZXIuZ2wvbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L21hdDMuanMiLCIuLi8uLi9yZXNoYWRlci5nbC9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXgvbWF0NC5qcyIsIi4uLy4uL3Jlc2hhZGVyLmdsL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC92ZWMzLmpzIiwiLi4vLi4vcmVzaGFkZXIuZ2wvbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L3ZlYzQuanMiLCIuLi8uLi9yZXNoYWRlci5nbC9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXgvcXVhdC5qcyIsIi4uLy4uL3Jlc2hhZGVyLmdsL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC92ZWMyLmpzIiwiLi4vLi4vcmVzaGFkZXIuZ2wvZGlzdC9yZXNoYWRlcmdsLmVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L2NvbW1vbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC9tYXQyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L21hdDJkLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L21hdDMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXgvbWF0NC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC92ZWMzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dsLW1hdHJpeC9saWIvZ2wtbWF0cml4L3ZlYzQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2wtbWF0cml4L2xpYi9nbC1tYXRyaXgvcXVhdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC9xdWF0Mi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9nbC1tYXRyaXgvbGliL2dsLW1hdHJpeC92ZWMyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXB0YWxrcy9mdXNpb25nbC9kaXN0L2Z1c2lvbmdsLmVzLmpzIiwiLi4vc3JjL2xheWVyL0dyb3VwR0xMYXllci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuXHR0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG5cdHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG5cdChnbG9iYWwuY3JlYXRlUkVHTCA9IGZhY3RvcnkoKSk7XG59KHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxudmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgcmV0dXJuIChcclxuICAgIHggaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8XHJcbiAgICB4IGluc3RhbmNlb2YgVWludDE2QXJyYXkgfHxcclxuICAgIHggaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxyXG4gICAgeCBpbnN0YW5jZW9mIEludDhBcnJheSB8fFxyXG4gICAgeCBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHxcclxuICAgIHggaW5zdGFuY2VvZiBJbnQzMkFycmF5IHx8XHJcbiAgICB4IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5IHx8XHJcbiAgICB4IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5IHx8XHJcbiAgICB4IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXlcclxuICApXHJcbn07XG5cbnZhciBleHRlbmQgPSBmdW5jdGlvbiAoYmFzZSwgb3B0cykge1xyXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob3B0cyk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XHJcbiAgICBiYXNlW2tleXNbaV1dID0gb3B0c1trZXlzW2ldXTtcclxuICB9XHJcbiAgcmV0dXJuIGJhc2VcclxufTtcblxuLy8gRXJyb3IgY2hlY2tpbmcgYW5kIHBhcmFtZXRlciB2YWxpZGF0aW9uLlxyXG4vL1xyXG4vLyBTdGF0ZW1lbnRzIGZvciB0aGUgZm9ybSBgY2hlY2suc29tZVByb2NlZHVyZSguLi4pYCBnZXQgcmVtb3ZlZCBieVxyXG4vLyBhIGJyb3dzZXJpZnkgdHJhbnNmb3JtIGZvciBvcHRpbWl6ZWQvbWluaWZpZWQgYnVuZGxlcy5cclxuLy9cclxuLyogZ2xvYmFscyBhdG9iICovXHJcbnZhciBlbmRsID0gJ1xcbic7XHJcblxyXG4vLyBvbmx5IHVzZWQgZm9yIGV4dHJhY3Rpbmcgc2hhZGVyIG5hbWVzLiAgaWYgYXRvYiBub3QgcHJlc2VudCwgdGhlbiBlcnJvcnNcclxuLy8gd2lsbCBiZSBzbGlnaHRseSBjcmFwcGllclxyXG5mdW5jdGlvbiBkZWNvZGVCNjQgKHN0cikge1xyXG4gIGlmICh0eXBlb2YgYXRvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIHJldHVybiBhdG9iKHN0cilcclxuICB9XHJcbiAgcmV0dXJuICdiYXNlNjQ6JyArIHN0clxyXG59XHJcblxyXG5mdW5jdGlvbiByYWlzZSAobWVzc2FnZSkge1xyXG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcignKHJlZ2wpICcgKyBtZXNzYWdlKTtcclxuICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICB0aHJvdyBlcnJvclxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVjayAocHJlZCwgbWVzc2FnZSkge1xyXG4gIGlmICghcHJlZCkge1xyXG4gICAgcmFpc2UobWVzc2FnZSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBlbmNvbG9uIChtZXNzYWdlKSB7XHJcbiAgaWYgKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiAnOiAnICsgbWVzc2FnZVxyXG4gIH1cclxuICByZXR1cm4gJydcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tQYXJhbWV0ZXIgKHBhcmFtLCBwb3NzaWJpbGl0aWVzLCBtZXNzYWdlKSB7XHJcbiAgaWYgKCEocGFyYW0gaW4gcG9zc2liaWxpdGllcykpIHtcclxuICAgIHJhaXNlKCd1bmtub3duIHBhcmFtZXRlciAoJyArIHBhcmFtICsgJyknICsgZW5jb2xvbihtZXNzYWdlKSArXHJcbiAgICAgICAgICAnLiBwb3NzaWJsZSB2YWx1ZXM6ICcgKyBPYmplY3Qua2V5cyhwb3NzaWJpbGl0aWVzKS5qb2luKCkpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tJc1R5cGVkQXJyYXkgKGRhdGEsIG1lc3NhZ2UpIHtcclxuICBpZiAoIWlzVHlwZWRBcnJheShkYXRhKSkge1xyXG4gICAgcmFpc2UoXHJcbiAgICAgICdpbnZhbGlkIHBhcmFtZXRlciB0eXBlJyArIGVuY29sb24obWVzc2FnZSkgK1xyXG4gICAgICAnLiBtdXN0IGJlIGEgdHlwZWQgYXJyYXknKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrVHlwZU9mICh2YWx1ZSwgdHlwZSwgbWVzc2FnZSkge1xyXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IHR5cGUpIHtcclxuICAgIHJhaXNlKFxyXG4gICAgICAnaW52YWxpZCBwYXJhbWV0ZXIgdHlwZScgKyBlbmNvbG9uKG1lc3NhZ2UpICtcclxuICAgICAgJy4gZXhwZWN0ZWQgJyArIHR5cGUgKyAnLCBnb3QgJyArICh0eXBlb2YgdmFsdWUpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrTm9uTmVnYXRpdmVJbnQgKHZhbHVlLCBtZXNzYWdlKSB7XHJcbiAgaWYgKCEoKHZhbHVlID49IDApICYmXHJcbiAgICAgICAgKCh2YWx1ZSB8IDApID09PSB2YWx1ZSkpKSB7XHJcbiAgICByYWlzZSgnaW52YWxpZCBwYXJhbWV0ZXIgdHlwZSwgKCcgKyB2YWx1ZSArICcpJyArIGVuY29sb24obWVzc2FnZSkgK1xyXG4gICAgICAgICAgJy4gbXVzdCBiZSBhIG5vbm5lZ2F0aXZlIGludGVnZXInKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrT25lT2YgKHZhbHVlLCBsaXN0LCBtZXNzYWdlKSB7XHJcbiAgaWYgKGxpc3QuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICByYWlzZSgnaW52YWxpZCB2YWx1ZScgKyBlbmNvbG9uKG1lc3NhZ2UpICsgJy4gbXVzdCBiZSBvbmUgb2Y6ICcgKyBsaXN0KTtcclxuICB9XHJcbn1cclxuXHJcbnZhciBjb25zdHJ1Y3RvcktleXMgPSBbXHJcbiAgJ2dsJyxcclxuICAnY2FudmFzJyxcclxuICAnY29udGFpbmVyJyxcclxuICAnYXR0cmlidXRlcycsXHJcbiAgJ3BpeGVsUmF0aW8nLFxyXG4gICdleHRlbnNpb25zJyxcclxuICAnb3B0aW9uYWxFeHRlbnNpb25zJyxcclxuICAncHJvZmlsZScsXHJcbiAgJ29uRG9uZSdcclxuXTtcclxuXHJcbmZ1bmN0aW9uIGNoZWNrQ29uc3RydWN0b3IgKG9iaikge1xyXG4gIE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBpZiAoY29uc3RydWN0b3JLZXlzLmluZGV4T2Yoa2V5KSA8IDApIHtcclxuICAgICAgcmFpc2UoJ2ludmFsaWQgcmVnbCBjb25zdHJ1Y3RvciBhcmd1bWVudCBcIicgKyBrZXkgKyAnXCIuIG11c3QgYmUgb25lIG9mICcgKyBjb25zdHJ1Y3RvcktleXMpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBsZWZ0UGFkIChzdHIsIG4pIHtcclxuICBzdHIgPSBzdHIgKyAnJztcclxuICB3aGlsZSAoc3RyLmxlbmd0aCA8IG4pIHtcclxuICAgIHN0ciA9ICcgJyArIHN0cjtcclxuICB9XHJcbiAgcmV0dXJuIHN0clxyXG59XHJcblxyXG5mdW5jdGlvbiBTaGFkZXJGaWxlICgpIHtcclxuICB0aGlzLm5hbWUgPSAndW5rbm93bic7XHJcbiAgdGhpcy5saW5lcyA9IFtdO1xyXG4gIHRoaXMuaW5kZXggPSB7fTtcclxuICB0aGlzLmhhc0Vycm9ycyA9IGZhbHNlO1xyXG59XHJcblxyXG5mdW5jdGlvbiBTaGFkZXJMaW5lIChudW1iZXIsIGxpbmUpIHtcclxuICB0aGlzLm51bWJlciA9IG51bWJlcjtcclxuICB0aGlzLmxpbmUgPSBsaW5lO1xyXG4gIHRoaXMuZXJyb3JzID0gW107XHJcbn1cclxuXHJcbmZ1bmN0aW9uIFNoYWRlckVycm9yIChmaWxlTnVtYmVyLCBsaW5lTnVtYmVyLCBtZXNzYWdlKSB7XHJcbiAgdGhpcy5maWxlID0gZmlsZU51bWJlcjtcclxuICB0aGlzLmxpbmUgPSBsaW5lTnVtYmVyO1xyXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGd1ZXNzQ29tbWFuZCAoKSB7XHJcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XHJcbiAgdmFyIHN0YWNrID0gKGVycm9yLnN0YWNrIHx8IGVycm9yKS50b1N0cmluZygpO1xyXG4gIHZhciBwYXQgPSAvY29tcGlsZVByb2NlZHVyZS4qXFxuXFxzKmF0LipcXCgoLiopXFwpLy5leGVjKHN0YWNrKTtcclxuICBpZiAocGF0KSB7XHJcbiAgICByZXR1cm4gcGF0WzFdXHJcbiAgfVxyXG4gIHZhciBwYXQyID0gL2NvbXBpbGVQcm9jZWR1cmUuKlxcblxccyphdFxccysoLiopKFxcbnwkKS8uZXhlYyhzdGFjayk7XHJcbiAgaWYgKHBhdDIpIHtcclxuICAgIHJldHVybiBwYXQyWzFdXHJcbiAgfVxyXG4gIHJldHVybiAndW5rbm93bidcclxufVxyXG5cclxuZnVuY3Rpb24gZ3Vlc3NDYWxsU2l0ZSAoKSB7XHJcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKCk7XHJcbiAgdmFyIHN0YWNrID0gKGVycm9yLnN0YWNrIHx8IGVycm9yKS50b1N0cmluZygpO1xyXG4gIHZhciBwYXQgPSAvYXQgUkVHTENvbW1hbmQuKlxcblxccythdC4qXFwoKC4qKVxcKS8uZXhlYyhzdGFjayk7XHJcbiAgaWYgKHBhdCkge1xyXG4gICAgcmV0dXJuIHBhdFsxXVxyXG4gIH1cclxuICB2YXIgcGF0MiA9IC9hdCBSRUdMQ29tbWFuZC4qXFxuXFxzK2F0XFxzKyguKilcXG4vLmV4ZWMoc3RhY2spO1xyXG4gIGlmIChwYXQyKSB7XHJcbiAgICByZXR1cm4gcGF0MlsxXVxyXG4gIH1cclxuICByZXR1cm4gJ3Vua25vd24nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlU291cmNlIChzb3VyY2UsIGNvbW1hbmQpIHtcclxuICB2YXIgbGluZXMgPSBzb3VyY2Uuc3BsaXQoJ1xcbicpO1xyXG4gIHZhciBsaW5lTnVtYmVyID0gMTtcclxuICB2YXIgZmlsZU51bWJlciA9IDA7XHJcbiAgdmFyIGZpbGVzID0ge1xyXG4gICAgdW5rbm93bjogbmV3IFNoYWRlckZpbGUoKSxcclxuICAgIDA6IG5ldyBTaGFkZXJGaWxlKClcclxuICB9O1xyXG4gIGZpbGVzLnVua25vd24ubmFtZSA9IGZpbGVzWzBdLm5hbWUgPSBjb21tYW5kIHx8IGd1ZXNzQ29tbWFuZCgpO1xyXG4gIGZpbGVzLnVua25vd24ubGluZXMucHVzaChuZXcgU2hhZGVyTGluZSgwLCAnJykpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyArK2kpIHtcclxuICAgIHZhciBsaW5lID0gbGluZXNbaV07XHJcbiAgICB2YXIgcGFydHMgPSAvXlxccypcXCNcXHMqKFxcdyspXFxzKyguKylcXHMqJC8uZXhlYyhsaW5lKTtcclxuICAgIGlmIChwYXJ0cykge1xyXG4gICAgICBzd2l0Y2ggKHBhcnRzWzFdKSB7XHJcbiAgICAgICAgY2FzZSAnbGluZSc6XHJcbiAgICAgICAgICB2YXIgbGluZU51bWJlckluZm8gPSAvKFxcZCspKFxccytcXGQrKT8vLmV4ZWMocGFydHNbMl0pO1xyXG4gICAgICAgICAgaWYgKGxpbmVOdW1iZXJJbmZvKSB7XHJcbiAgICAgICAgICAgIGxpbmVOdW1iZXIgPSBsaW5lTnVtYmVySW5mb1sxXSB8IDA7XHJcbiAgICAgICAgICAgIGlmIChsaW5lTnVtYmVySW5mb1syXSkge1xyXG4gICAgICAgICAgICAgIGZpbGVOdW1iZXIgPSBsaW5lTnVtYmVySW5mb1syXSB8IDA7XHJcbiAgICAgICAgICAgICAgaWYgKCEoZmlsZU51bWJlciBpbiBmaWxlcykpIHtcclxuICAgICAgICAgICAgICAgIGZpbGVzW2ZpbGVOdW1iZXJdID0gbmV3IFNoYWRlckZpbGUoKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnZGVmaW5lJzpcclxuICAgICAgICAgIHZhciBuYW1lSW5mbyA9IC9TSEFERVJfTkFNRShfQjY0KT9cXHMrKC4qKSQvLmV4ZWMocGFydHNbMl0pO1xyXG4gICAgICAgICAgaWYgKG5hbWVJbmZvKSB7XHJcbiAgICAgICAgICAgIGZpbGVzW2ZpbGVOdW1iZXJdLm5hbWUgPSAobmFtZUluZm9bMV1cclxuICAgICAgICAgICAgICAgID8gZGVjb2RlQjY0KG5hbWVJbmZvWzJdKVxyXG4gICAgICAgICAgICAgICAgOiBuYW1lSW5mb1syXSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmaWxlc1tmaWxlTnVtYmVyXS5saW5lcy5wdXNoKG5ldyBTaGFkZXJMaW5lKGxpbmVOdW1iZXIrKywgbGluZSkpO1xyXG4gIH1cclxuICBPYmplY3Qua2V5cyhmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZU51bWJlcikge1xyXG4gICAgdmFyIGZpbGUgPSBmaWxlc1tmaWxlTnVtYmVyXTtcclxuICAgIGZpbGUubGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xyXG4gICAgICBmaWxlLmluZGV4W2xpbmUubnVtYmVyXSA9IGxpbmU7XHJcbiAgICB9KTtcclxuICB9KTtcclxuICByZXR1cm4gZmlsZXNcclxufVxyXG5cclxuZnVuY3Rpb24gcGFyc2VFcnJvckxvZyAoZXJyTG9nKSB7XHJcbiAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gIGVyckxvZy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiAoZXJyTXNnKSB7XHJcbiAgICBpZiAoZXJyTXNnLmxlbmd0aCA8IDUpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB2YXIgcGFydHMgPSAvXkVSUk9SXFw6XFxzKyhcXGQrKVxcOihcXGQrKVxcOlxccyooLiopJC8uZXhlYyhlcnJNc2cpO1xyXG4gICAgaWYgKHBhcnRzKSB7XHJcbiAgICAgIHJlc3VsdC5wdXNoKG5ldyBTaGFkZXJFcnJvcihcclxuICAgICAgICBwYXJ0c1sxXSB8IDAsXHJcbiAgICAgICAgcGFydHNbMl0gfCAwLFxyXG4gICAgICAgIHBhcnRzWzNdLnRyaW0oKSkpO1xyXG4gICAgfSBlbHNlIGlmIChlcnJNc2cubGVuZ3RoID4gMCkge1xyXG4gICAgICByZXN1bHQucHVzaChuZXcgU2hhZGVyRXJyb3IoJ3Vua25vd24nLCAwLCBlcnJNc2cpKTtcclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFubm90YXRlRmlsZXMgKGZpbGVzLCBlcnJvcnMpIHtcclxuICBlcnJvcnMuZm9yRWFjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgIHZhciBmaWxlID0gZmlsZXNbZXJyb3IuZmlsZV07XHJcbiAgICBpZiAoZmlsZSkge1xyXG4gICAgICB2YXIgbGluZSA9IGZpbGUuaW5kZXhbZXJyb3IubGluZV07XHJcbiAgICAgIGlmIChsaW5lKSB7XHJcbiAgICAgICAgbGluZS5lcnJvcnMucHVzaChlcnJvcik7XHJcbiAgICAgICAgZmlsZS5oYXNFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBmaWxlcy51bmtub3duLmhhc0Vycm9ycyA9IHRydWU7XHJcbiAgICBmaWxlcy51bmtub3duLmxpbmVzWzBdLmVycm9ycy5wdXNoKGVycm9yKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tTaGFkZXJFcnJvciAoZ2wsIHNoYWRlciwgc291cmNlLCB0eXBlLCBjb21tYW5kKSB7XHJcbiAgaWYgKCFnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoc2hhZGVyLCBnbC5DT01QSUxFX1NUQVRVUykpIHtcclxuICAgIHZhciBlcnJMb2cgPSBnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcik7XHJcbiAgICB2YXIgdHlwZU5hbWUgPSB0eXBlID09PSBnbC5GUkFHTUVOVF9TSEFERVIgPyAnZnJhZ21lbnQnIDogJ3ZlcnRleCc7XHJcbiAgICBjaGVja0NvbW1hbmRUeXBlKHNvdXJjZSwgJ3N0cmluZycsIHR5cGVOYW1lICsgJyBzaGFkZXIgc291cmNlIG11c3QgYmUgYSBzdHJpbmcnLCBjb21tYW5kKTtcclxuICAgIHZhciBmaWxlcyA9IHBhcnNlU291cmNlKHNvdXJjZSwgY29tbWFuZCk7XHJcbiAgICB2YXIgZXJyb3JzID0gcGFyc2VFcnJvckxvZyhlcnJMb2cpO1xyXG4gICAgYW5ub3RhdGVGaWxlcyhmaWxlcywgZXJyb3JzKTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhmaWxlcykuZm9yRWFjaChmdW5jdGlvbiAoZmlsZU51bWJlcikge1xyXG4gICAgICB2YXIgZmlsZSA9IGZpbGVzW2ZpbGVOdW1iZXJdO1xyXG4gICAgICBpZiAoIWZpbGUuaGFzRXJyb3JzKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBzdHJpbmdzID0gWycnXTtcclxuICAgICAgdmFyIHN0eWxlcyA9IFsnJ107XHJcblxyXG4gICAgICBmdW5jdGlvbiBwdXNoIChzdHIsIHN0eWxlKSB7XHJcbiAgICAgICAgc3RyaW5ncy5wdXNoKHN0cik7XHJcbiAgICAgICAgc3R5bGVzLnB1c2goc3R5bGUgfHwgJycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwdXNoKCdmaWxlIG51bWJlciAnICsgZmlsZU51bWJlciArICc6ICcgKyBmaWxlLm5hbWUgKyAnXFxuJywgJ2NvbG9yOnJlZDt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2ZvbnQtd2VpZ2h0OmJvbGQnKTtcclxuXHJcbiAgICAgIGZpbGUubGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xyXG4gICAgICAgIGlmIChsaW5lLmVycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICBwdXNoKGxlZnRQYWQobGluZS5udW1iZXIsIDQpICsgJ3wgICcsICdiYWNrZ3JvdW5kLWNvbG9yOnllbGxvdzsgZm9udC13ZWlnaHQ6Ym9sZCcpO1xyXG4gICAgICAgICAgcHVzaChsaW5lLmxpbmUgKyBlbmRsLCAnY29sb3I6cmVkOyBiYWNrZ3JvdW5kLWNvbG9yOnllbGxvdzsgZm9udC13ZWlnaHQ6Ym9sZCcpO1xyXG5cclxuICAgICAgICAgIC8vIHRyeSB0byBndWVzcyB0b2tlblxyXG4gICAgICAgICAgdmFyIG9mZnNldCA9IDA7XHJcbiAgICAgICAgICBsaW5lLmVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2U7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IC9eXFxzKlxcJyguKilcXCdcXHMqXFw6XFxzKiguKikkLy5leGVjKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgICB2YXIgdG9rZW5QYXQgPSB0b2tlblsxXTtcclxuICAgICAgICAgICAgICBtZXNzYWdlID0gdG9rZW5bMl07XHJcbiAgICAgICAgICAgICAgc3dpdGNoICh0b2tlblBhdCkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnYXNzaWduJzpcclxuICAgICAgICAgICAgICAgICAgdG9rZW5QYXQgPSAnPSc7XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIG9mZnNldCA9IE1hdGgubWF4KGxpbmUubGluZS5pbmRleE9mKHRva2VuUGF0LCBvZmZzZXQpLCAwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwdXNoKGxlZnRQYWQoJ3wgJywgNikpO1xyXG4gICAgICAgICAgICBwdXNoKGxlZnRQYWQoJ15eXicsIG9mZnNldCArIDMpICsgZW5kbCwgJ2ZvbnQtd2VpZ2h0OmJvbGQnKTtcclxuICAgICAgICAgICAgcHVzaChsZWZ0UGFkKCd8ICcsIDYpKTtcclxuICAgICAgICAgICAgcHVzaChtZXNzYWdlICsgZW5kbCwgJ2ZvbnQtd2VpZ2h0OmJvbGQnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcHVzaChsZWZ0UGFkKCd8ICcsIDYpICsgZW5kbCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHB1c2gobGVmdFBhZChsaW5lLm51bWJlciwgNCkgKyAnfCAgJyk7XHJcbiAgICAgICAgICBwdXNoKGxpbmUubGluZSArIGVuZGwsICdjb2xvcjpyZWQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhd2luZG93LmNocm9tZSkge1xyXG4gICAgICAgIHN0eWxlc1swXSA9IHN0cmluZ3Muam9pbignJWMnKTtcclxuICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBzdHlsZXMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHN0cmluZ3Muam9pbignJykpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBjaGVjay5yYWlzZSgnRXJyb3IgY29tcGlsaW5nICcgKyB0eXBlTmFtZSArICcgc2hhZGVyLCAnICsgZmlsZXNbMF0ubmFtZSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0xpbmtFcnJvciAoZ2wsIHByb2dyYW0sIGZyYWdTaGFkZXIsIHZlcnRTaGFkZXIsIGNvbW1hbmQpIHtcclxuICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKSB7XHJcbiAgICB2YXIgZXJyTG9nID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSk7XHJcbiAgICB2YXIgZnJhZ1BhcnNlID0gcGFyc2VTb3VyY2UoZnJhZ1NoYWRlciwgY29tbWFuZCk7XHJcbiAgICB2YXIgdmVydFBhcnNlID0gcGFyc2VTb3VyY2UodmVydFNoYWRlciwgY29tbWFuZCk7XHJcblxyXG4gICAgdmFyIGhlYWRlciA9ICdFcnJvciBsaW5raW5nIHByb2dyYW0gd2l0aCB2ZXJ0ZXggc2hhZGVyLCBcIicgK1xyXG4gICAgICB2ZXJ0UGFyc2VbMF0ubmFtZSArICdcIiwgYW5kIGZyYWdtZW50IHNoYWRlciBcIicgKyBmcmFnUGFyc2VbMF0ubmFtZSArICdcIic7XHJcblxyXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgY29uc29sZS5sb2coJyVjJyArIGhlYWRlciArIGVuZGwgKyAnJWMnICsgZXJyTG9nLFxyXG4gICAgICAgICdjb2xvcjpyZWQ7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtmb250LXdlaWdodDpib2xkJyxcclxuICAgICAgICAnY29sb3I6cmVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZyhoZWFkZXIgKyBlbmRsICsgZXJyTG9nKTtcclxuICAgIH1cclxuICAgIGNoZWNrLnJhaXNlKGhlYWRlcik7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzYXZlQ29tbWFuZFJlZiAob2JqZWN0KSB7XHJcbiAgb2JqZWN0Ll9jb21tYW5kUmVmID0gZ3Vlc3NDb21tYW5kKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNhdmVEcmF3Q29tbWFuZEluZm8gKG9wdHMsIHVuaWZvcm1zLCBhdHRyaWJ1dGVzLCBzdHJpbmdTdG9yZSkge1xyXG4gIHNhdmVDb21tYW5kUmVmKG9wdHMpO1xyXG5cclxuICBmdW5jdGlvbiBpZCAoc3RyKSB7XHJcbiAgICBpZiAoc3RyKSB7XHJcbiAgICAgIHJldHVybiBzdHJpbmdTdG9yZS5pZChzdHIpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuICBvcHRzLl9mcmFnSWQgPSBpZChvcHRzLnN0YXRpYy5mcmFnKTtcclxuICBvcHRzLl92ZXJ0SWQgPSBpZChvcHRzLnN0YXRpYy52ZXJ0KTtcclxuXHJcbiAgZnVuY3Rpb24gYWRkUHJvcHMgKGRpY3QsIHNldCkge1xyXG4gICAgT2JqZWN0LmtleXMoc2V0KS5mb3JFYWNoKGZ1bmN0aW9uICh1KSB7XHJcbiAgICAgIGRpY3Rbc3RyaW5nU3RvcmUuaWQodSldID0gdHJ1ZTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgdmFyIHVuaWZvcm1TZXQgPSBvcHRzLl91bmlmb3JtU2V0ID0ge307XHJcbiAgYWRkUHJvcHModW5pZm9ybVNldCwgdW5pZm9ybXMuc3RhdGljKTtcclxuICBhZGRQcm9wcyh1bmlmb3JtU2V0LCB1bmlmb3Jtcy5keW5hbWljKTtcclxuXHJcbiAgdmFyIGF0dHJpYnV0ZVNldCA9IG9wdHMuX2F0dHJpYnV0ZVNldCA9IHt9O1xyXG4gIGFkZFByb3BzKGF0dHJpYnV0ZVNldCwgYXR0cmlidXRlcy5zdGF0aWMpO1xyXG4gIGFkZFByb3BzKGF0dHJpYnV0ZVNldCwgYXR0cmlidXRlcy5keW5hbWljKTtcclxuXHJcbiAgb3B0cy5faGFzQ291bnQgPSAoXHJcbiAgICAnY291bnQnIGluIG9wdHMuc3RhdGljIHx8XHJcbiAgICAnY291bnQnIGluIG9wdHMuZHluYW1pYyB8fFxyXG4gICAgJ2VsZW1lbnRzJyBpbiBvcHRzLnN0YXRpYyB8fFxyXG4gICAgJ2VsZW1lbnRzJyBpbiBvcHRzLmR5bmFtaWMpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjb21tYW5kUmFpc2UgKG1lc3NhZ2UsIGNvbW1hbmQpIHtcclxuICB2YXIgY2FsbFNpdGUgPSBndWVzc0NhbGxTaXRlKCk7XHJcbiAgcmFpc2UobWVzc2FnZSArXHJcbiAgICAnIGluIGNvbW1hbmQgJyArIChjb21tYW5kIHx8IGd1ZXNzQ29tbWFuZCgpKSArXHJcbiAgICAoY2FsbFNpdGUgPT09ICd1bmtub3duJyA/ICcnIDogJyBjYWxsZWQgZnJvbSAnICsgY2FsbFNpdGUpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tDb21tYW5kIChwcmVkLCBtZXNzYWdlLCBjb21tYW5kKSB7XHJcbiAgaWYgKCFwcmVkKSB7XHJcbiAgICBjb21tYW5kUmFpc2UobWVzc2FnZSwgY29tbWFuZCB8fCBndWVzc0NvbW1hbmQoKSk7XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1BhcmFtZXRlckNvbW1hbmQgKHBhcmFtLCBwb3NzaWJpbGl0aWVzLCBtZXNzYWdlLCBjb21tYW5kKSB7XHJcbiAgaWYgKCEocGFyYW0gaW4gcG9zc2liaWxpdGllcykpIHtcclxuICAgIGNvbW1hbmRSYWlzZShcclxuICAgICAgJ3Vua25vd24gcGFyYW1ldGVyICgnICsgcGFyYW0gKyAnKScgKyBlbmNvbG9uKG1lc3NhZ2UpICtcclxuICAgICAgJy4gcG9zc2libGUgdmFsdWVzOiAnICsgT2JqZWN0LmtleXMocG9zc2liaWxpdGllcykuam9pbigpLFxyXG4gICAgICBjb21tYW5kIHx8IGd1ZXNzQ29tbWFuZCgpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrQ29tbWFuZFR5cGUgKHZhbHVlLCB0eXBlLCBtZXNzYWdlLCBjb21tYW5kKSB7XHJcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gdHlwZSkge1xyXG4gICAgY29tbWFuZFJhaXNlKFxyXG4gICAgICAnaW52YWxpZCBwYXJhbWV0ZXIgdHlwZScgKyBlbmNvbG9uKG1lc3NhZ2UpICtcclxuICAgICAgJy4gZXhwZWN0ZWQgJyArIHR5cGUgKyAnLCBnb3QgJyArICh0eXBlb2YgdmFsdWUpLFxyXG4gICAgICBjb21tYW5kIHx8IGd1ZXNzQ29tbWFuZCgpKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNoZWNrT3B0aW9uYWwgKGJsb2NrKSB7XHJcbiAgYmxvY2soKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tGcmFtZWJ1ZmZlckZvcm1hdCAoYXR0YWNobWVudCwgdGV4Rm9ybWF0cywgcmJGb3JtYXRzKSB7XHJcbiAgaWYgKGF0dGFjaG1lbnQudGV4dHVyZSkge1xyXG4gICAgY2hlY2tPbmVPZihcclxuICAgICAgYXR0YWNobWVudC50ZXh0dXJlLl90ZXh0dXJlLmludGVybmFsZm9ybWF0LFxyXG4gICAgICB0ZXhGb3JtYXRzLFxyXG4gICAgICAndW5zdXBwb3J0ZWQgdGV4dHVyZSBmb3JtYXQgZm9yIGF0dGFjaG1lbnQnKTtcclxuICB9IGVsc2Uge1xyXG4gICAgY2hlY2tPbmVPZihcclxuICAgICAgYXR0YWNobWVudC5yZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlci5mb3JtYXQsXHJcbiAgICAgIHJiRm9ybWF0cyxcclxuICAgICAgJ3Vuc3VwcG9ydGVkIHJlbmRlcmJ1ZmZlciBmb3JtYXQgZm9yIGF0dGFjaG1lbnQnKTtcclxuICB9XHJcbn1cclxuXHJcbnZhciBHTF9DTEFNUF9UT19FREdFID0gMHg4MTJGO1xyXG5cclxudmFyIEdMX05FQVJFU1QgPSAweDI2MDA7XHJcbnZhciBHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUID0gMHgyNzAwO1xyXG52YXIgR0xfTElORUFSX01JUE1BUF9ORUFSRVNUID0gMHgyNzAxO1xyXG52YXIgR0xfTkVBUkVTVF9NSVBNQVBfTElORUFSID0gMHgyNzAyO1xyXG52YXIgR0xfTElORUFSX01JUE1BUF9MSU5FQVIgPSAweDI3MDM7XHJcblxyXG52YXIgR0xfQllURSA9IDUxMjA7XHJcbnZhciBHTF9VTlNJR05FRF9CWVRFID0gNTEyMTtcclxudmFyIEdMX1NIT1JUID0gNTEyMjtcclxudmFyIEdMX1VOU0lHTkVEX1NIT1JUID0gNTEyMztcclxudmFyIEdMX0lOVCA9IDUxMjQ7XHJcbnZhciBHTF9VTlNJR05FRF9JTlQgPSA1MTI1O1xyXG52YXIgR0xfRkxPQVQgPSA1MTI2O1xyXG5cclxudmFyIEdMX1VOU0lHTkVEX1NIT1JUXzRfNF80XzQgPSAweDgwMzM7XHJcbnZhciBHTF9VTlNJR05FRF9TSE9SVF81XzVfNV8xID0gMHg4MDM0O1xyXG52YXIgR0xfVU5TSUdORURfU0hPUlRfNV82XzUgPSAweDgzNjM7XHJcbnZhciBHTF9VTlNJR05FRF9JTlRfMjRfOF9XRUJHTCA9IDB4ODRGQTtcclxuXHJcbnZhciBHTF9IQUxGX0ZMT0FUX09FUyA9IDB4OEQ2MTtcclxuXHJcbnZhciBUWVBFX1NJWkUgPSB7fTtcclxuXHJcblRZUEVfU0laRVtHTF9CWVRFXSA9XHJcblRZUEVfU0laRVtHTF9VTlNJR05FRF9CWVRFXSA9IDE7XHJcblxyXG5UWVBFX1NJWkVbR0xfU0hPUlRdID1cclxuVFlQRV9TSVpFW0dMX1VOU0lHTkVEX1NIT1JUXSA9XHJcblRZUEVfU0laRVtHTF9IQUxGX0ZMT0FUX09FU10gPVxyXG5UWVBFX1NJWkVbR0xfVU5TSUdORURfU0hPUlRfNV82XzVdID1cclxuVFlQRV9TSVpFW0dMX1VOU0lHTkVEX1NIT1JUXzRfNF80XzRdID1cclxuVFlQRV9TSVpFW0dMX1VOU0lHTkVEX1NIT1JUXzVfNV81XzFdID0gMjtcclxuXHJcblRZUEVfU0laRVtHTF9JTlRdID1cclxuVFlQRV9TSVpFW0dMX1VOU0lHTkVEX0lOVF0gPVxyXG5UWVBFX1NJWkVbR0xfRkxPQVRdID1cclxuVFlQRV9TSVpFW0dMX1VOU0lHTkVEX0lOVF8yNF84X1dFQkdMXSA9IDQ7XHJcblxyXG5mdW5jdGlvbiBwaXhlbFNpemUgKHR5cGUsIGNoYW5uZWxzKSB7XHJcbiAgaWYgKHR5cGUgPT09IEdMX1VOU0lHTkVEX1NIT1JUXzVfNV81XzEgfHxcclxuICAgICAgdHlwZSA9PT0gR0xfVU5TSUdORURfU0hPUlRfNF80XzRfNCB8fFxyXG4gICAgICB0eXBlID09PSBHTF9VTlNJR05FRF9TSE9SVF81XzZfNSkge1xyXG4gICAgcmV0dXJuIDJcclxuICB9IGVsc2UgaWYgKHR5cGUgPT09IEdMX1VOU0lHTkVEX0lOVF8yNF84X1dFQkdMKSB7XHJcbiAgICByZXR1cm4gNFxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gVFlQRV9TSVpFW3R5cGVdICogY2hhbm5lbHNcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUG93MiAodikge1xyXG4gIHJldHVybiAhKHYgJiAodiAtIDEpKSAmJiAoISF2KVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1RleHR1cmUyRCAoaW5mbywgbWlwRGF0YSwgbGltaXRzKSB7XHJcbiAgdmFyIGk7XHJcbiAgdmFyIHcgPSBtaXBEYXRhLndpZHRoO1xyXG4gIHZhciBoID0gbWlwRGF0YS5oZWlnaHQ7XHJcbiAgdmFyIGMgPSBtaXBEYXRhLmNoYW5uZWxzO1xyXG5cclxuICAvLyBDaGVjayB0ZXh0dXJlIHNoYXBlXHJcbiAgY2hlY2sodyA+IDAgJiYgdyA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUgJiZcclxuICAgICAgICBoID4gMCAmJiBoIDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSxcclxuICAgICAgICAnaW52YWxpZCB0ZXh0dXJlIHNoYXBlJyk7XHJcblxyXG4gIC8vIGNoZWNrIHdyYXAgbW9kZVxyXG4gIGlmIChpbmZvLndyYXBTICE9PSBHTF9DTEFNUF9UT19FREdFIHx8IGluZm8ud3JhcFQgIT09IEdMX0NMQU1QX1RPX0VER0UpIHtcclxuICAgIGNoZWNrKGlzUG93Mih3KSAmJiBpc1BvdzIoaCksXHJcbiAgICAgICdpbmNvbXBhdGlibGUgd3JhcCBtb2RlIGZvciB0ZXh0dXJlLCBib3RoIHdpZHRoIGFuZCBoZWlnaHQgbXVzdCBiZSBwb3dlciBvZiAyJyk7XHJcbiAgfVxyXG5cclxuICBpZiAobWlwRGF0YS5taXBtYXNrID09PSAxKSB7XHJcbiAgICBpZiAodyAhPT0gMSAmJiBoICE9PSAxKSB7XHJcbiAgICAgIGNoZWNrKFxyXG4gICAgICAgIGluZm8ubWluRmlsdGVyICE9PSBHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUICYmXHJcbiAgICAgICAgaW5mby5taW5GaWx0ZXIgIT09IEdMX05FQVJFU1RfTUlQTUFQX0xJTkVBUiAmJlxyXG4gICAgICAgIGluZm8ubWluRmlsdGVyICE9PSBHTF9MSU5FQVJfTUlQTUFQX05FQVJFU1QgJiZcclxuICAgICAgICBpbmZvLm1pbkZpbHRlciAhPT0gR0xfTElORUFSX01JUE1BUF9MSU5FQVIsXHJcbiAgICAgICAgJ21pbiBmaWx0ZXIgcmVxdWlyZXMgbWlwbWFwJyk7XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHRleHR1cmUgbXVzdCBiZSBwb3dlciBvZiAyXHJcbiAgICBjaGVjayhpc1BvdzIodykgJiYgaXNQb3cyKGgpLFxyXG4gICAgICAndGV4dHVyZSBtdXN0IGJlIGEgc3F1YXJlIHBvd2VyIG9mIDIgdG8gc3VwcG9ydCBtaXBtYXBwaW5nJyk7XHJcbiAgICBjaGVjayhtaXBEYXRhLm1pcG1hc2sgPT09ICh3IDw8IDEpIC0gMSxcclxuICAgICAgJ21pc3Npbmcgb3IgaW5jb21wbGV0ZSBtaXBtYXAgZGF0YScpO1xyXG4gIH1cclxuXHJcbiAgaWYgKG1pcERhdGEudHlwZSA9PT0gR0xfRkxPQVQpIHtcclxuICAgIGlmIChsaW1pdHMuZXh0ZW5zaW9ucy5pbmRleE9mKCdvZXNfdGV4dHVyZV9mbG9hdF9saW5lYXInKSA8IDApIHtcclxuICAgICAgY2hlY2soaW5mby5taW5GaWx0ZXIgPT09IEdMX05FQVJFU1QgJiYgaW5mby5tYWdGaWx0ZXIgPT09IEdMX05FQVJFU1QsXHJcbiAgICAgICAgJ2ZpbHRlciBub3Qgc3VwcG9ydGVkLCBtdXN0IGVuYWJsZSBvZXNfdGV4dHVyZV9mbG9hdF9saW5lYXInKTtcclxuICAgIH1cclxuICAgIGNoZWNrKCFpbmZvLmdlbk1pcG1hcHMsXHJcbiAgICAgICdtaXBtYXAgZ2VuZXJhdGlvbiBub3Qgc3VwcG9ydGVkIHdpdGggZmxvYXQgdGV4dHVyZXMnKTtcclxuICB9XHJcblxyXG4gIC8vIGNoZWNrIGltYWdlIGNvbXBsZXRlXHJcbiAgdmFyIG1pcGltYWdlcyA9IG1pcERhdGEuaW1hZ2VzO1xyXG4gIGZvciAoaSA9IDA7IGkgPCAxNjsgKytpKSB7XHJcbiAgICBpZiAobWlwaW1hZ2VzW2ldKSB7XHJcbiAgICAgIHZhciBtdyA9IHcgPj4gaTtcclxuICAgICAgdmFyIG1oID0gaCA+PiBpO1xyXG4gICAgICBjaGVjayhtaXBEYXRhLm1pcG1hc2sgJiAoMSA8PCBpKSwgJ21pc3NpbmcgbWlwbWFwIGRhdGEnKTtcclxuXHJcbiAgICAgIHZhciBpbWcgPSBtaXBpbWFnZXNbaV07XHJcblxyXG4gICAgICBjaGVjayhcclxuICAgICAgICBpbWcud2lkdGggPT09IG13ICYmXHJcbiAgICAgICAgaW1nLmhlaWdodCA9PT0gbWgsXHJcbiAgICAgICAgJ2ludmFsaWQgc2hhcGUgZm9yIG1pcCBpbWFnZXMnKTtcclxuXHJcbiAgICAgIGNoZWNrKFxyXG4gICAgICAgIGltZy5mb3JtYXQgPT09IG1pcERhdGEuZm9ybWF0ICYmXHJcbiAgICAgICAgaW1nLmludGVybmFsZm9ybWF0ID09PSBtaXBEYXRhLmludGVybmFsZm9ybWF0ICYmXHJcbiAgICAgICAgaW1nLnR5cGUgPT09IG1pcERhdGEudHlwZSxcclxuICAgICAgICAnaW5jb21wYXRpYmxlIHR5cGUgZm9yIG1pcCBpbWFnZScpO1xyXG5cclxuICAgICAgaWYgKGltZy5jb21wcmVzc2VkKSB7XHJcbiAgICAgICAgLy8gVE9ETzogY2hlY2sgc2l6ZSBmb3IgY29tcHJlc3NlZCBpbWFnZXNcclxuICAgICAgfSBlbHNlIGlmIChpbWcuZGF0YSkge1xyXG4gICAgICAgIC8vIGNoZWNrKGltZy5kYXRhLmJ5dGVMZW5ndGggPT09IG13ICogbWggKlxyXG4gICAgICAgIC8vIE1hdGgubWF4KHBpeGVsU2l6ZShpbWcudHlwZSwgYyksIGltZy51bnBhY2tBbGlnbm1lbnQpLFxyXG4gICAgICAgIHZhciByb3dTaXplID0gTWF0aC5jZWlsKHBpeGVsU2l6ZShpbWcudHlwZSwgYykgKiBtdyAvIGltZy51bnBhY2tBbGlnbm1lbnQpICogaW1nLnVucGFja0FsaWdubWVudDtcclxuICAgICAgICBjaGVjayhpbWcuZGF0YS5ieXRlTGVuZ3RoID09PSByb3dTaXplICogbWgsXHJcbiAgICAgICAgICAnaW52YWxpZCBkYXRhIGZvciBpbWFnZSwgYnVmZmVyIHNpemUgaXMgaW5jb25zaXN0ZW50IHdpdGggaW1hZ2UgZm9ybWF0Jyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoaW1nLmVsZW1lbnQpIHtcclxuICAgICAgICAvLyBUT0RPOiBjaGVjayBlbGVtZW50IGNhbiBiZSBsb2FkZWRcclxuICAgICAgfSBlbHNlIGlmIChpbWcuY29weSkge1xyXG4gICAgICAgIC8vIFRPRE86IGNoZWNrIGNvbXBhdGlibGUgZm9ybWF0IGFuZCB0eXBlXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoIWluZm8uZ2VuTWlwbWFwcykge1xyXG4gICAgICBjaGVjaygobWlwRGF0YS5taXBtYXNrICYgKDEgPDwgaSkpID09PSAwLCAnZXh0cmEgbWlwbWFwIGRhdGEnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmIChtaXBEYXRhLmNvbXByZXNzZWQpIHtcclxuICAgIGNoZWNrKCFpbmZvLmdlbk1pcG1hcHMsXHJcbiAgICAgICdtaXBtYXAgZ2VuZXJhdGlvbiBmb3IgY29tcHJlc3NlZCBpbWFnZXMgbm90IHN1cHBvcnRlZCcpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY2hlY2tUZXh0dXJlQ3ViZSAodGV4dHVyZSwgaW5mbywgZmFjZXMsIGxpbWl0cykge1xyXG4gIHZhciB3ID0gdGV4dHVyZS53aWR0aDtcclxuICB2YXIgaCA9IHRleHR1cmUuaGVpZ2h0O1xyXG4gIHZhciBjID0gdGV4dHVyZS5jaGFubmVscztcclxuXHJcbiAgLy8gQ2hlY2sgdGV4dHVyZSBzaGFwZVxyXG4gIGNoZWNrKFxyXG4gICAgdyA+IDAgJiYgdyA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUgJiYgaCA+IDAgJiYgaCA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUsXHJcbiAgICAnaW52YWxpZCB0ZXh0dXJlIHNoYXBlJyk7XHJcbiAgY2hlY2soXHJcbiAgICB3ID09PSBoLFxyXG4gICAgJ2N1YmUgbWFwIG11c3QgYmUgc3F1YXJlJyk7XHJcbiAgY2hlY2soXHJcbiAgICBpbmZvLndyYXBTID09PSBHTF9DTEFNUF9UT19FREdFICYmIGluZm8ud3JhcFQgPT09IEdMX0NMQU1QX1RPX0VER0UsXHJcbiAgICAnd3JhcCBtb2RlIG5vdCBzdXBwb3J0ZWQgYnkgY3ViZSBtYXAnKTtcclxuXHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmYWNlcy5sZW5ndGg7ICsraSkge1xyXG4gICAgdmFyIGZhY2UgPSBmYWNlc1tpXTtcclxuICAgIGNoZWNrKFxyXG4gICAgICBmYWNlLndpZHRoID09PSB3ICYmIGZhY2UuaGVpZ2h0ID09PSBoLFxyXG4gICAgICAnaW5jb25zaXN0ZW50IGN1YmUgbWFwIGZhY2Ugc2hhcGUnKTtcclxuXHJcbiAgICBpZiAoaW5mby5nZW5NaXBtYXBzKSB7XHJcbiAgICAgIGNoZWNrKCFmYWNlLmNvbXByZXNzZWQsXHJcbiAgICAgICAgJ2NhbiBub3QgZ2VuZXJhdGUgbWlwbWFwIGZvciBjb21wcmVzc2VkIHRleHR1cmVzJyk7XHJcbiAgICAgIGNoZWNrKGZhY2UubWlwbWFzayA9PT0gMSxcclxuICAgICAgICAnY2FuIG5vdCBzcGVjaWZ5IG1pcG1hcHMgYW5kIGdlbmVyYXRlIG1pcG1hcHMnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIFRPRE86IGNoZWNrIG1pcCBhbmQgZmlsdGVyIG1vZGVcclxuICAgIH1cclxuXHJcbiAgICB2YXIgbWlwbWFwcyA9IGZhY2UuaW1hZ2VzO1xyXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgKytqKSB7XHJcbiAgICAgIHZhciBpbWcgPSBtaXBtYXBzW2pdO1xyXG4gICAgICBpZiAoaW1nKSB7XHJcbiAgICAgICAgdmFyIG13ID0gdyA+PiBqO1xyXG4gICAgICAgIHZhciBtaCA9IGggPj4gajtcclxuICAgICAgICBjaGVjayhmYWNlLm1pcG1hc2sgJiAoMSA8PCBqKSwgJ21pc3NpbmcgbWlwbWFwIGRhdGEnKTtcclxuICAgICAgICBjaGVjayhcclxuICAgICAgICAgIGltZy53aWR0aCA9PT0gbXcgJiZcclxuICAgICAgICAgIGltZy5oZWlnaHQgPT09IG1oLFxyXG4gICAgICAgICAgJ2ludmFsaWQgc2hhcGUgZm9yIG1pcCBpbWFnZXMnKTtcclxuICAgICAgICBjaGVjayhcclxuICAgICAgICAgIGltZy5mb3JtYXQgPT09IHRleHR1cmUuZm9ybWF0ICYmXHJcbiAgICAgICAgICBpbWcuaW50ZXJuYWxmb3JtYXQgPT09IHRleHR1cmUuaW50ZXJuYWxmb3JtYXQgJiZcclxuICAgICAgICAgIGltZy50eXBlID09PSB0ZXh0dXJlLnR5cGUsXHJcbiAgICAgICAgICAnaW5jb21wYXRpYmxlIHR5cGUgZm9yIG1pcCBpbWFnZScpO1xyXG5cclxuICAgICAgICBpZiAoaW1nLmNvbXByZXNzZWQpIHtcclxuICAgICAgICAgIC8vIFRPRE86IGNoZWNrIHNpemUgZm9yIGNvbXByZXNzZWQgaW1hZ2VzXHJcbiAgICAgICAgfSBlbHNlIGlmIChpbWcuZGF0YSkge1xyXG4gICAgICAgICAgY2hlY2soaW1nLmRhdGEuYnl0ZUxlbmd0aCA9PT0gbXcgKiBtaCAqXHJcbiAgICAgICAgICAgIE1hdGgubWF4KHBpeGVsU2l6ZShpbWcudHlwZSwgYyksIGltZy51bnBhY2tBbGlnbm1lbnQpLFxyXG4gICAgICAgICAgICAnaW52YWxpZCBkYXRhIGZvciBpbWFnZSwgYnVmZmVyIHNpemUgaXMgaW5jb25zaXN0ZW50IHdpdGggaW1hZ2UgZm9ybWF0Jyk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpbWcuZWxlbWVudCkge1xyXG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgZWxlbWVudCBjYW4gYmUgbG9hZGVkXHJcbiAgICAgICAgfSBlbHNlIGlmIChpbWcuY29weSkge1xyXG4gICAgICAgICAgLy8gVE9ETzogY2hlY2sgY29tcGF0aWJsZSBmb3JtYXQgYW5kIHR5cGVcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnZhciBjaGVjayQxID0gZXh0ZW5kKGNoZWNrLCB7XHJcbiAgb3B0aW9uYWw6IGNoZWNrT3B0aW9uYWwsXHJcbiAgcmFpc2U6IHJhaXNlLFxyXG4gIGNvbW1hbmRSYWlzZTogY29tbWFuZFJhaXNlLFxyXG4gIGNvbW1hbmQ6IGNoZWNrQ29tbWFuZCxcclxuICBwYXJhbWV0ZXI6IGNoZWNrUGFyYW1ldGVyLFxyXG4gIGNvbW1hbmRQYXJhbWV0ZXI6IGNoZWNrUGFyYW1ldGVyQ29tbWFuZCxcclxuICBjb25zdHJ1Y3RvcjogY2hlY2tDb25zdHJ1Y3RvcixcclxuICB0eXBlOiBjaGVja1R5cGVPZixcclxuICBjb21tYW5kVHlwZTogY2hlY2tDb21tYW5kVHlwZSxcclxuICBpc1R5cGVkQXJyYXk6IGNoZWNrSXNUeXBlZEFycmF5LFxyXG4gIG5uaTogY2hlY2tOb25OZWdhdGl2ZUludCxcclxuICBvbmVPZjogY2hlY2tPbmVPZixcclxuICBzaGFkZXJFcnJvcjogY2hlY2tTaGFkZXJFcnJvcixcclxuICBsaW5rRXJyb3I6IGNoZWNrTGlua0Vycm9yLFxyXG4gIGNhbGxTaXRlOiBndWVzc0NhbGxTaXRlLFxyXG4gIHNhdmVDb21tYW5kUmVmOiBzYXZlQ29tbWFuZFJlZixcclxuICBzYXZlRHJhd0luZm86IHNhdmVEcmF3Q29tbWFuZEluZm8sXHJcbiAgZnJhbWVidWZmZXJGb3JtYXQ6IGNoZWNrRnJhbWVidWZmZXJGb3JtYXQsXHJcbiAgZ3Vlc3NDb21tYW5kOiBndWVzc0NvbW1hbmQsXHJcbiAgdGV4dHVyZTJEOiBjaGVja1RleHR1cmUyRCxcclxuICB0ZXh0dXJlQ3ViZTogY2hlY2tUZXh0dXJlQ3ViZVxyXG59KTtcblxudmFyIFZBUklBQkxFX0NPVU5URVIgPSAwO1xyXG5cclxudmFyIERZTl9GVU5DID0gMDtcclxuXHJcbmZ1bmN0aW9uIER5bmFtaWNWYXJpYWJsZSAodHlwZSwgZGF0YSkge1xyXG4gIHRoaXMuaWQgPSAoVkFSSUFCTEVfQ09VTlRFUisrKTtcclxuICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gIHRoaXMuZGF0YSA9IGRhdGE7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVzY2FwZVN0ciAoc3RyKSB7XHJcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXFxcL2csICdcXFxcXFxcXCcpLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKVxyXG59XHJcblxyXG5mdW5jdGlvbiBzcGxpdFBhcnRzIChzdHIpIHtcclxuICBpZiAoc3RyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIFtdXHJcbiAgfVxyXG5cclxuICB2YXIgZmlyc3RDaGFyID0gc3RyLmNoYXJBdCgwKTtcclxuICB2YXIgbGFzdENoYXIgPSBzdHIuY2hhckF0KHN0ci5sZW5ndGggLSAxKTtcclxuXHJcbiAgaWYgKHN0ci5sZW5ndGggPiAxICYmXHJcbiAgICAgIGZpcnN0Q2hhciA9PT0gbGFzdENoYXIgJiZcclxuICAgICAgKGZpcnN0Q2hhciA9PT0gJ1wiJyB8fCBmaXJzdENoYXIgPT09IFwiJ1wiKSkge1xyXG4gICAgcmV0dXJuIFsnXCInICsgZXNjYXBlU3RyKHN0ci5zdWJzdHIoMSwgc3RyLmxlbmd0aCAtIDIpKSArICdcIiddXHJcbiAgfVxyXG5cclxuICB2YXIgcGFydHMgPSAvXFxbKGZhbHNlfHRydWV8bnVsbHxcXGQrfCdbXiddKid8XCJbXlwiXSpcIilcXF0vLmV4ZWMoc3RyKTtcclxuICBpZiAocGFydHMpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIHNwbGl0UGFydHMoc3RyLnN1YnN0cigwLCBwYXJ0cy5pbmRleCkpXHJcbiAgICAgIC5jb25jYXQoc3BsaXRQYXJ0cyhwYXJ0c1sxXSkpXHJcbiAgICAgIC5jb25jYXQoc3BsaXRQYXJ0cyhzdHIuc3Vic3RyKHBhcnRzLmluZGV4ICsgcGFydHNbMF0ubGVuZ3RoKSkpXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICB2YXIgc3VicGFydHMgPSBzdHIuc3BsaXQoJy4nKTtcclxuICBpZiAoc3VicGFydHMubGVuZ3RoID09PSAxKSB7XHJcbiAgICByZXR1cm4gWydcIicgKyBlc2NhcGVTdHIoc3RyKSArICdcIiddXHJcbiAgfVxyXG5cclxuICB2YXIgcmVzdWx0ID0gW107XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJwYXJ0cy5sZW5ndGg7ICsraSkge1xyXG4gICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChzcGxpdFBhcnRzKHN1YnBhcnRzW2ldKSk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuZnVuY3Rpb24gdG9BY2Nlc3NvclN0cmluZyAoc3RyKSB7XHJcbiAgcmV0dXJuICdbJyArIHNwbGl0UGFydHMoc3RyKS5qb2luKCddWycpICsgJ10nXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRlZmluZUR5bmFtaWMgKHR5cGUsIGRhdGEpIHtcclxuICByZXR1cm4gbmV3IER5bmFtaWNWYXJpYWJsZSh0eXBlLCB0b0FjY2Vzc29yU3RyaW5nKGRhdGEgKyAnJykpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzRHluYW1pYyAoeCkge1xyXG4gIHJldHVybiAodHlwZW9mIHggPT09ICdmdW5jdGlvbicgJiYgIXguX3JlZ2xUeXBlKSB8fFxyXG4gICAgICAgICB4IGluc3RhbmNlb2YgRHluYW1pY1ZhcmlhYmxlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVuYm94ICh4LCBwYXRoKSB7XHJcbiAgaWYgKHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICByZXR1cm4gbmV3IER5bmFtaWNWYXJpYWJsZShEWU5fRlVOQywgeClcclxuICB9XHJcbiAgcmV0dXJuIHhcclxufVxyXG5cclxudmFyIGR5bmFtaWMgPSB7XHJcbiAgRHluYW1pY1ZhcmlhYmxlOiBEeW5hbWljVmFyaWFibGUsXHJcbiAgZGVmaW5lOiBkZWZpbmVEeW5hbWljLFxyXG4gIGlzRHluYW1pYzogaXNEeW5hbWljLFxyXG4gIHVuYm94OiB1bmJveCxcclxuICBhY2Nlc3NvcjogdG9BY2Nlc3NvclN0cmluZ1xyXG59O1xuXG4vKiBnbG9iYWxzIHJlcXVlc3RBbmltYXRpb25GcmFtZSwgY2FuY2VsQW5pbWF0aW9uRnJhbWUgKi9cclxudmFyIHJhZiA9IHtcclxuICBuZXh0OiB0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSAnZnVuY3Rpb24nXHJcbiAgICA/IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNiKSB9XHJcbiAgICA6IGZ1bmN0aW9uIChjYikgeyByZXR1cm4gc2V0VGltZW91dChjYiwgMTYpIH0sXHJcbiAgY2FuY2VsOiB0eXBlb2YgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPT09ICdmdW5jdGlvbidcclxuICAgID8gZnVuY3Rpb24gKHJhZikgeyByZXR1cm4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKSB9XHJcbiAgICA6IGNsZWFyVGltZW91dFxyXG59O1xuXG4vKiBnbG9iYWxzIHBlcmZvcm1hbmNlICovXHJcbnZhciBjbG9jayA9ICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHBlcmZvcm1hbmNlLm5vdylcclxuICA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpIH1cclxuICA6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICsobmV3IERhdGUoKSkgfTtcblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5nU3RvcmUgKCkge1xyXG4gIHZhciBzdHJpbmdJZHMgPSB7Jyc6IDB9O1xyXG4gIHZhciBzdHJpbmdWYWx1ZXMgPSBbJyddO1xyXG4gIHJldHVybiB7XHJcbiAgICBpZDogZnVuY3Rpb24gKHN0cikge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gc3RyaW5nSWRzW3N0cl07XHJcbiAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgIH1cclxuICAgICAgcmVzdWx0ID0gc3RyaW5nSWRzW3N0cl0gPSBzdHJpbmdWYWx1ZXMubGVuZ3RoO1xyXG4gICAgICBzdHJpbmdWYWx1ZXMucHVzaChzdHIpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9LFxyXG5cclxuICAgIHN0cjogZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgIHJldHVybiBzdHJpbmdWYWx1ZXNbaWRdXHJcbiAgICB9XHJcbiAgfVxyXG59XG5cbi8vIENvbnRleHQgYW5kIGNhbnZhcyBjcmVhdGlvbiBoZWxwZXIgZnVuY3Rpb25zXHJcbmZ1bmN0aW9uIGNyZWF0ZUNhbnZhcyAoZWxlbWVudCwgb25Eb25lLCBwaXhlbFJhdGlvKSB7XHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gIGV4dGVuZChjYW52YXMuc3R5bGUsIHtcclxuICAgIGJvcmRlcjogMCxcclxuICAgIG1hcmdpbjogMCxcclxuICAgIHBhZGRpbmc6IDAsXHJcbiAgICB0b3A6IDAsXHJcbiAgICBsZWZ0OiAwXHJcbiAgfSk7XHJcbiAgZWxlbWVudC5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG5cclxuICBpZiAoZWxlbWVudCA9PT0gZG9jdW1lbnQuYm9keSkge1xyXG4gICAgY2FudmFzLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuICAgIGV4dGVuZChlbGVtZW50LnN0eWxlLCB7XHJcbiAgICAgIG1hcmdpbjogMCxcclxuICAgICAgcGFkZGluZzogMFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXNpemUgKCkge1xyXG4gICAgdmFyIHcgPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIHZhciBoID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgaWYgKGVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkpIHtcclxuICAgICAgdmFyIGJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIHcgPSBib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdDtcclxuICAgICAgaCA9IGJvdW5kcy5ib3R0b20gLSBib3VuZHMudG9wO1xyXG4gICAgfVxyXG4gICAgY2FudmFzLndpZHRoID0gcGl4ZWxSYXRpbyAqIHc7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gcGl4ZWxSYXRpbyAqIGg7XHJcbiAgICBleHRlbmQoY2FudmFzLnN0eWxlLCB7XHJcbiAgICAgIHdpZHRoOiB3ICsgJ3B4JyxcclxuICAgICAgaGVpZ2h0OiBoICsgJ3B4J1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplLCBmYWxzZSk7XHJcblxyXG4gIGZ1bmN0aW9uIG9uRGVzdHJveSAoKSB7XHJcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplKTtcclxuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoY2FudmFzKTtcclxuICB9XHJcblxyXG4gIHJlc2l6ZSgpO1xyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2FudmFzOiBjYW52YXMsXHJcbiAgICBvbkRlc3Ryb3k6IG9uRGVzdHJveVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dCAoY2FudmFzLCBjb250ZXh0QXR0cmlidXRlcykge1xyXG4gIGZ1bmN0aW9uIGdldCAobmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KG5hbWUsIGNvbnRleHRBdHRyaWJ1dGVzKVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgZ2V0KCd3ZWJnbCcpIHx8XHJcbiAgICBnZXQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcpIHx8XHJcbiAgICBnZXQoJ3dlYmdsLWV4cGVyaW1lbnRhbCcpXHJcbiAgKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50IChvYmopIHtcclxuICByZXR1cm4gKFxyXG4gICAgdHlwZW9mIG9iai5ub2RlTmFtZSA9PT0gJ3N0cmluZycgJiZcclxuICAgIHR5cGVvZiBvYmouYXBwZW5kQ2hpbGQgPT09ICdmdW5jdGlvbicgJiZcclxuICAgIHR5cGVvZiBvYmouZ2V0Qm91bmRpbmdDbGllbnRSZWN0ID09PSAnZnVuY3Rpb24nXHJcbiAgKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1dlYkdMQ29udGV4dCAob2JqKSB7XHJcbiAgcmV0dXJuIChcclxuICAgIHR5cGVvZiBvYmouZHJhd0FycmF5cyA9PT0gJ2Z1bmN0aW9uJyB8fFxyXG4gICAgdHlwZW9mIG9iai5kcmF3RWxlbWVudHMgPT09ICdmdW5jdGlvbidcclxuICApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlRXh0ZW5zaW9ucyAoaW5wdXQpIHtcclxuICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xyXG4gICAgcmV0dXJuIGlucHV0LnNwbGl0KClcclxuICB9XHJcbiAgY2hlY2skMShBcnJheS5pc0FycmF5KGlucHV0KSwgJ2ludmFsaWQgZXh0ZW5zaW9uIGFycmF5Jyk7XHJcbiAgcmV0dXJuIGlucHV0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEVsZW1lbnQgKGRlc2MpIHtcclxuICBpZiAodHlwZW9mIGRlc2MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBjaGVjayQxKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsICdub3Qgc3VwcG9ydGVkIG91dHNpZGUgb2YgRE9NJyk7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkZXNjKVxyXG4gIH1cclxuICByZXR1cm4gZGVzY1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXJzZUFyZ3MgKGFyZ3NfKSB7XHJcbiAgdmFyIGFyZ3MgPSBhcmdzXyB8fCB7fTtcclxuICB2YXIgZWxlbWVudCwgY29udGFpbmVyLCBjYW52YXMsIGdsO1xyXG4gIHZhciBjb250ZXh0QXR0cmlidXRlcyA9IHt9O1xyXG4gIHZhciBleHRlbnNpb25zID0gW107XHJcbiAgdmFyIG9wdGlvbmFsRXh0ZW5zaW9ucyA9IFtdO1xyXG4gIHZhciBwaXhlbFJhdGlvID0gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gMSA6IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcclxuICB2YXIgcHJvZmlsZSA9IGZhbHNlO1xyXG4gIHZhciBvbkRvbmUgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICBpZiAoZXJyKSB7XHJcbiAgICAgIGNoZWNrJDEucmFpc2UoZXJyKTtcclxuICAgIH1cclxuICB9O1xyXG4gIHZhciBvbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTtcclxuICBpZiAodHlwZW9mIGFyZ3MgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBjaGVjayQxKFxyXG4gICAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLFxyXG4gICAgICAnc2VsZWN0b3IgcXVlcmllcyBvbmx5IHN1cHBvcnRlZCBpbiBET00gZW52aXJvbWVudHMnKTtcclxuICAgIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGFyZ3MpO1xyXG4gICAgY2hlY2skMShlbGVtZW50LCAnaW52YWxpZCBxdWVyeSBzdHJpbmcgZm9yIGVsZW1lbnQnKTtcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzID09PSAnb2JqZWN0Jykge1xyXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQoYXJncykpIHtcclxuICAgICAgZWxlbWVudCA9IGFyZ3M7XHJcbiAgICB9IGVsc2UgaWYgKGlzV2ViR0xDb250ZXh0KGFyZ3MpKSB7XHJcbiAgICAgIGdsID0gYXJncztcclxuICAgICAgY2FudmFzID0gZ2wuY2FudmFzO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY2hlY2skMS5jb25zdHJ1Y3RvcihhcmdzKTtcclxuICAgICAgaWYgKCdnbCcgaW4gYXJncykge1xyXG4gICAgICAgIGdsID0gYXJncy5nbDtcclxuICAgICAgfSBlbHNlIGlmICgnY2FudmFzJyBpbiBhcmdzKSB7XHJcbiAgICAgICAgY2FudmFzID0gZ2V0RWxlbWVudChhcmdzLmNhbnZhcyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoJ2NvbnRhaW5lcicgaW4gYXJncykge1xyXG4gICAgICAgIGNvbnRhaW5lciA9IGdldEVsZW1lbnQoYXJncy5jb250YWluZXIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgnYXR0cmlidXRlcycgaW4gYXJncykge1xyXG4gICAgICAgIGNvbnRleHRBdHRyaWJ1dGVzID0gYXJncy5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGNoZWNrJDEudHlwZShjb250ZXh0QXR0cmlidXRlcywgJ29iamVjdCcsICdpbnZhbGlkIGNvbnRleHQgYXR0cmlidXRlcycpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgnZXh0ZW5zaW9ucycgaW4gYXJncykge1xyXG4gICAgICAgIGV4dGVuc2lvbnMgPSBwYXJzZUV4dGVuc2lvbnMoYXJncy5leHRlbnNpb25zKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoJ29wdGlvbmFsRXh0ZW5zaW9ucycgaW4gYXJncykge1xyXG4gICAgICAgIG9wdGlvbmFsRXh0ZW5zaW9ucyA9IHBhcnNlRXh0ZW5zaW9ucyhhcmdzLm9wdGlvbmFsRXh0ZW5zaW9ucyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCdvbkRvbmUnIGluIGFyZ3MpIHtcclxuICAgICAgICBjaGVjayQxLnR5cGUoXHJcbiAgICAgICAgICBhcmdzLm9uRG9uZSwgJ2Z1bmN0aW9uJyxcclxuICAgICAgICAgICdpbnZhbGlkIG9yIG1pc3Npbmcgb25Eb25lIGNhbGxiYWNrJyk7XHJcbiAgICAgICAgb25Eb25lID0gYXJncy5vbkRvbmU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCdwcm9maWxlJyBpbiBhcmdzKSB7XHJcbiAgICAgICAgcHJvZmlsZSA9ICEhYXJncy5wcm9maWxlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgncGl4ZWxSYXRpbycgaW4gYXJncykge1xyXG4gICAgICAgIHBpeGVsUmF0aW8gPSArYXJncy5waXhlbFJhdGlvO1xyXG4gICAgICAgIGNoZWNrJDEocGl4ZWxSYXRpbyA+IDAsICdpbnZhbGlkIHBpeGVsIHJhdGlvJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgY2hlY2skMS5yYWlzZSgnaW52YWxpZCBhcmd1bWVudHMgdG8gcmVnbCcpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGVsZW1lbnQpIHtcclxuICAgIGlmIChlbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdjYW52YXMnKSB7XHJcbiAgICAgIGNhbnZhcyA9IGVsZW1lbnQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb250YWluZXIgPSBlbGVtZW50O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKCFnbCkge1xyXG4gICAgaWYgKCFjYW52YXMpIHtcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnLFxyXG4gICAgICAgICdtdXN0IG1hbnVhbGx5IHNwZWNpZnkgd2ViZ2wgY29udGV4dCBvdXRzaWRlIG9mIERPTSBlbnZpcm9ubWVudHMnKTtcclxuICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZUNhbnZhcyhjb250YWluZXIgfHwgZG9jdW1lbnQuYm9keSwgb25Eb25lLCBwaXhlbFJhdGlvKTtcclxuICAgICAgaWYgKCFyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICB9XHJcbiAgICAgIGNhbnZhcyA9IHJlc3VsdC5jYW52YXM7XHJcbiAgICAgIG9uRGVzdHJveSA9IHJlc3VsdC5vbkRlc3Ryb3k7XHJcbiAgICB9XHJcbiAgICBnbCA9IGNyZWF0ZUNvbnRleHQoY2FudmFzLCBjb250ZXh0QXR0cmlidXRlcyk7XHJcbiAgfVxyXG5cclxuICBpZiAoIWdsKSB7XHJcbiAgICBvbkRlc3Ryb3koKTtcclxuICAgIG9uRG9uZSgnd2ViZ2wgbm90IHN1cHBvcnRlZCwgdHJ5IHVwZ3JhZGluZyB5b3VyIGJyb3dzZXIgb3IgZ3JhcGhpY3MgZHJpdmVycyBodHRwOi8vZ2V0LndlYmdsLm9yZycpO1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBnbDogZ2wsXHJcbiAgICBjYW52YXM6IGNhbnZhcyxcclxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxyXG4gICAgZXh0ZW5zaW9uczogZXh0ZW5zaW9ucyxcclxuICAgIG9wdGlvbmFsRXh0ZW5zaW9uczogb3B0aW9uYWxFeHRlbnNpb25zLFxyXG4gICAgcGl4ZWxSYXRpbzogcGl4ZWxSYXRpbyxcclxuICAgIHByb2ZpbGU6IHByb2ZpbGUsXHJcbiAgICBvbkRvbmU6IG9uRG9uZSxcclxuICAgIG9uRGVzdHJveTogb25EZXN0cm95XHJcbiAgfVxyXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV4dGVuc2lvbkNhY2hlIChnbCwgY29uZmlnKSB7XHJcbiAgdmFyIGV4dGVuc2lvbnMgPSB7fTtcclxuXHJcbiAgZnVuY3Rpb24gdHJ5TG9hZEV4dGVuc2lvbiAobmFtZV8pIHtcclxuICAgIGNoZWNrJDEudHlwZShuYW1lXywgJ3N0cmluZycsICdleHRlbnNpb24gbmFtZSBtdXN0IGJlIHN0cmluZycpO1xyXG4gICAgdmFyIG5hbWUgPSBuYW1lXy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgdmFyIGV4dDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGV4dCA9IGV4dGVuc2lvbnNbbmFtZV0gPSBnbC5nZXRFeHRlbnNpb24obmFtZSk7XHJcbiAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgcmV0dXJuICEhZXh0XHJcbiAgfVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbmZpZy5leHRlbnNpb25zLmxlbmd0aDsgKytpKSB7XHJcbiAgICB2YXIgbmFtZSA9IGNvbmZpZy5leHRlbnNpb25zW2ldO1xyXG4gICAgaWYgKCF0cnlMb2FkRXh0ZW5zaW9uKG5hbWUpKSB7XHJcbiAgICAgIGNvbmZpZy5vbkRlc3Ryb3koKTtcclxuICAgICAgY29uZmlnLm9uRG9uZSgnXCInICsgbmFtZSArICdcIiBleHRlbnNpb24gaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBXZWJHTCBjb250ZXh0LCB0cnkgdXBncmFkaW5nIHlvdXIgc3lzdGVtIG9yIGEgZGlmZmVyZW50IGJyb3dzZXInKTtcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbmZpZy5vcHRpb25hbEV4dGVuc2lvbnMuZm9yRWFjaCh0cnlMb2FkRXh0ZW5zaW9uKTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGV4dGVuc2lvbnM6IGV4dGVuc2lvbnMsXHJcbiAgICByZXN0b3JlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIE9iamVjdC5rZXlzKGV4dGVuc2lvbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICBpZiAoZXh0ZW5zaW9uc1tuYW1lXSAmJiAhdHJ5TG9hZEV4dGVuc2lvbihuYW1lKSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCcocmVnbCk6IGVycm9yIHJlc3RvcmluZyBleHRlbnNpb24gJyArIG5hbWUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cblxuZnVuY3Rpb24gbG9vcCAobiwgZikge1xyXG4gIHZhciByZXN1bHQgPSBBcnJheShuKTtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgcmVzdWx0W2ldID0gZihpKTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XG5cbnZhciBHTF9CWVRFJDEgPSA1MTIwO1xyXG52YXIgR0xfVU5TSUdORURfQllURSQyID0gNTEyMTtcclxudmFyIEdMX1NIT1JUJDEgPSA1MTIyO1xyXG52YXIgR0xfVU5TSUdORURfU0hPUlQkMSA9IDUxMjM7XHJcbnZhciBHTF9JTlQkMSA9IDUxMjQ7XHJcbnZhciBHTF9VTlNJR05FRF9JTlQkMSA9IDUxMjU7XHJcbnZhciBHTF9GTE9BVCQyID0gNTEyNjtcclxuXHJcbmZ1bmN0aW9uIG5leHRQb3cxNiAodikge1xyXG4gIGZvciAodmFyIGkgPSAxNjsgaSA8PSAoMSA8PCAyOCk7IGkgKj0gMTYpIHtcclxuICAgIGlmICh2IDw9IGkpIHtcclxuICAgICAgcmV0dXJuIGlcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIDBcclxufVxyXG5cclxuZnVuY3Rpb24gbG9nMiAodikge1xyXG4gIHZhciByLCBzaGlmdDtcclxuICByID0gKHYgPiAweEZGRkYpIDw8IDQ7XHJcbiAgdiA+Pj49IHI7XHJcbiAgc2hpZnQgPSAodiA+IDB4RkYpIDw8IDM7XHJcbiAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xyXG4gIHNoaWZ0ID0gKHYgPiAweEYpIDw8IDI7XHJcbiAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xyXG4gIHNoaWZ0ID0gKHYgPiAweDMpIDw8IDE7XHJcbiAgdiA+Pj49IHNoaWZ0OyByIHw9IHNoaWZ0O1xyXG4gIHJldHVybiByIHwgKHYgPj4gMSlcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlUG9vbCAoKSB7XHJcbiAgdmFyIGJ1ZmZlclBvb2wgPSBsb29wKDgsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBbXVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBhbGxvYyAobikge1xyXG4gICAgdmFyIHN6ID0gbmV4dFBvdzE2KG4pO1xyXG4gICAgdmFyIGJpbiA9IGJ1ZmZlclBvb2xbbG9nMihzeikgPj4gMl07XHJcbiAgICBpZiAoYmluLmxlbmd0aCA+IDApIHtcclxuICAgICAgcmV0dXJuIGJpbi5wb3AoKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBBcnJheUJ1ZmZlcihzeilcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGZyZWUgKGJ1Zikge1xyXG4gICAgYnVmZmVyUG9vbFtsb2cyKGJ1Zi5ieXRlTGVuZ3RoKSA+PiAyXS5wdXNoKGJ1Zik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBhbGxvY1R5cGUgKHR5cGUsIG4pIHtcclxuICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG4gICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgIGNhc2UgR0xfQllURSQxOlxyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBJbnQ4QXJyYXkoYWxsb2MobiksIDAsIG4pO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgR0xfVU5TSUdORURfQllURSQyOlxyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGFsbG9jKG4pLCAwLCBuKTtcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIEdMX1NIT1JUJDE6XHJcbiAgICAgICAgcmVzdWx0ID0gbmV3IEludDE2QXJyYXkoYWxsb2MoMiAqIG4pLCAwLCBuKTtcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIEdMX1VOU0lHTkVEX1NIT1JUJDE6XHJcbiAgICAgICAgcmVzdWx0ID0gbmV3IFVpbnQxNkFycmF5KGFsbG9jKDIgKiBuKSwgMCwgbik7XHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSBHTF9JTlQkMTpcclxuICAgICAgICByZXN1bHQgPSBuZXcgSW50MzJBcnJheShhbGxvYyg0ICogbiksIDAsIG4pO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgR0xfVU5TSUdORURfSU5UJDE6XHJcbiAgICAgICAgcmVzdWx0ID0gbmV3IFVpbnQzMkFycmF5KGFsbG9jKDQgKiBuKSwgMCwgbik7XHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSBHTF9GTE9BVCQyOlxyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkoYWxsb2MoNCAqIG4pLCAwLCBuKTtcclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICBpZiAocmVzdWx0Lmxlbmd0aCAhPT0gbikge1xyXG4gICAgICByZXR1cm4gcmVzdWx0LnN1YmFycmF5KDAsIG4pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmcmVlVHlwZSAoYXJyYXkpIHtcclxuICAgIGZyZWUoYXJyYXkuYnVmZmVyKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBhbGxvYzogYWxsb2MsXHJcbiAgICBmcmVlOiBmcmVlLFxyXG4gICAgYWxsb2NUeXBlOiBhbGxvY1R5cGUsXHJcbiAgICBmcmVlVHlwZTogZnJlZVR5cGVcclxuICB9XHJcbn1cclxuXHJcbnZhciBwb29sID0gY3JlYXRlUG9vbCgpO1xyXG5cclxuLy8gemVybyBwb29sIGZvciBpbml0aWFsIHplcm8gZGF0YVxyXG5wb29sLnplcm8gPSBjcmVhdGVQb29sKCk7XG5cbnZhciBHTF9TVUJQSVhFTF9CSVRTID0gMHgwRDUwO1xyXG52YXIgR0xfUkVEX0JJVFMgPSAweDBENTI7XHJcbnZhciBHTF9HUkVFTl9CSVRTID0gMHgwRDUzO1xyXG52YXIgR0xfQkxVRV9CSVRTID0gMHgwRDU0O1xyXG52YXIgR0xfQUxQSEFfQklUUyA9IDB4MEQ1NTtcclxudmFyIEdMX0RFUFRIX0JJVFMgPSAweDBENTY7XHJcbnZhciBHTF9TVEVOQ0lMX0JJVFMgPSAweDBENTc7XHJcblxyXG52YXIgR0xfQUxJQVNFRF9QT0lOVF9TSVpFX1JBTkdFID0gMHg4NDZEO1xyXG52YXIgR0xfQUxJQVNFRF9MSU5FX1dJRFRIX1JBTkdFID0gMHg4NDZFO1xyXG5cclxudmFyIEdMX01BWF9URVhUVVJFX1NJWkUgPSAweDBEMzM7XHJcbnZhciBHTF9NQVhfVklFV1BPUlRfRElNUyA9IDB4MEQzQTtcclxudmFyIEdMX01BWF9WRVJURVhfQVRUUklCUyA9IDB4ODg2OTtcclxudmFyIEdMX01BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTID0gMHg4REZCO1xyXG52YXIgR0xfTUFYX1ZBUllJTkdfVkVDVE9SUyA9IDB4OERGQztcclxudmFyIEdMX01BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTID0gMHg4QjREO1xyXG52YXIgR0xfTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTID0gMHg4QjRDO1xyXG52YXIgR0xfTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMgPSAweDg4NzI7XHJcbnZhciBHTF9NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTID0gMHg4REZEO1xyXG52YXIgR0xfTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSA9IDB4ODUxQztcclxudmFyIEdMX01BWF9SRU5ERVJCVUZGRVJfU0laRSA9IDB4ODRFODtcclxuXHJcbnZhciBHTF9WRU5ET1IgPSAweDFGMDA7XHJcbnZhciBHTF9SRU5ERVJFUiA9IDB4MUYwMTtcclxudmFyIEdMX1ZFUlNJT04gPSAweDFGMDI7XHJcbnZhciBHTF9TSEFESU5HX0xBTkdVQUdFX1ZFUlNJT04gPSAweDhCOEM7XHJcblxyXG52YXIgR0xfTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUID0gMHg4NEZGO1xyXG5cclxudmFyIEdMX01BWF9DT0xPUl9BVFRBQ0hNRU5UU19XRUJHTCA9IDB4OENERjtcclxudmFyIEdMX01BWF9EUkFXX0JVRkZFUlNfV0VCR0wgPSAweDg4MjQ7XHJcblxyXG52YXIgR0xfVEVYVFVSRV8yRCA9IDB4MERFMTtcclxudmFyIEdMX1RFWFRVUkVfQ1VCRV9NQVAgPSAweDg1MTM7XHJcbnZhciBHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1ggPSAweDg1MTU7XHJcbnZhciBHTF9URVhUVVJFMCA9IDB4ODRDMDtcclxudmFyIEdMX1JHQkEgPSAweDE5MDg7XHJcbnZhciBHTF9GTE9BVCQxID0gMHgxNDA2O1xyXG52YXIgR0xfVU5TSUdORURfQllURSQxID0gMHgxNDAxO1xyXG52YXIgR0xfRlJBTUVCVUZGRVIgPSAweDhENDA7XHJcbnZhciBHTF9GUkFNRUJVRkZFUl9DT01QTEVURSA9IDB4OENENTtcclxudmFyIEdMX0NPTE9SX0FUVEFDSE1FTlQwID0gMHg4Q0UwO1xyXG52YXIgR0xfQ09MT1JfQlVGRkVSX0JJVCQxID0gMHg0MDAwO1xyXG5cclxudmFyIHdyYXBMaW1pdHMgPSBmdW5jdGlvbiAoZ2wsIGV4dGVuc2lvbnMpIHtcclxuICB2YXIgbWF4QW5pc290cm9waWMgPSAxO1xyXG4gIGlmIChleHRlbnNpb25zLmV4dF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYykge1xyXG4gICAgbWF4QW5pc290cm9waWMgPSBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUKTtcclxuICB9XHJcblxyXG4gIHZhciBtYXhEcmF3YnVmZmVycyA9IDE7XHJcbiAgdmFyIG1heENvbG9yQXR0YWNobWVudHMgPSAxO1xyXG4gIGlmIChleHRlbnNpb25zLndlYmdsX2RyYXdfYnVmZmVycykge1xyXG4gICAgbWF4RHJhd2J1ZmZlcnMgPSBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX0RSQVdfQlVGRkVSU19XRUJHTCk7XHJcbiAgICBtYXhDb2xvckF0dGFjaG1lbnRzID0gZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9DT0xPUl9BVFRBQ0hNRU5UU19XRUJHTCk7XHJcbiAgfVxyXG5cclxuICAvLyBkZXRlY3QgaWYgcmVhZGluZyBmbG9hdCB0ZXh0dXJlcyBpcyBhdmFpbGFibGUgKFNhZmFyaSBkb2Vzbid0IHN1cHBvcnQpXHJcbiAgdmFyIHJlYWRGbG9hdCA9ICEhZXh0ZW5zaW9ucy5vZXNfdGV4dHVyZV9mbG9hdDtcclxuICBpZiAocmVhZEZsb2F0KSB7XHJcbiAgICB2YXIgcmVhZEZsb2F0VGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKEdMX1RFWFRVUkVfMkQsIHJlYWRGbG9hdFRleHR1cmUpO1xyXG4gICAgZ2wudGV4SW1hZ2UyRChHTF9URVhUVVJFXzJELCAwLCBHTF9SR0JBLCAxLCAxLCAwLCBHTF9SR0JBLCBHTF9GTE9BVCQxLCBudWxsKTtcclxuXHJcbiAgICB2YXIgZmJvID0gZ2wuY3JlYXRlRnJhbWVidWZmZXIoKTtcclxuICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihHTF9GUkFNRUJVRkZFUiwgZmJvKTtcclxuICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKEdMX0ZSQU1FQlVGRkVSLCBHTF9DT0xPUl9BVFRBQ0hNRU5UMCwgR0xfVEVYVFVSRV8yRCwgcmVhZEZsb2F0VGV4dHVyZSwgMCk7XHJcbiAgICBnbC5iaW5kVGV4dHVyZShHTF9URVhUVVJFXzJELCBudWxsKTtcclxuXHJcbiAgICBpZiAoZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhHTF9GUkFNRUJVRkZFUikgIT09IEdMX0ZSQU1FQlVGRkVSX0NPTVBMRVRFKSByZWFkRmxvYXQgPSBmYWxzZTtcclxuXHJcbiAgICBlbHNlIHtcclxuICAgICAgZ2wudmlld3BvcnQoMCwgMCwgMSwgMSk7XHJcbiAgICAgIGdsLmNsZWFyQ29sb3IoMS4wLCAwLjAsIDAuMCwgMS4wKTtcclxuICAgICAgZ2wuY2xlYXIoR0xfQ09MT1JfQlVGRkVSX0JJVCQxKTtcclxuICAgICAgdmFyIHBpeGVscyA9IHBvb2wuYWxsb2NUeXBlKEdMX0ZMT0FUJDEsIDQpO1xyXG4gICAgICBnbC5yZWFkUGl4ZWxzKDAsIDAsIDEsIDEsIEdMX1JHQkEsIEdMX0ZMT0FUJDEsIHBpeGVscyk7XHJcblxyXG4gICAgICBpZiAoZ2wuZ2V0RXJyb3IoKSkgcmVhZEZsb2F0ID0gZmFsc2U7XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKGZibyk7XHJcbiAgICAgICAgZ2wuZGVsZXRlVGV4dHVyZShyZWFkRmxvYXRUZXh0dXJlKTtcclxuXHJcbiAgICAgICAgcmVhZEZsb2F0ID0gcGl4ZWxzWzBdID09PSAxLjA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHBvb2wuZnJlZVR5cGUocGl4ZWxzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGRldGVjdCBub24gcG93ZXIgb2YgdHdvIGN1YmUgdGV4dHVyZXMgc3VwcG9ydCAoSUUgZG9lc24ndCBzdXBwb3J0KVxyXG4gIHZhciBpc0lFID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgKC9NU0lFLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9UcmlkZW50XFwvLy50ZXN0KG5hdmlnYXRvci5hcHBWZXJzaW9uKSB8fCAvRWRnZS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSk7XHJcblxyXG4gIHZhciBucG90VGV4dHVyZUN1YmUgPSB0cnVlO1xyXG5cclxuICBpZiAoIWlzSUUpIHtcclxuICAgIHZhciBjdWJlVGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgIHZhciBkYXRhID0gcG9vbC5hbGxvY1R5cGUoR0xfVU5TSUdORURfQllURSQxLCAzNik7XHJcbiAgICBnbC5hY3RpdmVUZXh0dXJlKEdMX1RFWFRVUkUwKTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKEdMX1RFWFRVUkVfQ1VCRV9NQVAsIGN1YmVUZXh0dXJlKTtcclxuICAgIGdsLnRleEltYWdlMkQoR0xfVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YLCAwLCBHTF9SR0JBLCAzLCAzLCAwLCBHTF9SR0JBLCBHTF9VTlNJR05FRF9CWVRFJDEsIGRhdGEpO1xyXG4gICAgcG9vbC5mcmVlVHlwZShkYXRhKTtcclxuICAgIGdsLmJpbmRUZXh0dXJlKEdMX1RFWFRVUkVfQ1VCRV9NQVAsIG51bGwpO1xyXG4gICAgZ2wuZGVsZXRlVGV4dHVyZShjdWJlVGV4dHVyZSk7XHJcbiAgICBucG90VGV4dHVyZUN1YmUgPSAhZ2wuZ2V0RXJyb3IoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICAvLyBkcmF3aW5nIGJ1ZmZlciBiaXQgZGVwdGhcclxuICAgIGNvbG9yQml0czogW1xyXG4gICAgICBnbC5nZXRQYXJhbWV0ZXIoR0xfUkVEX0JJVFMpLFxyXG4gICAgICBnbC5nZXRQYXJhbWV0ZXIoR0xfR1JFRU5fQklUUyksXHJcbiAgICAgIGdsLmdldFBhcmFtZXRlcihHTF9CTFVFX0JJVFMpLFxyXG4gICAgICBnbC5nZXRQYXJhbWV0ZXIoR0xfQUxQSEFfQklUUylcclxuICAgIF0sXHJcbiAgICBkZXB0aEJpdHM6IGdsLmdldFBhcmFtZXRlcihHTF9ERVBUSF9CSVRTKSxcclxuICAgIHN0ZW5jaWxCaXRzOiBnbC5nZXRQYXJhbWV0ZXIoR0xfU1RFTkNJTF9CSVRTKSxcclxuICAgIHN1YnBpeGVsQml0czogZ2wuZ2V0UGFyYW1ldGVyKEdMX1NVQlBJWEVMX0JJVFMpLFxyXG5cclxuICAgIC8vIHN1cHBvcnRlZCBleHRlbnNpb25zXHJcbiAgICBleHRlbnNpb25zOiBPYmplY3Qua2V5cyhleHRlbnNpb25zKS5maWx0ZXIoZnVuY3Rpb24gKGV4dCkge1xyXG4gICAgICByZXR1cm4gISFleHRlbnNpb25zW2V4dF1cclxuICAgIH0pLFxyXG5cclxuICAgIC8vIG1heCBhbmlzbyBzYW1wbGVzXHJcbiAgICBtYXhBbmlzb3Ryb3BpYzogbWF4QW5pc290cm9waWMsXHJcblxyXG4gICAgLy8gbWF4IGRyYXcgYnVmZmVyc1xyXG4gICAgbWF4RHJhd2J1ZmZlcnM6IG1heERyYXdidWZmZXJzLFxyXG4gICAgbWF4Q29sb3JBdHRhY2htZW50czogbWF4Q29sb3JBdHRhY2htZW50cyxcclxuXHJcbiAgICAvLyBwb2ludCBhbmQgbGluZSBzaXplIHJhbmdlc1xyXG4gICAgcG9pbnRTaXplRGltczogZ2wuZ2V0UGFyYW1ldGVyKEdMX0FMSUFTRURfUE9JTlRfU0laRV9SQU5HRSksXHJcbiAgICBsaW5lV2lkdGhEaW1zOiBnbC5nZXRQYXJhbWV0ZXIoR0xfQUxJQVNFRF9MSU5FX1dJRFRIX1JBTkdFKSxcclxuICAgIG1heFZpZXdwb3J0RGltczogZ2wuZ2V0UGFyYW1ldGVyKEdMX01BWF9WSUVXUE9SVF9ESU1TKSxcclxuICAgIG1heENvbWJpbmVkVGV4dHVyZVVuaXRzOiBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMpLFxyXG4gICAgbWF4Q3ViZU1hcFNpemU6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFKSxcclxuICAgIG1heFJlbmRlcmJ1ZmZlclNpemU6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfUkVOREVSQlVGRkVSX1NJWkUpLFxyXG4gICAgbWF4VGV4dHVyZVVuaXRzOiBnbC5nZXRQYXJhbWV0ZXIoR0xfTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpLFxyXG4gICAgbWF4VGV4dHVyZVNpemU6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVEVYVFVSRV9TSVpFKSxcclxuICAgIG1heEF0dHJpYnV0ZXM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVkVSVEVYX0FUVFJJQlMpLFxyXG4gICAgbWF4VmVydGV4VW5pZm9ybXM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVkVSVEVYX1VOSUZPUk1fVkVDVE9SUyksXHJcbiAgICBtYXhWZXJ0ZXhUZXh0dXJlVW5pdHM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFMpLFxyXG4gICAgbWF4VmFyeWluZ1ZlY3RvcnM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfVkFSWUlOR19WRUNUT1JTKSxcclxuICAgIG1heEZyYWdtZW50VW5pZm9ybXM6IGdsLmdldFBhcmFtZXRlcihHTF9NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTKSxcclxuXHJcbiAgICAvLyB2ZW5kb3IgaW5mb1xyXG4gICAgZ2xzbDogZ2wuZ2V0UGFyYW1ldGVyKEdMX1NIQURJTkdfTEFOR1VBR0VfVkVSU0lPTiksXHJcbiAgICByZW5kZXJlcjogZ2wuZ2V0UGFyYW1ldGVyKEdMX1JFTkRFUkVSKSxcclxuICAgIHZlbmRvcjogZ2wuZ2V0UGFyYW1ldGVyKEdMX1ZFTkRPUiksXHJcbiAgICB2ZXJzaW9uOiBnbC5nZXRQYXJhbWV0ZXIoR0xfVkVSU0lPTiksXHJcblxyXG4gICAgLy8gcXVpcmtzXHJcbiAgICByZWFkRmxvYXQ6IHJlYWRGbG9hdCxcclxuICAgIG5wb3RUZXh0dXJlQ3ViZTogbnBvdFRleHR1cmVDdWJlXHJcbiAgfVxyXG59O1xuXG5mdW5jdGlvbiBpc05EQXJyYXlMaWtlIChvYmopIHtcclxuICByZXR1cm4gKFxyXG4gICAgISFvYmogJiZcclxuICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXHJcbiAgICBBcnJheS5pc0FycmF5KG9iai5zaGFwZSkgJiZcclxuICAgIEFycmF5LmlzQXJyYXkob2JqLnN0cmlkZSkgJiZcclxuICAgIHR5cGVvZiBvYmoub2Zmc2V0ID09PSAnbnVtYmVyJyAmJlxyXG4gICAgb2JqLnNoYXBlLmxlbmd0aCA9PT0gb2JqLnN0cmlkZS5sZW5ndGggJiZcclxuICAgIChBcnJheS5pc0FycmF5KG9iai5kYXRhKSB8fFxyXG4gICAgICBpc1R5cGVkQXJyYXkob2JqLmRhdGEpKSlcclxufVxuXG52YXIgdmFsdWVzID0gZnVuY3Rpb24gKG9iaikge1xyXG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBvYmpba2V5XSB9KVxyXG59O1xuXG52YXIgZmxhdHRlblV0aWxzID0ge1xyXG4gIHNoYXBlOiBhcnJheVNoYXBlJDEsXHJcbiAgZmxhdHRlbjogZmxhdHRlbkFycmF5XHJcbn07XHJcblxyXG5mdW5jdGlvbiBmbGF0dGVuMUQgKGFycmF5LCBueCwgb3V0KSB7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBueDsgKytpKSB7XHJcbiAgICBvdXRbaV0gPSBhcnJheVtpXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZsYXR0ZW4yRCAoYXJyYXksIG54LCBueSwgb3V0KSB7XHJcbiAgdmFyIHB0ciA9IDA7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBueDsgKytpKSB7XHJcbiAgICB2YXIgcm93ID0gYXJyYXlbaV07XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG55OyArK2opIHtcclxuICAgICAgb3V0W3B0cisrXSA9IHJvd1tqXTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZsYXR0ZW4zRCAoYXJyYXksIG54LCBueSwgbnosIG91dCwgcHRyXykge1xyXG4gIHZhciBwdHIgPSBwdHJfO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbng7ICsraSkge1xyXG4gICAgdmFyIHJvdyA9IGFycmF5W2ldO1xyXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBueTsgKytqKSB7XHJcbiAgICAgIHZhciBjb2wgPSByb3dbal07XHJcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbno7ICsraykge1xyXG4gICAgICAgIG91dFtwdHIrK10gPSBjb2xba107XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZsYXR0ZW5SZWMgKGFycmF5LCBzaGFwZSwgbGV2ZWwsIG91dCwgcHRyKSB7XHJcbiAgdmFyIHN0cmlkZSA9IDE7XHJcbiAgZm9yICh2YXIgaSA9IGxldmVsICsgMTsgaSA8IHNoYXBlLmxlbmd0aDsgKytpKSB7XHJcbiAgICBzdHJpZGUgKj0gc2hhcGVbaV07XHJcbiAgfVxyXG4gIHZhciBuID0gc2hhcGVbbGV2ZWxdO1xyXG4gIGlmIChzaGFwZS5sZW5ndGggLSBsZXZlbCA9PT0gNCkge1xyXG4gICAgdmFyIG54ID0gc2hhcGVbbGV2ZWwgKyAxXTtcclxuICAgIHZhciBueSA9IHNoYXBlW2xldmVsICsgMl07XHJcbiAgICB2YXIgbnogPSBzaGFwZVtsZXZlbCArIDNdO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICBmbGF0dGVuM0QoYXJyYXlbaV0sIG54LCBueSwgbnosIG91dCwgcHRyKTtcclxuICAgICAgcHRyICs9IHN0cmlkZTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xyXG4gICAgICBmbGF0dGVuUmVjKGFycmF5W2ldLCBzaGFwZSwgbGV2ZWwgKyAxLCBvdXQsIHB0cik7XHJcbiAgICAgIHB0ciArPSBzdHJpZGU7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBmbGF0dGVuQXJyYXkgKGFycmF5LCBzaGFwZSwgdHlwZSwgb3V0Xykge1xyXG4gIHZhciBzeiA9IDE7XHJcbiAgaWYgKHNoYXBlLmxlbmd0aCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFwZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICBzeiAqPSBzaGFwZVtpXTtcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgc3ogPSAwO1xyXG4gIH1cclxuICB2YXIgb3V0ID0gb3V0XyB8fCBwb29sLmFsbG9jVHlwZSh0eXBlLCBzeik7XHJcbiAgc3dpdGNoIChzaGFwZS5sZW5ndGgpIHtcclxuICAgIGNhc2UgMDpcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgMTpcclxuICAgICAgZmxhdHRlbjFEKGFycmF5LCBzaGFwZVswXSwgb3V0KTtcclxuICAgICAgYnJlYWtcclxuICAgIGNhc2UgMjpcclxuICAgICAgZmxhdHRlbjJEKGFycmF5LCBzaGFwZVswXSwgc2hhcGVbMV0sIG91dCk7XHJcbiAgICAgIGJyZWFrXHJcbiAgICBjYXNlIDM6XHJcbiAgICAgIGZsYXR0ZW4zRChhcnJheSwgc2hhcGVbMF0sIHNoYXBlWzFdLCBzaGFwZVsyXSwgb3V0LCAwKTtcclxuICAgICAgYnJlYWtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGZsYXR0ZW5SZWMoYXJyYXksIHNoYXBlLCAwLCBvdXQsIDApO1xyXG4gIH1cclxuICByZXR1cm4gb3V0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFycmF5U2hhcGUkMSAoYXJyYXlfKSB7XHJcbiAgdmFyIHNoYXBlID0gW107XHJcbiAgZm9yICh2YXIgYXJyYXkgPSBhcnJheV87IGFycmF5Lmxlbmd0aDsgYXJyYXkgPSBhcnJheVswXSkge1xyXG4gICAgc2hhcGUucHVzaChhcnJheS5sZW5ndGgpO1xyXG4gIH1cclxuICByZXR1cm4gc2hhcGVcclxufVxuXG52YXIgYXJyYXlUeXBlcyA9IHtcblx0XCJbb2JqZWN0IEludDhBcnJheV1cIjogNTEyMCxcblx0XCJbb2JqZWN0IEludDE2QXJyYXldXCI6IDUxMjIsXG5cdFwiW29iamVjdCBJbnQzMkFycmF5XVwiOiA1MTI0LFxuXHRcIltvYmplY3QgVWludDhBcnJheV1cIjogNTEyMSxcblx0XCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiOiA1MTIxLFxuXHRcIltvYmplY3QgVWludDE2QXJyYXldXCI6IDUxMjMsXG5cdFwiW29iamVjdCBVaW50MzJBcnJheV1cIjogNTEyNSxcblx0XCJbb2JqZWN0IEZsb2F0MzJBcnJheV1cIjogNTEyNixcblx0XCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIjogNTEyMSxcblx0XCJbb2JqZWN0IEFycmF5QnVmZmVyXVwiOiA1MTIxXG59O1xuXG52YXIgaW50OCA9IDUxMjA7XG52YXIgaW50MTYgPSA1MTIyO1xudmFyIGludDMyID0gNTEyNDtcbnZhciB1aW50OCA9IDUxMjE7XG52YXIgdWludDE2ID0gNTEyMztcbnZhciB1aW50MzIgPSA1MTI1O1xudmFyIGZsb2F0ID0gNTEyNjtcbnZhciBmbG9hdDMyID0gNTEyNjtcbnZhciBnbFR5cGVzID0ge1xuXHRpbnQ4OiBpbnQ4LFxuXHRpbnQxNjogaW50MTYsXG5cdGludDMyOiBpbnQzMixcblx0dWludDg6IHVpbnQ4LFxuXHR1aW50MTY6IHVpbnQxNixcblx0dWludDMyOiB1aW50MzIsXG5cdGZsb2F0OiBmbG9hdCxcblx0ZmxvYXQzMjogZmxvYXQzMlxufTtcblxudmFyIGR5bmFtaWMkMSA9IDM1MDQ4O1xudmFyIHN0cmVhbSA9IDM1MDQwO1xudmFyIHVzYWdlVHlwZXMgPSB7XG5cdGR5bmFtaWM6IGR5bmFtaWMkMSxcblx0c3RyZWFtOiBzdHJlYW0sXG5cdFwic3RhdGljXCI6IDM1MDQ0XG59O1xuXG52YXIgYXJyYXlGbGF0dGVuID0gZmxhdHRlblV0aWxzLmZsYXR0ZW47XHJcbnZhciBhcnJheVNoYXBlID0gZmxhdHRlblV0aWxzLnNoYXBlO1xyXG5cclxudmFyIEdMX1NUQVRJQ19EUkFXID0gMHg4OEU0O1xyXG52YXIgR0xfU1RSRUFNX0RSQVcgPSAweDg4RTA7XHJcblxyXG52YXIgR0xfVU5TSUdORURfQllURSQzID0gNTEyMTtcclxudmFyIEdMX0ZMT0FUJDMgPSA1MTI2O1xyXG5cclxudmFyIERUWVBFU19TSVpFUyA9IFtdO1xyXG5EVFlQRVNfU0laRVNbNTEyMF0gPSAxOyAvLyBpbnQ4XHJcbkRUWVBFU19TSVpFU1s1MTIyXSA9IDI7IC8vIGludDE2XHJcbkRUWVBFU19TSVpFU1s1MTI0XSA9IDQ7IC8vIGludDMyXHJcbkRUWVBFU19TSVpFU1s1MTIxXSA9IDE7IC8vIHVpbnQ4XHJcbkRUWVBFU19TSVpFU1s1MTIzXSA9IDI7IC8vIHVpbnQxNlxyXG5EVFlQRVNfU0laRVNbNTEyNV0gPSA0OyAvLyB1aW50MzJcclxuRFRZUEVTX1NJWkVTWzUxMjZdID0gNDsgLy8gZmxvYXQzMlxyXG5cclxuZnVuY3Rpb24gdHlwZWRBcnJheUNvZGUgKGRhdGEpIHtcclxuICByZXR1cm4gYXJyYXlUeXBlc1tPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0YSldIHwgMFxyXG59XHJcblxyXG5mdW5jdGlvbiBjb3B5QXJyYXkgKG91dCwgaW5wKSB7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnAubGVuZ3RoOyArK2kpIHtcclxuICAgIG91dFtpXSA9IGlucFtpXTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRyYW5zcG9zZSAoXHJcbiAgcmVzdWx0LCBkYXRhLCBzaGFwZVgsIHNoYXBlWSwgc3RyaWRlWCwgc3RyaWRlWSwgb2Zmc2V0KSB7XHJcbiAgdmFyIHB0ciA9IDA7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaGFwZVg7ICsraSkge1xyXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBzaGFwZVk7ICsraikge1xyXG4gICAgICByZXN1bHRbcHRyKytdID0gZGF0YVtzdHJpZGVYICogaSArIHN0cmlkZVkgKiBqICsgb2Zmc2V0XTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHdyYXBCdWZmZXJTdGF0ZSAoZ2wsIHN0YXRzLCBjb25maWcsIGF0dHJpYnV0ZVN0YXRlKSB7XHJcbiAgdmFyIGJ1ZmZlckNvdW50ID0gMDtcclxuICB2YXIgYnVmZmVyU2V0ID0ge307XHJcblxyXG4gIGZ1bmN0aW9uIFJFR0xCdWZmZXIgKHR5cGUpIHtcclxuICAgIHRoaXMuaWQgPSBidWZmZXJDb3VudCsrO1xyXG4gICAgdGhpcy5idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB0aGlzLnVzYWdlID0gR0xfU1RBVElDX0RSQVc7XHJcbiAgICB0aGlzLmJ5dGVMZW5ndGggPSAwO1xyXG4gICAgdGhpcy5kaW1lbnNpb24gPSAxO1xyXG4gICAgdGhpcy5kdHlwZSA9IEdMX1VOU0lHTkVEX0JZVEUkMztcclxuXHJcbiAgICB0aGlzLnBlcnNpc3RlbnREYXRhID0gbnVsbDtcclxuXHJcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgdGhpcy5zdGF0cyA9IHtzaXplOiAwfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIFJFR0xCdWZmZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBnbC5iaW5kQnVmZmVyKHRoaXMudHlwZSwgdGhpcy5idWZmZXIpO1xyXG4gIH07XHJcblxyXG4gIFJFR0xCdWZmZXIucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBkZXN0cm95KHRoaXMpO1xyXG4gIH07XHJcblxyXG4gIHZhciBzdHJlYW1Qb29sID0gW107XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZVN0cmVhbSAodHlwZSwgZGF0YSkge1xyXG4gICAgdmFyIGJ1ZmZlciA9IHN0cmVhbVBvb2wucG9wKCk7XHJcbiAgICBpZiAoIWJ1ZmZlcikge1xyXG4gICAgICBidWZmZXIgPSBuZXcgUkVHTEJ1ZmZlcih0eXBlKTtcclxuICAgIH1cclxuICAgIGJ1ZmZlci5iaW5kKCk7XHJcbiAgICBpbml0QnVmZmVyRnJvbURhdGEoYnVmZmVyLCBkYXRhLCBHTF9TVFJFQU1fRFJBVywgMCwgMSwgZmFsc2UpO1xyXG4gICAgcmV0dXJuIGJ1ZmZlclxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVzdHJveVN0cmVhbSAoc3RyZWFtJCQxKSB7XHJcbiAgICBzdHJlYW1Qb29sLnB1c2goc3RyZWFtJCQxKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheSAoYnVmZmVyLCBkYXRhLCB1c2FnZSkge1xyXG4gICAgYnVmZmVyLmJ5dGVMZW5ndGggPSBkYXRhLmJ5dGVMZW5ndGg7XHJcbiAgICBnbC5idWZmZXJEYXRhKGJ1ZmZlci50eXBlLCBkYXRhLCB1c2FnZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbml0QnVmZmVyRnJvbURhdGEgKGJ1ZmZlciwgZGF0YSwgdXNhZ2UsIGR0eXBlLCBkaW1lbnNpb24sIHBlcnNpc3QpIHtcclxuICAgIHZhciBzaGFwZTtcclxuICAgIGJ1ZmZlci51c2FnZSA9IHVzYWdlO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgYnVmZmVyLmR0eXBlID0gZHR5cGUgfHwgR0xfRkxPQVQkMztcclxuICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIHZhciBmbGF0RGF0YTtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhWzBdKSkge1xyXG4gICAgICAgICAgc2hhcGUgPSBhcnJheVNoYXBlKGRhdGEpO1xyXG4gICAgICAgICAgdmFyIGRpbSA9IDE7XHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNoYXBlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGRpbSAqPSBzaGFwZVtpXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJ1ZmZlci5kaW1lbnNpb24gPSBkaW07XHJcbiAgICAgICAgICBmbGF0RGF0YSA9IGFycmF5RmxhdHRlbihkYXRhLCBzaGFwZSwgYnVmZmVyLmR0eXBlKTtcclxuICAgICAgICAgIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheShidWZmZXIsIGZsYXREYXRhLCB1c2FnZSk7XHJcbiAgICAgICAgICBpZiAocGVyc2lzdCkge1xyXG4gICAgICAgICAgICBidWZmZXIucGVyc2lzdGVudERhdGEgPSBmbGF0RGF0YTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvb2wuZnJlZVR5cGUoZmxhdERhdGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGFbMF0gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBidWZmZXIuZGltZW5zaW9uID0gZGltZW5zaW9uO1xyXG4gICAgICAgICAgdmFyIHR5cGVkRGF0YSA9IHBvb2wuYWxsb2NUeXBlKGJ1ZmZlci5kdHlwZSwgZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgICAgY29weUFycmF5KHR5cGVkRGF0YSwgZGF0YSk7XHJcbiAgICAgICAgICBpbml0QnVmZmVyRnJvbVR5cGVkQXJyYXkoYnVmZmVyLCB0eXBlZERhdGEsIHVzYWdlKTtcclxuICAgICAgICAgIGlmIChwZXJzaXN0KSB7XHJcbiAgICAgICAgICAgIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSA9IHR5cGVkRGF0YTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvb2wuZnJlZVR5cGUodHlwZWREYXRhKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGlzVHlwZWRBcnJheShkYXRhWzBdKSkge1xyXG4gICAgICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IGRhdGFbMF0ubGVuZ3RoO1xyXG4gICAgICAgICAgYnVmZmVyLmR0eXBlID0gZHR5cGUgfHwgdHlwZWRBcnJheUNvZGUoZGF0YVswXSkgfHwgR0xfRkxPQVQkMztcclxuICAgICAgICAgIGZsYXREYXRhID0gYXJyYXlGbGF0dGVuKFxyXG4gICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICBbZGF0YS5sZW5ndGgsIGRhdGFbMF0ubGVuZ3RoXSxcclxuICAgICAgICAgICAgYnVmZmVyLmR0eXBlKTtcclxuICAgICAgICAgIGluaXRCdWZmZXJGcm9tVHlwZWRBcnJheShidWZmZXIsIGZsYXREYXRhLCB1c2FnZSk7XHJcbiAgICAgICAgICBpZiAocGVyc2lzdCkge1xyXG4gICAgICAgICAgICBidWZmZXIucGVyc2lzdGVudERhdGEgPSBmbGF0RGF0YTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBvb2wuZnJlZVR5cGUoZmxhdERhdGEpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGJ1ZmZlciBkYXRhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGlzVHlwZWRBcnJheShkYXRhKSkge1xyXG4gICAgICBidWZmZXIuZHR5cGUgPSBkdHlwZSB8fCB0eXBlZEFycmF5Q29kZShkYXRhKTtcclxuICAgICAgYnVmZmVyLmRpbWVuc2lvbiA9IGRpbWVuc2lvbjtcclxuICAgICAgaW5pdEJ1ZmZlckZyb21UeXBlZEFycmF5KGJ1ZmZlciwgZGF0YSwgdXNhZ2UpO1xyXG4gICAgICBpZiAocGVyc2lzdCkge1xyXG4gICAgICAgIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSA9IG5ldyBVaW50OEFycmF5KG5ldyBVaW50OEFycmF5KGRhdGEuYnVmZmVyKSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaXNOREFycmF5TGlrZShkYXRhKSkge1xyXG4gICAgICBzaGFwZSA9IGRhdGEuc2hhcGU7XHJcbiAgICAgIHZhciBzdHJpZGUgPSBkYXRhLnN0cmlkZTtcclxuICAgICAgdmFyIG9mZnNldCA9IGRhdGEub2Zmc2V0O1xyXG5cclxuICAgICAgdmFyIHNoYXBlWCA9IDA7XHJcbiAgICAgIHZhciBzaGFwZVkgPSAwO1xyXG4gICAgICB2YXIgc3RyaWRlWCA9IDA7XHJcbiAgICAgIHZhciBzdHJpZGVZID0gMDtcclxuICAgICAgaWYgKHNoYXBlLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHNoYXBlWCA9IHNoYXBlWzBdO1xyXG4gICAgICAgIHNoYXBlWSA9IDE7XHJcbiAgICAgICAgc3RyaWRlWCA9IHN0cmlkZVswXTtcclxuICAgICAgICBzdHJpZGVZID0gMDtcclxuICAgICAgfSBlbHNlIGlmIChzaGFwZS5sZW5ndGggPT09IDIpIHtcclxuICAgICAgICBzaGFwZVggPSBzaGFwZVswXTtcclxuICAgICAgICBzaGFwZVkgPSBzaGFwZVsxXTtcclxuICAgICAgICBzdHJpZGVYID0gc3RyaWRlWzBdO1xyXG4gICAgICAgIHN0cmlkZVkgPSBzdHJpZGVbMV07XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hlY2skMS5yYWlzZSgnaW52YWxpZCBzaGFwZScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBidWZmZXIuZHR5cGUgPSBkdHlwZSB8fCB0eXBlZEFycmF5Q29kZShkYXRhLmRhdGEpIHx8IEdMX0ZMT0FUJDM7XHJcbiAgICAgIGJ1ZmZlci5kaW1lbnNpb24gPSBzaGFwZVk7XHJcblxyXG4gICAgICB2YXIgdHJhbnNwb3NlRGF0YSA9IHBvb2wuYWxsb2NUeXBlKGJ1ZmZlci5kdHlwZSwgc2hhcGVYICogc2hhcGVZKTtcclxuICAgICAgdHJhbnNwb3NlKHRyYW5zcG9zZURhdGEsXHJcbiAgICAgICAgZGF0YS5kYXRhLFxyXG4gICAgICAgIHNoYXBlWCwgc2hhcGVZLFxyXG4gICAgICAgIHN0cmlkZVgsIHN0cmlkZVksXHJcbiAgICAgICAgb2Zmc2V0KTtcclxuICAgICAgaW5pdEJ1ZmZlckZyb21UeXBlZEFycmF5KGJ1ZmZlciwgdHJhbnNwb3NlRGF0YSwgdXNhZ2UpO1xyXG4gICAgICBpZiAocGVyc2lzdCkge1xyXG4gICAgICAgIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSA9IHRyYW5zcG9zZURhdGE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcG9vbC5mcmVlVHlwZSh0cmFuc3Bvc2VEYXRhKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcclxuICAgICAgYnVmZmVyLmR0eXBlID0gR0xfVU5TSUdORURfQllURSQzO1xyXG4gICAgICBidWZmZXIuZGltZW5zaW9uID0gZGltZW5zaW9uO1xyXG4gICAgICBpbml0QnVmZmVyRnJvbVR5cGVkQXJyYXkoYnVmZmVyLCBkYXRhLCB1c2FnZSk7XHJcbiAgICAgIGlmIChwZXJzaXN0KSB7XHJcbiAgICAgICAgYnVmZmVyLnBlcnNpc3RlbnREYXRhID0gbmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQ4QXJyYXkoZGF0YSkpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGJ1ZmZlciBkYXRhJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZXN0cm95IChidWZmZXIpIHtcclxuICAgIHN0YXRzLmJ1ZmZlckNvdW50LS07XHJcblxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRyaWJ1dGVTdGF0ZS5zdGF0ZS5sZW5ndGg7ICsraSkge1xyXG4gICAgICB2YXIgcmVjb3JkID0gYXR0cmlidXRlU3RhdGUuc3RhdGVbaV07XHJcbiAgICAgIGlmIChyZWNvcmQuYnVmZmVyID09PSBidWZmZXIpIHtcclxuICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaSk7XHJcbiAgICAgICAgcmVjb3JkLmJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgaGFuZGxlID0gYnVmZmVyLmJ1ZmZlcjtcclxuICAgIGNoZWNrJDEoaGFuZGxlLCAnYnVmZmVyIG11c3Qgbm90IGJlIGRlbGV0ZWQgYWxyZWFkeScpO1xyXG4gICAgZ2wuZGVsZXRlQnVmZmVyKGhhbmRsZSk7XHJcbiAgICBidWZmZXIuYnVmZmVyID0gbnVsbDtcclxuICAgIGRlbGV0ZSBidWZmZXJTZXRbYnVmZmVyLmlkXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAob3B0aW9ucywgdHlwZSwgZGVmZXJJbml0LCBwZXJzaXN0ZW50KSB7XHJcbiAgICBzdGF0cy5idWZmZXJDb3VudCsrO1xyXG5cclxuICAgIHZhciBidWZmZXIgPSBuZXcgUkVHTEJ1ZmZlcih0eXBlKTtcclxuICAgIGJ1ZmZlclNldFtidWZmZXIuaWRdID0gYnVmZmVyO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlZ2xCdWZmZXIgKG9wdGlvbnMpIHtcclxuICAgICAgdmFyIHVzYWdlID0gR0xfU1RBVElDX0RSQVc7XHJcbiAgICAgIHZhciBkYXRhID0gbnVsbDtcclxuICAgICAgdmFyIGJ5dGVMZW5ndGggPSAwO1xyXG4gICAgICB2YXIgZHR5cGUgPSAwO1xyXG4gICAgICB2YXIgZGltZW5zaW9uID0gMTtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykgfHxcclxuICAgICAgICAgIGlzVHlwZWRBcnJheShvcHRpb25zKSB8fFxyXG4gICAgICAgICAgaXNOREFycmF5TGlrZShvcHRpb25zKSB8fFxyXG4gICAgICAgICAgb3B0aW9ucyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgZGF0YSA9IG9wdGlvbnM7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgYnl0ZUxlbmd0aCA9IG9wdGlvbnMgfCAwO1xyXG4gICAgICB9IGVsc2UgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBjaGVjayQxLnR5cGUoXHJcbiAgICAgICAgICBvcHRpb25zLCAnb2JqZWN0JyxcclxuICAgICAgICAgICdidWZmZXIgYXJndW1lbnRzIG11c3QgYmUgYW4gb2JqZWN0LCBhIG51bWJlciBvciBhbiBhcnJheScpO1xyXG5cclxuICAgICAgICBpZiAoJ2RhdGEnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgICAgIGRhdGEgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShkYXRhKSB8fFxyXG4gICAgICAgICAgICBpc1R5cGVkQXJyYXkoZGF0YSkgfHxcclxuICAgICAgICAgICAgaXNOREFycmF5TGlrZShkYXRhKSxcclxuICAgICAgICAgICAgJ2ludmFsaWQgZGF0YSBmb3IgYnVmZmVyJyk7XHJcbiAgICAgICAgICBkYXRhID0gb3B0aW9ucy5kYXRhO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCd1c2FnZScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy51c2FnZSwgdXNhZ2VUeXBlcywgJ2ludmFsaWQgYnVmZmVyIHVzYWdlJyk7XHJcbiAgICAgICAgICB1c2FnZSA9IHVzYWdlVHlwZXNbb3B0aW9ucy51c2FnZV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJ3R5cGUnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKG9wdGlvbnMudHlwZSwgZ2xUeXBlcywgJ2ludmFsaWQgYnVmZmVyIHR5cGUnKTtcclxuICAgICAgICAgIGR0eXBlID0gZ2xUeXBlc1tvcHRpb25zLnR5cGVdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdkaW1lbnNpb24nIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGNoZWNrJDEudHlwZShvcHRpb25zLmRpbWVuc2lvbiwgJ251bWJlcicsICdpbnZhbGlkIGRpbWVuc2lvbicpO1xyXG4gICAgICAgICAgZGltZW5zaW9uID0gb3B0aW9ucy5kaW1lbnNpb24gfCAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdsZW5ndGgnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGNoZWNrJDEubm5pKGJ5dGVMZW5ndGgsICdidWZmZXIgbGVuZ3RoIG11c3QgYmUgYSBub25uZWdhdGl2ZSBpbnRlZ2VyJyk7XHJcbiAgICAgICAgICBieXRlTGVuZ3RoID0gb3B0aW9ucy5sZW5ndGggfCAwO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgYnVmZmVyLmJpbmQoKTtcclxuICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgLy8gIzQ3NVxyXG4gICAgICAgIGlmIChieXRlTGVuZ3RoKSBnbC5idWZmZXJEYXRhKGJ1ZmZlci50eXBlLCBieXRlTGVuZ3RoLCB1c2FnZSk7XHJcbiAgICAgICAgYnVmZmVyLmR0eXBlID0gZHR5cGUgfHwgR0xfVU5TSUdORURfQllURSQzO1xyXG4gICAgICAgIGJ1ZmZlci51c2FnZSA9IHVzYWdlO1xyXG4gICAgICAgIGJ1ZmZlci5kaW1lbnNpb24gPSBkaW1lbnNpb247XHJcbiAgICAgICAgYnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGluaXRCdWZmZXJGcm9tRGF0YShidWZmZXIsIGRhdGEsIHVzYWdlLCBkdHlwZSwgZGltZW5zaW9uLCBwZXJzaXN0ZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICAgICAgYnVmZmVyLnN0YXRzLnNpemUgPSBidWZmZXIuYnl0ZUxlbmd0aCAqIERUWVBFU19TSVpFU1tidWZmZXIuZHR5cGVdO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVnbEJ1ZmZlclxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNldFN1YkRhdGEgKGRhdGEsIG9mZnNldCkge1xyXG4gICAgICBjaGVjayQxKG9mZnNldCArIGRhdGEuYnl0ZUxlbmd0aCA8PSBidWZmZXIuYnl0ZUxlbmd0aCxcclxuICAgICAgICAnaW52YWxpZCBidWZmZXIgc3ViZGF0YSBjYWxsLCBidWZmZXIgaXMgdG9vIHNtYWxsLiAnICsgJyBDYW5cXCd0IHdyaXRlIGRhdGEgb2Ygc2l6ZSAnICsgZGF0YS5ieXRlTGVuZ3RoICsgJyBzdGFydGluZyBmcm9tIG9mZnNldCAnICsgb2Zmc2V0ICsgJyB0byBhIGJ1ZmZlciBvZiBzaXplICcgKyBidWZmZXIuYnl0ZUxlbmd0aCk7XHJcblxyXG4gICAgICBnbC5idWZmZXJTdWJEYXRhKGJ1ZmZlci50eXBlLCBvZmZzZXQsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHN1YmRhdGEgKGRhdGEsIG9mZnNldF8pIHtcclxuICAgICAgdmFyIG9mZnNldCA9IChvZmZzZXRfIHx8IDApIHwgMDtcclxuICAgICAgdmFyIHNoYXBlO1xyXG4gICAgICBidWZmZXIuYmluZCgpO1xyXG4gICAgICBpZiAoaXNUeXBlZEFycmF5KGRhdGEpIHx8IGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIHNldFN1YkRhdGEoZGF0YSwgb2Zmc2V0KTtcclxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhWzBdID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB2YXIgY29udmVydGVkID0gcG9vbC5hbGxvY1R5cGUoYnVmZmVyLmR0eXBlLCBkYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIGNvcHlBcnJheShjb252ZXJ0ZWQsIGRhdGEpO1xyXG4gICAgICAgICAgICBzZXRTdWJEYXRhKGNvbnZlcnRlZCwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgcG9vbC5mcmVlVHlwZShjb252ZXJ0ZWQpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGRhdGFbMF0pIHx8IGlzVHlwZWRBcnJheShkYXRhWzBdKSkge1xyXG4gICAgICAgICAgICBzaGFwZSA9IGFycmF5U2hhcGUoZGF0YSk7XHJcbiAgICAgICAgICAgIHZhciBmbGF0RGF0YSA9IGFycmF5RmxhdHRlbihkYXRhLCBzaGFwZSwgYnVmZmVyLmR0eXBlKTtcclxuICAgICAgICAgICAgc2V0U3ViRGF0YShmbGF0RGF0YSwgb2Zmc2V0KTtcclxuICAgICAgICAgICAgcG9vbC5mcmVlVHlwZShmbGF0RGF0YSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGJ1ZmZlciBkYXRhJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGlzTkRBcnJheUxpa2UoZGF0YSkpIHtcclxuICAgICAgICBzaGFwZSA9IGRhdGEuc2hhcGU7XHJcbiAgICAgICAgdmFyIHN0cmlkZSA9IGRhdGEuc3RyaWRlO1xyXG5cclxuICAgICAgICB2YXIgc2hhcGVYID0gMDtcclxuICAgICAgICB2YXIgc2hhcGVZID0gMDtcclxuICAgICAgICB2YXIgc3RyaWRlWCA9IDA7XHJcbiAgICAgICAgdmFyIHN0cmlkZVkgPSAwO1xyXG4gICAgICAgIGlmIChzaGFwZS5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgIHNoYXBlWCA9IHNoYXBlWzBdO1xyXG4gICAgICAgICAgc2hhcGVZID0gMTtcclxuICAgICAgICAgIHN0cmlkZVggPSBzdHJpZGVbMF07XHJcbiAgICAgICAgICBzdHJpZGVZID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgc2hhcGVYID0gc2hhcGVbMF07XHJcbiAgICAgICAgICBzaGFwZVkgPSBzaGFwZVsxXTtcclxuICAgICAgICAgIHN0cmlkZVggPSBzdHJpZGVbMF07XHJcbiAgICAgICAgICBzdHJpZGVZID0gc3RyaWRlWzFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIHNoYXBlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBkdHlwZSA9IEFycmF5LmlzQXJyYXkoZGF0YS5kYXRhKVxyXG4gICAgICAgICAgPyBidWZmZXIuZHR5cGVcclxuICAgICAgICAgIDogdHlwZWRBcnJheUNvZGUoZGF0YS5kYXRhKTtcclxuXHJcbiAgICAgICAgdmFyIHRyYW5zcG9zZURhdGEgPSBwb29sLmFsbG9jVHlwZShkdHlwZSwgc2hhcGVYICogc2hhcGVZKTtcclxuICAgICAgICB0cmFuc3Bvc2UodHJhbnNwb3NlRGF0YSxcclxuICAgICAgICAgIGRhdGEuZGF0YSxcclxuICAgICAgICAgIHNoYXBlWCwgc2hhcGVZLFxyXG4gICAgICAgICAgc3RyaWRlWCwgc3RyaWRlWSxcclxuICAgICAgICAgIGRhdGEub2Zmc2V0KTtcclxuICAgICAgICBzZXRTdWJEYXRhKHRyYW5zcG9zZURhdGEsIG9mZnNldCk7XHJcbiAgICAgICAgcG9vbC5mcmVlVHlwZSh0cmFuc3Bvc2VEYXRhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGRhdGEgZm9yIGJ1ZmZlciBzdWJkYXRhJyk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlZ2xCdWZmZXJcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIWRlZmVySW5pdCkge1xyXG4gICAgICByZWdsQnVmZmVyKG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2xCdWZmZXIuX3JlZ2xUeXBlID0gJ2J1ZmZlcic7XHJcbiAgICByZWdsQnVmZmVyLl9idWZmZXIgPSBidWZmZXI7XHJcbiAgICByZWdsQnVmZmVyLnN1YmRhdGEgPSBzdWJkYXRhO1xyXG4gICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICAgIHJlZ2xCdWZmZXIuc3RhdHMgPSBidWZmZXIuc3RhdHM7XHJcbiAgICB9XHJcbiAgICByZWdsQnVmZmVyLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7IGRlc3Ryb3koYnVmZmVyKTsgfTtcclxuXHJcbiAgICByZXR1cm4gcmVnbEJ1ZmZlclxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVzdG9yZUJ1ZmZlcnMgKCkge1xyXG4gICAgdmFsdWVzKGJ1ZmZlclNldCkuZm9yRWFjaChmdW5jdGlvbiAoYnVmZmVyKSB7XHJcbiAgICAgIGJ1ZmZlci5idWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgZ2wuYmluZEJ1ZmZlcihidWZmZXIudHlwZSwgYnVmZmVyLmJ1ZmZlcik7XHJcbiAgICAgIGdsLmJ1ZmZlckRhdGEoXHJcbiAgICAgICAgYnVmZmVyLnR5cGUsIGJ1ZmZlci5wZXJzaXN0ZW50RGF0YSB8fCBidWZmZXIuYnl0ZUxlbmd0aCwgYnVmZmVyLnVzYWdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICBzdGF0cy5nZXRUb3RhbEJ1ZmZlclNpemUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciB0b3RhbCA9IDA7XHJcbiAgICAgIC8vIFRPRE86IFJpZ2h0IG5vdywgdGhlIHN0cmVhbXMgYXJlIG5vdCBwYXJ0IG9mIHRoZSB0b3RhbCBjb3VudC5cclxuICAgICAgT2JqZWN0LmtleXMoYnVmZmVyU2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB0b3RhbCArPSBidWZmZXJTZXRba2V5XS5zdGF0cy5zaXplO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIHRvdGFsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGNyZWF0ZTogY3JlYXRlQnVmZmVyLFxyXG5cclxuICAgIGNyZWF0ZVN0cmVhbTogY3JlYXRlU3RyZWFtLFxyXG4gICAgZGVzdHJveVN0cmVhbTogZGVzdHJveVN0cmVhbSxcclxuXHJcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YWx1ZXMoYnVmZmVyU2V0KS5mb3JFYWNoKGRlc3Ryb3kpO1xyXG4gICAgICBzdHJlYW1Qb29sLmZvckVhY2goZGVzdHJveSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldEJ1ZmZlcjogZnVuY3Rpb24gKHdyYXBwZXIpIHtcclxuICAgICAgaWYgKHdyYXBwZXIgJiYgd3JhcHBlci5fYnVmZmVyIGluc3RhbmNlb2YgUkVHTEJ1ZmZlcikge1xyXG4gICAgICAgIHJldHVybiB3cmFwcGVyLl9idWZmZXJcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfSxcclxuXHJcbiAgICByZXN0b3JlOiByZXN0b3JlQnVmZmVycyxcclxuXHJcbiAgICBfaW5pdEJ1ZmZlcjogaW5pdEJ1ZmZlckZyb21EYXRhXHJcbiAgfVxyXG59XG5cbnZhciBwb2ludHMgPSAwO1xudmFyIHBvaW50ID0gMDtcbnZhciBsaW5lcyA9IDE7XG52YXIgbGluZSA9IDE7XG52YXIgdHJpYW5nbGVzID0gNDtcbnZhciB0cmlhbmdsZSA9IDQ7XG52YXIgcHJpbVR5cGVzID0ge1xuXHRwb2ludHM6IHBvaW50cyxcblx0cG9pbnQ6IHBvaW50LFxuXHRsaW5lczogbGluZXMsXG5cdGxpbmU6IGxpbmUsXG5cdHRyaWFuZ2xlczogdHJpYW5nbGVzLFxuXHR0cmlhbmdsZTogdHJpYW5nbGUsXG5cdFwibGluZSBsb29wXCI6IDIsXG5cdFwibGluZSBzdHJpcFwiOiAzLFxuXHRcInRyaWFuZ2xlIHN0cmlwXCI6IDUsXG5cdFwidHJpYW5nbGUgZmFuXCI6IDZcbn07XG5cbnZhciBHTF9QT0lOVFMgPSAwO1xyXG52YXIgR0xfTElORVMgPSAxO1xyXG52YXIgR0xfVFJJQU5HTEVTID0gNDtcclxuXHJcbnZhciBHTF9CWVRFJDIgPSA1MTIwO1xyXG52YXIgR0xfVU5TSUdORURfQllURSQ0ID0gNTEyMTtcclxudmFyIEdMX1NIT1JUJDIgPSA1MTIyO1xyXG52YXIgR0xfVU5TSUdORURfU0hPUlQkMiA9IDUxMjM7XHJcbnZhciBHTF9JTlQkMiA9IDUxMjQ7XHJcbnZhciBHTF9VTlNJR05FRF9JTlQkMiA9IDUxMjU7XHJcblxyXG52YXIgR0xfRUxFTUVOVF9BUlJBWV9CVUZGRVIgPSAzNDk2MztcclxuXHJcbnZhciBHTF9TVFJFQU1fRFJBVyQxID0gMHg4OEUwO1xyXG52YXIgR0xfU1RBVElDX0RSQVckMSA9IDB4ODhFNDtcclxuXHJcbmZ1bmN0aW9uIHdyYXBFbGVtZW50c1N0YXRlIChnbCwgZXh0ZW5zaW9ucywgYnVmZmVyU3RhdGUsIHN0YXRzKSB7XHJcbiAgdmFyIGVsZW1lbnRTZXQgPSB7fTtcclxuICB2YXIgZWxlbWVudENvdW50ID0gMDtcclxuXHJcbiAgdmFyIGVsZW1lbnRUeXBlcyA9IHtcclxuICAgICd1aW50OCc6IEdMX1VOU0lHTkVEX0JZVEUkNCxcclxuICAgICd1aW50MTYnOiBHTF9VTlNJR05FRF9TSE9SVCQyXHJcbiAgfTtcclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMub2VzX2VsZW1lbnRfaW5kZXhfdWludCkge1xyXG4gICAgZWxlbWVudFR5cGVzLnVpbnQzMiA9IEdMX1VOU0lHTkVEX0lOVCQyO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gUkVHTEVsZW1lbnRCdWZmZXIgKGJ1ZmZlcikge1xyXG4gICAgdGhpcy5pZCA9IGVsZW1lbnRDb3VudCsrO1xyXG4gICAgZWxlbWVudFNldFt0aGlzLmlkXSA9IHRoaXM7XHJcbiAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgIHRoaXMucHJpbVR5cGUgPSBHTF9UUklBTkdMRVM7XHJcbiAgICB0aGlzLnZlcnRDb3VudCA9IDA7XHJcbiAgICB0aGlzLnR5cGUgPSAwO1xyXG4gIH1cclxuXHJcbiAgUkVHTEVsZW1lbnRCdWZmZXIucHJvdG90eXBlLmJpbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLmJ1ZmZlci5iaW5kKCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGJ1ZmZlclBvb2wgPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudFN0cmVhbSAoZGF0YSkge1xyXG4gICAgdmFyIHJlc3VsdCA9IGJ1ZmZlclBvb2wucG9wKCk7XHJcbiAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICByZXN1bHQgPSBuZXcgUkVHTEVsZW1lbnRCdWZmZXIoYnVmZmVyU3RhdGUuY3JlYXRlKFxyXG4gICAgICAgIG51bGwsXHJcbiAgICAgICAgR0xfRUxFTUVOVF9BUlJBWV9CVUZGRVIsXHJcbiAgICAgICAgdHJ1ZSxcclxuICAgICAgICBmYWxzZSkuX2J1ZmZlcik7XHJcbiAgICB9XHJcbiAgICBpbml0RWxlbWVudHMocmVzdWx0LCBkYXRhLCBHTF9TVFJFQU1fRFJBVyQxLCAtMSwgLTEsIDAsIDApO1xyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZGVzdHJveUVsZW1lbnRTdHJlYW0gKGVsZW1lbnRzKSB7XHJcbiAgICBidWZmZXJQb29sLnB1c2goZWxlbWVudHMpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5pdEVsZW1lbnRzIChcclxuICAgIGVsZW1lbnRzLFxyXG4gICAgZGF0YSxcclxuICAgIHVzYWdlLFxyXG4gICAgcHJpbSxcclxuICAgIGNvdW50LFxyXG4gICAgYnl0ZUxlbmd0aCxcclxuICAgIHR5cGUpIHtcclxuICAgIGVsZW1lbnRzLmJ1ZmZlci5iaW5kKCk7XHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICB2YXIgcHJlZGljdGVkVHlwZSA9IHR5cGU7XHJcbiAgICAgIGlmICghdHlwZSAmJiAoXHJcbiAgICAgICAgICAhaXNUeXBlZEFycmF5KGRhdGEpIHx8XHJcbiAgICAgICAgIChpc05EQXJyYXlMaWtlKGRhdGEpICYmICFpc1R5cGVkQXJyYXkoZGF0YS5kYXRhKSkpKSB7XHJcbiAgICAgICAgcHJlZGljdGVkVHlwZSA9IGV4dGVuc2lvbnMub2VzX2VsZW1lbnRfaW5kZXhfdWludFxyXG4gICAgICAgICAgPyBHTF9VTlNJR05FRF9JTlQkMlxyXG4gICAgICAgICAgOiBHTF9VTlNJR05FRF9TSE9SVCQyO1xyXG4gICAgICB9XHJcbiAgICAgIGJ1ZmZlclN0YXRlLl9pbml0QnVmZmVyKFxyXG4gICAgICAgIGVsZW1lbnRzLmJ1ZmZlcixcclxuICAgICAgICBkYXRhLFxyXG4gICAgICAgIHVzYWdlLFxyXG4gICAgICAgIHByZWRpY3RlZFR5cGUsXHJcbiAgICAgICAgMyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBnbC5idWZmZXJEYXRhKEdMX0VMRU1FTlRfQVJSQVlfQlVGRkVSLCBieXRlTGVuZ3RoLCB1c2FnZSk7XHJcbiAgICAgIGVsZW1lbnRzLmJ1ZmZlci5kdHlwZSA9IGR0eXBlIHx8IEdMX1VOU0lHTkVEX0JZVEUkNDtcclxuICAgICAgZWxlbWVudHMuYnVmZmVyLnVzYWdlID0gdXNhZ2U7XHJcbiAgICAgIGVsZW1lbnRzLmJ1ZmZlci5kaW1lbnNpb24gPSAzO1xyXG4gICAgICBlbGVtZW50cy5idWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGR0eXBlID0gdHlwZTtcclxuICAgIGlmICghdHlwZSkge1xyXG4gICAgICBzd2l0Y2ggKGVsZW1lbnRzLmJ1ZmZlci5kdHlwZSkge1xyXG4gICAgICAgIGNhc2UgR0xfVU5TSUdORURfQllURSQ0OlxyXG4gICAgICAgIGNhc2UgR0xfQllURSQyOlxyXG4gICAgICAgICAgZHR5cGUgPSBHTF9VTlNJR05FRF9CWVRFJDQ7XHJcbiAgICAgICAgICBicmVha1xyXG5cclxuICAgICAgICBjYXNlIEdMX1VOU0lHTkVEX1NIT1JUJDI6XHJcbiAgICAgICAgY2FzZSBHTF9TSE9SVCQyOlxyXG4gICAgICAgICAgZHR5cGUgPSBHTF9VTlNJR05FRF9TSE9SVCQyO1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgY2FzZSBHTF9VTlNJR05FRF9JTlQkMjpcclxuICAgICAgICBjYXNlIEdMX0lOVCQyOlxyXG4gICAgICAgICAgZHR5cGUgPSBHTF9VTlNJR05FRF9JTlQkMjtcclxuICAgICAgICAgIGJyZWFrXHJcblxyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICBjaGVjayQxLnJhaXNlKCd1bnN1cHBvcnRlZCB0eXBlIGZvciBlbGVtZW50IGFycmF5Jyk7XHJcbiAgICAgIH1cclxuICAgICAgZWxlbWVudHMuYnVmZmVyLmR0eXBlID0gZHR5cGU7XHJcbiAgICB9XHJcbiAgICBlbGVtZW50cy50eXBlID0gZHR5cGU7XHJcblxyXG4gICAgLy8gQ2hlY2sgb2VzX2VsZW1lbnRfaW5kZXhfdWludCBleHRlbnNpb25cclxuICAgIGNoZWNrJDEoXHJcbiAgICAgIGR0eXBlICE9PSBHTF9VTlNJR05FRF9JTlQkMiB8fFxyXG4gICAgICAhIWV4dGVuc2lvbnMub2VzX2VsZW1lbnRfaW5kZXhfdWludCxcclxuICAgICAgJzMyIGJpdCBlbGVtZW50IGJ1ZmZlcnMgbm90IHN1cHBvcnRlZCwgZW5hYmxlIG9lc19lbGVtZW50X2luZGV4X3VpbnQgZmlyc3QnKTtcclxuXHJcbiAgICAvLyB0cnkgdG8gZ3Vlc3MgZGVmYXVsdCBwcmltaXRpdmUgdHlwZSBhbmQgYXJndW1lbnRzXHJcbiAgICB2YXIgdmVydENvdW50ID0gY291bnQ7XHJcbiAgICBpZiAodmVydENvdW50IDwgMCkge1xyXG4gICAgICB2ZXJ0Q291bnQgPSBlbGVtZW50cy5idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgaWYgKGR0eXBlID09PSBHTF9VTlNJR05FRF9TSE9SVCQyKSB7XHJcbiAgICAgICAgdmVydENvdW50ID4+PSAxO1xyXG4gICAgICB9IGVsc2UgaWYgKGR0eXBlID09PSBHTF9VTlNJR05FRF9JTlQkMikge1xyXG4gICAgICAgIHZlcnRDb3VudCA+Pj0gMjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxlbWVudHMudmVydENvdW50ID0gdmVydENvdW50O1xyXG5cclxuICAgIC8vIHRyeSB0byBndWVzcyBwcmltaXRpdmUgdHlwZSBmcm9tIGNlbGwgZGltZW5zaW9uXHJcbiAgICB2YXIgcHJpbVR5cGUgPSBwcmltO1xyXG4gICAgaWYgKHByaW0gPCAwKSB7XHJcbiAgICAgIHByaW1UeXBlID0gR0xfVFJJQU5HTEVTO1xyXG4gICAgICB2YXIgZGltZW5zaW9uID0gZWxlbWVudHMuYnVmZmVyLmRpbWVuc2lvbjtcclxuICAgICAgaWYgKGRpbWVuc2lvbiA9PT0gMSkgcHJpbVR5cGUgPSBHTF9QT0lOVFM7XHJcbiAgICAgIGlmIChkaW1lbnNpb24gPT09IDIpIHByaW1UeXBlID0gR0xfTElORVM7XHJcbiAgICAgIGlmIChkaW1lbnNpb24gPT09IDMpIHByaW1UeXBlID0gR0xfVFJJQU5HTEVTO1xyXG4gICAgfVxyXG4gICAgZWxlbWVudHMucHJpbVR5cGUgPSBwcmltVHlwZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlc3Ryb3lFbGVtZW50cyAoZWxlbWVudHMpIHtcclxuICAgIHN0YXRzLmVsZW1lbnRzQ291bnQtLTtcclxuXHJcbiAgICBjaGVjayQxKGVsZW1lbnRzLmJ1ZmZlciAhPT0gbnVsbCwgJ211c3Qgbm90IGRvdWJsZSBkZXN0cm95IGVsZW1lbnRzJyk7XHJcbiAgICBkZWxldGUgZWxlbWVudFNldFtlbGVtZW50cy5pZF07XHJcbiAgICBlbGVtZW50cy5idWZmZXIuZGVzdHJveSgpO1xyXG4gICAgZWxlbWVudHMuYnVmZmVyID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnRzIChvcHRpb25zLCBwZXJzaXN0ZW50KSB7XHJcbiAgICB2YXIgYnVmZmVyID0gYnVmZmVyU3RhdGUuY3JlYXRlKG51bGwsIEdMX0VMRU1FTlRfQVJSQVlfQlVGRkVSLCB0cnVlKTtcclxuICAgIHZhciBlbGVtZW50cyA9IG5ldyBSRUdMRWxlbWVudEJ1ZmZlcihidWZmZXIuX2J1ZmZlcik7XHJcbiAgICBzdGF0cy5lbGVtZW50c0NvdW50Kys7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVnbEVsZW1lbnRzIChvcHRpb25zKSB7XHJcbiAgICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgIGJ1ZmZlcigpO1xyXG4gICAgICAgIGVsZW1lbnRzLnByaW1UeXBlID0gR0xfVFJJQU5HTEVTO1xyXG4gICAgICAgIGVsZW1lbnRzLnZlcnRDb3VudCA9IDA7XHJcbiAgICAgICAgZWxlbWVudHMudHlwZSA9IEdMX1VOU0lHTkVEX0JZVEUkNDtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBidWZmZXIob3B0aW9ucyk7XHJcbiAgICAgICAgZWxlbWVudHMucHJpbVR5cGUgPSBHTF9UUklBTkdMRVM7XHJcbiAgICAgICAgZWxlbWVudHMudmVydENvdW50ID0gb3B0aW9ucyB8IDA7XHJcbiAgICAgICAgZWxlbWVudHMudHlwZSA9IEdMX1VOU0lHTkVEX0JZVEUkNDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgZGF0YSA9IG51bGw7XHJcbiAgICAgICAgdmFyIHVzYWdlID0gR0xfU1RBVElDX0RSQVckMTtcclxuICAgICAgICB2YXIgcHJpbVR5cGUgPSAtMTtcclxuICAgICAgICB2YXIgdmVydENvdW50ID0gLTE7XHJcbiAgICAgICAgdmFyIGJ5dGVMZW5ndGggPSAwO1xyXG4gICAgICAgIHZhciBkdHlwZSA9IDA7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucykgfHxcclxuICAgICAgICAgICAgaXNUeXBlZEFycmF5KG9wdGlvbnMpIHx8XHJcbiAgICAgICAgICAgIGlzTkRBcnJheUxpa2Uob3B0aW9ucykpIHtcclxuICAgICAgICAgIGRhdGEgPSBvcHRpb25zO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjaGVjayQxLnR5cGUob3B0aW9ucywgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3VtZW50cyBmb3IgZWxlbWVudHMnKTtcclxuICAgICAgICAgIGlmICgnZGF0YScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBkYXRhID0gb3B0aW9ucy5kYXRhO1xyXG4gICAgICAgICAgICBjaGVjayQxKFxyXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShkYXRhKSB8fFxyXG4gICAgICAgICAgICAgICAgaXNUeXBlZEFycmF5KGRhdGEpIHx8XHJcbiAgICAgICAgICAgICAgICBpc05EQXJyYXlMaWtlKGRhdGEpLFxyXG4gICAgICAgICAgICAgICAgJ2ludmFsaWQgZGF0YSBmb3IgZWxlbWVudCBidWZmZXInKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICgndXNhZ2UnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIoXHJcbiAgICAgICAgICAgICAgb3B0aW9ucy51c2FnZSxcclxuICAgICAgICAgICAgICB1c2FnZVR5cGVzLFxyXG4gICAgICAgICAgICAgICdpbnZhbGlkIGVsZW1lbnQgYnVmZmVyIHVzYWdlJyk7XHJcbiAgICAgICAgICAgIHVzYWdlID0gdXNhZ2VUeXBlc1tvcHRpb25zLnVzYWdlXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICgncHJpbWl0aXZlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKFxyXG4gICAgICAgICAgICAgIG9wdGlvbnMucHJpbWl0aXZlLFxyXG4gICAgICAgICAgICAgIHByaW1UeXBlcyxcclxuICAgICAgICAgICAgICAnaW52YWxpZCBlbGVtZW50IGJ1ZmZlciBwcmltaXRpdmUnKTtcclxuICAgICAgICAgICAgcHJpbVR5cGUgPSBwcmltVHlwZXNbb3B0aW9ucy5wcmltaXRpdmVdO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCdjb3VudCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBjaGVjayQxKFxyXG4gICAgICAgICAgICAgIHR5cGVvZiBvcHRpb25zLmNvdW50ID09PSAnbnVtYmVyJyAmJiBvcHRpb25zLmNvdW50ID49IDAsXHJcbiAgICAgICAgICAgICAgJ2ludmFsaWQgdmVydGV4IGNvdW50IGZvciBlbGVtZW50cycpO1xyXG4gICAgICAgICAgICB2ZXJ0Q291bnQgPSBvcHRpb25zLmNvdW50IHwgMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICgndHlwZScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBjaGVjayQxLnBhcmFtZXRlcihcclxuICAgICAgICAgICAgICBvcHRpb25zLnR5cGUsXHJcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGVzLFxyXG4gICAgICAgICAgICAgICdpbnZhbGlkIGJ1ZmZlciB0eXBlJyk7XHJcbiAgICAgICAgICAgIGR0eXBlID0gZWxlbWVudFR5cGVzW29wdGlvbnMudHlwZV07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoJ2xlbmd0aCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gb3B0aW9ucy5sZW5ndGggfCAwO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYnl0ZUxlbmd0aCA9IHZlcnRDb3VudDtcclxuICAgICAgICAgICAgaWYgKGR0eXBlID09PSBHTF9VTlNJR05FRF9TSE9SVCQyIHx8IGR0eXBlID09PSBHTF9TSE9SVCQyKSB7XHJcbiAgICAgICAgICAgICAgYnl0ZUxlbmd0aCAqPSAyO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGR0eXBlID09PSBHTF9VTlNJR05FRF9JTlQkMiB8fCBkdHlwZSA9PT0gR0xfSU5UJDIpIHtcclxuICAgICAgICAgICAgICBieXRlTGVuZ3RoICo9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaW5pdEVsZW1lbnRzKFxyXG4gICAgICAgICAgZWxlbWVudHMsXHJcbiAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgdXNhZ2UsXHJcbiAgICAgICAgICBwcmltVHlwZSxcclxuICAgICAgICAgIHZlcnRDb3VudCxcclxuICAgICAgICAgIGJ5dGVMZW5ndGgsXHJcbiAgICAgICAgICBkdHlwZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZWdsRWxlbWVudHNcclxuICAgIH1cclxuXHJcbiAgICByZWdsRWxlbWVudHMob3B0aW9ucyk7XHJcblxyXG4gICAgcmVnbEVsZW1lbnRzLl9yZWdsVHlwZSA9ICdlbGVtZW50cyc7XHJcbiAgICByZWdsRWxlbWVudHMuX2VsZW1lbnRzID0gZWxlbWVudHM7XHJcbiAgICByZWdsRWxlbWVudHMuc3ViZGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBvZmZzZXQpIHtcclxuICAgICAgYnVmZmVyLnN1YmRhdGEoZGF0YSwgb2Zmc2V0KTtcclxuICAgICAgcmV0dXJuIHJlZ2xFbGVtZW50c1xyXG4gICAgfTtcclxuICAgIHJlZ2xFbGVtZW50cy5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBkZXN0cm95RWxlbWVudHMoZWxlbWVudHMpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gcmVnbEVsZW1lbnRzXHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY3JlYXRlOiBjcmVhdGVFbGVtZW50cyxcclxuICAgIGNyZWF0ZVN0cmVhbTogY3JlYXRlRWxlbWVudFN0cmVhbSxcclxuICAgIGRlc3Ryb3lTdHJlYW06IGRlc3Ryb3lFbGVtZW50U3RyZWFtLFxyXG4gICAgZ2V0RWxlbWVudHM6IGZ1bmN0aW9uIChlbGVtZW50cykge1xyXG4gICAgICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgICBlbGVtZW50cy5fZWxlbWVudHMgaW5zdGFuY2VvZiBSRUdMRWxlbWVudEJ1ZmZlcikge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50cy5fZWxlbWVudHNcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfSxcclxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhbHVlcyhlbGVtZW50U2V0KS5mb3JFYWNoKGRlc3Ryb3lFbGVtZW50cyk7XHJcbiAgICB9XHJcbiAgfVxyXG59XG5cbnZhciBGTE9BVCA9IG5ldyBGbG9hdDMyQXJyYXkoMSk7XHJcbnZhciBJTlQgPSBuZXcgVWludDMyQXJyYXkoRkxPQVQuYnVmZmVyKTtcclxuXHJcbnZhciBHTF9VTlNJR05FRF9TSE9SVCQ0ID0gNTEyMztcclxuXHJcbmZ1bmN0aW9uIGNvbnZlcnRUb0hhbGZGbG9hdCAoYXJyYXkpIHtcclxuICB2YXIgdXNob3J0cyA9IHBvb2wuYWxsb2NUeXBlKEdMX1VOU0lHTkVEX1NIT1JUJDQsIGFycmF5Lmxlbmd0aCk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyArK2kpIHtcclxuICAgIGlmIChpc05hTihhcnJheVtpXSkpIHtcclxuICAgICAgdXNob3J0c1tpXSA9IDB4ZmZmZjtcclxuICAgIH0gZWxzZSBpZiAoYXJyYXlbaV0gPT09IEluZmluaXR5KSB7XHJcbiAgICAgIHVzaG9ydHNbaV0gPSAweDdjMDA7XHJcbiAgICB9IGVsc2UgaWYgKGFycmF5W2ldID09PSAtSW5maW5pdHkpIHtcclxuICAgICAgdXNob3J0c1tpXSA9IDB4ZmMwMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIEZMT0FUWzBdID0gYXJyYXlbaV07XHJcbiAgICAgIHZhciB4ID0gSU5UWzBdO1xyXG5cclxuICAgICAgdmFyIHNnbiA9ICh4ID4+PiAzMSkgPDwgMTU7XHJcbiAgICAgIHZhciBleHAgPSAoKHggPDwgMSkgPj4+IDI0KSAtIDEyNztcclxuICAgICAgdmFyIGZyYWMgPSAoeCA+PiAxMykgJiAoKDEgPDwgMTApIC0gMSk7XHJcblxyXG4gICAgICBpZiAoZXhwIDwgLTI0KSB7XHJcbiAgICAgICAgLy8gcm91bmQgbm9uLXJlcHJlc2VudGFibGUgZGVub3JtYWxzIHRvIDBcclxuICAgICAgICB1c2hvcnRzW2ldID0gc2duO1xyXG4gICAgICB9IGVsc2UgaWYgKGV4cCA8IC0xNCkge1xyXG4gICAgICAgIC8vIGhhbmRsZSBkZW5vcm1hbHNcclxuICAgICAgICB2YXIgcyA9IC0xNCAtIGV4cDtcclxuICAgICAgICB1c2hvcnRzW2ldID0gc2duICsgKChmcmFjICsgKDEgPDwgMTApKSA+PiBzKTtcclxuICAgICAgfSBlbHNlIGlmIChleHAgPiAxNSkge1xyXG4gICAgICAgIC8vIHJvdW5kIG92ZXJmbG93IHRvICsvLSBJbmZpbml0eVxyXG4gICAgICAgIHVzaG9ydHNbaV0gPSBzZ24gKyAweDdjMDA7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gb3RoZXJ3aXNlIGNvbnZlcnQgZGlyZWN0bHlcclxuICAgICAgICB1c2hvcnRzW2ldID0gc2duICsgKChleHAgKyAxNSkgPDwgMTApICsgZnJhYztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHVzaG9ydHNcclxufVxuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSAocykge1xyXG4gIHJldHVybiBBcnJheS5pc0FycmF5KHMpIHx8IGlzVHlwZWRBcnJheShzKVxyXG59XG5cbnZhciBpc1BvdzIkMSA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgcmV0dXJuICEodiAmICh2IC0gMSkpICYmICghIXYpXHJcbn07XG5cbnZhciBHTF9DT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUyA9IDB4ODZBMztcclxuXHJcbnZhciBHTF9URVhUVVJFXzJEJDEgPSAweDBERTE7XHJcbnZhciBHTF9URVhUVVJFX0NVQkVfTUFQJDEgPSAweDg1MTM7XHJcbnZhciBHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gkMSA9IDB4ODUxNTtcclxuXHJcbnZhciBHTF9SR0JBJDEgPSAweDE5MDg7XHJcbnZhciBHTF9BTFBIQSA9IDB4MTkwNjtcclxudmFyIEdMX1JHQiA9IDB4MTkwNztcclxudmFyIEdMX0xVTUlOQU5DRSA9IDB4MTkwOTtcclxudmFyIEdMX0xVTUlOQU5DRV9BTFBIQSA9IDB4MTkwQTtcclxuXHJcbnZhciBHTF9SR0JBNCA9IDB4ODA1NjtcclxudmFyIEdMX1JHQjVfQTEgPSAweDgwNTc7XHJcbnZhciBHTF9SR0I1NjUgPSAweDhENjI7XHJcblxyXG52YXIgR0xfVU5TSUdORURfU0hPUlRfNF80XzRfNCQxID0gMHg4MDMzO1xyXG52YXIgR0xfVU5TSUdORURfU0hPUlRfNV81XzVfMSQxID0gMHg4MDM0O1xyXG52YXIgR0xfVU5TSUdORURfU0hPUlRfNV82XzUkMSA9IDB4ODM2MztcclxudmFyIEdMX1VOU0lHTkVEX0lOVF8yNF84X1dFQkdMJDEgPSAweDg0RkE7XHJcblxyXG52YXIgR0xfREVQVEhfQ09NUE9ORU5UID0gMHgxOTAyO1xyXG52YXIgR0xfREVQVEhfU1RFTkNJTCA9IDB4ODRGOTtcclxuXHJcbnZhciBHTF9TUkdCX0VYVCA9IDB4OEM0MDtcclxudmFyIEdMX1NSR0JfQUxQSEFfRVhUID0gMHg4QzQyO1xyXG5cclxudmFyIEdMX0hBTEZfRkxPQVRfT0VTJDEgPSAweDhENjE7XHJcblxyXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCA9IDB4ODNGMDtcclxudmFyIEdMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDFfRVhUID0gMHg4M0YxO1xyXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQgPSAweDgzRjI7XHJcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCA9IDB4ODNGMztcclxuXHJcbnZhciBHTF9DT01QUkVTU0VEX1JHQl9BVENfV0VCR0wgPSAweDhDOTI7XHJcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMID0gMHg4QzkzO1xyXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JBX0FUQ19JTlRFUlBPTEFURURfQUxQSEFfV0VCR0wgPSAweDg3RUU7XHJcblxyXG52YXIgR0xfQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyA9IDB4OEMwMDtcclxudmFyIEdMX0NPTVBSRVNTRURfUkdCX1BWUlRDXzJCUFBWMV9JTUcgPSAweDhDMDE7XHJcbnZhciBHTF9DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyA9IDB4OEMwMjtcclxudmFyIEdMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HID0gMHg4QzAzO1xyXG5cclxudmFyIEdMX0NPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0wgPSAweDhENjQ7XHJcblxyXG52YXIgR0xfVU5TSUdORURfQllURSQ1ID0gMHgxNDAxO1xyXG52YXIgR0xfVU5TSUdORURfU0hPUlQkMyA9IDB4MTQwMztcclxudmFyIEdMX1VOU0lHTkVEX0lOVCQzID0gMHgxNDA1O1xyXG52YXIgR0xfRkxPQVQkNCA9IDB4MTQwNjtcclxuXHJcbnZhciBHTF9URVhUVVJFX1dSQVBfUyA9IDB4MjgwMjtcclxudmFyIEdMX1RFWFRVUkVfV1JBUF9UID0gMHgyODAzO1xyXG5cclxudmFyIEdMX1JFUEVBVCA9IDB4MjkwMTtcclxudmFyIEdMX0NMQU1QX1RPX0VER0UkMSA9IDB4ODEyRjtcclxudmFyIEdMX01JUlJPUkVEX1JFUEVBVCA9IDB4ODM3MDtcclxuXHJcbnZhciBHTF9URVhUVVJFX01BR19GSUxURVIgPSAweDI4MDA7XHJcbnZhciBHTF9URVhUVVJFX01JTl9GSUxURVIgPSAweDI4MDE7XHJcblxyXG52YXIgR0xfTkVBUkVTVCQxID0gMHgyNjAwO1xyXG52YXIgR0xfTElORUFSID0gMHgyNjAxO1xyXG52YXIgR0xfTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCQxID0gMHgyNzAwO1xyXG52YXIgR0xfTElORUFSX01JUE1BUF9ORUFSRVNUJDEgPSAweDI3MDE7XHJcbnZhciBHTF9ORUFSRVNUX01JUE1BUF9MSU5FQVIkMSA9IDB4MjcwMjtcclxudmFyIEdMX0xJTkVBUl9NSVBNQVBfTElORUFSJDEgPSAweDI3MDM7XHJcblxyXG52YXIgR0xfR0VORVJBVEVfTUlQTUFQX0hJTlQgPSAweDgxOTI7XHJcbnZhciBHTF9ET05UX0NBUkUgPSAweDExMDA7XHJcbnZhciBHTF9GQVNURVNUID0gMHgxMTAxO1xyXG52YXIgR0xfTklDRVNUID0gMHgxMTAyO1xyXG5cclxudmFyIEdMX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUID0gMHg4NEZFO1xyXG5cclxudmFyIEdMX1VOUEFDS19BTElHTk1FTlQgPSAweDBDRjU7XHJcbnZhciBHTF9VTlBBQ0tfRkxJUF9ZX1dFQkdMID0gMHg5MjQwO1xyXG52YXIgR0xfVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMID0gMHg5MjQxO1xyXG52YXIgR0xfVU5QQUNLX0NPTE9SU1BBQ0VfQ09OVkVSU0lPTl9XRUJHTCA9IDB4OTI0MztcclxuXHJcbnZhciBHTF9CUk9XU0VSX0RFRkFVTFRfV0VCR0wgPSAweDkyNDQ7XHJcblxyXG52YXIgR0xfVEVYVFVSRTAkMSA9IDB4ODRDMDtcclxuXHJcbnZhciBNSVBNQVBfRklMVEVSUyA9IFtcclxuICBHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUJDEsXHJcbiAgR0xfTkVBUkVTVF9NSVBNQVBfTElORUFSJDEsXHJcbiAgR0xfTElORUFSX01JUE1BUF9ORUFSRVNUJDEsXHJcbiAgR0xfTElORUFSX01JUE1BUF9MSU5FQVIkMVxyXG5dO1xyXG5cclxudmFyIENIQU5ORUxTX0ZPUk1BVCA9IFtcclxuICAwLFxyXG4gIEdMX0xVTUlOQU5DRSxcclxuICBHTF9MVU1JTkFOQ0VfQUxQSEEsXHJcbiAgR0xfUkdCLFxyXG4gIEdMX1JHQkEkMVxyXG5dO1xyXG5cclxudmFyIEZPUk1BVF9DSEFOTkVMUyA9IHt9O1xyXG5GT1JNQVRfQ0hBTk5FTFNbR0xfTFVNSU5BTkNFXSA9XHJcbkZPUk1BVF9DSEFOTkVMU1tHTF9BTFBIQV0gPVxyXG5GT1JNQVRfQ0hBTk5FTFNbR0xfREVQVEhfQ09NUE9ORU5UXSA9IDE7XHJcbkZPUk1BVF9DSEFOTkVMU1tHTF9ERVBUSF9TVEVOQ0lMXSA9XHJcbkZPUk1BVF9DSEFOTkVMU1tHTF9MVU1JTkFOQ0VfQUxQSEFdID0gMjtcclxuRk9STUFUX0NIQU5ORUxTW0dMX1JHQl0gPVxyXG5GT1JNQVRfQ0hBTk5FTFNbR0xfU1JHQl9FWFRdID0gMztcclxuRk9STUFUX0NIQU5ORUxTW0dMX1JHQkEkMV0gPVxyXG5GT1JNQVRfQ0hBTk5FTFNbR0xfU1JHQl9BTFBIQV9FWFRdID0gNDtcclxuXHJcbmZ1bmN0aW9uIG9iamVjdE5hbWUgKHN0cikge1xyXG4gIHJldHVybiAnW29iamVjdCAnICsgc3RyICsgJ10nXHJcbn1cclxuXHJcbnZhciBDQU5WQVNfQ0xBU1MgPSBvYmplY3ROYW1lKCdIVE1MQ2FudmFzRWxlbWVudCcpO1xyXG52YXIgQ09OVEVYVDJEX0NMQVNTID0gb2JqZWN0TmFtZSgnQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEJyk7XHJcbnZhciBCSVRNQVBfQ0xBU1MgPSBvYmplY3ROYW1lKCdJbWFnZUJpdG1hcCcpO1xyXG52YXIgSU1BR0VfQ0xBU1MgPSBvYmplY3ROYW1lKCdIVE1MSW1hZ2VFbGVtZW50Jyk7XHJcbnZhciBWSURFT19DTEFTUyA9IG9iamVjdE5hbWUoJ0hUTUxWaWRlb0VsZW1lbnQnKTtcclxuXHJcbnZhciBQSVhFTF9DTEFTU0VTID0gT2JqZWN0LmtleXMoYXJyYXlUeXBlcykuY29uY2F0KFtcclxuICBDQU5WQVNfQ0xBU1MsXHJcbiAgQ09OVEVYVDJEX0NMQVNTLFxyXG4gIEJJVE1BUF9DTEFTUyxcclxuICBJTUFHRV9DTEFTUyxcclxuICBWSURFT19DTEFTU1xyXG5dKTtcclxuXHJcbi8vIGZvciBldmVyeSB0ZXh0dXJlIHR5cGUsIHN0b3JlXHJcbi8vIHRoZSBzaXplIGluIGJ5dGVzLlxyXG52YXIgVFlQRV9TSVpFUyA9IFtdO1xyXG5UWVBFX1NJWkVTW0dMX1VOU0lHTkVEX0JZVEUkNV0gPSAxO1xyXG5UWVBFX1NJWkVTW0dMX0ZMT0FUJDRdID0gNDtcclxuVFlQRV9TSVpFU1tHTF9IQUxGX0ZMT0FUX09FUyQxXSA9IDI7XHJcblxyXG5UWVBFX1NJWkVTW0dMX1VOU0lHTkVEX1NIT1JUJDNdID0gMjtcclxuVFlQRV9TSVpFU1tHTF9VTlNJR05FRF9JTlQkM10gPSA0O1xyXG5cclxudmFyIEZPUk1BVF9TSVpFU19TUEVDSUFMID0gW107XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX1JHQkE0XSA9IDI7XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX1JHQjVfQTFdID0gMjtcclxuRk9STUFUX1NJWkVTX1NQRUNJQUxbR0xfUkdCNTY1XSA9IDI7XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0RFUFRIX1NURU5DSUxdID0gNDtcclxuXHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFRdID0gMC41O1xyXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVF0gPSAwLjU7XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUXSA9IDE7XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUXSA9IDE7XHJcblxyXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQl9BVENfV0VCR0xdID0gMC41O1xyXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMXSA9IDE7XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9BVENfSU5URVJQT0xBVEVEX0FMUEhBX1dFQkdMXSA9IDE7XHJcblxyXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HXSA9IDAuNTtcclxuRk9STUFUX1NJWkVTX1NQRUNJQUxbR0xfQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNR10gPSAwLjI1O1xyXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNR10gPSAwLjU7XHJcbkZPUk1BVF9TSVpFU19TUEVDSUFMW0dMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HXSA9IDAuMjU7XHJcblxyXG5GT1JNQVRfU0laRVNfU1BFQ0lBTFtHTF9DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMXSA9IDAuNTtcclxuXHJcbmZ1bmN0aW9uIGlzTnVtZXJpY0FycmF5IChhcnIpIHtcclxuICByZXR1cm4gKFxyXG4gICAgQXJyYXkuaXNBcnJheShhcnIpICYmXHJcbiAgICAoYXJyLmxlbmd0aCA9PT0gMCB8fFxyXG4gICAgdHlwZW9mIGFyclswXSA9PT0gJ251bWJlcicpKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc1JlY3RBcnJheSAoYXJyKSB7XHJcbiAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuICB2YXIgd2lkdGggPSBhcnIubGVuZ3RoO1xyXG4gIGlmICh3aWR0aCA9PT0gMCB8fCAhaXNBcnJheUxpa2UoYXJyWzBdKSkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG4gIHJldHVybiB0cnVlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsYXNzU3RyaW5nICh4KSB7XHJcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0NhbnZhc0VsZW1lbnQgKG9iamVjdCkge1xyXG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBDQU5WQVNfQ0xBU1NcclxufVxyXG5cclxuZnVuY3Rpb24gaXNDb250ZXh0MkQgKG9iamVjdCkge1xyXG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBDT05URVhUMkRfQ0xBU1NcclxufVxyXG5cclxuZnVuY3Rpb24gaXNCaXRtYXAgKG9iamVjdCkge1xyXG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBCSVRNQVBfQ0xBU1NcclxufVxyXG5cclxuZnVuY3Rpb24gaXNJbWFnZUVsZW1lbnQgKG9iamVjdCkge1xyXG4gIHJldHVybiBjbGFzc1N0cmluZyhvYmplY3QpID09PSBJTUFHRV9DTEFTU1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1ZpZGVvRWxlbWVudCAob2JqZWN0KSB7XHJcbiAgcmV0dXJuIGNsYXNzU3RyaW5nKG9iamVjdCkgPT09IFZJREVPX0NMQVNTXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUGl4ZWxEYXRhIChvYmplY3QpIHtcclxuICBpZiAoIW9iamVjdCkge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG4gIHZhciBjbGFzc05hbWUgPSBjbGFzc1N0cmluZyhvYmplY3QpO1xyXG4gIGlmIChQSVhFTF9DTEFTU0VTLmluZGV4T2YoY2xhc3NOYW1lKSA+PSAwKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICByZXR1cm4gKFxyXG4gICAgaXNOdW1lcmljQXJyYXkob2JqZWN0KSB8fFxyXG4gICAgaXNSZWN0QXJyYXkob2JqZWN0KSB8fFxyXG4gICAgaXNOREFycmF5TGlrZShvYmplY3QpKVxyXG59XHJcblxyXG5mdW5jdGlvbiB0eXBlZEFycmF5Q29kZSQxIChkYXRhKSB7XHJcbiAgcmV0dXJuIGFycmF5VHlwZXNbT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGEpXSB8IDBcclxufVxyXG5cclxuZnVuY3Rpb24gY29udmVydERhdGEgKHJlc3VsdCwgZGF0YSkge1xyXG4gIHZhciBuID0gZGF0YS5sZW5ndGg7XHJcbiAgc3dpdGNoIChyZXN1bHQudHlwZSkge1xyXG4gICAgY2FzZSBHTF9VTlNJR05FRF9CWVRFJDU6XHJcbiAgICBjYXNlIEdMX1VOU0lHTkVEX1NIT1JUJDM6XHJcbiAgICBjYXNlIEdMX1VOU0lHTkVEX0lOVCQzOlxyXG4gICAgY2FzZSBHTF9GTE9BVCQ0OlxyXG4gICAgICB2YXIgY29udmVydGVkID0gcG9vbC5hbGxvY1R5cGUocmVzdWx0LnR5cGUsIG4pO1xyXG4gICAgICBjb252ZXJ0ZWQuc2V0KGRhdGEpO1xyXG4gICAgICByZXN1bHQuZGF0YSA9IGNvbnZlcnRlZDtcclxuICAgICAgYnJlYWtcclxuXHJcbiAgICBjYXNlIEdMX0hBTEZfRkxPQVRfT0VTJDE6XHJcbiAgICAgIHJlc3VsdC5kYXRhID0gY29udmVydFRvSGFsZkZsb2F0KGRhdGEpO1xyXG4gICAgICBicmVha1xyXG5cclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIGNoZWNrJDEucmFpc2UoJ3Vuc3VwcG9ydGVkIHRleHR1cmUgdHlwZSwgbXVzdCBzcGVjaWZ5IGEgdHlwZWQgYXJyYXknKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHByZUNvbnZlcnQgKGltYWdlLCBuKSB7XHJcbiAgcmV0dXJuIHBvb2wuYWxsb2NUeXBlKFxyXG4gICAgaW1hZ2UudHlwZSA9PT0gR0xfSEFMRl9GTE9BVF9PRVMkMVxyXG4gICAgICA/IEdMX0ZMT0FUJDRcclxuICAgICAgOiBpbWFnZS50eXBlLCBuKVxyXG59XHJcblxyXG5mdW5jdGlvbiBwb3N0Q29udmVydCAoaW1hZ2UsIGRhdGEpIHtcclxuICBpZiAoaW1hZ2UudHlwZSA9PT0gR0xfSEFMRl9GTE9BVF9PRVMkMSkge1xyXG4gICAgaW1hZ2UuZGF0YSA9IGNvbnZlcnRUb0hhbGZGbG9hdChkYXRhKTtcclxuICAgIHBvb2wuZnJlZVR5cGUoZGF0YSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGltYWdlLmRhdGEgPSBkYXRhO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdHJhbnNwb3NlRGF0YSAoaW1hZ2UsIGFycmF5LCBzdHJpZGVYLCBzdHJpZGVZLCBzdHJpZGVDLCBvZmZzZXQpIHtcclxuICB2YXIgdyA9IGltYWdlLndpZHRoO1xyXG4gIHZhciBoID0gaW1hZ2UuaGVpZ2h0O1xyXG4gIHZhciBjID0gaW1hZ2UuY2hhbm5lbHM7XHJcbiAgdmFyIG4gPSB3ICogaCAqIGM7XHJcbiAgdmFyIGRhdGEgPSBwcmVDb252ZXJ0KGltYWdlLCBuKTtcclxuXHJcbiAgdmFyIHAgPSAwO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaDsgKytpKSB7XHJcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHc7ICsraikge1xyXG4gICAgICBmb3IgKHZhciBrID0gMDsgayA8IGM7ICsraykge1xyXG4gICAgICAgIGRhdGFbcCsrXSA9IGFycmF5W3N0cmlkZVggKiBqICsgc3RyaWRlWSAqIGkgKyBzdHJpZGVDICogayArIG9mZnNldF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHBvc3RDb252ZXJ0KGltYWdlLCBkYXRhKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0VGV4dHVyZVNpemUgKGZvcm1hdCwgdHlwZSwgd2lkdGgsIGhlaWdodCwgaXNNaXBtYXAsIGlzQ3ViZSkge1xyXG4gIHZhciBzO1xyXG4gIGlmICh0eXBlb2YgRk9STUFUX1NJWkVTX1NQRUNJQUxbZm9ybWF0XSAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIC8vIHdlIGhhdmUgYSBzcGVjaWFsIGFycmF5IGZvciBkZWFsaW5nIHdpdGggd2VpcmQgY29sb3IgZm9ybWF0cyBzdWNoIGFzIFJHQjVBMVxyXG4gICAgcyA9IEZPUk1BVF9TSVpFU19TUEVDSUFMW2Zvcm1hdF07XHJcbiAgfSBlbHNlIHtcclxuICAgIHMgPSBGT1JNQVRfQ0hBTk5FTFNbZm9ybWF0XSAqIFRZUEVfU0laRVNbdHlwZV07XHJcbiAgfVxyXG5cclxuICBpZiAoaXNDdWJlKSB7XHJcbiAgICBzICo9IDY7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNNaXBtYXApIHtcclxuICAgIC8vIGNvbXB1dGUgdGhlIHRvdGFsIHNpemUgb2YgYWxsIHRoZSBtaXBtYXBzLlxyXG4gICAgdmFyIHRvdGFsID0gMDtcclxuXHJcbiAgICB2YXIgdyA9IHdpZHRoO1xyXG4gICAgd2hpbGUgKHcgPj0gMSkge1xyXG4gICAgICAvLyB3ZSBjYW4gb25seSB1c2UgbWlwbWFwcyBvbiBhIHNxdWFyZSBpbWFnZSxcclxuICAgICAgLy8gc28gd2UgY2FuIHNpbXBseSB1c2UgdGhlIHdpZHRoIGFuZCBpZ25vcmUgdGhlIGhlaWdodDpcclxuICAgICAgdG90YWwgKz0gcyAqIHcgKiB3O1xyXG4gICAgICB3IC89IDI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdG90YWxcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIHMgKiB3aWR0aCAqIGhlaWdodFxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlVGV4dHVyZVNldCAoXHJcbiAgZ2wsIGV4dGVuc2lvbnMsIGxpbWl0cywgcmVnbFBvbGwsIGNvbnRleHRTdGF0ZSwgc3RhdHMsIGNvbmZpZykge1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyBJbml0aWFsaXplIGNvbnN0YW50cyBhbmQgcGFyYW1ldGVyIHRhYmxlcyBoZXJlXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIHZhciBtaXBtYXBIaW50ID0ge1xyXG4gICAgXCJkb24ndCBjYXJlXCI6IEdMX0RPTlRfQ0FSRSxcclxuICAgICdkb250IGNhcmUnOiBHTF9ET05UX0NBUkUsXHJcbiAgICAnbmljZSc6IEdMX05JQ0VTVCxcclxuICAgICdmYXN0JzogR0xfRkFTVEVTVFxyXG4gIH07XHJcblxyXG4gIHZhciB3cmFwTW9kZXMgPSB7XHJcbiAgICAncmVwZWF0JzogR0xfUkVQRUFULFxyXG4gICAgJ2NsYW1wJzogR0xfQ0xBTVBfVE9fRURHRSQxLFxyXG4gICAgJ21pcnJvcic6IEdMX01JUlJPUkVEX1JFUEVBVFxyXG4gIH07XHJcblxyXG4gIHZhciBtYWdGaWx0ZXJzID0ge1xyXG4gICAgJ25lYXJlc3QnOiBHTF9ORUFSRVNUJDEsXHJcbiAgICAnbGluZWFyJzogR0xfTElORUFSXHJcbiAgfTtcclxuXHJcbiAgdmFyIG1pbkZpbHRlcnMgPSBleHRlbmQoe1xyXG4gICAgJ21pcG1hcCc6IEdMX0xJTkVBUl9NSVBNQVBfTElORUFSJDEsXHJcbiAgICAnbmVhcmVzdCBtaXBtYXAgbmVhcmVzdCc6IEdMX05FQVJFU1RfTUlQTUFQX05FQVJFU1QkMSxcclxuICAgICdsaW5lYXIgbWlwbWFwIG5lYXJlc3QnOiBHTF9MSU5FQVJfTUlQTUFQX05FQVJFU1QkMSxcclxuICAgICduZWFyZXN0IG1pcG1hcCBsaW5lYXInOiBHTF9ORUFSRVNUX01JUE1BUF9MSU5FQVIkMSxcclxuICAgICdsaW5lYXIgbWlwbWFwIGxpbmVhcic6IEdMX0xJTkVBUl9NSVBNQVBfTElORUFSJDFcclxuICB9LCBtYWdGaWx0ZXJzKTtcclxuXHJcbiAgdmFyIGNvbG9yU3BhY2UgPSB7XHJcbiAgICAnbm9uZSc6IDAsXHJcbiAgICAnYnJvd3Nlcic6IEdMX0JST1dTRVJfREVGQVVMVF9XRUJHTFxyXG4gIH07XHJcblxyXG4gIHZhciB0ZXh0dXJlVHlwZXMgPSB7XHJcbiAgICAndWludDgnOiBHTF9VTlNJR05FRF9CWVRFJDUsXHJcbiAgICAncmdiYTQnOiBHTF9VTlNJR05FRF9TSE9SVF80XzRfNF80JDEsXHJcbiAgICAncmdiNTY1JzogR0xfVU5TSUdORURfU0hPUlRfNV82XzUkMSxcclxuICAgICdyZ2I1IGExJzogR0xfVU5TSUdORURfU0hPUlRfNV81XzVfMSQxXHJcbiAgfTtcclxuXHJcbiAgdmFyIHRleHR1cmVGb3JtYXRzID0ge1xyXG4gICAgJ2FscGhhJzogR0xfQUxQSEEsXHJcbiAgICAnbHVtaW5hbmNlJzogR0xfTFVNSU5BTkNFLFxyXG4gICAgJ2x1bWluYW5jZSBhbHBoYSc6IEdMX0xVTUlOQU5DRV9BTFBIQSxcclxuICAgICdyZ2InOiBHTF9SR0IsXHJcbiAgICAncmdiYSc6IEdMX1JHQkEkMSxcclxuICAgICdyZ2JhNCc6IEdMX1JHQkE0LFxyXG4gICAgJ3JnYjUgYTEnOiBHTF9SR0I1X0ExLFxyXG4gICAgJ3JnYjU2NSc6IEdMX1JHQjU2NVxyXG4gIH07XHJcblxyXG4gIHZhciBjb21wcmVzc2VkVGV4dHVyZUZvcm1hdHMgPSB7fTtcclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMuZXh0X3NyZ2IpIHtcclxuICAgIHRleHR1cmVGb3JtYXRzLnNyZ2IgPSBHTF9TUkdCX0VYVDtcclxuICAgIHRleHR1cmVGb3JtYXRzLnNyZ2JhID0gR0xfU1JHQl9BTFBIQV9FWFQ7XHJcbiAgfVxyXG5cclxuICBpZiAoZXh0ZW5zaW9ucy5vZXNfdGV4dHVyZV9mbG9hdCkge1xyXG4gICAgdGV4dHVyZVR5cGVzLmZsb2F0MzIgPSB0ZXh0dXJlVHlwZXMuZmxvYXQgPSBHTF9GTE9BVCQ0O1xyXG4gIH1cclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfaGFsZl9mbG9hdCkge1xyXG4gICAgdGV4dHVyZVR5cGVzWydmbG9hdDE2J10gPSB0ZXh0dXJlVHlwZXNbJ2hhbGYgZmxvYXQnXSA9IEdMX0hBTEZfRkxPQVRfT0VTJDE7XHJcbiAgfVxyXG5cclxuICBpZiAoZXh0ZW5zaW9ucy53ZWJnbF9kZXB0aF90ZXh0dXJlKSB7XHJcbiAgICBleHRlbmQodGV4dHVyZUZvcm1hdHMsIHtcclxuICAgICAgJ2RlcHRoJzogR0xfREVQVEhfQ09NUE9ORU5ULFxyXG4gICAgICAnZGVwdGggc3RlbmNpbCc6IEdMX0RFUFRIX1NURU5DSUxcclxuICAgIH0pO1xyXG5cclxuICAgIGV4dGVuZCh0ZXh0dXJlVHlwZXMsIHtcclxuICAgICAgJ3VpbnQxNic6IEdMX1VOU0lHTkVEX1NIT1JUJDMsXHJcbiAgICAgICd1aW50MzInOiBHTF9VTlNJR05FRF9JTlQkMyxcclxuICAgICAgJ2RlcHRoIHN0ZW5jaWwnOiBHTF9VTlNJR05FRF9JTlRfMjRfOF9XRUJHTCQxXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGlmIChleHRlbnNpb25zLndlYmdsX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjKSB7XHJcbiAgICBleHRlbmQoY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzLCB7XHJcbiAgICAgICdyZ2IgczN0YyBkeHQxJzogR0xfQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCxcclxuICAgICAgJ3JnYmEgczN0YyBkeHQxJzogR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQsXHJcbiAgICAgICdyZ2JhIHMzdGMgZHh0Myc6IEdMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhULFxyXG4gICAgICAncmdiYSBzM3RjIGR4dDUnOiBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVFxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpZiAoZXh0ZW5zaW9ucy53ZWJnbF9jb21wcmVzc2VkX3RleHR1cmVfYXRjKSB7XHJcbiAgICBleHRlbmQoY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzLCB7XHJcbiAgICAgICdyZ2IgYXRjJzogR0xfQ09NUFJFU1NFRF9SR0JfQVRDX1dFQkdMLFxyXG4gICAgICAncmdiYSBhdGMgZXhwbGljaXQgYWxwaGEnOiBHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMLFxyXG4gICAgICAncmdiYSBhdGMgaW50ZXJwb2xhdGVkIGFscGhhJzogR0xfQ09NUFJFU1NFRF9SR0JBX0FUQ19JTlRFUlBPTEFURURfQUxQSEFfV0VCR0xcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX3B2cnRjKSB7XHJcbiAgICBleHRlbmQoY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzLCB7XHJcbiAgICAgICdyZ2IgcHZydGMgNGJwcHYxJzogR0xfQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyxcclxuICAgICAgJ3JnYiBwdnJ0YyAyYnBwdjEnOiBHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ18yQlBQVjFfSU1HLFxyXG4gICAgICAncmdiYSBwdnJ0YyA0YnBwdjEnOiBHTF9DT01QUkVTU0VEX1JHQkFfUFZSVENfNEJQUFYxX0lNRyxcclxuICAgICAgJ3JnYmEgcHZydGMgMmJwcHYxJzogR0xfQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUdcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX2V0YzEpIHtcclxuICAgIGNvbXByZXNzZWRUZXh0dXJlRm9ybWF0c1sncmdiIGV0YzEnXSA9IEdMX0NPTVBSRVNTRURfUkdCX0VUQzFfV0VCR0w7XHJcbiAgfVxyXG5cclxuICAvLyBDb3B5IG92ZXIgYWxsIHRleHR1cmUgZm9ybWF0c1xyXG4gIHZhciBzdXBwb3J0ZWRDb21wcmVzc2VkRm9ybWF0cyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxyXG4gICAgZ2wuZ2V0UGFyYW1ldGVyKEdMX0NPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTKSk7XHJcbiAgT2JqZWN0LmtleXMoY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICB2YXIgZm9ybWF0ID0gY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzW25hbWVdO1xyXG4gICAgaWYgKHN1cHBvcnRlZENvbXByZXNzZWRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA+PSAwKSB7XHJcbiAgICAgIHRleHR1cmVGb3JtYXRzW25hbWVdID0gZm9ybWF0O1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICB2YXIgc3VwcG9ydGVkRm9ybWF0cyA9IE9iamVjdC5rZXlzKHRleHR1cmVGb3JtYXRzKTtcclxuICBsaW1pdHMudGV4dHVyZUZvcm1hdHMgPSBzdXBwb3J0ZWRGb3JtYXRzO1xyXG5cclxuICAvLyBhc3NvY2lhdGUgd2l0aCBldmVyeSBmb3JtYXQgc3RyaW5nIGl0c1xyXG4gIC8vIGNvcnJlc3BvbmRpbmcgR0wtdmFsdWUuXHJcbiAgdmFyIHRleHR1cmVGb3JtYXRzSW52ZXJ0ID0gW107XHJcbiAgT2JqZWN0LmtleXModGV4dHVyZUZvcm1hdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIHZhbCA9IHRleHR1cmVGb3JtYXRzW2tleV07XHJcbiAgICB0ZXh0dXJlRm9ybWF0c0ludmVydFt2YWxdID0ga2V5O1xyXG4gIH0pO1xyXG5cclxuICAvLyBhc3NvY2lhdGUgd2l0aCBldmVyeSB0eXBlIHN0cmluZyBpdHNcclxuICAvLyBjb3JyZXNwb25kaW5nIEdMLXZhbHVlLlxyXG4gIHZhciB0ZXh0dXJlVHlwZXNJbnZlcnQgPSBbXTtcclxuICBPYmplY3Qua2V5cyh0ZXh0dXJlVHlwZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIHZhbCA9IHRleHR1cmVUeXBlc1trZXldO1xyXG4gICAgdGV4dHVyZVR5cGVzSW52ZXJ0W3ZhbF0gPSBrZXk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBtYWdGaWx0ZXJzSW52ZXJ0ID0gW107XHJcbiAgT2JqZWN0LmtleXMobWFnRmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICB2YXIgdmFsID0gbWFnRmlsdGVyc1trZXldO1xyXG4gICAgbWFnRmlsdGVyc0ludmVydFt2YWxdID0ga2V5O1xyXG4gIH0pO1xyXG5cclxuICB2YXIgbWluRmlsdGVyc0ludmVydCA9IFtdO1xyXG4gIE9iamVjdC5rZXlzKG1pbkZpbHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIHZhbCA9IG1pbkZpbHRlcnNba2V5XTtcclxuICAgIG1pbkZpbHRlcnNJbnZlcnRbdmFsXSA9IGtleTtcclxuICB9KTtcclxuXHJcbiAgdmFyIHdyYXBNb2Rlc0ludmVydCA9IFtdO1xyXG4gIE9iamVjdC5rZXlzKHdyYXBNb2RlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICB2YXIgdmFsID0gd3JhcE1vZGVzW2tleV07XHJcbiAgICB3cmFwTW9kZXNJbnZlcnRbdmFsXSA9IGtleTtcclxuICB9KTtcclxuXHJcbiAgLy8gY29sb3JGb3JtYXRzW10gZ2l2ZXMgdGhlIGZvcm1hdCAoY2hhbm5lbHMpIGFzc29jaWF0ZWQgdG8gYW5cclxuICAvLyBpbnRlcm5hbGZvcm1hdFxyXG4gIHZhciBjb2xvckZvcm1hdHMgPSBzdXBwb3J0ZWRGb3JtYXRzLnJlZHVjZShmdW5jdGlvbiAoY29sb3IsIGtleSkge1xyXG4gICAgdmFyIGdsZW51bSA9IHRleHR1cmVGb3JtYXRzW2tleV07XHJcbiAgICBpZiAoZ2xlbnVtID09PSBHTF9MVU1JTkFOQ0UgfHxcclxuICAgICAgICBnbGVudW0gPT09IEdMX0FMUEhBIHx8XHJcbiAgICAgICAgZ2xlbnVtID09PSBHTF9MVU1JTkFOQ0UgfHxcclxuICAgICAgICBnbGVudW0gPT09IEdMX0xVTUlOQU5DRV9BTFBIQSB8fFxyXG4gICAgICAgIGdsZW51bSA9PT0gR0xfREVQVEhfQ09NUE9ORU5UIHx8XHJcbiAgICAgICAgZ2xlbnVtID09PSBHTF9ERVBUSF9TVEVOQ0lMKSB7XHJcbiAgICAgIGNvbG9yW2dsZW51bV0gPSBnbGVudW07XHJcbiAgICB9IGVsc2UgaWYgKGdsZW51bSA9PT0gR0xfUkdCNV9BMSB8fCBrZXkuaW5kZXhPZigncmdiYScpID49IDApIHtcclxuICAgICAgY29sb3JbZ2xlbnVtXSA9IEdMX1JHQkEkMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbG9yW2dsZW51bV0gPSBHTF9SR0I7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gY29sb3JcclxuICB9LCB7fSk7XHJcblxyXG4gIGZ1bmN0aW9uIFRleEZsYWdzICgpIHtcclxuICAgIC8vIGZvcm1hdCBpbmZvXHJcbiAgICB0aGlzLmludGVybmFsZm9ybWF0ID0gR0xfUkdCQSQxO1xyXG4gICAgdGhpcy5mb3JtYXQgPSBHTF9SR0JBJDE7XHJcbiAgICB0aGlzLnR5cGUgPSBHTF9VTlNJR05FRF9CWVRFJDU7XHJcbiAgICB0aGlzLmNvbXByZXNzZWQgPSBmYWxzZTtcclxuXHJcbiAgICAvLyBwaXhlbCBzdG9yYWdlXHJcbiAgICB0aGlzLnByZW11bHRpcGx5QWxwaGEgPSBmYWxzZTtcclxuICAgIHRoaXMuZmxpcFkgPSBmYWxzZTtcclxuICAgIHRoaXMudW5wYWNrQWxpZ25tZW50ID0gMTtcclxuICAgIHRoaXMuY29sb3JTcGFjZSA9IEdMX0JST1dTRVJfREVGQVVMVF9XRUJHTDtcclxuXHJcbiAgICAvLyBzaGFwZSBpbmZvXHJcbiAgICB0aGlzLndpZHRoID0gMDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMDtcclxuICAgIHRoaXMuY2hhbm5lbHMgPSAwO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29weUZsYWdzIChyZXN1bHQsIG90aGVyKSB7XHJcbiAgICByZXN1bHQuaW50ZXJuYWxmb3JtYXQgPSBvdGhlci5pbnRlcm5hbGZvcm1hdDtcclxuICAgIHJlc3VsdC5mb3JtYXQgPSBvdGhlci5mb3JtYXQ7XHJcbiAgICByZXN1bHQudHlwZSA9IG90aGVyLnR5cGU7XHJcbiAgICByZXN1bHQuY29tcHJlc3NlZCA9IG90aGVyLmNvbXByZXNzZWQ7XHJcblxyXG4gICAgcmVzdWx0LnByZW11bHRpcGx5QWxwaGEgPSBvdGhlci5wcmVtdWx0aXBseUFscGhhO1xyXG4gICAgcmVzdWx0LmZsaXBZID0gb3RoZXIuZmxpcFk7XHJcbiAgICByZXN1bHQudW5wYWNrQWxpZ25tZW50ID0gb3RoZXIudW5wYWNrQWxpZ25tZW50O1xyXG4gICAgcmVzdWx0LmNvbG9yU3BhY2UgPSBvdGhlci5jb2xvclNwYWNlO1xyXG5cclxuICAgIHJlc3VsdC53aWR0aCA9IG90aGVyLndpZHRoO1xyXG4gICAgcmVzdWx0LmhlaWdodCA9IG90aGVyLmhlaWdodDtcclxuICAgIHJlc3VsdC5jaGFubmVscyA9IG90aGVyLmNoYW5uZWxzO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VGbGFncyAoZmxhZ3MsIG9wdGlvbnMpIHtcclxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcgfHwgIW9wdGlvbnMpIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCdwcmVtdWx0aXBseUFscGhhJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIGNoZWNrJDEudHlwZShvcHRpb25zLnByZW11bHRpcGx5QWxwaGEsICdib29sZWFuJyxcclxuICAgICAgICAnaW52YWxpZCBwcmVtdWx0aXBseUFscGhhJyk7XHJcbiAgICAgIGZsYWdzLnByZW11bHRpcGx5QWxwaGEgPSBvcHRpb25zLnByZW11bHRpcGx5QWxwaGE7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCdmbGlwWScgaW4gb3B0aW9ucykge1xyXG4gICAgICBjaGVjayQxLnR5cGUob3B0aW9ucy5mbGlwWSwgJ2Jvb2xlYW4nLFxyXG4gICAgICAgICdpbnZhbGlkIHRleHR1cmUgZmxpcCcpO1xyXG4gICAgICBmbGFncy5mbGlwWSA9IG9wdGlvbnMuZmxpcFk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCdhbGlnbm1lbnQnIGluIG9wdGlvbnMpIHtcclxuICAgICAgY2hlY2skMS5vbmVPZihvcHRpb25zLmFsaWdubWVudCwgWzEsIDIsIDQsIDhdLFxyXG4gICAgICAgICdpbnZhbGlkIHRleHR1cmUgdW5wYWNrIGFsaWdubWVudCcpO1xyXG4gICAgICBmbGFncy51bnBhY2tBbGlnbm1lbnQgPSBvcHRpb25zLmFsaWdubWVudDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJ2NvbG9yU3BhY2UnIGluIG9wdGlvbnMpIHtcclxuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy5jb2xvclNwYWNlLCBjb2xvclNwYWNlLFxyXG4gICAgICAgICdpbnZhbGlkIGNvbG9yU3BhY2UnKTtcclxuICAgICAgZmxhZ3MuY29sb3JTcGFjZSA9IGNvbG9yU3BhY2Vbb3B0aW9ucy5jb2xvclNwYWNlXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoJ3R5cGUnIGluIG9wdGlvbnMpIHtcclxuICAgICAgdmFyIHR5cGUgPSBvcHRpb25zLnR5cGU7XHJcbiAgICAgIGNoZWNrJDEoZXh0ZW5zaW9ucy5vZXNfdGV4dHVyZV9mbG9hdCB8fFxyXG4gICAgICAgICEodHlwZSA9PT0gJ2Zsb2F0JyB8fCB0eXBlID09PSAnZmxvYXQzMicpLFxyXG4gICAgICAgICd5b3UgbXVzdCBlbmFibGUgdGhlIE9FU190ZXh0dXJlX2Zsb2F0IGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgZmxvYXRpbmcgcG9pbnQgdGV4dHVyZXMuJyk7XHJcbiAgICAgIGNoZWNrJDEoZXh0ZW5zaW9ucy5vZXNfdGV4dHVyZV9oYWxmX2Zsb2F0IHx8XHJcbiAgICAgICAgISh0eXBlID09PSAnaGFsZiBmbG9hdCcgfHwgdHlwZSA9PT0gJ2Zsb2F0MTYnKSxcclxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0IGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgMTYtYml0IGZsb2F0aW5nIHBvaW50IHRleHR1cmVzLicpO1xyXG4gICAgICBjaGVjayQxKGV4dGVuc2lvbnMud2ViZ2xfZGVwdGhfdGV4dHVyZSB8fFxyXG4gICAgICAgICEodHlwZSA9PT0gJ3VpbnQxNicgfHwgdHlwZSA9PT0gJ3VpbnQzMicgfHwgdHlwZSA9PT0gJ2RlcHRoIHN0ZW5jaWwnKSxcclxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBXRUJHTF9kZXB0aF90ZXh0dXJlIGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgZGVwdGgvc3RlbmNpbCB0ZXh0dXJlcy4nKTtcclxuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIodHlwZSwgdGV4dHVyZVR5cGVzLFxyXG4gICAgICAgICdpbnZhbGlkIHRleHR1cmUgdHlwZScpO1xyXG4gICAgICBmbGFncy50eXBlID0gdGV4dHVyZVR5cGVzW3R5cGVdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB3ID0gZmxhZ3Mud2lkdGg7XHJcbiAgICB2YXIgaCA9IGZsYWdzLmhlaWdodDtcclxuICAgIHZhciBjID0gZmxhZ3MuY2hhbm5lbHM7XHJcbiAgICB2YXIgaGFzQ2hhbm5lbHMgPSBmYWxzZTtcclxuICAgIGlmICgnc2hhcGUnIGluIG9wdGlvbnMpIHtcclxuICAgICAgY2hlY2skMShBcnJheS5pc0FycmF5KG9wdGlvbnMuc2hhcGUpICYmIG9wdGlvbnMuc2hhcGUubGVuZ3RoID49IDIsXHJcbiAgICAgICAgJ3NoYXBlIG11c3QgYmUgYW4gYXJyYXknKTtcclxuICAgICAgdyA9IG9wdGlvbnMuc2hhcGVbMF07XHJcbiAgICAgIGggPSBvcHRpb25zLnNoYXBlWzFdO1xyXG4gICAgICBpZiAob3B0aW9ucy5zaGFwZS5sZW5ndGggPT09IDMpIHtcclxuICAgICAgICBjID0gb3B0aW9ucy5zaGFwZVsyXTtcclxuICAgICAgICBjaGVjayQxKGMgPiAwICYmIGMgPD0gNCwgJ2ludmFsaWQgbnVtYmVyIG9mIGNoYW5uZWxzJyk7XHJcbiAgICAgICAgaGFzQ2hhbm5lbHMgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGNoZWNrJDEodyA+PSAwICYmIHcgPD0gbGltaXRzLm1heFRleHR1cmVTaXplLCAnaW52YWxpZCB3aWR0aCcpO1xyXG4gICAgICBjaGVjayQxKGggPj0gMCAmJiBoIDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSwgJ2ludmFsaWQgaGVpZ2h0Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoJ3JhZGl1cycgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIHcgPSBoID0gb3B0aW9ucy5yYWRpdXM7XHJcbiAgICAgICAgY2hlY2skMSh3ID49IDAgJiYgdyA8PSBsaW1pdHMubWF4VGV4dHVyZVNpemUsICdpbnZhbGlkIHJhZGl1cycpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgnd2lkdGgnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICB3ID0gb3B0aW9ucy53aWR0aDtcclxuICAgICAgICBjaGVjayQxKHcgPj0gMCAmJiB3IDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSwgJ2ludmFsaWQgd2lkdGgnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoJ2hlaWdodCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGggPSBvcHRpb25zLmhlaWdodDtcclxuICAgICAgICBjaGVjayQxKGggPj0gMCAmJiBoIDw9IGxpbWl0cy5tYXhUZXh0dXJlU2l6ZSwgJ2ludmFsaWQgaGVpZ2h0Jyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCdjaGFubmVscycgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGMgPSBvcHRpb25zLmNoYW5uZWxzO1xyXG4gICAgICAgIGNoZWNrJDEoYyA+IDAgJiYgYyA8PSA0LCAnaW52YWxpZCBudW1iZXIgb2YgY2hhbm5lbHMnKTtcclxuICAgICAgICBoYXNDaGFubmVscyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGZsYWdzLndpZHRoID0gdyB8IDA7XHJcbiAgICBmbGFncy5oZWlnaHQgPSBoIHwgMDtcclxuICAgIGZsYWdzLmNoYW5uZWxzID0gYyB8IDA7XHJcblxyXG4gICAgdmFyIGhhc0Zvcm1hdCA9IGZhbHNlO1xyXG4gICAgaWYgKCdmb3JtYXQnIGluIG9wdGlvbnMpIHtcclxuICAgICAgdmFyIGZvcm1hdFN0ciA9IG9wdGlvbnMuZm9ybWF0O1xyXG4gICAgICBjaGVjayQxKGV4dGVuc2lvbnMud2ViZ2xfZGVwdGhfdGV4dHVyZSB8fFxyXG4gICAgICAgICEoZm9ybWF0U3RyID09PSAnZGVwdGgnIHx8IGZvcm1hdFN0ciA9PT0gJ2RlcHRoIHN0ZW5jaWwnKSxcclxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBXRUJHTF9kZXB0aF90ZXh0dXJlIGV4dGVuc2lvbiBpbiBvcmRlciB0byB1c2UgZGVwdGgvc3RlbmNpbCB0ZXh0dXJlcy4nKTtcclxuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIoZm9ybWF0U3RyLCB0ZXh0dXJlRm9ybWF0cyxcclxuICAgICAgICAnaW52YWxpZCB0ZXh0dXJlIGZvcm1hdCcpO1xyXG4gICAgICB2YXIgaW50ZXJuYWxmb3JtYXQgPSBmbGFncy5pbnRlcm5hbGZvcm1hdCA9IHRleHR1cmVGb3JtYXRzW2Zvcm1hdFN0cl07XHJcbiAgICAgIGZsYWdzLmZvcm1hdCA9IGNvbG9yRm9ybWF0c1tpbnRlcm5hbGZvcm1hdF07XHJcbiAgICAgIGlmIChmb3JtYXRTdHIgaW4gdGV4dHVyZVR5cGVzKSB7XHJcbiAgICAgICAgaWYgKCEoJ3R5cGUnIGluIG9wdGlvbnMpKSB7XHJcbiAgICAgICAgICBmbGFncy50eXBlID0gdGV4dHVyZVR5cGVzW2Zvcm1hdFN0cl07XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmIChmb3JtYXRTdHIgaW4gY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzKSB7XHJcbiAgICAgICAgZmxhZ3MuY29tcHJlc3NlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgaGFzRm9ybWF0ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZWNvbmNpbGUgY2hhbm5lbHMgYW5kIGZvcm1hdFxyXG4gICAgaWYgKCFoYXNDaGFubmVscyAmJiBoYXNGb3JtYXQpIHtcclxuICAgICAgZmxhZ3MuY2hhbm5lbHMgPSBGT1JNQVRfQ0hBTk5FTFNbZmxhZ3MuZm9ybWF0XTtcclxuICAgIH0gZWxzZSBpZiAoaGFzQ2hhbm5lbHMgJiYgIWhhc0Zvcm1hdCkge1xyXG4gICAgICBpZiAoZmxhZ3MuY2hhbm5lbHMgIT09IENIQU5ORUxTX0ZPUk1BVFtmbGFncy5mb3JtYXRdKSB7XHJcbiAgICAgICAgZmxhZ3MuZm9ybWF0ID0gZmxhZ3MuaW50ZXJuYWxmb3JtYXQgPSBDSEFOTkVMU19GT1JNQVRbZmxhZ3MuY2hhbm5lbHNdO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKGhhc0Zvcm1hdCAmJiBoYXNDaGFubmVscykge1xyXG4gICAgICBjaGVjayQxKFxyXG4gICAgICAgIGZsYWdzLmNoYW5uZWxzID09PSBGT1JNQVRfQ0hBTk5FTFNbZmxhZ3MuZm9ybWF0XSxcclxuICAgICAgICAnbnVtYmVyIG9mIGNoYW5uZWxzIGluY29uc2lzdGVudCB3aXRoIHNwZWNpZmllZCBmb3JtYXQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldEZsYWdzIChmbGFncykge1xyXG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfVU5QQUNLX0ZMSVBfWV9XRUJHTCwgZmxhZ3MuZmxpcFkpO1xyXG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMLCBmbGFncy5wcmVtdWx0aXBseUFscGhhKTtcclxuICAgIGdsLnBpeGVsU3RvcmVpKEdMX1VOUEFDS19DT0xPUlNQQUNFX0NPTlZFUlNJT05fV0VCR0wsIGZsYWdzLmNvbG9yU3BhY2UpO1xyXG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfVU5QQUNLX0FMSUdOTUVOVCwgZmxhZ3MudW5wYWNrQWxpZ25tZW50KTtcclxuICB9XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyBUZXggaW1hZ2UgZGF0YVxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICBmdW5jdGlvbiBUZXhJbWFnZSAoKSB7XHJcbiAgICBUZXhGbGFncy5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMueE9mZnNldCA9IDA7XHJcbiAgICB0aGlzLnlPZmZzZXQgPSAwO1xyXG5cclxuICAgIC8vIGRhdGFcclxuICAgIHRoaXMuZGF0YSA9IG51bGw7XHJcbiAgICB0aGlzLm5lZWRzRnJlZSA9IGZhbHNlO1xyXG5cclxuICAgIC8vIGh0bWwgZWxlbWVudFxyXG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcclxuXHJcbiAgICAvLyBjb3B5VGV4SW1hZ2UgaW5mb1xyXG4gICAgdGhpcy5uZWVkc0NvcHkgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlSW1hZ2UgKGltYWdlLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgZGF0YSA9IG51bGw7XHJcbiAgICBpZiAoaXNQaXhlbERhdGEob3B0aW9ucykpIHtcclxuICAgICAgZGF0YSA9IG9wdGlvbnM7XHJcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgY2hlY2skMS50eXBlKG9wdGlvbnMsICdvYmplY3QnLCAnaW52YWxpZCBwaXhlbCBkYXRhIHR5cGUnKTtcclxuICAgICAgcGFyc2VGbGFncyhpbWFnZSwgb3B0aW9ucyk7XHJcbiAgICAgIGlmICgneCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGltYWdlLnhPZmZzZXQgPSBvcHRpb25zLnggfCAwO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICgneScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgIGltYWdlLnlPZmZzZXQgPSBvcHRpb25zLnkgfCAwO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChpc1BpeGVsRGF0YShvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgZGF0YSA9IG9wdGlvbnMuZGF0YTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrJDEoXHJcbiAgICAgICFpbWFnZS5jb21wcmVzc2VkIHx8XHJcbiAgICAgIGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5LFxyXG4gICAgICAnY29tcHJlc3NlZCB0ZXh0dXJlIGRhdGEgbXVzdCBiZSBzdG9yZWQgaW4gYSB1aW50OGFycmF5Jyk7XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuY29weSkge1xyXG4gICAgICBjaGVjayQxKCFkYXRhLCAnY2FuIG5vdCBzcGVjaWZ5IGNvcHkgYW5kIGRhdGEgZmllbGQgZm9yIHRoZSBzYW1lIHRleHR1cmUnKTtcclxuICAgICAgdmFyIHZpZXdXID0gY29udGV4dFN0YXRlLnZpZXdwb3J0V2lkdGg7XHJcbiAgICAgIHZhciB2aWV3SCA9IGNvbnRleHRTdGF0ZS52aWV3cG9ydEhlaWdodDtcclxuICAgICAgaW1hZ2Uud2lkdGggPSBpbWFnZS53aWR0aCB8fCAodmlld1cgLSBpbWFnZS54T2Zmc2V0KTtcclxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0IHx8ICh2aWV3SCAtIGltYWdlLnlPZmZzZXQpO1xyXG4gICAgICBpbWFnZS5uZWVkc0NvcHkgPSB0cnVlO1xyXG4gICAgICBjaGVjayQxKGltYWdlLnhPZmZzZXQgPj0gMCAmJiBpbWFnZS54T2Zmc2V0IDwgdmlld1cgJiZcclxuICAgICAgICAgICAgaW1hZ2UueU9mZnNldCA+PSAwICYmIGltYWdlLnlPZmZzZXQgPCB2aWV3SCAmJlxyXG4gICAgICAgICAgICBpbWFnZS53aWR0aCA+IDAgJiYgaW1hZ2Uud2lkdGggPD0gdmlld1cgJiZcclxuICAgICAgICAgICAgaW1hZ2UuaGVpZ2h0ID4gMCAmJiBpbWFnZS5oZWlnaHQgPD0gdmlld0gsXHJcbiAgICAgICAgICAgICdjb3B5IHRleHR1cmUgcmVhZCBvdXQgb2YgYm91bmRzJyk7XHJcbiAgICB9IGVsc2UgaWYgKCFkYXRhKSB7XHJcbiAgICAgIGltYWdlLndpZHRoID0gaW1hZ2Uud2lkdGggfHwgMTtcclxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0IHx8IDE7XHJcbiAgICAgIGltYWdlLmNoYW5uZWxzID0gaW1hZ2UuY2hhbm5lbHMgfHwgNDtcclxuICAgIH0gZWxzZSBpZiAoaXNUeXBlZEFycmF5KGRhdGEpKSB7XHJcbiAgICAgIGltYWdlLmNoYW5uZWxzID0gaW1hZ2UuY2hhbm5lbHMgfHwgNDtcclxuICAgICAgaW1hZ2UuZGF0YSA9IGRhdGE7XHJcbiAgICAgIGlmICghKCd0eXBlJyBpbiBvcHRpb25zKSAmJiBpbWFnZS50eXBlID09PSBHTF9VTlNJR05FRF9CWVRFJDUpIHtcclxuICAgICAgICBpbWFnZS50eXBlID0gdHlwZWRBcnJheUNvZGUkMShkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChpc051bWVyaWNBcnJheShkYXRhKSkge1xyXG4gICAgICBpbWFnZS5jaGFubmVscyA9IGltYWdlLmNoYW5uZWxzIHx8IDQ7XHJcbiAgICAgIGNvbnZlcnREYXRhKGltYWdlLCBkYXRhKTtcclxuICAgICAgaW1hZ2UuYWxpZ25tZW50ID0gMTtcclxuICAgICAgaW1hZ2UubmVlZHNGcmVlID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoaXNOREFycmF5TGlrZShkYXRhKSkge1xyXG4gICAgICB2YXIgYXJyYXkgPSBkYXRhLmRhdGE7XHJcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgJiYgaW1hZ2UudHlwZSA9PT0gR0xfVU5TSUdORURfQllURSQ1KSB7XHJcbiAgICAgICAgaW1hZ2UudHlwZSA9IHR5cGVkQXJyYXlDb2RlJDEoYXJyYXkpO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBzaGFwZSA9IGRhdGEuc2hhcGU7XHJcbiAgICAgIHZhciBzdHJpZGUgPSBkYXRhLnN0cmlkZTtcclxuICAgICAgdmFyIHNoYXBlWCwgc2hhcGVZLCBzaGFwZUMsIHN0cmlkZVgsIHN0cmlkZVksIHN0cmlkZUM7XHJcbiAgICAgIGlmIChzaGFwZS5sZW5ndGggPT09IDMpIHtcclxuICAgICAgICBzaGFwZUMgPSBzaGFwZVsyXTtcclxuICAgICAgICBzdHJpZGVDID0gc3RyaWRlWzJdO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNoZWNrJDEoc2hhcGUubGVuZ3RoID09PSAyLCAnaW52YWxpZCBuZGFycmF5IHBpeGVsIGRhdGEsIG11c3QgYmUgMiBvciAzRCcpO1xyXG4gICAgICAgIHNoYXBlQyA9IDE7XHJcbiAgICAgICAgc3RyaWRlQyA9IDE7XHJcbiAgICAgIH1cclxuICAgICAgc2hhcGVYID0gc2hhcGVbMF07XHJcbiAgICAgIHNoYXBlWSA9IHNoYXBlWzFdO1xyXG4gICAgICBzdHJpZGVYID0gc3RyaWRlWzBdO1xyXG4gICAgICBzdHJpZGVZID0gc3RyaWRlWzFdO1xyXG4gICAgICBpbWFnZS5hbGlnbm1lbnQgPSAxO1xyXG4gICAgICBpbWFnZS53aWR0aCA9IHNoYXBlWDtcclxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gc2hhcGVZO1xyXG4gICAgICBpbWFnZS5jaGFubmVscyA9IHNoYXBlQztcclxuICAgICAgaW1hZ2UuZm9ybWF0ID0gaW1hZ2UuaW50ZXJuYWxmb3JtYXQgPSBDSEFOTkVMU19GT1JNQVRbc2hhcGVDXTtcclxuICAgICAgaW1hZ2UubmVlZHNGcmVlID0gdHJ1ZTtcclxuICAgICAgdHJhbnNwb3NlRGF0YShpbWFnZSwgYXJyYXksIHN0cmlkZVgsIHN0cmlkZVksIHN0cmlkZUMsIGRhdGEub2Zmc2V0KTtcclxuICAgIH0gZWxzZSBpZiAoaXNDYW52YXNFbGVtZW50KGRhdGEpIHx8IGlzQ29udGV4dDJEKGRhdGEpKSB7XHJcbiAgICAgIGlmIChpc0NhbnZhc0VsZW1lbnQoZGF0YSkpIHtcclxuICAgICAgICBpbWFnZS5lbGVtZW50ID0gZGF0YTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbWFnZS5lbGVtZW50ID0gZGF0YS5jYW52YXM7XHJcbiAgICAgIH1cclxuICAgICAgaW1hZ2Uud2lkdGggPSBpbWFnZS5lbGVtZW50LndpZHRoO1xyXG4gICAgICBpbWFnZS5oZWlnaHQgPSBpbWFnZS5lbGVtZW50LmhlaWdodDtcclxuICAgICAgaW1hZ2UuY2hhbm5lbHMgPSA0O1xyXG4gICAgfSBlbHNlIGlmIChpc0JpdG1hcChkYXRhKSkge1xyXG4gICAgICBpbWFnZS5lbGVtZW50ID0gZGF0YTtcclxuICAgICAgaW1hZ2Uud2lkdGggPSBkYXRhLndpZHRoO1xyXG4gICAgICBpbWFnZS5oZWlnaHQgPSBkYXRhLmhlaWdodDtcclxuICAgICAgaW1hZ2UuY2hhbm5lbHMgPSA0O1xyXG4gICAgfSBlbHNlIGlmIChpc0ltYWdlRWxlbWVudChkYXRhKSkge1xyXG4gICAgICBpbWFnZS5lbGVtZW50ID0gZGF0YTtcclxuICAgICAgaW1hZ2Uud2lkdGggPSBkYXRhLm5hdHVyYWxXaWR0aDtcclxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZGF0YS5uYXR1cmFsSGVpZ2h0O1xyXG4gICAgICBpbWFnZS5jaGFubmVscyA9IDQ7XHJcbiAgICB9IGVsc2UgaWYgKGlzVmlkZW9FbGVtZW50KGRhdGEpKSB7XHJcbiAgICAgIGltYWdlLmVsZW1lbnQgPSBkYXRhO1xyXG4gICAgICBpbWFnZS53aWR0aCA9IGRhdGEudmlkZW9XaWR0aDtcclxuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZGF0YS52aWRlb0hlaWdodDtcclxuICAgICAgaW1hZ2UuY2hhbm5lbHMgPSA0O1xyXG4gICAgfSBlbHNlIGlmIChpc1JlY3RBcnJheShkYXRhKSkge1xyXG4gICAgICB2YXIgdyA9IGltYWdlLndpZHRoIHx8IGRhdGFbMF0ubGVuZ3RoO1xyXG4gICAgICB2YXIgaCA9IGltYWdlLmhlaWdodCB8fCBkYXRhLmxlbmd0aDtcclxuICAgICAgdmFyIGMgPSBpbWFnZS5jaGFubmVscztcclxuICAgICAgaWYgKGlzQXJyYXlMaWtlKGRhdGFbMF1bMF0pKSB7XHJcbiAgICAgICAgYyA9IGMgfHwgZGF0YVswXVswXS5sZW5ndGg7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYyA9IGMgfHwgMTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgYXJyYXlTaGFwZSA9IGZsYXR0ZW5VdGlscy5zaGFwZShkYXRhKTtcclxuICAgICAgdmFyIG4gPSAxO1xyXG4gICAgICBmb3IgKHZhciBkZCA9IDA7IGRkIDwgYXJyYXlTaGFwZS5sZW5ndGg7ICsrZGQpIHtcclxuICAgICAgICBuICo9IGFycmF5U2hhcGVbZGRdO1xyXG4gICAgICB9XHJcbiAgICAgIHZhciBhbGxvY0RhdGEgPSBwcmVDb252ZXJ0KGltYWdlLCBuKTtcclxuICAgICAgZmxhdHRlblV0aWxzLmZsYXR0ZW4oZGF0YSwgYXJyYXlTaGFwZSwgJycsIGFsbG9jRGF0YSk7XHJcbiAgICAgIHBvc3RDb252ZXJ0KGltYWdlLCBhbGxvY0RhdGEpO1xyXG4gICAgICBpbWFnZS5hbGlnbm1lbnQgPSAxO1xyXG4gICAgICBpbWFnZS53aWR0aCA9IHc7XHJcbiAgICAgIGltYWdlLmhlaWdodCA9IGg7XHJcbiAgICAgIGltYWdlLmNoYW5uZWxzID0gYztcclxuICAgICAgaW1hZ2UuZm9ybWF0ID0gaW1hZ2UuaW50ZXJuYWxmb3JtYXQgPSBDSEFOTkVMU19GT1JNQVRbY107XHJcbiAgICAgIGltYWdlLm5lZWRzRnJlZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGltYWdlLnR5cGUgPT09IEdMX0ZMT0FUJDQpIHtcclxuICAgICAgY2hlY2skMShsaW1pdHMuZXh0ZW5zaW9ucy5pbmRleE9mKCdvZXNfdGV4dHVyZV9mbG9hdCcpID49IDAsXHJcbiAgICAgICAgJ29lc190ZXh0dXJlX2Zsb2F0IGV4dGVuc2lvbiBub3QgZW5hYmxlZCcpO1xyXG4gICAgfSBlbHNlIGlmIChpbWFnZS50eXBlID09PSBHTF9IQUxGX0ZMT0FUX09FUyQxKSB7XHJcbiAgICAgIGNoZWNrJDEobGltaXRzLmV4dGVuc2lvbnMuaW5kZXhPZignb2VzX3RleHR1cmVfaGFsZl9mbG9hdCcpID49IDAsXHJcbiAgICAgICAgJ29lc190ZXh0dXJlX2hhbGZfZmxvYXQgZXh0ZW5zaW9uIG5vdCBlbmFibGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZG8gY29tcHJlc3NlZCB0ZXh0dXJlICB2YWxpZGF0aW9uIGhlcmUuXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzZXRJbWFnZSAoaW5mbywgdGFyZ2V0LCBtaXBsZXZlbCkge1xyXG4gICAgdmFyIGVsZW1lbnQgPSBpbmZvLmVsZW1lbnQ7XHJcbiAgICB2YXIgZGF0YSA9IGluZm8uZGF0YTtcclxuICAgIHZhciBpbnRlcm5hbGZvcm1hdCA9IGluZm8uaW50ZXJuYWxmb3JtYXQ7XHJcbiAgICB2YXIgZm9ybWF0ID0gaW5mby5mb3JtYXQ7XHJcbiAgICB2YXIgdHlwZSA9IGluZm8udHlwZTtcclxuICAgIHZhciB3aWR0aCA9IGluZm8ud2lkdGg7XHJcbiAgICB2YXIgaGVpZ2h0ID0gaW5mby5oZWlnaHQ7XHJcbiAgICB2YXIgY2hhbm5lbHMgPSBpbmZvLmNoYW5uZWxzO1xyXG5cclxuICAgIHNldEZsYWdzKGluZm8pO1xyXG5cclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgIGdsLnRleEltYWdlMkQodGFyZ2V0LCBtaXBsZXZlbCwgZm9ybWF0LCBmb3JtYXQsIHR5cGUsIGVsZW1lbnQpO1xyXG4gICAgfSBlbHNlIGlmIChpbmZvLmNvbXByZXNzZWQpIHtcclxuICAgICAgZ2wuY29tcHJlc3NlZFRleEltYWdlMkQodGFyZ2V0LCBtaXBsZXZlbCwgaW50ZXJuYWxmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGRhdGEpO1xyXG4gICAgfSBlbHNlIGlmIChpbmZvLm5lZWRzQ29weSkge1xyXG4gICAgICByZWdsUG9sbCgpO1xyXG4gICAgICBnbC5jb3B5VGV4SW1hZ2UyRChcclxuICAgICAgICB0YXJnZXQsIG1pcGxldmVsLCBmb3JtYXQsIGluZm8ueE9mZnNldCwgaW5mby55T2Zmc2V0LCB3aWR0aCwgaGVpZ2h0LCAwKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHZhciBudWxsRGF0YSA9ICFkYXRhO1xyXG4gICAgICBpZiAobnVsbERhdGEpIHtcclxuICAgICAgICBkYXRhID0gcG9vbC56ZXJvLmFsbG9jVHlwZSh0eXBlLCB3aWR0aCAqIGhlaWdodCAqIGNoYW5uZWxzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZ2wudGV4SW1hZ2UyRCh0YXJnZXQsIG1pcGxldmVsLCBmb3JtYXQsIHdpZHRoLCBoZWlnaHQsIDAsIGZvcm1hdCwgdHlwZSwgZGF0YSk7XHJcblxyXG4gICAgICBpZiAobnVsbERhdGEgJiYgZGF0YSkge1xyXG4gICAgICAgIHBvb2wuemVyby5mcmVlVHlwZShkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0U3ViSW1hZ2UgKGluZm8sIHRhcmdldCwgeCwgeSwgbWlwbGV2ZWwpIHtcclxuICAgIHZhciBlbGVtZW50ID0gaW5mby5lbGVtZW50O1xyXG4gICAgdmFyIGRhdGEgPSBpbmZvLmRhdGE7XHJcbiAgICB2YXIgaW50ZXJuYWxmb3JtYXQgPSBpbmZvLmludGVybmFsZm9ybWF0O1xyXG4gICAgdmFyIGZvcm1hdCA9IGluZm8uZm9ybWF0O1xyXG4gICAgdmFyIHR5cGUgPSBpbmZvLnR5cGU7XHJcbiAgICB2YXIgd2lkdGggPSBpbmZvLndpZHRoO1xyXG4gICAgdmFyIGhlaWdodCA9IGluZm8uaGVpZ2h0O1xyXG5cclxuICAgIHNldEZsYWdzKGluZm8pO1xyXG5cclxuICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgIGdsLnRleFN1YkltYWdlMkQoXHJcbiAgICAgICAgdGFyZ2V0LCBtaXBsZXZlbCwgeCwgeSwgZm9ybWF0LCB0eXBlLCBlbGVtZW50KTtcclxuICAgIH0gZWxzZSBpZiAoaW5mby5jb21wcmVzc2VkKSB7XHJcbiAgICAgIGdsLmNvbXByZXNzZWRUZXhTdWJJbWFnZTJEKFxyXG4gICAgICAgIHRhcmdldCwgbWlwbGV2ZWwsIHgsIHksIGludGVybmFsZm9ybWF0LCB3aWR0aCwgaGVpZ2h0LCBkYXRhKTtcclxuICAgIH0gZWxzZSBpZiAoaW5mby5uZWVkc0NvcHkpIHtcclxuICAgICAgcmVnbFBvbGwoKTtcclxuICAgICAgZ2wuY29weVRleFN1YkltYWdlMkQoXHJcbiAgICAgICAgdGFyZ2V0LCBtaXBsZXZlbCwgeCwgeSwgaW5mby54T2Zmc2V0LCBpbmZvLnlPZmZzZXQsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ2wudGV4U3ViSW1hZ2UyRChcclxuICAgICAgICB0YXJnZXQsIG1pcGxldmVsLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIHR5cGUsIGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gdGV4SW1hZ2UgcG9vbFxyXG4gIHZhciBpbWFnZVBvb2wgPSBbXTtcclxuXHJcbiAgZnVuY3Rpb24gYWxsb2NJbWFnZSAoKSB7XHJcbiAgICByZXR1cm4gaW1hZ2VQb29sLnBvcCgpIHx8IG5ldyBUZXhJbWFnZSgpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmcmVlSW1hZ2UgKGltYWdlKSB7XHJcbiAgICBpZiAoaW1hZ2UubmVlZHNGcmVlKSB7XHJcbiAgICAgIHBvb2wuZnJlZVR5cGUoaW1hZ2UuZGF0YSk7XHJcbiAgICB9XHJcbiAgICBUZXhJbWFnZS5jYWxsKGltYWdlKTtcclxuICAgIGltYWdlUG9vbC5wdXNoKGltYWdlKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyBNaXAgbWFwXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIGZ1bmN0aW9uIE1pcE1hcCAoKSB7XHJcbiAgICBUZXhGbGFncy5jYWxsKHRoaXMpO1xyXG5cclxuICAgIHRoaXMuZ2VuTWlwbWFwcyA9IGZhbHNlO1xyXG4gICAgdGhpcy5taXBtYXBIaW50ID0gR0xfRE9OVF9DQVJFO1xyXG4gICAgdGhpcy5taXBtYXNrID0gMDtcclxuICAgIHRoaXMuaW1hZ2VzID0gQXJyYXkoMTYpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VNaXBNYXBGcm9tU2hhcGUgKG1pcG1hcCwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgdmFyIGltZyA9IG1pcG1hcC5pbWFnZXNbMF0gPSBhbGxvY0ltYWdlKCk7XHJcbiAgICBtaXBtYXAubWlwbWFzayA9IDE7XHJcbiAgICBpbWcud2lkdGggPSBtaXBtYXAud2lkdGggPSB3aWR0aDtcclxuICAgIGltZy5oZWlnaHQgPSBtaXBtYXAuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgaW1nLmNoYW5uZWxzID0gbWlwbWFwLmNoYW5uZWxzID0gNDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlTWlwTWFwRnJvbU9iamVjdCAobWlwbWFwLCBvcHRpb25zKSB7XHJcbiAgICB2YXIgaW1nRGF0YSA9IG51bGw7XHJcbiAgICBpZiAoaXNQaXhlbERhdGEob3B0aW9ucykpIHtcclxuICAgICAgaW1nRGF0YSA9IG1pcG1hcC5pbWFnZXNbMF0gPSBhbGxvY0ltYWdlKCk7XHJcbiAgICAgIGNvcHlGbGFncyhpbWdEYXRhLCBtaXBtYXApO1xyXG4gICAgICBwYXJzZUltYWdlKGltZ0RhdGEsIG9wdGlvbnMpO1xyXG4gICAgICBtaXBtYXAubWlwbWFzayA9IDE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwYXJzZUZsYWdzKG1pcG1hcCwgb3B0aW9ucyk7XHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMubWlwbWFwKSkge1xyXG4gICAgICAgIHZhciBtaXBEYXRhID0gb3B0aW9ucy5taXBtYXA7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtaXBEYXRhLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICBpbWdEYXRhID0gbWlwbWFwLmltYWdlc1tpXSA9IGFsbG9jSW1hZ2UoKTtcclxuICAgICAgICAgIGNvcHlGbGFncyhpbWdEYXRhLCBtaXBtYXApO1xyXG4gICAgICAgICAgaW1nRGF0YS53aWR0aCA+Pj0gaTtcclxuICAgICAgICAgIGltZ0RhdGEuaGVpZ2h0ID4+PSBpO1xyXG4gICAgICAgICAgcGFyc2VJbWFnZShpbWdEYXRhLCBtaXBEYXRhW2ldKTtcclxuICAgICAgICAgIG1pcG1hcC5taXBtYXNrIHw9ICgxIDw8IGkpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpbWdEYXRhID0gbWlwbWFwLmltYWdlc1swXSA9IGFsbG9jSW1hZ2UoKTtcclxuICAgICAgICBjb3B5RmxhZ3MoaW1nRGF0YSwgbWlwbWFwKTtcclxuICAgICAgICBwYXJzZUltYWdlKGltZ0RhdGEsIG9wdGlvbnMpO1xyXG4gICAgICAgIG1pcG1hcC5taXBtYXNrID0gMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29weUZsYWdzKG1pcG1hcCwgbWlwbWFwLmltYWdlc1swXSk7XHJcblxyXG4gICAgLy8gRm9yIHRleHR1cmVzIG9mIHRoZSBjb21wcmVzc2VkIGZvcm1hdCBXRUJHTF9jb21wcmVzc2VkX3RleHR1cmVfczN0Y1xyXG4gICAgLy8gd2UgbXVzdCBoYXZlIHRoYXRcclxuICAgIC8vXHJcbiAgICAvLyBcIldoZW4gbGV2ZWwgZXF1YWxzIHplcm8gd2lkdGggYW5kIGhlaWdodCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNC5cclxuICAgIC8vIFdoZW4gbGV2ZWwgaXMgZ3JlYXRlciB0aGFuIDAgd2lkdGggYW5kIGhlaWdodCBtdXN0IGJlIDAsIDEsIDIgb3IgYSBtdWx0aXBsZSBvZiA0LiBcIlxyXG4gICAgLy9cclxuICAgIC8vIGJ1dCB3ZSBkbyBub3QgeWV0IHN1cHBvcnQgaGF2aW5nIG11bHRpcGxlIG1pcG1hcCBsZXZlbHMgZm9yIGNvbXByZXNzZWQgdGV4dHVyZXMsXHJcbiAgICAvLyBzbyB3ZSBvbmx5IHRlc3QgZm9yIGxldmVsIHplcm8uXHJcblxyXG4gICAgaWYgKG1pcG1hcC5jb21wcmVzc2VkICYmXHJcbiAgICAgICAgKG1pcG1hcC5pbnRlcm5hbGZvcm1hdCA9PT0gR0xfQ09NUFJFU1NFRF9SR0JfUzNUQ19EWFQxX0VYVCkgfHxcclxuICAgICAgICAobWlwbWFwLmludGVybmFsZm9ybWF0ID09PSBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCkgfHxcclxuICAgICAgICAobWlwbWFwLmludGVybmFsZm9ybWF0ID09PSBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCkgfHxcclxuICAgICAgICAobWlwbWFwLmludGVybmFsZm9ybWF0ID09PSBHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQ1X0VYVCkpIHtcclxuICAgICAgY2hlY2skMShtaXBtYXAud2lkdGggJSA0ID09PSAwICYmXHJcbiAgICAgICAgICAgIG1pcG1hcC5oZWlnaHQgJSA0ID09PSAwLFxyXG4gICAgICAgICAgICAnZm9yIGNvbXByZXNzZWQgdGV4dHVyZSBmb3JtYXRzLCBtaXBtYXAgbGV2ZWwgMCBtdXN0IGhhdmUgd2lkdGggYW5kIGhlaWdodCB0aGF0IGFyZSBhIG11bHRpcGxlIG9mIDQnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNldE1pcE1hcCAobWlwbWFwLCB0YXJnZXQpIHtcclxuICAgIHZhciBpbWFnZXMgPSBtaXBtYXAuaW1hZ2VzO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYgKCFpbWFnZXNbaV0pIHtcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgICBzZXRJbWFnZShpbWFnZXNbaV0sIHRhcmdldCwgaSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgbWlwUG9vbCA9IFtdO1xyXG5cclxuICBmdW5jdGlvbiBhbGxvY01pcE1hcCAoKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gbWlwUG9vbC5wb3AoKSB8fCBuZXcgTWlwTWFwKCk7XHJcbiAgICBUZXhGbGFncy5jYWxsKHJlc3VsdCk7XHJcbiAgICByZXN1bHQubWlwbWFzayA9IDA7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcclxuICAgICAgcmVzdWx0LmltYWdlc1tpXSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmcmVlTWlwTWFwIChtaXBtYXApIHtcclxuICAgIHZhciBpbWFnZXMgPSBtaXBtYXAuaW1hZ2VzO1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbWFnZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgaWYgKGltYWdlc1tpXSkge1xyXG4gICAgICAgIGZyZWVJbWFnZShpbWFnZXNbaV0pO1xyXG4gICAgICB9XHJcbiAgICAgIGltYWdlc1tpXSA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBtaXBQb29sLnB1c2gobWlwbWFwKTtcclxuICB9XHJcblxyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAvLyBUZXggaW5mb1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICBmdW5jdGlvbiBUZXhJbmZvICgpIHtcclxuICAgIHRoaXMubWluRmlsdGVyID0gR0xfTkVBUkVTVCQxO1xyXG4gICAgdGhpcy5tYWdGaWx0ZXIgPSBHTF9ORUFSRVNUJDE7XHJcblxyXG4gICAgdGhpcy53cmFwUyA9IEdMX0NMQU1QX1RPX0VER0UkMTtcclxuICAgIHRoaXMud3JhcFQgPSBHTF9DTEFNUF9UT19FREdFJDE7XHJcblxyXG4gICAgdGhpcy5hbmlzb3Ryb3BpYyA9IDE7XHJcblxyXG4gICAgdGhpcy5nZW5NaXBtYXBzID0gZmFsc2U7XHJcbiAgICB0aGlzLm1pcG1hcEhpbnQgPSBHTF9ET05UX0NBUkU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZVRleEluZm8gKGluZm8sIG9wdGlvbnMpIHtcclxuICAgIGlmICgnbWluJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHZhciBtaW5GaWx0ZXIgPSBvcHRpb25zLm1pbjtcclxuICAgICAgY2hlY2skMS5wYXJhbWV0ZXIobWluRmlsdGVyLCBtaW5GaWx0ZXJzKTtcclxuICAgICAgaW5mby5taW5GaWx0ZXIgPSBtaW5GaWx0ZXJzW21pbkZpbHRlcl07XHJcbiAgICAgIGlmIChNSVBNQVBfRklMVEVSUy5pbmRleE9mKGluZm8ubWluRmlsdGVyKSA+PSAwICYmICEoJ2ZhY2VzJyBpbiBvcHRpb25zKSkge1xyXG4gICAgICAgIGluZm8uZ2VuTWlwbWFwcyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoJ21hZycgaW4gb3B0aW9ucykge1xyXG4gICAgICB2YXIgbWFnRmlsdGVyID0gb3B0aW9ucy5tYWc7XHJcbiAgICAgIGNoZWNrJDEucGFyYW1ldGVyKG1hZ0ZpbHRlciwgbWFnRmlsdGVycyk7XHJcbiAgICAgIGluZm8ubWFnRmlsdGVyID0gbWFnRmlsdGVyc1ttYWdGaWx0ZXJdO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciB3cmFwUyA9IGluZm8ud3JhcFM7XHJcbiAgICB2YXIgd3JhcFQgPSBpbmZvLndyYXBUO1xyXG4gICAgaWYgKCd3cmFwJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHZhciB3cmFwID0gb3B0aW9ucy53cmFwO1xyXG4gICAgICBpZiAodHlwZW9mIHdyYXAgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIod3JhcCwgd3JhcE1vZGVzKTtcclxuICAgICAgICB3cmFwUyA9IHdyYXBUID0gd3JhcE1vZGVzW3dyYXBdO1xyXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkod3JhcCkpIHtcclxuICAgICAgICBjaGVjayQxLnBhcmFtZXRlcih3cmFwWzBdLCB3cmFwTW9kZXMpO1xyXG4gICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKHdyYXBbMV0sIHdyYXBNb2Rlcyk7XHJcbiAgICAgICAgd3JhcFMgPSB3cmFwTW9kZXNbd3JhcFswXV07XHJcbiAgICAgICAgd3JhcFQgPSB3cmFwTW9kZXNbd3JhcFsxXV07XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICgnd3JhcFMnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgb3B0V3JhcFMgPSBvcHRpb25zLndyYXBTO1xyXG4gICAgICAgIGNoZWNrJDEucGFyYW1ldGVyKG9wdFdyYXBTLCB3cmFwTW9kZXMpO1xyXG4gICAgICAgIHdyYXBTID0gd3JhcE1vZGVzW29wdFdyYXBTXTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoJ3dyYXBUJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIG9wdFdyYXBUID0gb3B0aW9ucy53cmFwVDtcclxuICAgICAgICBjaGVjayQxLnBhcmFtZXRlcihvcHRXcmFwVCwgd3JhcE1vZGVzKTtcclxuICAgICAgICB3cmFwVCA9IHdyYXBNb2Rlc1tvcHRXcmFwVF07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGluZm8ud3JhcFMgPSB3cmFwUztcclxuICAgIGluZm8ud3JhcFQgPSB3cmFwVDtcclxuXHJcbiAgICBpZiAoJ2FuaXNvdHJvcGljJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHZhciBhbmlzb3Ryb3BpYyA9IG9wdGlvbnMuYW5pc290cm9waWM7XHJcbiAgICAgIGNoZWNrJDEodHlwZW9mIGFuaXNvdHJvcGljID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICBhbmlzb3Ryb3BpYyA+PSAxICYmIGFuaXNvdHJvcGljIDw9IGxpbWl0cy5tYXhBbmlzb3Ryb3BpYyxcclxuICAgICAgICAnYW5pc28gc2FtcGxlcyBtdXN0IGJlIGJldHdlZW4gMSBhbmQgJyk7XHJcbiAgICAgIGluZm8uYW5pc290cm9waWMgPSBvcHRpb25zLmFuaXNvdHJvcGljO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgnbWlwbWFwJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgIHZhciBoYXNNaXBNYXAgPSBmYWxzZTtcclxuICAgICAgc3dpdGNoICh0eXBlb2Ygb3B0aW9ucy5taXBtYXApIHtcclxuICAgICAgICBjYXNlICdzdHJpbmcnOlxyXG4gICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy5taXBtYXAsIG1pcG1hcEhpbnQsXHJcbiAgICAgICAgICAgICdpbnZhbGlkIG1pcG1hcCBoaW50Jyk7XHJcbiAgICAgICAgICBpbmZvLm1pcG1hcEhpbnQgPSBtaXBtYXBIaW50W29wdGlvbnMubWlwbWFwXTtcclxuICAgICAgICAgIGluZm8uZ2VuTWlwbWFwcyA9IHRydWU7XHJcbiAgICAgICAgICBoYXNNaXBNYXAgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgY2FzZSAnYm9vbGVhbic6XHJcbiAgICAgICAgICBoYXNNaXBNYXAgPSBpbmZvLmdlbk1pcG1hcHMgPSBvcHRpb25zLm1pcG1hcDtcclxuICAgICAgICAgIGJyZWFrXHJcblxyXG4gICAgICAgIGNhc2UgJ29iamVjdCc6XHJcbiAgICAgICAgICBjaGVjayQxKEFycmF5LmlzQXJyYXkob3B0aW9ucy5taXBtYXApLCAnaW52YWxpZCBtaXBtYXAgdHlwZScpO1xyXG4gICAgICAgICAgaW5mby5nZW5NaXBtYXBzID0gZmFsc2U7XHJcbiAgICAgICAgICBoYXNNaXBNYXAgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgbWlwbWFwIHR5cGUnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoaGFzTWlwTWFwICYmICEoJ21pbicgaW4gb3B0aW9ucykpIHtcclxuICAgICAgICBpbmZvLm1pbkZpbHRlciA9IEdMX05FQVJFU1RfTUlQTUFQX05FQVJFU1QkMTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2V0VGV4SW5mbyAoaW5mbywgdGFyZ2V0KSB7XHJcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgR0xfVEVYVFVSRV9NSU5fRklMVEVSLCBpbmZvLm1pbkZpbHRlcik7XHJcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgR0xfVEVYVFVSRV9NQUdfRklMVEVSLCBpbmZvLm1hZ0ZpbHRlcik7XHJcbiAgICBnbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgR0xfVEVYVFVSRV9XUkFQX1MsIGluZm8ud3JhcFMpO1xyXG4gICAgZ2wudGV4UGFyYW1ldGVyaSh0YXJnZXQsIEdMX1RFWFRVUkVfV1JBUF9ULCBpbmZvLndyYXBUKTtcclxuICAgIGlmIChleHRlbnNpb25zLmV4dF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYykge1xyXG4gICAgICBnbC50ZXhQYXJhbWV0ZXJpKHRhcmdldCwgR0xfVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQsIGluZm8uYW5pc290cm9waWMpO1xyXG4gICAgfVxyXG4gICAgaWYgKGluZm8uZ2VuTWlwbWFwcykge1xyXG4gICAgICBnbC5oaW50KEdMX0dFTkVSQVRFX01JUE1BUF9ISU5ULCBpbmZvLm1pcG1hcEhpbnQpO1xyXG4gICAgICBnbC5nZW5lcmF0ZU1pcG1hcCh0YXJnZXQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIEZ1bGwgdGV4dHVyZSBvYmplY3RcclxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgdmFyIHRleHR1cmVDb3VudCA9IDA7XHJcbiAgdmFyIHRleHR1cmVTZXQgPSB7fTtcclxuICB2YXIgbnVtVGV4VW5pdHMgPSBsaW1pdHMubWF4VGV4dHVyZVVuaXRzO1xyXG4gIHZhciB0ZXh0dXJlVW5pdHMgPSBBcnJheShudW1UZXhVbml0cykubWFwKGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBudWxsXHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIFJFR0xUZXh0dXJlICh0YXJnZXQpIHtcclxuICAgIFRleEZsYWdzLmNhbGwodGhpcyk7XHJcbiAgICB0aGlzLm1pcG1hc2sgPSAwO1xyXG4gICAgdGhpcy5pbnRlcm5hbGZvcm1hdCA9IEdMX1JHQkEkMTtcclxuXHJcbiAgICB0aGlzLmlkID0gdGV4dHVyZUNvdW50Kys7XHJcblxyXG4gICAgdGhpcy5yZWZDb3VudCA9IDE7XHJcblxyXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLnRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcblxyXG4gICAgdGhpcy51bml0ID0gLTE7XHJcbiAgICB0aGlzLmJpbmRDb3VudCA9IDA7XHJcblxyXG4gICAgdGhpcy50ZXhJbmZvID0gbmV3IFRleEluZm8oKTtcclxuXHJcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgdGhpcy5zdGF0cyA9IHtzaXplOiAwfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHRlbXBCaW5kICh0ZXh0dXJlKSB7XHJcbiAgICBnbC5hY3RpdmVUZXh0dXJlKEdMX1RFWFRVUkUwJDEpO1xyXG4gICAgZ2wuYmluZFRleHR1cmUodGV4dHVyZS50YXJnZXQsIHRleHR1cmUudGV4dHVyZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB0ZW1wUmVzdG9yZSAoKSB7XHJcbiAgICB2YXIgcHJldiA9IHRleHR1cmVVbml0c1swXTtcclxuICAgIGlmIChwcmV2KSB7XHJcbiAgICAgIGdsLmJpbmRUZXh0dXJlKHByZXYudGFyZ2V0LCBwcmV2LnRleHR1cmUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ2wuYmluZFRleHR1cmUoR0xfVEVYVFVSRV8yRCQxLCBudWxsKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlc3Ryb3kgKHRleHR1cmUpIHtcclxuICAgIHZhciBoYW5kbGUgPSB0ZXh0dXJlLnRleHR1cmU7XHJcbiAgICBjaGVjayQxKGhhbmRsZSwgJ211c3Qgbm90IGRvdWJsZSBkZXN0cm95IHRleHR1cmUnKTtcclxuICAgIHZhciB1bml0ID0gdGV4dHVyZS51bml0O1xyXG4gICAgdmFyIHRhcmdldCA9IHRleHR1cmUudGFyZ2V0O1xyXG4gICAgaWYgKHVuaXQgPj0gMCkge1xyXG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKEdMX1RFWFRVUkUwJDEgKyB1bml0KTtcclxuICAgICAgZ2wuYmluZFRleHR1cmUodGFyZ2V0LCBudWxsKTtcclxuICAgICAgdGV4dHVyZVVuaXRzW3VuaXRdID0gbnVsbDtcclxuICAgIH1cclxuICAgIGdsLmRlbGV0ZVRleHR1cmUoaGFuZGxlKTtcclxuICAgIHRleHR1cmUudGV4dHVyZSA9IG51bGw7XHJcbiAgICB0ZXh0dXJlLnBhcmFtcyA9IG51bGw7XHJcbiAgICB0ZXh0dXJlLnBpeGVscyA9IG51bGw7XHJcbiAgICB0ZXh0dXJlLnJlZkNvdW50ID0gMDtcclxuICAgIGRlbGV0ZSB0ZXh0dXJlU2V0W3RleHR1cmUuaWRdO1xyXG4gICAgc3RhdHMudGV4dHVyZUNvdW50LS07XHJcbiAgfVxyXG5cclxuICBleHRlbmQoUkVHTFRleHR1cmUucHJvdG90eXBlLCB7XHJcbiAgICBiaW5kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciB0ZXh0dXJlID0gdGhpcztcclxuICAgICAgdGV4dHVyZS5iaW5kQ291bnQgKz0gMTtcclxuICAgICAgdmFyIHVuaXQgPSB0ZXh0dXJlLnVuaXQ7XHJcbiAgICAgIGlmICh1bml0IDwgMCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVGV4VW5pdHM7ICsraSkge1xyXG4gICAgICAgICAgdmFyIG90aGVyID0gdGV4dHVyZVVuaXRzW2ldO1xyXG4gICAgICAgICAgaWYgKG90aGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChvdGhlci5iaW5kQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdGhlci51bml0ID0gLTE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0ZXh0dXJlVW5pdHNbaV0gPSB0ZXh0dXJlO1xyXG4gICAgICAgICAgdW5pdCA9IGk7XHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pdCA+PSBudW1UZXhVbml0cykge1xyXG4gICAgICAgICAgY2hlY2skMS5yYWlzZSgnaW5zdWZmaWNpZW50IG51bWJlciBvZiB0ZXh0dXJlIHVuaXRzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb25maWcucHJvZmlsZSAmJiBzdGF0cy5tYXhUZXh0dXJlVW5pdHMgPCAodW5pdCArIDEpKSB7XHJcbiAgICAgICAgICBzdGF0cy5tYXhUZXh0dXJlVW5pdHMgPSB1bml0ICsgMTsgLy8gKzEsIHNpbmNlIHRoZSB1bml0cyBhcmUgemVyby1iYXNlZFxyXG4gICAgICAgIH1cclxuICAgICAgICB0ZXh0dXJlLnVuaXQgPSB1bml0O1xyXG4gICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoR0xfVEVYVFVSRTAkMSArIHVuaXQpO1xyXG4gICAgICAgIGdsLmJpbmRUZXh0dXJlKHRleHR1cmUudGFyZ2V0LCB0ZXh0dXJlLnRleHR1cmUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB1bml0XHJcbiAgICB9LFxyXG5cclxuICAgIHVuYmluZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICB0aGlzLmJpbmRDb3VudCAtPSAxO1xyXG4gICAgfSxcclxuXHJcbiAgICBkZWNSZWY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgaWYgKC0tdGhpcy5yZWZDb3VudCA8PSAwKSB7XHJcbiAgICAgICAgZGVzdHJveSh0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVUZXh0dXJlMkQgKGEsIGIpIHtcclxuICAgIHZhciB0ZXh0dXJlID0gbmV3IFJFR0xUZXh0dXJlKEdMX1RFWFRVUkVfMkQkMSk7XHJcbiAgICB0ZXh0dXJlU2V0W3RleHR1cmUuaWRdID0gdGV4dHVyZTtcclxuICAgIHN0YXRzLnRleHR1cmVDb3VudCsrO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlZ2xUZXh0dXJlMkQgKGEsIGIpIHtcclxuICAgICAgdmFyIHRleEluZm8gPSB0ZXh0dXJlLnRleEluZm87XHJcbiAgICAgIFRleEluZm8uY2FsbCh0ZXhJbmZvKTtcclxuICAgICAgdmFyIG1pcERhdGEgPSBhbGxvY01pcE1hcCgpO1xyXG5cclxuICAgICAgaWYgKHR5cGVvZiBhID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgIHBhcnNlTWlwTWFwRnJvbVNoYXBlKG1pcERhdGEsIGEgfCAwLCBiIHwgMCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBhcnNlTWlwTWFwRnJvbVNoYXBlKG1pcERhdGEsIGEgfCAwLCBhIHwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGEpIHtcclxuICAgICAgICBjaGVjayQxLnR5cGUoYSwgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3VtZW50cyB0byByZWdsLnRleHR1cmUnKTtcclxuICAgICAgICBwYXJzZVRleEluZm8odGV4SW5mbywgYSk7XHJcbiAgICAgICAgcGFyc2VNaXBNYXBGcm9tT2JqZWN0KG1pcERhdGEsIGEpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGVtcHR5IHRleHR1cmVzIGdldCBhc3NpZ25lZCBhIGRlZmF1bHQgc2hhcGUgb2YgMXgxXHJcbiAgICAgICAgcGFyc2VNaXBNYXBGcm9tU2hhcGUobWlwRGF0YSwgMSwgMSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0ZXhJbmZvLmdlbk1pcG1hcHMpIHtcclxuICAgICAgICBtaXBEYXRhLm1pcG1hc2sgPSAobWlwRGF0YS53aWR0aCA8PCAxKSAtIDE7XHJcbiAgICAgIH1cclxuICAgICAgdGV4dHVyZS5taXBtYXNrID0gbWlwRGF0YS5taXBtYXNrO1xyXG5cclxuICAgICAgY29weUZsYWdzKHRleHR1cmUsIG1pcERhdGEpO1xyXG5cclxuICAgICAgY2hlY2skMS50ZXh0dXJlMkQodGV4SW5mbywgbWlwRGF0YSwgbGltaXRzKTtcclxuICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCA9IG1pcERhdGEuaW50ZXJuYWxmb3JtYXQ7XHJcblxyXG4gICAgICByZWdsVGV4dHVyZTJELndpZHRoID0gbWlwRGF0YS53aWR0aDtcclxuICAgICAgcmVnbFRleHR1cmUyRC5oZWlnaHQgPSBtaXBEYXRhLmhlaWdodDtcclxuXHJcbiAgICAgIHRlbXBCaW5kKHRleHR1cmUpO1xyXG4gICAgICBzZXRNaXBNYXAobWlwRGF0YSwgR0xfVEVYVFVSRV8yRCQxKTtcclxuICAgICAgc2V0VGV4SW5mbyh0ZXhJbmZvLCBHTF9URVhUVVJFXzJEJDEpO1xyXG4gICAgICB0ZW1wUmVzdG9yZSgpO1xyXG5cclxuICAgICAgZnJlZU1pcE1hcChtaXBEYXRhKTtcclxuXHJcbiAgICAgIGlmIChjb25maWcucHJvZmlsZSkge1xyXG4gICAgICAgIHRleHR1cmUuc3RhdHMuc2l6ZSA9IGdldFRleHR1cmVTaXplKFxyXG4gICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcclxuICAgICAgICAgIHRleHR1cmUudHlwZSxcclxuICAgICAgICAgIG1pcERhdGEud2lkdGgsXHJcbiAgICAgICAgICBtaXBEYXRhLmhlaWdodCxcclxuICAgICAgICAgIHRleEluZm8uZ2VuTWlwbWFwcyxcclxuICAgICAgICAgIGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgICByZWdsVGV4dHVyZTJELmZvcm1hdCA9IHRleHR1cmVGb3JtYXRzSW52ZXJ0W3RleHR1cmUuaW50ZXJuYWxmb3JtYXRdO1xyXG4gICAgICByZWdsVGV4dHVyZTJELnR5cGUgPSB0ZXh0dXJlVHlwZXNJbnZlcnRbdGV4dHVyZS50eXBlXTtcclxuXHJcbiAgICAgIHJlZ2xUZXh0dXJlMkQubWFnID0gbWFnRmlsdGVyc0ludmVydFt0ZXhJbmZvLm1hZ0ZpbHRlcl07XHJcbiAgICAgIHJlZ2xUZXh0dXJlMkQubWluID0gbWluRmlsdGVyc0ludmVydFt0ZXhJbmZvLm1pbkZpbHRlcl07XHJcblxyXG4gICAgICByZWdsVGV4dHVyZTJELndyYXBTID0gd3JhcE1vZGVzSW52ZXJ0W3RleEluZm8ud3JhcFNdO1xyXG4gICAgICByZWdsVGV4dHVyZTJELndyYXBUID0gd3JhcE1vZGVzSW52ZXJ0W3RleEluZm8ud3JhcFRdO1xyXG5cclxuICAgICAgcmV0dXJuIHJlZ2xUZXh0dXJlMkRcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJpbWFnZSAoaW1hZ2UsIHhfLCB5XywgbGV2ZWxfKSB7XHJcbiAgICAgIGNoZWNrJDEoISFpbWFnZSwgJ211c3Qgc3BlY2lmeSBpbWFnZSBkYXRhJyk7XHJcblxyXG4gICAgICB2YXIgeCA9IHhfIHwgMDtcclxuICAgICAgdmFyIHkgPSB5XyB8IDA7XHJcbiAgICAgIHZhciBsZXZlbCA9IGxldmVsXyB8IDA7XHJcblxyXG4gICAgICB2YXIgaW1hZ2VEYXRhID0gYWxsb2NJbWFnZSgpO1xyXG4gICAgICBjb3B5RmxhZ3MoaW1hZ2VEYXRhLCB0ZXh0dXJlKTtcclxuICAgICAgaW1hZ2VEYXRhLndpZHRoID0gMDtcclxuICAgICAgaW1hZ2VEYXRhLmhlaWdodCA9IDA7XHJcbiAgICAgIHBhcnNlSW1hZ2UoaW1hZ2VEYXRhLCBpbWFnZSk7XHJcbiAgICAgIGltYWdlRGF0YS53aWR0aCA9IGltYWdlRGF0YS53aWR0aCB8fCAoKHRleHR1cmUud2lkdGggPj4gbGV2ZWwpIC0geCk7XHJcbiAgICAgIGltYWdlRGF0YS5oZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0IHx8ICgodGV4dHVyZS5oZWlnaHQgPj4gbGV2ZWwpIC0geSk7XHJcblxyXG4gICAgICBjaGVjayQxKFxyXG4gICAgICAgIHRleHR1cmUudHlwZSA9PT0gaW1hZ2VEYXRhLnR5cGUgJiZcclxuICAgICAgICB0ZXh0dXJlLmZvcm1hdCA9PT0gaW1hZ2VEYXRhLmZvcm1hdCAmJlxyXG4gICAgICAgIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQgPT09IGltYWdlRGF0YS5pbnRlcm5hbGZvcm1hdCxcclxuICAgICAgICAnaW5jb21wYXRpYmxlIGZvcm1hdCBmb3IgdGV4dHVyZS5zdWJpbWFnZScpO1xyXG4gICAgICBjaGVjayQxKFxyXG4gICAgICAgIHggPj0gMCAmJiB5ID49IDAgJiZcclxuICAgICAgICB4ICsgaW1hZ2VEYXRhLndpZHRoIDw9IHRleHR1cmUud2lkdGggJiZcclxuICAgICAgICB5ICsgaW1hZ2VEYXRhLmhlaWdodCA8PSB0ZXh0dXJlLmhlaWdodCxcclxuICAgICAgICAndGV4dHVyZS5zdWJpbWFnZSB3cml0ZSBvdXQgb2YgYm91bmRzJyk7XHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgdGV4dHVyZS5taXBtYXNrICYgKDEgPDwgbGV2ZWwpLFxyXG4gICAgICAgICdtaXNzaW5nIG1pcG1hcCBkYXRhJyk7XHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgaW1hZ2VEYXRhLmRhdGEgfHwgaW1hZ2VEYXRhLmVsZW1lbnQgfHwgaW1hZ2VEYXRhLm5lZWRzQ29weSxcclxuICAgICAgICAnbWlzc2luZyBpbWFnZSBkYXRhJyk7XHJcblxyXG4gICAgICB0ZW1wQmluZCh0ZXh0dXJlKTtcclxuICAgICAgc2V0U3ViSW1hZ2UoaW1hZ2VEYXRhLCBHTF9URVhUVVJFXzJEJDEsIHgsIHksIGxldmVsKTtcclxuICAgICAgdGVtcFJlc3RvcmUoKTtcclxuXHJcbiAgICAgIGZyZWVJbWFnZShpbWFnZURhdGEpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlZ2xUZXh0dXJlMkRcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiByZXNpemUgKHdfLCBoXykge1xyXG4gICAgICB2YXIgdyA9IHdfIHwgMDtcclxuICAgICAgdmFyIGggPSAoaF8gfCAwKSB8fCB3O1xyXG4gICAgICBpZiAodyA9PT0gdGV4dHVyZS53aWR0aCAmJiBoID09PSB0ZXh0dXJlLmhlaWdodCkge1xyXG4gICAgICAgIHJldHVybiByZWdsVGV4dHVyZTJEXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJlZ2xUZXh0dXJlMkQud2lkdGggPSB0ZXh0dXJlLndpZHRoID0gdztcclxuICAgICAgcmVnbFRleHR1cmUyRC5oZWlnaHQgPSB0ZXh0dXJlLmhlaWdodCA9IGg7XHJcblxyXG4gICAgICB0ZW1wQmluZCh0ZXh0dXJlKTtcclxuXHJcbiAgICAgIHZhciBkYXRhO1xyXG4gICAgICB2YXIgY2hhbm5lbHMgPSB0ZXh0dXJlLmNoYW5uZWxzO1xyXG4gICAgICB2YXIgdHlwZSA9IHRleHR1cmUudHlwZTtcclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyB0ZXh0dXJlLm1pcG1hc2sgPj4gaTsgKytpKSB7XHJcbiAgICAgICAgdmFyIF93ID0gdyA+PiBpO1xyXG4gICAgICAgIHZhciBfaCA9IGggPj4gaTtcclxuICAgICAgICBpZiAoIV93IHx8ICFfaCkgYnJlYWtcclxuICAgICAgICBkYXRhID0gcG9vbC56ZXJvLmFsbG9jVHlwZSh0eXBlLCBfdyAqIF9oICogY2hhbm5lbHMpO1xyXG4gICAgICAgIGdsLnRleEltYWdlMkQoXHJcbiAgICAgICAgICBHTF9URVhUVVJFXzJEJDEsXHJcbiAgICAgICAgICBpLFxyXG4gICAgICAgICAgdGV4dHVyZS5mb3JtYXQsXHJcbiAgICAgICAgICBfdyxcclxuICAgICAgICAgIF9oLFxyXG4gICAgICAgICAgMCxcclxuICAgICAgICAgIHRleHR1cmUuZm9ybWF0LFxyXG4gICAgICAgICAgdGV4dHVyZS50eXBlLFxyXG4gICAgICAgICAgZGF0YSk7XHJcbiAgICAgICAgaWYgKGRhdGEpIHBvb2wuemVyby5mcmVlVHlwZShkYXRhKTtcclxuICAgICAgfVxyXG4gICAgICB0ZW1wUmVzdG9yZSgpO1xyXG5cclxuICAgICAgLy8gYWxzbywgcmVjb21wdXRlIHRoZSB0ZXh0dXJlIHNpemUuXHJcbiAgICAgIGlmIChjb25maWcucHJvZmlsZSkge1xyXG4gICAgICAgIHRleHR1cmUuc3RhdHMuc2l6ZSA9IGdldFRleHR1cmVTaXplKFxyXG4gICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcclxuICAgICAgICAgIHRleHR1cmUudHlwZSxcclxuICAgICAgICAgIHcsXHJcbiAgICAgICAgICBoLFxyXG4gICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgICBmYWxzZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZWdsVGV4dHVyZTJEXHJcbiAgICB9XHJcblxyXG4gICAgcmVnbFRleHR1cmUyRChhLCBiKTtcclxuXHJcbiAgICByZWdsVGV4dHVyZTJELnN1YmltYWdlID0gc3ViaW1hZ2U7XHJcbiAgICByZWdsVGV4dHVyZTJELnJlc2l6ZSA9IHJlc2l6ZTtcclxuICAgIHJlZ2xUZXh0dXJlMkQuX3JlZ2xUeXBlID0gJ3RleHR1cmUyZCc7XHJcbiAgICByZWdsVGV4dHVyZTJELl90ZXh0dXJlID0gdGV4dHVyZTtcclxuICAgIGlmIChjb25maWcucHJvZmlsZSkge1xyXG4gICAgICByZWdsVGV4dHVyZTJELnN0YXRzID0gdGV4dHVyZS5zdGF0cztcclxuICAgIH1cclxuICAgIHJlZ2xUZXh0dXJlMkQuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGV4dHVyZS5kZWNSZWYoKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlZ2xUZXh0dXJlMkRcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmVDdWJlIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XHJcbiAgICB2YXIgdGV4dHVyZSA9IG5ldyBSRUdMVGV4dHVyZShHTF9URVhUVVJFX0NVQkVfTUFQJDEpO1xyXG4gICAgdGV4dHVyZVNldFt0ZXh0dXJlLmlkXSA9IHRleHR1cmU7XHJcbiAgICBzdGF0cy5jdWJlQ291bnQrKztcclxuXHJcbiAgICB2YXIgZmFjZXMgPSBuZXcgQXJyYXkoNik7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVnbFRleHR1cmVDdWJlIChhMCwgYTEsIGEyLCBhMywgYTQsIGE1KSB7XHJcbiAgICAgIHZhciBpO1xyXG4gICAgICB2YXIgdGV4SW5mbyA9IHRleHR1cmUudGV4SW5mbztcclxuICAgICAgVGV4SW5mby5jYWxsKHRleEluZm8pO1xyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNjsgKytpKSB7XHJcbiAgICAgICAgZmFjZXNbaV0gPSBhbGxvY01pcE1hcCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGEwID09PSAnbnVtYmVyJyB8fCAhYTApIHtcclxuICAgICAgICB2YXIgcyA9IChhMCB8IDApIHx8IDE7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xyXG4gICAgICAgICAgcGFyc2VNaXBNYXBGcm9tU2hhcGUoZmFjZXNbaV0sIHMsIHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYTAgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGExKSB7XHJcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbMF0sIGEwKTtcclxuICAgICAgICAgIHBhcnNlTWlwTWFwRnJvbU9iamVjdChmYWNlc1sxXSwgYTEpO1xyXG4gICAgICAgICAgcGFyc2VNaXBNYXBGcm9tT2JqZWN0KGZhY2VzWzJdLCBhMik7XHJcbiAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbM10sIGEzKTtcclxuICAgICAgICAgIHBhcnNlTWlwTWFwRnJvbU9iamVjdChmYWNlc1s0XSwgYTQpO1xyXG4gICAgICAgICAgcGFyc2VNaXBNYXBGcm9tT2JqZWN0KGZhY2VzWzVdLCBhNSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBhcnNlVGV4SW5mbyh0ZXhJbmZvLCBhMCk7XHJcbiAgICAgICAgICBwYXJzZUZsYWdzKHRleHR1cmUsIGEwKTtcclxuICAgICAgICAgIGlmICgnZmFjZXMnIGluIGEwKSB7XHJcbiAgICAgICAgICAgIHZhciBmYWNlX2lucHV0ID0gYTAuZmFjZXM7XHJcbiAgICAgICAgICAgIGNoZWNrJDEoQXJyYXkuaXNBcnJheShmYWNlX2lucHV0KSAmJiBmYWNlX2lucHV0Lmxlbmd0aCA9PT0gNixcclxuICAgICAgICAgICAgICAnY3ViZSBmYWNlcyBtdXN0IGJlIGEgbGVuZ3RoIDYgYXJyYXknKTtcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEodHlwZW9mIGZhY2VfaW5wdXRbaV0gPT09ICdvYmplY3QnICYmICEhZmFjZV9pbnB1dFtpXSxcclxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGlucHV0IGZvciBjdWJlIG1hcCBmYWNlJyk7XHJcbiAgICAgICAgICAgICAgY29weUZsYWdzKGZhY2VzW2ldLCB0ZXh0dXJlKTtcclxuICAgICAgICAgICAgICBwYXJzZU1pcE1hcEZyb21PYmplY3QoZmFjZXNbaV0sIGZhY2VfaW5wdXRbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNjsgKytpKSB7XHJcbiAgICAgICAgICAgICAgcGFyc2VNaXBNYXBGcm9tT2JqZWN0KGZhY2VzW2ldLCBhMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hlY2skMS5yYWlzZSgnaW52YWxpZCBhcmd1bWVudHMgdG8gY3ViZSBtYXAnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29weUZsYWdzKHRleHR1cmUsIGZhY2VzWzBdKTtcclxuXHJcbiAgICAgIGlmICghbGltaXRzLm5wb3RUZXh0dXJlQ3ViZSkge1xyXG4gICAgICAgIGNoZWNrJDEoaXNQb3cyJDEodGV4dHVyZS53aWR0aCkgJiYgaXNQb3cyJDEodGV4dHVyZS5oZWlnaHQpLCAneW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgbm9uIHBvd2VyIG9yIHR3byB0ZXh0dXJlIGRpbWVuc2lvbnMnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRleEluZm8uZ2VuTWlwbWFwcykge1xyXG4gICAgICAgIHRleHR1cmUubWlwbWFzayA9IChmYWNlc1swXS53aWR0aCA8PCAxKSAtIDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGV4dHVyZS5taXBtYXNrID0gZmFjZXNbMF0ubWlwbWFzaztcclxuICAgICAgfVxyXG5cclxuICAgICAgY2hlY2skMS50ZXh0dXJlQ3ViZSh0ZXh0dXJlLCB0ZXhJbmZvLCBmYWNlcywgbGltaXRzKTtcclxuICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCA9IGZhY2VzWzBdLmludGVybmFsZm9ybWF0O1xyXG5cclxuICAgICAgcmVnbFRleHR1cmVDdWJlLndpZHRoID0gZmFjZXNbMF0ud2lkdGg7XHJcbiAgICAgIHJlZ2xUZXh0dXJlQ3ViZS5oZWlnaHQgPSBmYWNlc1swXS5oZWlnaHQ7XHJcblxyXG4gICAgICB0ZW1wQmluZCh0ZXh0dXJlKTtcclxuICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xyXG4gICAgICAgIHNldE1pcE1hcChmYWNlc1tpXSwgR0xfVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YJDEgKyBpKTtcclxuICAgICAgfVxyXG4gICAgICBzZXRUZXhJbmZvKHRleEluZm8sIEdMX1RFWFRVUkVfQ1VCRV9NQVAkMSk7XHJcbiAgICAgIHRlbXBSZXN0b3JlKCk7XHJcblxyXG4gICAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgICB0ZXh0dXJlLnN0YXRzLnNpemUgPSBnZXRUZXh0dXJlU2l6ZShcclxuICAgICAgICAgIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQsXHJcbiAgICAgICAgICB0ZXh0dXJlLnR5cGUsXHJcbiAgICAgICAgICByZWdsVGV4dHVyZUN1YmUud2lkdGgsXHJcbiAgICAgICAgICByZWdsVGV4dHVyZUN1YmUuaGVpZ2h0LFxyXG4gICAgICAgICAgdGV4SW5mby5nZW5NaXBtYXBzLFxyXG4gICAgICAgICAgdHJ1ZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJlZ2xUZXh0dXJlQ3ViZS5mb3JtYXQgPSB0ZXh0dXJlRm9ybWF0c0ludmVydFt0ZXh0dXJlLmludGVybmFsZm9ybWF0XTtcclxuICAgICAgcmVnbFRleHR1cmVDdWJlLnR5cGUgPSB0ZXh0dXJlVHlwZXNJbnZlcnRbdGV4dHVyZS50eXBlXTtcclxuXHJcbiAgICAgIHJlZ2xUZXh0dXJlQ3ViZS5tYWcgPSBtYWdGaWx0ZXJzSW52ZXJ0W3RleEluZm8ubWFnRmlsdGVyXTtcclxuICAgICAgcmVnbFRleHR1cmVDdWJlLm1pbiA9IG1pbkZpbHRlcnNJbnZlcnRbdGV4SW5mby5taW5GaWx0ZXJdO1xyXG5cclxuICAgICAgcmVnbFRleHR1cmVDdWJlLndyYXBTID0gd3JhcE1vZGVzSW52ZXJ0W3RleEluZm8ud3JhcFNdO1xyXG4gICAgICByZWdsVGV4dHVyZUN1YmUud3JhcFQgPSB3cmFwTW9kZXNJbnZlcnRbdGV4SW5mby53cmFwVF07XHJcblxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNjsgKytpKSB7XHJcbiAgICAgICAgZnJlZU1pcE1hcChmYWNlc1tpXSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZWdsVGV4dHVyZUN1YmVcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzdWJpbWFnZSAoZmFjZSwgaW1hZ2UsIHhfLCB5XywgbGV2ZWxfKSB7XHJcbiAgICAgIGNoZWNrJDEoISFpbWFnZSwgJ211c3Qgc3BlY2lmeSBpbWFnZSBkYXRhJyk7XHJcbiAgICAgIGNoZWNrJDEodHlwZW9mIGZhY2UgPT09ICdudW1iZXInICYmIGZhY2UgPT09IChmYWNlIHwgMCkgJiZcclxuICAgICAgICBmYWNlID49IDAgJiYgZmFjZSA8IDYsICdpbnZhbGlkIGZhY2UnKTtcclxuXHJcbiAgICAgIHZhciB4ID0geF8gfCAwO1xyXG4gICAgICB2YXIgeSA9IHlfIHwgMDtcclxuICAgICAgdmFyIGxldmVsID0gbGV2ZWxfIHwgMDtcclxuXHJcbiAgICAgIHZhciBpbWFnZURhdGEgPSBhbGxvY0ltYWdlKCk7XHJcbiAgICAgIGNvcHlGbGFncyhpbWFnZURhdGEsIHRleHR1cmUpO1xyXG4gICAgICBpbWFnZURhdGEud2lkdGggPSAwO1xyXG4gICAgICBpbWFnZURhdGEuaGVpZ2h0ID0gMDtcclxuICAgICAgcGFyc2VJbWFnZShpbWFnZURhdGEsIGltYWdlKTtcclxuICAgICAgaW1hZ2VEYXRhLndpZHRoID0gaW1hZ2VEYXRhLndpZHRoIHx8ICgodGV4dHVyZS53aWR0aCA+PiBsZXZlbCkgLSB4KTtcclxuICAgICAgaW1hZ2VEYXRhLmhlaWdodCA9IGltYWdlRGF0YS5oZWlnaHQgfHwgKCh0ZXh0dXJlLmhlaWdodCA+PiBsZXZlbCkgLSB5KTtcclxuXHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgdGV4dHVyZS50eXBlID09PSBpbWFnZURhdGEudHlwZSAmJlxyXG4gICAgICAgIHRleHR1cmUuZm9ybWF0ID09PSBpbWFnZURhdGEuZm9ybWF0ICYmXHJcbiAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCA9PT0gaW1hZ2VEYXRhLmludGVybmFsZm9ybWF0LFxyXG4gICAgICAgICdpbmNvbXBhdGlibGUgZm9ybWF0IGZvciB0ZXh0dXJlLnN1YmltYWdlJyk7XHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgeCA+PSAwICYmIHkgPj0gMCAmJlxyXG4gICAgICAgIHggKyBpbWFnZURhdGEud2lkdGggPD0gdGV4dHVyZS53aWR0aCAmJlxyXG4gICAgICAgIHkgKyBpbWFnZURhdGEuaGVpZ2h0IDw9IHRleHR1cmUuaGVpZ2h0LFxyXG4gICAgICAgICd0ZXh0dXJlLnN1YmltYWdlIHdyaXRlIG91dCBvZiBib3VuZHMnKTtcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICB0ZXh0dXJlLm1pcG1hc2sgJiAoMSA8PCBsZXZlbCksXHJcbiAgICAgICAgJ21pc3NpbmcgbWlwbWFwIGRhdGEnKTtcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICBpbWFnZURhdGEuZGF0YSB8fCBpbWFnZURhdGEuZWxlbWVudCB8fCBpbWFnZURhdGEubmVlZHNDb3B5LFxyXG4gICAgICAgICdtaXNzaW5nIGltYWdlIGRhdGEnKTtcclxuXHJcbiAgICAgIHRlbXBCaW5kKHRleHR1cmUpO1xyXG4gICAgICBzZXRTdWJJbWFnZShpbWFnZURhdGEsIEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQxICsgZmFjZSwgeCwgeSwgbGV2ZWwpO1xyXG4gICAgICB0ZW1wUmVzdG9yZSgpO1xyXG5cclxuICAgICAgZnJlZUltYWdlKGltYWdlRGF0YSk7XHJcblxyXG4gICAgICByZXR1cm4gcmVnbFRleHR1cmVDdWJlXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzaXplIChyYWRpdXNfKSB7XHJcbiAgICAgIHZhciByYWRpdXMgPSByYWRpdXNfIHwgMDtcclxuICAgICAgaWYgKHJhZGl1cyA9PT0gdGV4dHVyZS53aWR0aCkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcblxyXG4gICAgICByZWdsVGV4dHVyZUN1YmUud2lkdGggPSB0ZXh0dXJlLndpZHRoID0gcmFkaXVzO1xyXG4gICAgICByZWdsVGV4dHVyZUN1YmUuaGVpZ2h0ID0gdGV4dHVyZS5oZWlnaHQgPSByYWRpdXM7XHJcblxyXG4gICAgICB0ZW1wQmluZCh0ZXh0dXJlKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyArK2kpIHtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgdGV4dHVyZS5taXBtYXNrID4+IGo7ICsraikge1xyXG4gICAgICAgICAgZ2wudGV4SW1hZ2UyRChcclxuICAgICAgICAgICAgR0xfVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YJDEgKyBpLFxyXG4gICAgICAgICAgICBqLFxyXG4gICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCxcclxuICAgICAgICAgICAgcmFkaXVzID4+IGosXHJcbiAgICAgICAgICAgIHJhZGl1cyA+PiBqLFxyXG4gICAgICAgICAgICAwLFxyXG4gICAgICAgICAgICB0ZXh0dXJlLmZvcm1hdCxcclxuICAgICAgICAgICAgdGV4dHVyZS50eXBlLFxyXG4gICAgICAgICAgICBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdGVtcFJlc3RvcmUoKTtcclxuXHJcbiAgICAgIGlmIChjb25maWcucHJvZmlsZSkge1xyXG4gICAgICAgIHRleHR1cmUuc3RhdHMuc2l6ZSA9IGdldFRleHR1cmVTaXplKFxyXG4gICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcclxuICAgICAgICAgIHRleHR1cmUudHlwZSxcclxuICAgICAgICAgIHJlZ2xUZXh0dXJlQ3ViZS53aWR0aCxcclxuICAgICAgICAgIHJlZ2xUZXh0dXJlQ3ViZS5oZWlnaHQsXHJcbiAgICAgICAgICBmYWxzZSxcclxuICAgICAgICAgIHRydWUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVnbFRleHR1cmVDdWJlXHJcbiAgICB9XHJcblxyXG4gICAgcmVnbFRleHR1cmVDdWJlKGEwLCBhMSwgYTIsIGEzLCBhNCwgYTUpO1xyXG5cclxuICAgIHJlZ2xUZXh0dXJlQ3ViZS5zdWJpbWFnZSA9IHN1YmltYWdlO1xyXG4gICAgcmVnbFRleHR1cmVDdWJlLnJlc2l6ZSA9IHJlc2l6ZTtcclxuICAgIHJlZ2xUZXh0dXJlQ3ViZS5fcmVnbFR5cGUgPSAndGV4dHVyZUN1YmUnO1xyXG4gICAgcmVnbFRleHR1cmVDdWJlLl90ZXh0dXJlID0gdGV4dHVyZTtcclxuICAgIGlmIChjb25maWcucHJvZmlsZSkge1xyXG4gICAgICByZWdsVGV4dHVyZUN1YmUuc3RhdHMgPSB0ZXh0dXJlLnN0YXRzO1xyXG4gICAgfVxyXG4gICAgcmVnbFRleHR1cmVDdWJlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHRleHR1cmUuZGVjUmVmKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiByZWdsVGV4dHVyZUN1YmVcclxuICB9XHJcblxyXG4gIC8vIENhbGxlZCB3aGVuIHJlZ2wgaXMgZGVzdHJveWVkXHJcbiAgZnVuY3Rpb24gZGVzdHJveVRleHR1cmVzICgpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtVGV4VW5pdHM7ICsraSkge1xyXG4gICAgICBnbC5hY3RpdmVUZXh0dXJlKEdMX1RFWFRVUkUwJDEgKyBpKTtcclxuICAgICAgZ2wuYmluZFRleHR1cmUoR0xfVEVYVFVSRV8yRCQxLCBudWxsKTtcclxuICAgICAgdGV4dHVyZVVuaXRzW2ldID0gbnVsbDtcclxuICAgIH1cclxuICAgIHZhbHVlcyh0ZXh0dXJlU2V0KS5mb3JFYWNoKGRlc3Ryb3kpO1xyXG5cclxuICAgIHN0YXRzLmN1YmVDb3VudCA9IDA7XHJcbiAgICBzdGF0cy50ZXh0dXJlQ291bnQgPSAwO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICBzdGF0cy5nZXRUb3RhbFRleHR1cmVTaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgICBPYmplY3Qua2V5cyh0ZXh0dXJlU2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB0b3RhbCArPSB0ZXh0dXJlU2V0W2tleV0uc3RhdHMuc2l6ZTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiB0b3RhbFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc3RvcmVUZXh0dXJlcyAoKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bVRleFVuaXRzOyArK2kpIHtcclxuICAgICAgdmFyIHRleCA9IHRleHR1cmVVbml0c1tpXTtcclxuICAgICAgaWYgKHRleCkge1xyXG4gICAgICAgIHRleC5iaW5kQ291bnQgPSAwO1xyXG4gICAgICAgIHRleC51bml0ID0gLTE7XHJcbiAgICAgICAgdGV4dHVyZVVuaXRzW2ldID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlcyh0ZXh0dXJlU2V0KS5mb3JFYWNoKGZ1bmN0aW9uICh0ZXh0dXJlKSB7XHJcbiAgICAgIHRleHR1cmUudGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgZ2wuYmluZFRleHR1cmUodGV4dHVyZS50YXJnZXQsIHRleHR1cmUudGV4dHVyZSk7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzI7ICsraSkge1xyXG4gICAgICAgIGlmICgodGV4dHVyZS5taXBtYXNrICYgKDEgPDwgaSkpID09PSAwKSB7XHJcbiAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGV4dHVyZS50YXJnZXQgPT09IEdMX1RFWFRVUkVfMkQkMSkge1xyXG4gICAgICAgICAgZ2wudGV4SW1hZ2UyRChHTF9URVhUVVJFXzJEJDEsXHJcbiAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgIHRleHR1cmUuaW50ZXJuYWxmb3JtYXQsXHJcbiAgICAgICAgICAgIHRleHR1cmUud2lkdGggPj4gaSxcclxuICAgICAgICAgICAgdGV4dHVyZS5oZWlnaHQgPj4gaSxcclxuICAgICAgICAgICAgMCxcclxuICAgICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcclxuICAgICAgICAgICAgdGV4dHVyZS50eXBlLFxyXG4gICAgICAgICAgICBudWxsKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA2OyArK2opIHtcclxuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gkMSArIGosXHJcbiAgICAgICAgICAgICAgaSxcclxuICAgICAgICAgICAgICB0ZXh0dXJlLmludGVybmFsZm9ybWF0LFxyXG4gICAgICAgICAgICAgIHRleHR1cmUud2lkdGggPj4gaSxcclxuICAgICAgICAgICAgICB0ZXh0dXJlLmhlaWdodCA+PiBpLFxyXG4gICAgICAgICAgICAgIDAsXHJcbiAgICAgICAgICAgICAgdGV4dHVyZS5pbnRlcm5hbGZvcm1hdCxcclxuICAgICAgICAgICAgICB0ZXh0dXJlLnR5cGUsXHJcbiAgICAgICAgICAgICAgbnVsbCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHNldFRleEluZm8odGV4dHVyZS50ZXhJbmZvLCB0ZXh0dXJlLnRhcmdldCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBjcmVhdGUyRDogY3JlYXRlVGV4dHVyZTJELFxyXG4gICAgY3JlYXRlQ3ViZTogY3JlYXRlVGV4dHVyZUN1YmUsXHJcbiAgICBjbGVhcjogZGVzdHJveVRleHR1cmVzLFxyXG4gICAgZ2V0VGV4dHVyZTogZnVuY3Rpb24gKHdyYXBwZXIpIHtcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH0sXHJcbiAgICByZXN0b3JlOiByZXN0b3JlVGV4dHVyZXNcclxuICB9XHJcbn1cblxudmFyIEdMX1JFTkRFUkJVRkZFUiA9IDB4OEQ0MTtcclxuXHJcbnZhciBHTF9SR0JBNCQxID0gMHg4MDU2O1xyXG52YXIgR0xfUkdCNV9BMSQxID0gMHg4MDU3O1xyXG52YXIgR0xfUkdCNTY1JDEgPSAweDhENjI7XHJcbnZhciBHTF9ERVBUSF9DT01QT05FTlQxNiA9IDB4ODFBNTtcclxudmFyIEdMX1NURU5DSUxfSU5ERVg4ID0gMHg4RDQ4O1xyXG52YXIgR0xfREVQVEhfU1RFTkNJTCQxID0gMHg4NEY5O1xyXG5cclxudmFyIEdMX1NSR0I4X0FMUEhBOF9FWFQgPSAweDhDNDM7XHJcblxyXG52YXIgR0xfUkdCQTMyRl9FWFQgPSAweDg4MTQ7XHJcblxyXG52YXIgR0xfUkdCQTE2Rl9FWFQgPSAweDg4MUE7XHJcbnZhciBHTF9SR0IxNkZfRVhUID0gMHg4ODFCO1xyXG5cclxudmFyIEZPUk1BVF9TSVpFUyA9IFtdO1xyXG5cclxuRk9STUFUX1NJWkVTW0dMX1JHQkE0JDFdID0gMjtcclxuRk9STUFUX1NJWkVTW0dMX1JHQjVfQTEkMV0gPSAyO1xyXG5GT1JNQVRfU0laRVNbR0xfUkdCNTY1JDFdID0gMjtcclxuXHJcbkZPUk1BVF9TSVpFU1tHTF9ERVBUSF9DT01QT05FTlQxNl0gPSAyO1xyXG5GT1JNQVRfU0laRVNbR0xfU1RFTkNJTF9JTkRFWDhdID0gMTtcclxuRk9STUFUX1NJWkVTW0dMX0RFUFRIX1NURU5DSUwkMV0gPSA0O1xyXG5cclxuRk9STUFUX1NJWkVTW0dMX1NSR0I4X0FMUEhBOF9FWFRdID0gNDtcclxuRk9STUFUX1NJWkVTW0dMX1JHQkEzMkZfRVhUXSA9IDE2O1xyXG5GT1JNQVRfU0laRVNbR0xfUkdCQTE2Rl9FWFRdID0gODtcclxuRk9STUFUX1NJWkVTW0dMX1JHQjE2Rl9FWFRdID0gNjtcclxuXHJcbmZ1bmN0aW9uIGdldFJlbmRlcmJ1ZmZlclNpemUgKGZvcm1hdCwgd2lkdGgsIGhlaWdodCkge1xyXG4gIHJldHVybiBGT1JNQVRfU0laRVNbZm9ybWF0XSAqIHdpZHRoICogaGVpZ2h0XHJcbn1cclxuXHJcbnZhciB3cmFwUmVuZGVyYnVmZmVycyA9IGZ1bmN0aW9uIChnbCwgZXh0ZW5zaW9ucywgbGltaXRzLCBzdGF0cywgY29uZmlnKSB7XHJcbiAgdmFyIGZvcm1hdFR5cGVzID0ge1xyXG4gICAgJ3JnYmE0JzogR0xfUkdCQTQkMSxcclxuICAgICdyZ2I1NjUnOiBHTF9SR0I1NjUkMSxcclxuICAgICdyZ2I1IGExJzogR0xfUkdCNV9BMSQxLFxyXG4gICAgJ2RlcHRoJzogR0xfREVQVEhfQ09NUE9ORU5UMTYsXHJcbiAgICAnc3RlbmNpbCc6IEdMX1NURU5DSUxfSU5ERVg4LFxyXG4gICAgJ2RlcHRoIHN0ZW5jaWwnOiBHTF9ERVBUSF9TVEVOQ0lMJDFcclxuICB9O1xyXG5cclxuICBpZiAoZXh0ZW5zaW9ucy5leHRfc3JnYikge1xyXG4gICAgZm9ybWF0VHlwZXNbJ3NyZ2JhJ10gPSBHTF9TUkdCOF9BTFBIQThfRVhUO1xyXG4gIH1cclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMuZXh0X2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0KSB7XHJcbiAgICBmb3JtYXRUeXBlc1sncmdiYTE2ZiddID0gR0xfUkdCQTE2Rl9FWFQ7XHJcbiAgICBmb3JtYXRUeXBlc1sncmdiMTZmJ10gPSBHTF9SR0IxNkZfRVhUO1xyXG4gIH1cclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29sb3JfYnVmZmVyX2Zsb2F0KSB7XHJcbiAgICBmb3JtYXRUeXBlc1sncmdiYTMyZiddID0gR0xfUkdCQTMyRl9FWFQ7XHJcbiAgfVxyXG5cclxuICB2YXIgZm9ybWF0VHlwZXNJbnZlcnQgPSBbXTtcclxuICBPYmplY3Qua2V5cyhmb3JtYXRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICB2YXIgdmFsID0gZm9ybWF0VHlwZXNba2V5XTtcclxuICAgIGZvcm1hdFR5cGVzSW52ZXJ0W3ZhbF0gPSBrZXk7XHJcbiAgfSk7XHJcblxyXG4gIHZhciByZW5kZXJidWZmZXJDb3VudCA9IDA7XHJcbiAgdmFyIHJlbmRlcmJ1ZmZlclNldCA9IHt9O1xyXG5cclxuICBmdW5jdGlvbiBSRUdMUmVuZGVyYnVmZmVyIChyZW5kZXJidWZmZXIpIHtcclxuICAgIHRoaXMuaWQgPSByZW5kZXJidWZmZXJDb3VudCsrO1xyXG4gICAgdGhpcy5yZWZDb3VudCA9IDE7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJidWZmZXIgPSByZW5kZXJidWZmZXI7XHJcblxyXG4gICAgdGhpcy5mb3JtYXQgPSBHTF9SR0JBNCQxO1xyXG4gICAgdGhpcy53aWR0aCA9IDA7XHJcbiAgICB0aGlzLmhlaWdodCA9IDA7XHJcblxyXG4gICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICAgIHRoaXMuc3RhdHMgPSB7c2l6ZTogMH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBSRUdMUmVuZGVyYnVmZmVyLnByb3RvdHlwZS5kZWNSZWYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoLS10aGlzLnJlZkNvdW50IDw9IDApIHtcclxuICAgICAgZGVzdHJveSh0aGlzKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBkZXN0cm95IChyYikge1xyXG4gICAgdmFyIGhhbmRsZSA9IHJiLnJlbmRlcmJ1ZmZlcjtcclxuICAgIGNoZWNrJDEoaGFuZGxlLCAnbXVzdCBub3QgZG91YmxlIGRlc3Ryb3kgcmVuZGVyYnVmZmVyJyk7XHJcbiAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKEdMX1JFTkRFUkJVRkZFUiwgbnVsbCk7XHJcbiAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIoaGFuZGxlKTtcclxuICAgIHJiLnJlbmRlcmJ1ZmZlciA9IG51bGw7XHJcbiAgICByYi5yZWZDb3VudCA9IDA7XHJcbiAgICBkZWxldGUgcmVuZGVyYnVmZmVyU2V0W3JiLmlkXTtcclxuICAgIHN0YXRzLnJlbmRlcmJ1ZmZlckNvdW50LS07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVSZW5kZXJidWZmZXIgKGEsIGIpIHtcclxuICAgIHZhciByZW5kZXJidWZmZXIgPSBuZXcgUkVHTFJlbmRlcmJ1ZmZlcihnbC5jcmVhdGVSZW5kZXJidWZmZXIoKSk7XHJcbiAgICByZW5kZXJidWZmZXJTZXRbcmVuZGVyYnVmZmVyLmlkXSA9IHJlbmRlcmJ1ZmZlcjtcclxuICAgIHN0YXRzLnJlbmRlcmJ1ZmZlckNvdW50Kys7XHJcblxyXG4gICAgZnVuY3Rpb24gcmVnbFJlbmRlcmJ1ZmZlciAoYSwgYikge1xyXG4gICAgICB2YXIgdyA9IDA7XHJcbiAgICAgIHZhciBoID0gMDtcclxuICAgICAgdmFyIGZvcm1hdCA9IEdMX1JHQkE0JDE7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnICYmIGEpIHtcclxuICAgICAgICB2YXIgb3B0aW9ucyA9IGE7XHJcbiAgICAgICAgaWYgKCdzaGFwZScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgdmFyIHNoYXBlID0gb3B0aW9ucy5zaGFwZTtcclxuICAgICAgICAgIGNoZWNrJDEoQXJyYXkuaXNBcnJheShzaGFwZSkgJiYgc2hhcGUubGVuZ3RoID49IDIsXHJcbiAgICAgICAgICAgICdpbnZhbGlkIHJlbmRlcmJ1ZmZlciBzaGFwZScpO1xyXG4gICAgICAgICAgdyA9IHNoYXBlWzBdIHwgMDtcclxuICAgICAgICAgIGggPSBzaGFwZVsxXSB8IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICgncmFkaXVzJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHcgPSBoID0gb3B0aW9ucy5yYWRpdXMgfCAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCd3aWR0aCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICB3ID0gb3B0aW9ucy53aWR0aCB8IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoJ2hlaWdodCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBoID0gb3B0aW9ucy5oZWlnaHQgfCAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoJ2Zvcm1hdCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgY2hlY2skMS5wYXJhbWV0ZXIob3B0aW9ucy5mb3JtYXQsIGZvcm1hdFR5cGVzLFxyXG4gICAgICAgICAgICAnaW52YWxpZCByZW5kZXJidWZmZXIgZm9ybWF0Jyk7XHJcbiAgICAgICAgICBmb3JtYXQgPSBmb3JtYXRUeXBlc1tvcHRpb25zLmZvcm1hdF07XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIHcgPSBhIHwgMDtcclxuICAgICAgICBpZiAodHlwZW9mIGIgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICBoID0gYiB8IDA7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGggPSB3O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICghYSkge1xyXG4gICAgICAgIHcgPSBoID0gMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjaGVjayQxLnJhaXNlKCdpbnZhbGlkIGFyZ3VtZW50cyB0byByZW5kZXJidWZmZXIgY29uc3RydWN0b3InKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gY2hlY2sgc2hhcGVcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICB3ID4gMCAmJiBoID4gMCAmJlxyXG4gICAgICAgIHcgPD0gbGltaXRzLm1heFJlbmRlcmJ1ZmZlclNpemUgJiYgaCA8PSBsaW1pdHMubWF4UmVuZGVyYnVmZmVyU2l6ZSxcclxuICAgICAgICAnaW52YWxpZCByZW5kZXJidWZmZXIgc2l6ZScpO1xyXG5cclxuICAgICAgaWYgKHcgPT09IHJlbmRlcmJ1ZmZlci53aWR0aCAmJlxyXG4gICAgICAgICAgaCA9PT0gcmVuZGVyYnVmZmVyLmhlaWdodCAmJlxyXG4gICAgICAgICAgZm9ybWF0ID09PSByZW5kZXJidWZmZXIuZm9ybWF0KSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJlZ2xSZW5kZXJidWZmZXIud2lkdGggPSByZW5kZXJidWZmZXIud2lkdGggPSB3O1xyXG4gICAgICByZWdsUmVuZGVyYnVmZmVyLmhlaWdodCA9IHJlbmRlcmJ1ZmZlci5oZWlnaHQgPSBoO1xyXG4gICAgICByZW5kZXJidWZmZXIuZm9ybWF0ID0gZm9ybWF0O1xyXG5cclxuICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihHTF9SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlci5yZW5kZXJidWZmZXIpO1xyXG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKEdMX1JFTkRFUkJVRkZFUiwgZm9ybWF0LCB3LCBoKTtcclxuXHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgZ2wuZ2V0RXJyb3IoKSA9PT0gMCxcclxuICAgICAgICAnaW52YWxpZCByZW5kZXIgYnVmZmVyIGZvcm1hdCcpO1xyXG5cclxuICAgICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICAgICAgcmVuZGVyYnVmZmVyLnN0YXRzLnNpemUgPSBnZXRSZW5kZXJidWZmZXJTaXplKHJlbmRlcmJ1ZmZlci5mb3JtYXQsIHJlbmRlcmJ1ZmZlci53aWR0aCwgcmVuZGVyYnVmZmVyLmhlaWdodCk7XHJcbiAgICAgIH1cclxuICAgICAgcmVnbFJlbmRlcmJ1ZmZlci5mb3JtYXQgPSBmb3JtYXRUeXBlc0ludmVydFtyZW5kZXJidWZmZXIuZm9ybWF0XTtcclxuXHJcbiAgICAgIHJldHVybiByZWdsUmVuZGVyYnVmZmVyXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzaXplICh3XywgaF8pIHtcclxuICAgICAgdmFyIHcgPSB3XyB8IDA7XHJcbiAgICAgIHZhciBoID0gKGhfIHwgMCkgfHwgdztcclxuXHJcbiAgICAgIGlmICh3ID09PSByZW5kZXJidWZmZXIud2lkdGggJiYgaCA9PT0gcmVuZGVyYnVmZmVyLmhlaWdodCkge1xyXG4gICAgICAgIHJldHVybiByZWdsUmVuZGVyYnVmZmVyXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGNoZWNrIHNoYXBlXHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgdyA+IDAgJiYgaCA+IDAgJiZcclxuICAgICAgICB3IDw9IGxpbWl0cy5tYXhSZW5kZXJidWZmZXJTaXplICYmIGggPD0gbGltaXRzLm1heFJlbmRlcmJ1ZmZlclNpemUsXHJcbiAgICAgICAgJ2ludmFsaWQgcmVuZGVyYnVmZmVyIHNpemUnKTtcclxuXHJcbiAgICAgIHJlZ2xSZW5kZXJidWZmZXIud2lkdGggPSByZW5kZXJidWZmZXIud2lkdGggPSB3O1xyXG4gICAgICByZWdsUmVuZGVyYnVmZmVyLmhlaWdodCA9IHJlbmRlcmJ1ZmZlci5oZWlnaHQgPSBoO1xyXG5cclxuICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihHTF9SRU5ERVJCVUZGRVIsIHJlbmRlcmJ1ZmZlci5yZW5kZXJidWZmZXIpO1xyXG4gICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKEdMX1JFTkRFUkJVRkZFUiwgcmVuZGVyYnVmZmVyLmZvcm1hdCwgdywgaCk7XHJcblxyXG4gICAgICBjaGVjayQxKFxyXG4gICAgICAgIGdsLmdldEVycm9yKCkgPT09IDAsXHJcbiAgICAgICAgJ2ludmFsaWQgcmVuZGVyIGJ1ZmZlciBmb3JtYXQnKTtcclxuXHJcbiAgICAgIC8vIGFsc28sIHJlY29tcHV0ZSBzaXplLlxyXG4gICAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgICByZW5kZXJidWZmZXIuc3RhdHMuc2l6ZSA9IGdldFJlbmRlcmJ1ZmZlclNpemUoXHJcbiAgICAgICAgICByZW5kZXJidWZmZXIuZm9ybWF0LCByZW5kZXJidWZmZXIud2lkdGgsIHJlbmRlcmJ1ZmZlci5oZWlnaHQpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcmVnbFJlbmRlcmJ1ZmZlclxyXG4gICAgfVxyXG5cclxuICAgIHJlZ2xSZW5kZXJidWZmZXIoYSwgYik7XHJcblxyXG4gICAgcmVnbFJlbmRlcmJ1ZmZlci5yZXNpemUgPSByZXNpemU7XHJcbiAgICByZWdsUmVuZGVyYnVmZmVyLl9yZWdsVHlwZSA9ICdyZW5kZXJidWZmZXInO1xyXG4gICAgcmVnbFJlbmRlcmJ1ZmZlci5fcmVuZGVyYnVmZmVyID0gcmVuZGVyYnVmZmVyO1xyXG4gICAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICAgIHJlZ2xSZW5kZXJidWZmZXIuc3RhdHMgPSByZW5kZXJidWZmZXIuc3RhdHM7XHJcbiAgICB9XHJcbiAgICByZWdsUmVuZGVyYnVmZmVyLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJlbmRlcmJ1ZmZlci5kZWNSZWYoKTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlZ2xSZW5kZXJidWZmZXJcclxuICB9XHJcblxyXG4gIGlmIChjb25maWcucHJvZmlsZSkge1xyXG4gICAgc3RhdHMuZ2V0VG90YWxSZW5kZXJidWZmZXJTaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdG90YWwgPSAwO1xyXG4gICAgICBPYmplY3Qua2V5cyhyZW5kZXJidWZmZXJTZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIHRvdGFsICs9IHJlbmRlcmJ1ZmZlclNldFtrZXldLnN0YXRzLnNpemU7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gdG90YWxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXN0b3JlUmVuZGVyYnVmZmVycyAoKSB7XHJcbiAgICB2YWx1ZXMocmVuZGVyYnVmZmVyU2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChyYikge1xyXG4gICAgICByYi5yZW5kZXJidWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcclxuICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihHTF9SRU5ERVJCVUZGRVIsIHJiLnJlbmRlcmJ1ZmZlcik7XHJcbiAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoR0xfUkVOREVSQlVGRkVSLCByYi5mb3JtYXQsIHJiLndpZHRoLCByYi5oZWlnaHQpO1xyXG4gICAgfSk7XHJcbiAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKEdMX1JFTkRFUkJVRkZFUiwgbnVsbCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY3JlYXRlOiBjcmVhdGVSZW5kZXJidWZmZXIsXHJcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YWx1ZXMocmVuZGVyYnVmZmVyU2V0KS5mb3JFYWNoKGRlc3Ryb3kpO1xyXG4gICAgfSxcclxuICAgIHJlc3RvcmU6IHJlc3RvcmVSZW5kZXJidWZmZXJzXHJcbiAgfVxyXG59O1xuXG4vLyBXZSBzdG9yZSB0aGVzZSBjb25zdGFudHMgc28gdGhhdCB0aGUgbWluaWZpZXIgY2FuIGlubGluZSB0aGVtXHJcbnZhciBHTF9GUkFNRUJVRkZFUiQxID0gMHg4RDQwO1xyXG52YXIgR0xfUkVOREVSQlVGRkVSJDEgPSAweDhENDE7XHJcblxyXG52YXIgR0xfVEVYVFVSRV8yRCQyID0gMHgwREUxO1xyXG52YXIgR0xfVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YJDIgPSAweDg1MTU7XHJcblxyXG52YXIgR0xfQ09MT1JfQVRUQUNITUVOVDAkMSA9IDB4OENFMDtcclxudmFyIEdMX0RFUFRIX0FUVEFDSE1FTlQgPSAweDhEMDA7XHJcbnZhciBHTF9TVEVOQ0lMX0FUVEFDSE1FTlQgPSAweDhEMjA7XHJcbnZhciBHTF9ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQgPSAweDgyMUE7XHJcblxyXG52YXIgR0xfRlJBTUVCVUZGRVJfQ09NUExFVEUkMSA9IDB4OENENTtcclxudmFyIEdMX0ZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVCA9IDB4OENENjtcclxudmFyIEdMX0ZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTUlTU0lOR19BVFRBQ0hNRU5UID0gMHg4Q0Q3O1xyXG52YXIgR0xfRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TID0gMHg4Q0Q5O1xyXG52YXIgR0xfRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQgPSAweDhDREQ7XHJcblxyXG52YXIgR0xfSEFMRl9GTE9BVF9PRVMkMiA9IDB4OEQ2MTtcclxudmFyIEdMX1VOU0lHTkVEX0JZVEUkNiA9IDB4MTQwMTtcclxudmFyIEdMX0ZMT0FUJDUgPSAweDE0MDY7XHJcblxyXG52YXIgR0xfUkdCJDEgPSAweDE5MDc7XHJcbnZhciBHTF9SR0JBJDIgPSAweDE5MDg7XHJcblxyXG52YXIgR0xfREVQVEhfQ09NUE9ORU5UJDEgPSAweDE5MDI7XHJcblxyXG52YXIgY29sb3JUZXh0dXJlRm9ybWF0RW51bXMgPSBbXHJcbiAgR0xfUkdCJDEsXHJcbiAgR0xfUkdCQSQyXHJcbl07XHJcblxyXG4vLyBmb3IgZXZlcnkgdGV4dHVyZSBmb3JtYXQsIHN0b3JlXHJcbi8vIHRoZSBudW1iZXIgb2YgY2hhbm5lbHNcclxudmFyIHRleHR1cmVGb3JtYXRDaGFubmVscyA9IFtdO1xyXG50ZXh0dXJlRm9ybWF0Q2hhbm5lbHNbR0xfUkdCQSQyXSA9IDQ7XHJcbnRleHR1cmVGb3JtYXRDaGFubmVsc1tHTF9SR0IkMV0gPSAzO1xyXG5cclxuLy8gZm9yIGV2ZXJ5IHRleHR1cmUgdHlwZSwgc3RvcmVcclxuLy8gdGhlIHNpemUgaW4gYnl0ZXMuXHJcbnZhciB0ZXh0dXJlVHlwZVNpemVzID0gW107XHJcbnRleHR1cmVUeXBlU2l6ZXNbR0xfVU5TSUdORURfQllURSQ2XSA9IDE7XHJcbnRleHR1cmVUeXBlU2l6ZXNbR0xfRkxPQVQkNV0gPSA0O1xyXG50ZXh0dXJlVHlwZVNpemVzW0dMX0hBTEZfRkxPQVRfT0VTJDJdID0gMjtcclxuXHJcbnZhciBHTF9SR0JBNCQyID0gMHg4MDU2O1xyXG52YXIgR0xfUkdCNV9BMSQyID0gMHg4MDU3O1xyXG52YXIgR0xfUkdCNTY1JDIgPSAweDhENjI7XHJcbnZhciBHTF9ERVBUSF9DT01QT05FTlQxNiQxID0gMHg4MUE1O1xyXG52YXIgR0xfU1RFTkNJTF9JTkRFWDgkMSA9IDB4OEQ0ODtcclxudmFyIEdMX0RFUFRIX1NURU5DSUwkMiA9IDB4ODRGOTtcclxuXHJcbnZhciBHTF9TUkdCOF9BTFBIQThfRVhUJDEgPSAweDhDNDM7XHJcblxyXG52YXIgR0xfUkdCQTMyRl9FWFQkMSA9IDB4ODgxNDtcclxuXHJcbnZhciBHTF9SR0JBMTZGX0VYVCQxID0gMHg4ODFBO1xyXG52YXIgR0xfUkdCMTZGX0VYVCQxID0gMHg4ODFCO1xyXG5cclxudmFyIGNvbG9yUmVuZGVyYnVmZmVyRm9ybWF0RW51bXMgPSBbXHJcbiAgR0xfUkdCQTQkMixcclxuICBHTF9SR0I1X0ExJDIsXHJcbiAgR0xfUkdCNTY1JDIsXHJcbiAgR0xfU1JHQjhfQUxQSEE4X0VYVCQxLFxyXG4gIEdMX1JHQkExNkZfRVhUJDEsXHJcbiAgR0xfUkdCMTZGX0VYVCQxLFxyXG4gIEdMX1JHQkEzMkZfRVhUJDFcclxuXTtcclxuXHJcbnZhciBzdGF0dXNDb2RlID0ge307XHJcbnN0YXR1c0NvZGVbR0xfRlJBTUVCVUZGRVJfQ09NUExFVEUkMV0gPSAnY29tcGxldGUnO1xyXG5zdGF0dXNDb2RlW0dMX0ZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVF0gPSAnaW5jb21wbGV0ZSBhdHRhY2htZW50Jztcclxuc3RhdHVzQ29kZVtHTF9GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlNdID0gJ2luY29tcGxldGUgZGltZW5zaW9ucyc7XHJcbnN0YXR1c0NvZGVbR0xfRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlRdID0gJ2luY29tcGxldGUsIG1pc3NpbmcgYXR0YWNobWVudCc7XHJcbnN0YXR1c0NvZGVbR0xfRlJBTUVCVUZGRVJfVU5TVVBQT1JURURdID0gJ3Vuc3VwcG9ydGVkJztcclxuXHJcbmZ1bmN0aW9uIHdyYXBGQk9TdGF0ZSAoXHJcbiAgZ2wsXHJcbiAgZXh0ZW5zaW9ucyxcclxuICBsaW1pdHMsXHJcbiAgdGV4dHVyZVN0YXRlLFxyXG4gIHJlbmRlcmJ1ZmZlclN0YXRlLFxyXG4gIHN0YXRzKSB7XHJcbiAgdmFyIGZyYW1lYnVmZmVyU3RhdGUgPSB7XHJcbiAgICBjdXI6IG51bGwsXHJcbiAgICBuZXh0OiBudWxsLFxyXG4gICAgZGlydHk6IGZhbHNlLFxyXG4gICAgc2V0RkJPOiBudWxsXHJcbiAgfTtcclxuXHJcbiAgdmFyIGNvbG9yVGV4dHVyZUZvcm1hdHMgPSBbJ3JnYmEnXTtcclxuICB2YXIgY29sb3JSZW5kZXJidWZmZXJGb3JtYXRzID0gWydyZ2JhNCcsICdyZ2I1NjUnLCAncmdiNSBhMSddO1xyXG5cclxuICBpZiAoZXh0ZW5zaW9ucy5leHRfc3JnYikge1xyXG4gICAgY29sb3JSZW5kZXJidWZmZXJGb3JtYXRzLnB1c2goJ3NyZ2JhJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoZXh0ZW5zaW9ucy5leHRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQpIHtcclxuICAgIGNvbG9yUmVuZGVyYnVmZmVyRm9ybWF0cy5wdXNoKCdyZ2JhMTZmJywgJ3JnYjE2ZicpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGV4dGVuc2lvbnMud2ViZ2xfY29sb3JfYnVmZmVyX2Zsb2F0KSB7XHJcbiAgICBjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdHMucHVzaCgncmdiYTMyZicpO1xyXG4gIH1cclxuXHJcbiAgdmFyIGNvbG9yVHlwZXMgPSBbJ3VpbnQ4J107XHJcbiAgaWYgKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfaGFsZl9mbG9hdCkge1xyXG4gICAgY29sb3JUeXBlcy5wdXNoKCdoYWxmIGZsb2F0JywgJ2Zsb2F0MTYnKTtcclxuICB9XHJcbiAgaWYgKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfZmxvYXQpIHtcclxuICAgIGNvbG9yVHlwZXMucHVzaCgnZmxvYXQnLCAnZmxvYXQzMicpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gRnJhbWVidWZmZXJBdHRhY2htZW50ICh0YXJnZXQsIHRleHR1cmUsIHJlbmRlcmJ1ZmZlcikge1xyXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xyXG4gICAgdGhpcy5yZW5kZXJidWZmZXIgPSByZW5kZXJidWZmZXI7XHJcblxyXG4gICAgdmFyIHcgPSAwO1xyXG4gICAgdmFyIGggPSAwO1xyXG4gICAgaWYgKHRleHR1cmUpIHtcclxuICAgICAgdyA9IHRleHR1cmUud2lkdGg7XHJcbiAgICAgIGggPSB0ZXh0dXJlLmhlaWdodDtcclxuICAgIH0gZWxzZSBpZiAocmVuZGVyYnVmZmVyKSB7XHJcbiAgICAgIHcgPSByZW5kZXJidWZmZXIud2lkdGg7XHJcbiAgICAgIGggPSByZW5kZXJidWZmZXIuaGVpZ2h0O1xyXG4gICAgfVxyXG4gICAgdGhpcy53aWR0aCA9IHc7XHJcbiAgICB0aGlzLmhlaWdodCA9IGg7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZWNSZWYgKGF0dGFjaG1lbnQpIHtcclxuICAgIGlmIChhdHRhY2htZW50KSB7XHJcbiAgICAgIGlmIChhdHRhY2htZW50LnRleHR1cmUpIHtcclxuICAgICAgICBhdHRhY2htZW50LnRleHR1cmUuX3RleHR1cmUuZGVjUmVmKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGF0dGFjaG1lbnQucmVuZGVyYnVmZmVyKSB7XHJcbiAgICAgICAgYXR0YWNobWVudC5yZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlci5kZWNSZWYoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaW5jUmVmQW5kQ2hlY2tTaGFwZSAoYXR0YWNobWVudCwgd2lkdGgsIGhlaWdodCkge1xyXG4gICAgaWYgKCFhdHRhY2htZW50KSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgaWYgKGF0dGFjaG1lbnQudGV4dHVyZSkge1xyXG4gICAgICB2YXIgdGV4dHVyZSA9IGF0dGFjaG1lbnQudGV4dHVyZS5fdGV4dHVyZTtcclxuICAgICAgdmFyIHR3ID0gTWF0aC5tYXgoMSwgdGV4dHVyZS53aWR0aCk7XHJcbiAgICAgIHZhciB0aCA9IE1hdGgubWF4KDEsIHRleHR1cmUuaGVpZ2h0KTtcclxuICAgICAgY2hlY2skMSh0dyA9PT0gd2lkdGggJiYgdGggPT09IGhlaWdodCxcclxuICAgICAgICAnaW5jb25zaXN0ZW50IHdpZHRoL2hlaWdodCBmb3Igc3VwcGxpZWQgdGV4dHVyZScpO1xyXG4gICAgICB0ZXh0dXJlLnJlZkNvdW50ICs9IDE7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgcmVuZGVyYnVmZmVyID0gYXR0YWNobWVudC5yZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlcjtcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICByZW5kZXJidWZmZXIud2lkdGggPT09IHdpZHRoICYmIHJlbmRlcmJ1ZmZlci5oZWlnaHQgPT09IGhlaWdodCxcclxuICAgICAgICAnaW5jb25zaXN0ZW50IHdpZHRoL2hlaWdodCBmb3IgcmVuZGVyYnVmZmVyJyk7XHJcbiAgICAgIHJlbmRlcmJ1ZmZlci5yZWZDb3VudCArPSAxO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXR0YWNoIChsb2NhdGlvbiwgYXR0YWNobWVudCkge1xyXG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcclxuICAgICAgaWYgKGF0dGFjaG1lbnQudGV4dHVyZSkge1xyXG4gICAgICAgIGdsLmZyYW1lYnVmZmVyVGV4dHVyZTJEKFxyXG4gICAgICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcclxuICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgYXR0YWNobWVudC50YXJnZXQsXHJcbiAgICAgICAgICBhdHRhY2htZW50LnRleHR1cmUuX3RleHR1cmUudGV4dHVyZSxcclxuICAgICAgICAgIDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGdsLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKFxyXG4gICAgICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcclxuICAgICAgICAgIGxvY2F0aW9uLFxyXG4gICAgICAgICAgR0xfUkVOREVSQlVGRkVSJDEsXHJcbiAgICAgICAgICBhdHRhY2htZW50LnJlbmRlcmJ1ZmZlci5fcmVuZGVyYnVmZmVyLnJlbmRlcmJ1ZmZlcik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlQXR0YWNobWVudCAoYXR0YWNobWVudCkge1xyXG4gICAgdmFyIHRhcmdldCA9IEdMX1RFWFRVUkVfMkQkMjtcclxuICAgIHZhciB0ZXh0dXJlID0gbnVsbDtcclxuICAgIHZhciByZW5kZXJidWZmZXIgPSBudWxsO1xyXG5cclxuICAgIHZhciBkYXRhID0gYXR0YWNobWVudDtcclxuICAgIGlmICh0eXBlb2YgYXR0YWNobWVudCA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgZGF0YSA9IGF0dGFjaG1lbnQuZGF0YTtcclxuICAgICAgaWYgKCd0YXJnZXQnIGluIGF0dGFjaG1lbnQpIHtcclxuICAgICAgICB0YXJnZXQgPSBhdHRhY2htZW50LnRhcmdldCB8IDA7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVjayQxLnR5cGUoZGF0YSwgJ2Z1bmN0aW9uJywgJ2ludmFsaWQgYXR0YWNobWVudCBkYXRhJyk7XHJcblxyXG4gICAgdmFyIHR5cGUgPSBkYXRhLl9yZWdsVHlwZTtcclxuICAgIGlmICh0eXBlID09PSAndGV4dHVyZTJkJykge1xyXG4gICAgICB0ZXh0dXJlID0gZGF0YTtcclxuICAgICAgY2hlY2skMSh0YXJnZXQgPT09IEdMX1RFWFRVUkVfMkQkMik7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd0ZXh0dXJlQ3ViZScpIHtcclxuICAgICAgdGV4dHVyZSA9IGRhdGE7XHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgdGFyZ2V0ID49IEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQyICYmXHJcbiAgICAgICAgdGFyZ2V0IDwgR0xfVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YJDIgKyA2LFxyXG4gICAgICAgICdpbnZhbGlkIGN1YmUgbWFwIHRhcmdldCcpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVuZGVyYnVmZmVyJykge1xyXG4gICAgICByZW5kZXJidWZmZXIgPSBkYXRhO1xyXG4gICAgICB0YXJnZXQgPSBHTF9SRU5ERVJCVUZGRVIkMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgcmVnbCBvYmplY3QgZm9yIGF0dGFjaG1lbnQnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbmV3IEZyYW1lYnVmZmVyQXR0YWNobWVudCh0YXJnZXQsIHRleHR1cmUsIHJlbmRlcmJ1ZmZlcilcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGFsbG9jQXR0YWNobWVudCAoXHJcbiAgICB3aWR0aCxcclxuICAgIGhlaWdodCxcclxuICAgIGlzVGV4dHVyZSxcclxuICAgIGZvcm1hdCxcclxuICAgIHR5cGUpIHtcclxuICAgIGlmIChpc1RleHR1cmUpIHtcclxuICAgICAgdmFyIHRleHR1cmUgPSB0ZXh0dXJlU3RhdGUuY3JlYXRlMkQoe1xyXG4gICAgICAgIHdpZHRoOiB3aWR0aCxcclxuICAgICAgICBoZWlnaHQ6IGhlaWdodCxcclxuICAgICAgICBmb3JtYXQ6IGZvcm1hdCxcclxuICAgICAgICB0eXBlOiB0eXBlXHJcbiAgICAgIH0pO1xyXG4gICAgICB0ZXh0dXJlLl90ZXh0dXJlLnJlZkNvdW50ID0gMDtcclxuICAgICAgcmV0dXJuIG5ldyBGcmFtZWJ1ZmZlckF0dGFjaG1lbnQoR0xfVEVYVFVSRV8yRCQyLCB0ZXh0dXJlLCBudWxsKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFyIHJiID0gcmVuZGVyYnVmZmVyU3RhdGUuY3JlYXRlKHtcclxuICAgICAgICB3aWR0aDogd2lkdGgsXHJcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcbiAgICAgICAgZm9ybWF0OiBmb3JtYXRcclxuICAgICAgfSk7XHJcbiAgICAgIHJiLl9yZW5kZXJidWZmZXIucmVmQ291bnQgPSAwO1xyXG4gICAgICByZXR1cm4gbmV3IEZyYW1lYnVmZmVyQXR0YWNobWVudChHTF9SRU5ERVJCVUZGRVIkMSwgbnVsbCwgcmIpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiB1bndyYXBBdHRhY2htZW50IChhdHRhY2htZW50KSB7XHJcbiAgICByZXR1cm4gYXR0YWNobWVudCAmJiAoYXR0YWNobWVudC50ZXh0dXJlIHx8IGF0dGFjaG1lbnQucmVuZGVyYnVmZmVyKVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVzaXplQXR0YWNobWVudCAoYXR0YWNobWVudCwgdywgaCkge1xyXG4gICAgaWYgKGF0dGFjaG1lbnQpIHtcclxuICAgICAgaWYgKGF0dGFjaG1lbnQudGV4dHVyZSkge1xyXG4gICAgICAgIGF0dGFjaG1lbnQudGV4dHVyZS5yZXNpemUodywgaCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoYXR0YWNobWVudC5yZW5kZXJidWZmZXIpIHtcclxuICAgICAgICBhdHRhY2htZW50LnJlbmRlcmJ1ZmZlci5yZXNpemUodywgaCk7XHJcbiAgICAgIH1cclxuICAgICAgYXR0YWNobWVudC53aWR0aCA9IHc7XHJcbiAgICAgIGF0dGFjaG1lbnQuaGVpZ2h0ID0gaDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBmcmFtZWJ1ZmZlckNvdW50ID0gMDtcclxuICB2YXIgZnJhbWVidWZmZXJTZXQgPSB7fTtcclxuXHJcbiAgZnVuY3Rpb24gUkVHTEZyYW1lYnVmZmVyICgpIHtcclxuICAgIHRoaXMuaWQgPSBmcmFtZWJ1ZmZlckNvdW50Kys7XHJcbiAgICBmcmFtZWJ1ZmZlclNldFt0aGlzLmlkXSA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgICB0aGlzLndpZHRoID0gMDtcclxuICAgIHRoaXMuaGVpZ2h0ID0gMDtcclxuXHJcbiAgICB0aGlzLmNvbG9yQXR0YWNobWVudHMgPSBbXTtcclxuICAgIHRoaXMuZGVwdGhBdHRhY2htZW50ID0gbnVsbDtcclxuICAgIHRoaXMuc3RlbmNpbEF0dGFjaG1lbnQgPSBudWxsO1xyXG4gICAgdGhpcy5kZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gbnVsbDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlY0ZCT1JlZnMgKGZyYW1lYnVmZmVyKSB7XHJcbiAgICBmcmFtZWJ1ZmZlci5jb2xvckF0dGFjaG1lbnRzLmZvckVhY2goZGVjUmVmKTtcclxuICAgIGRlY1JlZihmcmFtZWJ1ZmZlci5kZXB0aEF0dGFjaG1lbnQpO1xyXG4gICAgZGVjUmVmKGZyYW1lYnVmZmVyLnN0ZW5jaWxBdHRhY2htZW50KTtcclxuICAgIGRlY1JlZihmcmFtZWJ1ZmZlci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGRlc3Ryb3kgKGZyYW1lYnVmZmVyKSB7XHJcbiAgICB2YXIgaGFuZGxlID0gZnJhbWVidWZmZXIuZnJhbWVidWZmZXI7XHJcbiAgICBjaGVjayQxKGhhbmRsZSwgJ211c3Qgbm90IGRvdWJsZSBkZXN0cm95IGZyYW1lYnVmZmVyJyk7XHJcbiAgICBnbC5kZWxldGVGcmFtZWJ1ZmZlcihoYW5kbGUpO1xyXG4gICAgZnJhbWVidWZmZXIuZnJhbWVidWZmZXIgPSBudWxsO1xyXG4gICAgc3RhdHMuZnJhbWVidWZmZXJDb3VudC0tO1xyXG4gICAgZGVsZXRlIGZyYW1lYnVmZmVyU2V0W2ZyYW1lYnVmZmVyLmlkXTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYW1lYnVmZmVyIChmcmFtZWJ1ZmZlcikge1xyXG4gICAgdmFyIGk7XHJcblxyXG4gICAgZ2wuYmluZEZyYW1lYnVmZmVyKEdMX0ZSQU1FQlVGRkVSJDEsIGZyYW1lYnVmZmVyLmZyYW1lYnVmZmVyKTtcclxuICAgIHZhciBjb2xvckF0dGFjaG1lbnRzID0gZnJhbWVidWZmZXIuY29sb3JBdHRhY2htZW50cztcclxuICAgIGZvciAoaSA9IDA7IGkgPCBjb2xvckF0dGFjaG1lbnRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGF0dGFjaChHTF9DT0xPUl9BVFRBQ0hNRU5UMCQxICsgaSwgY29sb3JBdHRhY2htZW50c1tpXSk7XHJcbiAgICB9XHJcbiAgICBmb3IgKGkgPSBjb2xvckF0dGFjaG1lbnRzLmxlbmd0aDsgaSA8IGxpbWl0cy5tYXhDb2xvckF0dGFjaG1lbnRzOyArK2kpIHtcclxuICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXHJcbiAgICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcclxuICAgICAgICBHTF9DT0xPUl9BVFRBQ0hNRU5UMCQxICsgaSxcclxuICAgICAgICBHTF9URVhUVVJFXzJEJDIsXHJcbiAgICAgICAgbnVsbCxcclxuICAgICAgICAwKTtcclxuICAgIH1cclxuXHJcbiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcclxuICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcclxuICAgICAgR0xfREVQVEhfU1RFTkNJTF9BVFRBQ0hNRU5ULFxyXG4gICAgICBHTF9URVhUVVJFXzJEJDIsXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIDApO1xyXG4gICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoXHJcbiAgICAgIEdMX0ZSQU1FQlVGRkVSJDEsXHJcbiAgICAgIEdMX0RFUFRIX0FUVEFDSE1FTlQsXHJcbiAgICAgIEdMX1RFWFRVUkVfMkQkMixcclxuICAgICAgbnVsbCxcclxuICAgICAgMCk7XHJcbiAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChcclxuICAgICAgR0xfRlJBTUVCVUZGRVIkMSxcclxuICAgICAgR0xfU1RFTkNJTF9BVFRBQ0hNRU5ULFxyXG4gICAgICBHTF9URVhUVVJFXzJEJDIsXHJcbiAgICAgIG51bGwsXHJcbiAgICAgIDApO1xyXG5cclxuICAgIGF0dGFjaChHTF9ERVBUSF9BVFRBQ0hNRU5ULCBmcmFtZWJ1ZmZlci5kZXB0aEF0dGFjaG1lbnQpO1xyXG4gICAgYXR0YWNoKEdMX1NURU5DSUxfQVRUQUNITUVOVCwgZnJhbWVidWZmZXIuc3RlbmNpbEF0dGFjaG1lbnQpO1xyXG4gICAgYXR0YWNoKEdMX0RFUFRIX1NURU5DSUxfQVRUQUNITUVOVCwgZnJhbWVidWZmZXIuZGVwdGhTdGVuY2lsQXR0YWNobWVudCk7XHJcblxyXG4gICAgLy8gQ2hlY2sgc3RhdHVzIGNvZGVcclxuICAgIHZhciBzdGF0dXMgPSBnbC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKEdMX0ZSQU1FQlVGRkVSJDEpO1xyXG4gICAgaWYgKCFnbC5pc0NvbnRleHRMb3N0KCkgJiYgc3RhdHVzICE9PSBHTF9GUkFNRUJVRkZFUl9DT01QTEVURSQxKSB7XHJcbiAgICAgIGNoZWNrJDEucmFpc2UoJ2ZyYW1lYnVmZmVyIGNvbmZpZ3VyYXRpb24gbm90IHN1cHBvcnRlZCwgc3RhdHVzID0gJyArXHJcbiAgICAgICAgc3RhdHVzQ29kZVtzdGF0dXNdKTtcclxuICAgIH1cclxuXHJcbiAgICBnbC5iaW5kRnJhbWVidWZmZXIoR0xfRlJBTUVCVUZGRVIkMSwgZnJhbWVidWZmZXJTdGF0ZS5uZXh0ID8gZnJhbWVidWZmZXJTdGF0ZS5uZXh0LmZyYW1lYnVmZmVyIDogbnVsbCk7XHJcbiAgICBmcmFtZWJ1ZmZlclN0YXRlLmN1ciA9IGZyYW1lYnVmZmVyU3RhdGUubmV4dDtcclxuXHJcbiAgICAvLyBGSVhNRTogQ2xlYXIgZXJyb3IgY29kZSBoZXJlLiAgVGhpcyBpcyBhIHdvcmsgYXJvdW5kIGZvciBhIGJ1ZyBpblxyXG4gICAgLy8gaGVhZGxlc3MtZ2xcclxuICAgIGdsLmdldEVycm9yKCk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVGQk8gKGEwLCBhMSkge1xyXG4gICAgdmFyIGZyYW1lYnVmZmVyID0gbmV3IFJFR0xGcmFtZWJ1ZmZlcigpO1xyXG4gICAgc3RhdHMuZnJhbWVidWZmZXJDb3VudCsrO1xyXG5cclxuICAgIGZ1bmN0aW9uIHJlZ2xGcmFtZWJ1ZmZlciAoYSwgYikge1xyXG4gICAgICB2YXIgaTtcclxuXHJcbiAgICAgIGNoZWNrJDEoZnJhbWVidWZmZXJTdGF0ZS5uZXh0ICE9PSBmcmFtZWJ1ZmZlcixcclxuICAgICAgICAnY2FuIG5vdCB1cGRhdGUgZnJhbWVidWZmZXIgd2hpY2ggaXMgY3VycmVudGx5IGluIHVzZScpO1xyXG5cclxuICAgICAgdmFyIHdpZHRoID0gMDtcclxuICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICB2YXIgbmVlZHNEZXB0aCA9IHRydWU7XHJcbiAgICAgIHZhciBuZWVkc1N0ZW5jaWwgPSB0cnVlO1xyXG5cclxuICAgICAgdmFyIGNvbG9yQnVmZmVyID0gbnVsbDtcclxuICAgICAgdmFyIGNvbG9yVGV4dHVyZSA9IHRydWU7XHJcbiAgICAgIHZhciBjb2xvckZvcm1hdCA9ICdyZ2JhJztcclxuICAgICAgdmFyIGNvbG9yVHlwZSA9ICd1aW50OCc7XHJcbiAgICAgIHZhciBjb2xvckNvdW50ID0gMTtcclxuXHJcbiAgICAgIHZhciBkZXB0aEJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIHZhciBzdGVuY2lsQnVmZmVyID0gbnVsbDtcclxuICAgICAgdmFyIGRlcHRoU3RlbmNpbEJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIHZhciBkZXB0aFN0ZW5jaWxUZXh0dXJlID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgd2lkdGggPSBhIHwgMDtcclxuICAgICAgICBoZWlnaHQgPSAoYiB8IDApIHx8IHdpZHRoO1xyXG4gICAgICB9IGVsc2UgaWYgKCFhKSB7XHJcbiAgICAgICAgd2lkdGggPSBoZWlnaHQgPSAxO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNoZWNrJDEudHlwZShhLCAnb2JqZWN0JywgJ2ludmFsaWQgYXJndW1lbnRzIGZvciBmcmFtZWJ1ZmZlcicpO1xyXG4gICAgICAgIHZhciBvcHRpb25zID0gYTtcclxuXHJcbiAgICAgICAgaWYgKCdzaGFwZScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgdmFyIHNoYXBlID0gb3B0aW9ucy5zaGFwZTtcclxuICAgICAgICAgIGNoZWNrJDEoQXJyYXkuaXNBcnJheShzaGFwZSkgJiYgc2hhcGUubGVuZ3RoID49IDIsXHJcbiAgICAgICAgICAgICdpbnZhbGlkIHNoYXBlIGZvciBmcmFtZWJ1ZmZlcicpO1xyXG4gICAgICAgICAgd2lkdGggPSBzaGFwZVswXTtcclxuICAgICAgICAgIGhlaWdodCA9IHNoYXBlWzFdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAoJ3JhZGl1cycgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICB3aWR0aCA9IGhlaWdodCA9IG9wdGlvbnMucmFkaXVzO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKCd3aWR0aCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoJ2hlaWdodCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgnY29sb3InIGluIG9wdGlvbnMgfHxcclxuICAgICAgICAgICAgJ2NvbG9ycycgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgY29sb3JCdWZmZXIgPVxyXG4gICAgICAgICAgICBvcHRpb25zLmNvbG9yIHx8XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29sb3JzO1xyXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JCdWZmZXIpKSB7XHJcbiAgICAgICAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgICAgICAgY29sb3JCdWZmZXIubGVuZ3RoID09PSAxIHx8IGV4dGVuc2lvbnMud2ViZ2xfZHJhd19idWZmZXJzLFxyXG4gICAgICAgICAgICAgICdtdWx0aXBsZSByZW5kZXIgdGFyZ2V0cyBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbG9yQnVmZmVyKSB7XHJcbiAgICAgICAgICBpZiAoJ2NvbG9yQ291bnQnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29sb3JDb3VudCA9IG9wdGlvbnMuY29sb3JDb3VudCB8IDA7XHJcbiAgICAgICAgICAgIGNoZWNrJDEoY29sb3JDb3VudCA+IDAsICdpbnZhbGlkIGNvbG9yIGJ1ZmZlciBjb3VudCcpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICgnY29sb3JUZXh0dXJlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbG9yVGV4dHVyZSA9ICEhb3B0aW9ucy5jb2xvclRleHR1cmU7XHJcbiAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gJ3JnYmE0JztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoJ2NvbG9yVHlwZScgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgICBjb2xvclR5cGUgPSBvcHRpb25zLmNvbG9yVHlwZTtcclxuICAgICAgICAgICAgaWYgKCFjb2xvclRleHR1cmUpIHtcclxuICAgICAgICAgICAgICBpZiAoY29sb3JUeXBlID09PSAnaGFsZiBmbG9hdCcgfHwgY29sb3JUeXBlID09PSAnZmxvYXQxNicpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEoZXh0ZW5zaW9ucy5leHRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXQsXHJcbiAgICAgICAgICAgICAgICAgICd5b3UgbXVzdCBlbmFibGUgRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0IHRvIHVzZSAxNi1iaXQgcmVuZGVyIGJ1ZmZlcnMnKTtcclxuICAgICAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gJ3JnYmExNmYnO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3JUeXBlID09PSAnZmxvYXQnIHx8IGNvbG9yVHlwZSA9PT0gJ2Zsb2F0MzInKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxKGV4dGVuc2lvbnMud2ViZ2xfY29sb3JfYnVmZmVyX2Zsb2F0LFxyXG4gICAgICAgICAgICAgICAgICAneW91IG11c3QgZW5hYmxlIFdFQkdMX2NvbG9yX2J1ZmZlcl9mbG9hdCBpbiBvcmRlciB0byB1c2UgMzItYml0IGZsb2F0aW5nIHBvaW50IHJlbmRlcmJ1ZmZlcnMnKTtcclxuICAgICAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gJ3JnYmEzMmYnO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBjaGVjayQxKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfZmxvYXQgfHxcclxuICAgICAgICAgICAgICAgICEoY29sb3JUeXBlID09PSAnZmxvYXQnIHx8IGNvbG9yVHlwZSA9PT0gJ2Zsb2F0MzInKSxcclxuICAgICAgICAgICAgICAgICd5b3UgbXVzdCBlbmFibGUgT0VTX3RleHR1cmVfZmxvYXQgaW4gb3JkZXIgdG8gdXNlIGZsb2F0aW5nIHBvaW50IGZyYW1lYnVmZmVyIG9iamVjdHMnKTtcclxuICAgICAgICAgICAgICBjaGVjayQxKGV4dGVuc2lvbnMub2VzX3RleHR1cmVfaGFsZl9mbG9hdCB8fFxyXG4gICAgICAgICAgICAgICAgIShjb2xvclR5cGUgPT09ICdoYWxmIGZsb2F0JyB8fCBjb2xvclR5cGUgPT09ICdmbG9hdDE2JyksXHJcbiAgICAgICAgICAgICAgICAneW91IG11c3QgZW5hYmxlIE9FU190ZXh0dXJlX2hhbGZfZmxvYXQgaW4gb3JkZXIgdG8gdXNlIDE2LWJpdCBmbG9hdGluZyBwb2ludCBmcmFtZWJ1ZmZlciBvYmplY3RzJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hlY2skMS5vbmVPZihjb2xvclR5cGUsIGNvbG9yVHlwZXMsICdpbnZhbGlkIGNvbG9yIHR5cGUnKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoJ2NvbG9yRm9ybWF0JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gb3B0aW9ucy5jb2xvckZvcm1hdDtcclxuICAgICAgICAgICAgaWYgKGNvbG9yVGV4dHVyZUZvcm1hdHMuaW5kZXhPZihjb2xvckZvcm1hdCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgIGNvbG9yVGV4dHVyZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sb3JSZW5kZXJidWZmZXJGb3JtYXRzLmluZGV4T2YoY29sb3JGb3JtYXQpID49IDApIHtcclxuICAgICAgICAgICAgICBjb2xvclRleHR1cmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICBpZiAoY29sb3JUZXh0dXJlKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxLm9uZU9mKFxyXG4gICAgICAgICAgICAgICAgICBvcHRpb25zLmNvbG9yRm9ybWF0LCBjb2xvclRleHR1cmVGb3JtYXRzLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBjb2xvciBmb3JtYXQgZm9yIHRleHR1cmUnKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5vbmVPZihcclxuICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb2xvckZvcm1hdCwgY29sb3JSZW5kZXJidWZmZXJGb3JtYXRzLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBjb2xvciBmb3JtYXQgZm9yIHJlbmRlcmJ1ZmZlcicpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdkZXB0aFRleHR1cmUnIGluIG9wdGlvbnMgfHwgJ2RlcHRoU3RlbmNpbFRleHR1cmUnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGRlcHRoU3RlbmNpbFRleHR1cmUgPSAhIShvcHRpb25zLmRlcHRoVGV4dHVyZSB8fFxyXG4gICAgICAgICAgICBvcHRpb25zLmRlcHRoU3RlbmNpbFRleHR1cmUpO1xyXG4gICAgICAgICAgY2hlY2skMSghZGVwdGhTdGVuY2lsVGV4dHVyZSB8fCBleHRlbnNpb25zLndlYmdsX2RlcHRoX3RleHR1cmUsXHJcbiAgICAgICAgICAgICd3ZWJnbF9kZXB0aF90ZXh0dXJlIGV4dGVuc2lvbiBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJ2RlcHRoJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMuZGVwdGggPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICBuZWVkc0RlcHRoID0gb3B0aW9ucy5kZXB0aDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRlcHRoQnVmZmVyID0gb3B0aW9ucy5kZXB0aDtcclxuICAgICAgICAgICAgbmVlZHNTdGVuY2lsID0gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJ3N0ZW5jaWwnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5zdGVuY2lsID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgbmVlZHNTdGVuY2lsID0gb3B0aW9ucy5zdGVuY2lsO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc3RlbmNpbEJ1ZmZlciA9IG9wdGlvbnMuc3RlbmNpbDtcclxuICAgICAgICAgICAgbmVlZHNEZXB0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdkZXB0aFN0ZW5jaWwnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5kZXB0aFN0ZW5jaWwgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICBuZWVkc0RlcHRoID0gbmVlZHNTdGVuY2lsID0gb3B0aW9ucy5kZXB0aFN0ZW5jaWw7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkZXB0aFN0ZW5jaWxCdWZmZXIgPSBvcHRpb25zLmRlcHRoU3RlbmNpbDtcclxuICAgICAgICAgICAgbmVlZHNEZXB0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBuZWVkc1N0ZW5jaWwgPSBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHBhcnNlIGF0dGFjaG1lbnRzXHJcbiAgICAgIHZhciBjb2xvckF0dGFjaG1lbnRzID0gbnVsbDtcclxuICAgICAgdmFyIGRlcHRoQXR0YWNobWVudCA9IG51bGw7XHJcbiAgICAgIHZhciBzdGVuY2lsQXR0YWNobWVudCA9IG51bGw7XHJcbiAgICAgIHZhciBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gbnVsbDtcclxuXHJcbiAgICAgIC8vIFNldCB1cCBjb2xvciBhdHRhY2htZW50c1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvckJ1ZmZlcikpIHtcclxuICAgICAgICBjb2xvckF0dGFjaG1lbnRzID0gY29sb3JCdWZmZXIubWFwKHBhcnNlQXR0YWNobWVudCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoY29sb3JCdWZmZXIpIHtcclxuICAgICAgICBjb2xvckF0dGFjaG1lbnRzID0gW3BhcnNlQXR0YWNobWVudChjb2xvckJ1ZmZlcildO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbG9yQXR0YWNobWVudHMgPSBuZXcgQXJyYXkoY29sb3JDb3VudCk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9yQ291bnQ7ICsraSkge1xyXG4gICAgICAgICAgY29sb3JBdHRhY2htZW50c1tpXSA9IGFsbG9jQXR0YWNobWVudChcclxuICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgIGhlaWdodCxcclxuICAgICAgICAgICAgY29sb3JUZXh0dXJlLFxyXG4gICAgICAgICAgICBjb2xvckZvcm1hdCxcclxuICAgICAgICAgICAgY29sb3JUeXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNoZWNrJDEoZXh0ZW5zaW9ucy53ZWJnbF9kcmF3X2J1ZmZlcnMgfHwgY29sb3JBdHRhY2htZW50cy5sZW5ndGggPD0gMSxcclxuICAgICAgICAneW91IG11c3QgZW5hYmxlIHRoZSBXRUJHTF9kcmF3X2J1ZmZlcnMgZXh0ZW5zaW9uIGluIG9yZGVyIHRvIHVzZSBtdWx0aXBsZSBjb2xvciBidWZmZXJzLicpO1xyXG4gICAgICBjaGVjayQxKGNvbG9yQXR0YWNobWVudHMubGVuZ3RoIDw9IGxpbWl0cy5tYXhDb2xvckF0dGFjaG1lbnRzLFxyXG4gICAgICAgICd0b28gbWFueSBjb2xvciBhdHRhY2htZW50cywgbm90IHN1cHBvcnRlZCcpO1xyXG5cclxuICAgICAgd2lkdGggPSB3aWR0aCB8fCBjb2xvckF0dGFjaG1lbnRzWzBdLndpZHRoO1xyXG4gICAgICBoZWlnaHQgPSBoZWlnaHQgfHwgY29sb3JBdHRhY2htZW50c1swXS5oZWlnaHQ7XHJcblxyXG4gICAgICBpZiAoZGVwdGhCdWZmZXIpIHtcclxuICAgICAgICBkZXB0aEF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQoZGVwdGhCdWZmZXIpO1xyXG4gICAgICB9IGVsc2UgaWYgKG5lZWRzRGVwdGggJiYgIW5lZWRzU3RlbmNpbCkge1xyXG4gICAgICAgIGRlcHRoQXR0YWNobWVudCA9IGFsbG9jQXR0YWNobWVudChcclxuICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgICAgZGVwdGhTdGVuY2lsVGV4dHVyZSxcclxuICAgICAgICAgICdkZXB0aCcsXHJcbiAgICAgICAgICAndWludDMyJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzdGVuY2lsQnVmZmVyKSB7XHJcbiAgICAgICAgc3RlbmNpbEF0dGFjaG1lbnQgPSBwYXJzZUF0dGFjaG1lbnQoc3RlbmNpbEJ1ZmZlcik7XHJcbiAgICAgIH0gZWxzZSBpZiAobmVlZHNTdGVuY2lsICYmICFuZWVkc0RlcHRoKSB7XHJcbiAgICAgICAgc3RlbmNpbEF0dGFjaG1lbnQgPSBhbGxvY0F0dGFjaG1lbnQoXHJcbiAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgIGhlaWdodCxcclxuICAgICAgICAgIGZhbHNlLFxyXG4gICAgICAgICAgJ3N0ZW5jaWwnLFxyXG4gICAgICAgICAgJ3VpbnQ4Jyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkZXB0aFN0ZW5jaWxCdWZmZXIpIHtcclxuICAgICAgICBkZXB0aFN0ZW5jaWxBdHRhY2htZW50ID0gcGFyc2VBdHRhY2htZW50KGRlcHRoU3RlbmNpbEJ1ZmZlcik7XHJcbiAgICAgIH0gZWxzZSBpZiAoIWRlcHRoQnVmZmVyICYmICFzdGVuY2lsQnVmZmVyICYmIG5lZWRzU3RlbmNpbCAmJiBuZWVkc0RlcHRoKSB7XHJcbiAgICAgICAgZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IGFsbG9jQXR0YWNobWVudChcclxuICAgICAgICAgIHdpZHRoLFxyXG4gICAgICAgICAgaGVpZ2h0LFxyXG4gICAgICAgICAgZGVwdGhTdGVuY2lsVGV4dHVyZSxcclxuICAgICAgICAgICdkZXB0aCBzdGVuY2lsJyxcclxuICAgICAgICAgICdkZXB0aCBzdGVuY2lsJyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgKCEhZGVwdGhCdWZmZXIpICsgKCEhc3RlbmNpbEJ1ZmZlcikgKyAoISFkZXB0aFN0ZW5jaWxCdWZmZXIpIDw9IDEsXHJcbiAgICAgICAgJ2ludmFsaWQgZnJhbWVidWZmZXIgY29uZmlndXJhdGlvbiwgY2FuIHNwZWNpZnkgZXhhY3RseSBvbmUgZGVwdGgvc3RlbmNpbCBhdHRhY2htZW50Jyk7XHJcblxyXG4gICAgICB2YXIgY29tbW9uQ29sb3JBdHRhY2htZW50U2l6ZSA9IG51bGw7XHJcblxyXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29sb3JBdHRhY2htZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGluY1JlZkFuZENoZWNrU2hhcGUoY29sb3JBdHRhY2htZW50c1tpXSwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgY2hlY2skMSghY29sb3JBdHRhY2htZW50c1tpXSB8fFxyXG4gICAgICAgICAgKGNvbG9yQXR0YWNobWVudHNbaV0udGV4dHVyZSAmJlxyXG4gICAgICAgICAgICBjb2xvclRleHR1cmVGb3JtYXRFbnVtcy5pbmRleE9mKGNvbG9yQXR0YWNobWVudHNbaV0udGV4dHVyZS5fdGV4dHVyZS5mb3JtYXQpID49IDApIHx8XHJcbiAgICAgICAgICAoY29sb3JBdHRhY2htZW50c1tpXS5yZW5kZXJidWZmZXIgJiZcclxuICAgICAgICAgICAgY29sb3JSZW5kZXJidWZmZXJGb3JtYXRFbnVtcy5pbmRleE9mKGNvbG9yQXR0YWNobWVudHNbaV0ucmVuZGVyYnVmZmVyLl9yZW5kZXJidWZmZXIuZm9ybWF0KSA+PSAwKSxcclxuICAgICAgICAgICdmcmFtZWJ1ZmZlciBjb2xvciBhdHRhY2htZW50ICcgKyBpICsgJyBpcyBpbnZhbGlkJyk7XHJcblxyXG4gICAgICAgIGlmIChjb2xvckF0dGFjaG1lbnRzW2ldICYmIGNvbG9yQXR0YWNobWVudHNbaV0udGV4dHVyZSkge1xyXG4gICAgICAgICAgdmFyIGNvbG9yQXR0YWNobWVudFNpemUgPVxyXG4gICAgICAgICAgICAgIHRleHR1cmVGb3JtYXRDaGFubmVsc1tjb2xvckF0dGFjaG1lbnRzW2ldLnRleHR1cmUuX3RleHR1cmUuZm9ybWF0XSAqXHJcbiAgICAgICAgICAgICAgdGV4dHVyZVR5cGVTaXplc1tjb2xvckF0dGFjaG1lbnRzW2ldLnRleHR1cmUuX3RleHR1cmUudHlwZV07XHJcblxyXG4gICAgICAgICAgaWYgKGNvbW1vbkNvbG9yQXR0YWNobWVudFNpemUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29tbW9uQ29sb3JBdHRhY2htZW50U2l6ZSA9IGNvbG9yQXR0YWNobWVudFNpemU7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGFsbCBjb2xvciBhdHRhY2htZW50cyBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBiaXRwbGFuZXNcclxuICAgICAgICAgICAgLy8gKHRoYXQgaXMsIHRoZSBzYW1lIG51bWVyIG9mIGJpdHMgcGVyIHBpeGVsKVxyXG4gICAgICAgICAgICAvLyBUaGlzIGlzIHJlcXVpcmVkIGJ5IHRoZSBHTEVTMi4wIHN0YW5kYXJkLiBTZWUgdGhlIGJlZ2lubmluZyBvZiBDaGFwdGVyIDQgaW4gdGhhdCBkb2N1bWVudC5cclxuICAgICAgICAgICAgY2hlY2skMShjb21tb25Db2xvckF0dGFjaG1lbnRTaXplID09PSBjb2xvckF0dGFjaG1lbnRTaXplLFxyXG4gICAgICAgICAgICAgICAgICAnYWxsIGNvbG9yIGF0dGFjaG1lbnRzIG11Y2ggaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgYml0cyBwZXIgcGl4ZWwuJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGluY1JlZkFuZENoZWNrU2hhcGUoZGVwdGhBdHRhY2htZW50LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgY2hlY2skMSghZGVwdGhBdHRhY2htZW50IHx8XHJcbiAgICAgICAgKGRlcHRoQXR0YWNobWVudC50ZXh0dXJlICYmXHJcbiAgICAgICAgICBkZXB0aEF0dGFjaG1lbnQudGV4dHVyZS5fdGV4dHVyZS5mb3JtYXQgPT09IEdMX0RFUFRIX0NPTVBPTkVOVCQxKSB8fFxyXG4gICAgICAgIChkZXB0aEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyICYmXHJcbiAgICAgICAgICBkZXB0aEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyLl9yZW5kZXJidWZmZXIuZm9ybWF0ID09PSBHTF9ERVBUSF9DT01QT05FTlQxNiQxKSxcclxuICAgICAgICAnaW52YWxpZCBkZXB0aCBhdHRhY2htZW50IGZvciBmcmFtZWJ1ZmZlciBvYmplY3QnKTtcclxuICAgICAgaW5jUmVmQW5kQ2hlY2tTaGFwZShzdGVuY2lsQXR0YWNobWVudCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgIGNoZWNrJDEoIXN0ZW5jaWxBdHRhY2htZW50IHx8XHJcbiAgICAgICAgKHN0ZW5jaWxBdHRhY2htZW50LnJlbmRlcmJ1ZmZlciAmJlxyXG4gICAgICAgICAgc3RlbmNpbEF0dGFjaG1lbnQucmVuZGVyYnVmZmVyLl9yZW5kZXJidWZmZXIuZm9ybWF0ID09PSBHTF9TVEVOQ0lMX0lOREVYOCQxKSxcclxuICAgICAgICAnaW52YWxpZCBzdGVuY2lsIGF0dGFjaG1lbnQgZm9yIGZyYW1lYnVmZmVyIG9iamVjdCcpO1xyXG4gICAgICBpbmNSZWZBbmRDaGVja1NoYXBlKGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICBjaGVjayQxKCFkZXB0aFN0ZW5jaWxBdHRhY2htZW50IHx8XHJcbiAgICAgICAgKGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQudGV4dHVyZSAmJlxyXG4gICAgICAgICAgZGVwdGhTdGVuY2lsQXR0YWNobWVudC50ZXh0dXJlLl90ZXh0dXJlLmZvcm1hdCA9PT0gR0xfREVQVEhfU1RFTkNJTCQyKSB8fFxyXG4gICAgICAgIChkZXB0aFN0ZW5jaWxBdHRhY2htZW50LnJlbmRlcmJ1ZmZlciAmJlxyXG4gICAgICAgICAgZGVwdGhTdGVuY2lsQXR0YWNobWVudC5yZW5kZXJidWZmZXIuX3JlbmRlcmJ1ZmZlci5mb3JtYXQgPT09IEdMX0RFUFRIX1NURU5DSUwkMiksXHJcbiAgICAgICAgJ2ludmFsaWQgZGVwdGgtc3RlbmNpbCBhdHRhY2htZW50IGZvciBmcmFtZWJ1ZmZlciBvYmplY3QnKTtcclxuXHJcbiAgICAgIC8vIGRlY3JlbWVudCByZWZlcmVuY2VzXHJcbiAgICAgIGRlY0ZCT1JlZnMoZnJhbWVidWZmZXIpO1xyXG5cclxuICAgICAgZnJhbWVidWZmZXIud2lkdGggPSB3aWR0aDtcclxuICAgICAgZnJhbWVidWZmZXIuaGVpZ2h0ID0gaGVpZ2h0O1xyXG5cclxuICAgICAgZnJhbWVidWZmZXIuY29sb3JBdHRhY2htZW50cyA9IGNvbG9yQXR0YWNobWVudHM7XHJcbiAgICAgIGZyYW1lYnVmZmVyLmRlcHRoQXR0YWNobWVudCA9IGRlcHRoQXR0YWNobWVudDtcclxuICAgICAgZnJhbWVidWZmZXIuc3RlbmNpbEF0dGFjaG1lbnQgPSBzdGVuY2lsQXR0YWNobWVudDtcclxuICAgICAgZnJhbWVidWZmZXIuZGVwdGhTdGVuY2lsQXR0YWNobWVudCA9IGRlcHRoU3RlbmNpbEF0dGFjaG1lbnQ7XHJcblxyXG4gICAgICByZWdsRnJhbWVidWZmZXIuY29sb3IgPSBjb2xvckF0dGFjaG1lbnRzLm1hcCh1bndyYXBBdHRhY2htZW50KTtcclxuICAgICAgcmVnbEZyYW1lYnVmZmVyLmRlcHRoID0gdW53cmFwQXR0YWNobWVudChkZXB0aEF0dGFjaG1lbnQpO1xyXG4gICAgICByZWdsRnJhbWVidWZmZXIuc3RlbmNpbCA9IHVud3JhcEF0dGFjaG1lbnQoc3RlbmNpbEF0dGFjaG1lbnQpO1xyXG4gICAgICByZWdsRnJhbWVidWZmZXIuZGVwdGhTdGVuY2lsID0gdW53cmFwQXR0YWNobWVudChkZXB0aFN0ZW5jaWxBdHRhY2htZW50KTtcclxuXHJcbiAgICAgIHJlZ2xGcmFtZWJ1ZmZlci53aWR0aCA9IGZyYW1lYnVmZmVyLndpZHRoO1xyXG4gICAgICByZWdsRnJhbWVidWZmZXIuaGVpZ2h0ID0gZnJhbWVidWZmZXIuaGVpZ2h0O1xyXG5cclxuICAgICAgdXBkYXRlRnJhbWVidWZmZXIoZnJhbWVidWZmZXIpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlZ2xGcmFtZWJ1ZmZlclxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlc2l6ZSAod18sIGhfKSB7XHJcbiAgICAgIGNoZWNrJDEoZnJhbWVidWZmZXJTdGF0ZS5uZXh0ICE9PSBmcmFtZWJ1ZmZlcixcclxuICAgICAgICAnY2FuIG5vdCByZXNpemUgYSBmcmFtZWJ1ZmZlciB3aGljaCBpcyBjdXJyZW50bHkgaW4gdXNlJyk7XHJcblxyXG4gICAgICB2YXIgdyA9IE1hdGgubWF4KHdfIHwgMCwgMSk7XHJcbiAgICAgIHZhciBoID0gTWF0aC5tYXgoKGhfIHwgMCkgfHwgdywgMSk7XHJcbiAgICAgIGlmICh3ID09PSBmcmFtZWJ1ZmZlci53aWR0aCAmJiBoID09PSBmcmFtZWJ1ZmZlci5oZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gcmVnbEZyYW1lYnVmZmVyXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHJlc2l6ZSBhbGwgYnVmZmVyc1xyXG4gICAgICB2YXIgY29sb3JBdHRhY2htZW50cyA9IGZyYW1lYnVmZmVyLmNvbG9yQXR0YWNobWVudHM7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29sb3JBdHRhY2htZW50cy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIHJlc2l6ZUF0dGFjaG1lbnQoY29sb3JBdHRhY2htZW50c1tpXSwgdywgaCk7XHJcbiAgICAgIH1cclxuICAgICAgcmVzaXplQXR0YWNobWVudChmcmFtZWJ1ZmZlci5kZXB0aEF0dGFjaG1lbnQsIHcsIGgpO1xyXG4gICAgICByZXNpemVBdHRhY2htZW50KGZyYW1lYnVmZmVyLnN0ZW5jaWxBdHRhY2htZW50LCB3LCBoKTtcclxuICAgICAgcmVzaXplQXR0YWNobWVudChmcmFtZWJ1ZmZlci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50LCB3LCBoKTtcclxuXHJcbiAgICAgIGZyYW1lYnVmZmVyLndpZHRoID0gcmVnbEZyYW1lYnVmZmVyLndpZHRoID0gdztcclxuICAgICAgZnJhbWVidWZmZXIuaGVpZ2h0ID0gcmVnbEZyYW1lYnVmZmVyLmhlaWdodCA9IGg7XHJcblxyXG4gICAgICB1cGRhdGVGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XHJcblxyXG4gICAgICByZXR1cm4gcmVnbEZyYW1lYnVmZmVyXHJcbiAgICB9XHJcblxyXG4gICAgcmVnbEZyYW1lYnVmZmVyKGEwLCBhMSk7XHJcblxyXG4gICAgcmV0dXJuIGV4dGVuZChyZWdsRnJhbWVidWZmZXIsIHtcclxuICAgICAgcmVzaXplOiByZXNpemUsXHJcbiAgICAgIF9yZWdsVHlwZTogJ2ZyYW1lYnVmZmVyJyxcclxuICAgICAgX2ZyYW1lYnVmZmVyOiBmcmFtZWJ1ZmZlcixcclxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGRlc3Ryb3koZnJhbWVidWZmZXIpO1xyXG4gICAgICAgIGRlY0ZCT1JlZnMoZnJhbWVidWZmZXIpO1xyXG4gICAgICB9LFxyXG4gICAgICB1c2U6IGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgIGZyYW1lYnVmZmVyU3RhdGUuc2V0RkJPKHtcclxuICAgICAgICAgIGZyYW1lYnVmZmVyOiByZWdsRnJhbWVidWZmZXJcclxuICAgICAgICB9LCBibG9jayk7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVDdWJlRkJPIChvcHRpb25zKSB7XHJcbiAgICB2YXIgZmFjZXMgPSBBcnJheSg2KTtcclxuXHJcbiAgICBmdW5jdGlvbiByZWdsRnJhbWVidWZmZXJDdWJlIChhKSB7XHJcbiAgICAgIHZhciBpO1xyXG5cclxuICAgICAgY2hlY2skMShmYWNlcy5pbmRleE9mKGZyYW1lYnVmZmVyU3RhdGUubmV4dCkgPCAwLFxyXG4gICAgICAgICdjYW4gbm90IHVwZGF0ZSBmcmFtZWJ1ZmZlciB3aGljaCBpcyBjdXJyZW50bHkgaW4gdXNlJyk7XHJcblxyXG4gICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgIGNvbG9yOiBudWxsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICB2YXIgcmFkaXVzID0gMDtcclxuXHJcbiAgICAgIHZhciBjb2xvckJ1ZmZlciA9IG51bGw7XHJcbiAgICAgIHZhciBjb2xvckZvcm1hdCA9ICdyZ2JhJztcclxuICAgICAgdmFyIGNvbG9yVHlwZSA9ICd1aW50OCc7XHJcbiAgICAgIHZhciBjb2xvckNvdW50ID0gMTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICByYWRpdXMgPSBhIHwgMDtcclxuICAgICAgfSBlbHNlIGlmICghYSkge1xyXG4gICAgICAgIHJhZGl1cyA9IDE7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hlY2skMS50eXBlKGEsICdvYmplY3QnLCAnaW52YWxpZCBhcmd1bWVudHMgZm9yIGZyYW1lYnVmZmVyJyk7XHJcbiAgICAgICAgdmFyIG9wdGlvbnMgPSBhO1xyXG5cclxuICAgICAgICBpZiAoJ3NoYXBlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICB2YXIgc2hhcGUgPSBvcHRpb25zLnNoYXBlO1xyXG4gICAgICAgICAgY2hlY2skMShcclxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShzaGFwZSkgJiYgc2hhcGUubGVuZ3RoID49IDIsXHJcbiAgICAgICAgICAgICdpbnZhbGlkIHNoYXBlIGZvciBmcmFtZWJ1ZmZlcicpO1xyXG4gICAgICAgICAgY2hlY2skMShcclxuICAgICAgICAgICAgc2hhcGVbMF0gPT09IHNoYXBlWzFdLFxyXG4gICAgICAgICAgICAnY3ViZSBmcmFtZWJ1ZmZlciBtdXN0IGJlIHNxdWFyZScpO1xyXG4gICAgICAgICAgcmFkaXVzID0gc2hhcGVbMF07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICgncmFkaXVzJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJhZGl1cyA9IG9wdGlvbnMucmFkaXVzIHwgMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICgnd2lkdGgnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmFkaXVzID0gb3B0aW9ucy53aWR0aCB8IDA7XHJcbiAgICAgICAgICAgIGlmICgnaGVpZ2h0JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMShvcHRpb25zLmhlaWdodCA9PT0gcmFkaXVzLCAnbXVzdCBiZSBzcXVhcmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIGlmICgnaGVpZ2h0JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJhZGl1cyA9IG9wdGlvbnMuaGVpZ2h0IHwgMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgnY29sb3InIGluIG9wdGlvbnMgfHxcclxuICAgICAgICAgICAgJ2NvbG9ycycgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgY29sb3JCdWZmZXIgPVxyXG4gICAgICAgICAgICBvcHRpb25zLmNvbG9yIHx8XHJcbiAgICAgICAgICAgIG9wdGlvbnMuY29sb3JzO1xyXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29sb3JCdWZmZXIpKSB7XHJcbiAgICAgICAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgICAgICAgY29sb3JCdWZmZXIubGVuZ3RoID09PSAxIHx8IGV4dGVuc2lvbnMud2ViZ2xfZHJhd19idWZmZXJzLFxyXG4gICAgICAgICAgICAgICdtdWx0aXBsZSByZW5kZXIgdGFyZ2V0cyBub3Qgc3VwcG9ydGVkJyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWNvbG9yQnVmZmVyKSB7XHJcbiAgICAgICAgICBpZiAoJ2NvbG9yQ291bnQnIGluIG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgY29sb3JDb3VudCA9IG9wdGlvbnMuY29sb3JDb3VudCB8IDA7XHJcbiAgICAgICAgICAgIGNoZWNrJDEoY29sb3JDb3VudCA+IDAsICdpbnZhbGlkIGNvbG9yIGJ1ZmZlciBjb3VudCcpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmICgnY29sb3JUeXBlJyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNoZWNrJDEub25lT2YoXHJcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb2xvclR5cGUsIGNvbG9yVHlwZXMsXHJcbiAgICAgICAgICAgICAgJ2ludmFsaWQgY29sb3IgdHlwZScpO1xyXG4gICAgICAgICAgICBjb2xvclR5cGUgPSBvcHRpb25zLmNvbG9yVHlwZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBpZiAoJ2NvbG9yRm9ybWF0JyBpbiBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIGNvbG9yRm9ybWF0ID0gb3B0aW9ucy5jb2xvckZvcm1hdDtcclxuICAgICAgICAgICAgY2hlY2skMS5vbmVPZihcclxuICAgICAgICAgICAgICBvcHRpb25zLmNvbG9yRm9ybWF0LCBjb2xvclRleHR1cmVGb3JtYXRzLFxyXG4gICAgICAgICAgICAgICdpbnZhbGlkIGNvbG9yIGZvcm1hdCBmb3IgdGV4dHVyZScpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCdkZXB0aCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgcGFyYW1zLmRlcHRoID0gb3B0aW9ucy5kZXB0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgnc3RlbmNpbCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgcGFyYW1zLnN0ZW5jaWwgPSBvcHRpb25zLnN0ZW5jaWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJ2RlcHRoU3RlbmNpbCcgaW4gb3B0aW9ucykge1xyXG4gICAgICAgICAgcGFyYW1zLmRlcHRoU3RlbmNpbCA9IG9wdGlvbnMuZGVwdGhTdGVuY2lsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGNvbG9yQ3ViZXM7XHJcbiAgICAgIGlmIChjb2xvckJ1ZmZlcikge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGNvbG9yQnVmZmVyKSkge1xyXG4gICAgICAgICAgY29sb3JDdWJlcyA9IFtdO1xyXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9yQnVmZmVyLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIGNvbG9yQ3ViZXNbaV0gPSBjb2xvckJ1ZmZlcltpXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29sb3JDdWJlcyA9IFsgY29sb3JCdWZmZXIgXTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29sb3JDdWJlcyA9IEFycmF5KGNvbG9yQ291bnQpO1xyXG4gICAgICAgIHZhciBjdWJlTWFwUGFyYW1zID0ge1xyXG4gICAgICAgICAgcmFkaXVzOiByYWRpdXMsXHJcbiAgICAgICAgICBmb3JtYXQ6IGNvbG9yRm9ybWF0LFxyXG4gICAgICAgICAgdHlwZTogY29sb3JUeXBlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29sb3JDb3VudDsgKytpKSB7XHJcbiAgICAgICAgICBjb2xvckN1YmVzW2ldID0gdGV4dHVyZVN0YXRlLmNyZWF0ZUN1YmUoY3ViZU1hcFBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDaGVjayBjb2xvciBjdWJlc1xyXG4gICAgICBwYXJhbXMuY29sb3IgPSBBcnJheShjb2xvckN1YmVzLmxlbmd0aCk7XHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb2xvckN1YmVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgdmFyIGN1YmUgPSBjb2xvckN1YmVzW2ldO1xyXG4gICAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgICB0eXBlb2YgY3ViZSA9PT0gJ2Z1bmN0aW9uJyAmJiBjdWJlLl9yZWdsVHlwZSA9PT0gJ3RleHR1cmVDdWJlJyxcclxuICAgICAgICAgICdpbnZhbGlkIGN1YmUgbWFwJyk7XHJcbiAgICAgICAgcmFkaXVzID0gcmFkaXVzIHx8IGN1YmUud2lkdGg7XHJcbiAgICAgICAgY2hlY2skMShcclxuICAgICAgICAgIGN1YmUud2lkdGggPT09IHJhZGl1cyAmJiBjdWJlLmhlaWdodCA9PT0gcmFkaXVzLFxyXG4gICAgICAgICAgJ2ludmFsaWQgY3ViZSBtYXAgc2hhcGUnKTtcclxuICAgICAgICBwYXJhbXMuY29sb3JbaV0gPSB7XHJcbiAgICAgICAgICB0YXJnZXQ6IEdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQyLFxyXG4gICAgICAgICAgZGF0YTogY29sb3JDdWJlc1tpXVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAoaSA9IDA7IGkgPCA2OyArK2kpIHtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGNvbG9yQ3ViZXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgIHBhcmFtcy5jb2xvcltqXS50YXJnZXQgPSBHTF9URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1gkMiArIGk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHJldXNlIGRlcHRoLXN0ZW5jaWwgYXR0YWNobWVudHMgYWNyb3NzIGFsbCBjdWJlIG1hcHNcclxuICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgIHBhcmFtcy5kZXB0aCA9IGZhY2VzWzBdLmRlcHRoO1xyXG4gICAgICAgICAgcGFyYW1zLnN0ZW5jaWwgPSBmYWNlc1swXS5zdGVuY2lsO1xyXG4gICAgICAgICAgcGFyYW1zLmRlcHRoU3RlbmNpbCA9IGZhY2VzWzBdLmRlcHRoU3RlbmNpbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZhY2VzW2ldKSB7XHJcbiAgICAgICAgICAoZmFjZXNbaV0pKHBhcmFtcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGZhY2VzW2ldID0gY3JlYXRlRkJPKHBhcmFtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gZXh0ZW5kKHJlZ2xGcmFtZWJ1ZmZlckN1YmUsIHtcclxuICAgICAgICB3aWR0aDogcmFkaXVzLFxyXG4gICAgICAgIGhlaWdodDogcmFkaXVzLFxyXG4gICAgICAgIGNvbG9yOiBjb2xvckN1YmVzXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcmVzaXplIChyYWRpdXNfKSB7XHJcbiAgICAgIHZhciBpO1xyXG4gICAgICB2YXIgcmFkaXVzID0gcmFkaXVzXyB8IDA7XHJcbiAgICAgIGNoZWNrJDEocmFkaXVzID4gMCAmJiByYWRpdXMgPD0gbGltaXRzLm1heEN1YmVNYXBTaXplLFxyXG4gICAgICAgICdpbnZhbGlkIHJhZGl1cyBmb3IgY3ViZSBmYm8nKTtcclxuXHJcbiAgICAgIGlmIChyYWRpdXMgPT09IHJlZ2xGcmFtZWJ1ZmZlckN1YmUud2lkdGgpIHtcclxuICAgICAgICByZXR1cm4gcmVnbEZyYW1lYnVmZmVyQ3ViZVxyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgY29sb3JzID0gcmVnbEZyYW1lYnVmZmVyQ3ViZS5jb2xvcjtcclxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgIGNvbG9yc1tpXS5yZXNpemUocmFkaXVzKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChpID0gMDsgaSA8IDY7ICsraSkge1xyXG4gICAgICAgIGZhY2VzW2ldLnJlc2l6ZShyYWRpdXMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZWdsRnJhbWVidWZmZXJDdWJlLndpZHRoID0gcmVnbEZyYW1lYnVmZmVyQ3ViZS5oZWlnaHQgPSByYWRpdXM7XHJcblxyXG4gICAgICByZXR1cm4gcmVnbEZyYW1lYnVmZmVyQ3ViZVxyXG4gICAgfVxyXG5cclxuICAgIHJlZ2xGcmFtZWJ1ZmZlckN1YmUob3B0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIGV4dGVuZChyZWdsRnJhbWVidWZmZXJDdWJlLCB7XHJcbiAgICAgIGZhY2VzOiBmYWNlcyxcclxuICAgICAgcmVzaXplOiByZXNpemUsXHJcbiAgICAgIF9yZWdsVHlwZTogJ2ZyYW1lYnVmZmVyQ3ViZScsXHJcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICBmLmRlc3Ryb3koKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc3RvcmVGcmFtZWJ1ZmZlcnMgKCkge1xyXG4gICAgZnJhbWVidWZmZXJTdGF0ZS5jdXIgPSBudWxsO1xyXG4gICAgZnJhbWVidWZmZXJTdGF0ZS5uZXh0ID0gbnVsbDtcclxuICAgIGZyYW1lYnVmZmVyU3RhdGUuZGlydHkgPSB0cnVlO1xyXG4gICAgdmFsdWVzKGZyYW1lYnVmZmVyU2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChmYikge1xyXG4gICAgICBmYi5mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgICAgIHVwZGF0ZUZyYW1lYnVmZmVyKGZiKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGV4dGVuZChmcmFtZWJ1ZmZlclN0YXRlLCB7XHJcbiAgICBnZXRGcmFtZWJ1ZmZlcjogZnVuY3Rpb24gKG9iamVjdCkge1xyXG4gICAgICBpZiAodHlwZW9mIG9iamVjdCA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmplY3QuX3JlZ2xUeXBlID09PSAnZnJhbWVidWZmZXInKSB7XHJcbiAgICAgICAgdmFyIGZibyA9IG9iamVjdC5fZnJhbWVidWZmZXI7XHJcbiAgICAgICAgLy9mdXpoZW4gcmVtb3ZlIHRoaXMgdG8gYWxsb3cgcmV1c2UgZnJhbWVidWZmZXIgYWNyb3NzIG11bHRpcGxlIHJlZ2wgY29udGV4dHMgZnJvbSBvbmUgY2FudmFzXHJcbiAgICAgICAgLy8gaWYgKGZibyBpbnN0YW5jZW9mIFJFR0xGcmFtZWJ1ZmZlcikge1xyXG4gICAgICAgIHJldHVybiBmYm9cclxuICAgICAgICAvLyB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH0sXHJcbiAgICBjcmVhdGU6IGNyZWF0ZUZCTyxcclxuICAgIGNyZWF0ZUN1YmU6IGNyZWF0ZUN1YmVGQk8sXHJcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YWx1ZXMoZnJhbWVidWZmZXJTZXQpLmZvckVhY2goZGVzdHJveSk7XHJcbiAgICB9LFxyXG4gICAgcmVzdG9yZTogcmVzdG9yZUZyYW1lYnVmZmVyc1xyXG4gIH0pXHJcbn1cblxudmFyIEdMX0ZMT0FUJDYgPSA1MTI2O1xyXG5cclxuZnVuY3Rpb24gQXR0cmlidXRlUmVjb3JkICgpIHtcclxuICB0aGlzLnN0YXRlID0gMDtcclxuXHJcbiAgdGhpcy54ID0gMC4wO1xyXG4gIHRoaXMueSA9IDAuMDtcclxuICB0aGlzLnogPSAwLjA7XHJcbiAgdGhpcy53ID0gMC4wO1xyXG5cclxuICB0aGlzLmJ1ZmZlciA9IG51bGw7XHJcbiAgdGhpcy5zaXplID0gMDtcclxuICB0aGlzLm5vcm1hbGl6ZWQgPSBmYWxzZTtcclxuICB0aGlzLnR5cGUgPSBHTF9GTE9BVCQ2O1xyXG4gIHRoaXMub2Zmc2V0ID0gMDtcclxuICB0aGlzLnN0cmlkZSA9IDA7XHJcbiAgdGhpcy5kaXZpc29yID0gMDtcclxufVxyXG5cclxuZnVuY3Rpb24gd3JhcEF0dHJpYnV0ZVN0YXRlIChcclxuICBnbCxcclxuICBleHRlbnNpb25zLFxyXG4gIGxpbWl0cyxcclxuICBzdHJpbmdTdG9yZSkge1xyXG4gIHZhciBOVU1fQVRUUklCVVRFUyA9IGxpbWl0cy5tYXhBdHRyaWJ1dGVzO1xyXG4gIHZhciBhdHRyaWJ1dGVCaW5kaW5ncyA9IG5ldyBBcnJheShOVU1fQVRUUklCVVRFUyk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBOVU1fQVRUUklCVVRFUzsgKytpKSB7XHJcbiAgICBhdHRyaWJ1dGVCaW5kaW5nc1tpXSA9IG5ldyBBdHRyaWJ1dGVSZWNvcmQoKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBSZWNvcmQ6IEF0dHJpYnV0ZVJlY29yZCxcclxuICAgIHNjb3BlOiB7fSxcclxuICAgIHN0YXRlOiBhdHRyaWJ1dGVCaW5kaW5nc1xyXG4gIH1cclxufVxuXG52YXIgR0xfRlJBR01FTlRfU0hBREVSID0gMzU2MzI7XHJcbnZhciBHTF9WRVJURVhfU0hBREVSID0gMzU2MzM7XHJcblxyXG52YXIgR0xfQUNUSVZFX1VOSUZPUk1TID0gMHg4Qjg2O1xyXG52YXIgR0xfQUNUSVZFX0FUVFJJQlVURVMgPSAweDhCODk7XHJcblxyXG5mdW5jdGlvbiB3cmFwU2hhZGVyU3RhdGUgKGdsLCBzdHJpbmdTdG9yZSwgc3RhdHMsIGNvbmZpZykge1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIGdsc2wgY29tcGlsYXRpb24gYW5kIGxpbmtpbmdcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgZnJhZ1NoYWRlcnMgPSB7fTtcclxuICB2YXIgdmVydFNoYWRlcnMgPSB7fTtcclxuXHJcbiAgZnVuY3Rpb24gQWN0aXZlSW5mbyAobmFtZSwgaWQsIGxvY2F0aW9uLCBpbmZvKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgdGhpcy5pZCA9IGlkO1xyXG4gICAgdGhpcy5sb2NhdGlvbiA9IGxvY2F0aW9uO1xyXG4gICAgdGhpcy5pbmZvID0gaW5mbztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGluc2VydEFjdGl2ZUluZm8gKGxpc3QsIGluZm8pIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xyXG4gICAgICBpZiAobGlzdFtpXS5pZCA9PT0gaW5mby5pZCkge1xyXG4gICAgICAgIGxpc3RbaV0ubG9jYXRpb24gPSBpbmZvLmxvY2F0aW9uO1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBsaXN0LnB1c2goaW5mbyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBnZXRTaGFkZXIgKHR5cGUsIGlkLCBjb21tYW5kKSB7XHJcbiAgICB2YXIgY2FjaGUgPSB0eXBlID09PSBHTF9GUkFHTUVOVF9TSEFERVIgPyBmcmFnU2hhZGVycyA6IHZlcnRTaGFkZXJzO1xyXG4gICAgdmFyIHNoYWRlciA9IGNhY2hlW2lkXTtcclxuXHJcbiAgICBpZiAoIXNoYWRlcikge1xyXG4gICAgICB2YXIgc291cmNlID0gc3RyaW5nU3RvcmUuc3RyKGlkKTtcclxuICAgICAgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xyXG4gICAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzb3VyY2UpO1xyXG4gICAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICAgIGNoZWNrJDEuc2hhZGVyRXJyb3IoZ2wsIHNoYWRlciwgc291cmNlLCB0eXBlLCBjb21tYW5kKTtcclxuICAgICAgY2FjaGVbaWRdID0gc2hhZGVyO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzaGFkZXJcclxuICB9XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIHByb2dyYW0gbGlua2luZ1xyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIHZhciBwcm9ncmFtQ2FjaGUgPSB7fTtcclxuICB2YXIgcHJvZ3JhbUxpc3QgPSBbXTtcclxuXHJcbiAgdmFyIFBST0dSQU1fQ09VTlRFUiA9IDA7XHJcblxyXG4gIGZ1bmN0aW9uIFJFR0xQcm9ncmFtIChmcmFnSWQsIHZlcnRJZCkge1xyXG4gICAgdGhpcy5pZCA9IFBST0dSQU1fQ09VTlRFUisrO1xyXG4gICAgdGhpcy5mcmFnSWQgPSBmcmFnSWQ7XHJcbiAgICB0aGlzLnZlcnRJZCA9IHZlcnRJZDtcclxuICAgIHRoaXMucHJvZ3JhbSA9IG51bGw7XHJcbiAgICB0aGlzLnVuaWZvcm1zID0gW107XHJcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBbXTtcclxuXHJcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgdGhpcy5zdGF0cyA9IHtcclxuICAgICAgICB1bmlmb3Jtc0NvdW50OiAwLFxyXG4gICAgICAgIGF0dHJpYnV0ZXNDb3VudDogMFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbGlua1Byb2dyYW0gKGRlc2MsIGNvbW1hbmQpIHtcclxuICAgIHZhciBpLCBpbmZvO1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIGNvbXBpbGUgJiBsaW5rXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgZnJhZ1NoYWRlciA9IGdldFNoYWRlcihHTF9GUkFHTUVOVF9TSEFERVIsIGRlc2MuZnJhZ0lkKTtcclxuICAgIHZhciB2ZXJ0U2hhZGVyID0gZ2V0U2hhZGVyKEdMX1ZFUlRFWF9TSEFERVIsIGRlc2MudmVydElkKTtcclxuXHJcbiAgICB2YXIgcHJvZ3JhbSA9IGRlc2MucHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnU2hhZGVyKTtcclxuICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCB2ZXJ0U2hhZGVyKTtcclxuICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgY2hlY2skMS5saW5rRXJyb3IoXHJcbiAgICAgIGdsLFxyXG4gICAgICBwcm9ncmFtLFxyXG4gICAgICBzdHJpbmdTdG9yZS5zdHIoZGVzYy5mcmFnSWQpLFxyXG4gICAgICBzdHJpbmdTdG9yZS5zdHIoZGVzYy52ZXJ0SWQpLFxyXG4gICAgICBjb21tYW5kKTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBncmFiIHVuaWZvcm1zXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgbnVtVW5pZm9ybXMgPSBnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHByb2dyYW0sIEdMX0FDVElWRV9VTklGT1JNUyk7XHJcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgZGVzYy5zdGF0cy51bmlmb3Jtc0NvdW50ID0gbnVtVW5pZm9ybXM7XHJcbiAgICB9XHJcbiAgICB2YXIgdW5pZm9ybXMgPSBkZXNjLnVuaWZvcm1zO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG51bVVuaWZvcm1zOyArK2kpIHtcclxuICAgICAgaW5mbyA9IGdsLmdldEFjdGl2ZVVuaWZvcm0ocHJvZ3JhbSwgaSk7XHJcbiAgICAgIGlmIChpbmZvKSB7XHJcbiAgICAgICAgaWYgKGluZm8uc2l6ZSA+IDEpIHtcclxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaW5mby5zaXplOyArK2opIHtcclxuICAgICAgICAgICAgdmFyIG5hbWUgPSBpbmZvLm5hbWUucmVwbGFjZSgnWzBdJywgJ1snICsgaiArICddJyk7XHJcbiAgICAgICAgICAgIGluc2VydEFjdGl2ZUluZm8odW5pZm9ybXMsIG5ldyBBY3RpdmVJbmZvKFxyXG4gICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgc3RyaW5nU3RvcmUuaWQobmFtZSksXHJcbiAgICAgICAgICAgICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIG5hbWUpLFxyXG4gICAgICAgICAgICAgIGluZm8pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaW5zZXJ0QWN0aXZlSW5mbyh1bmlmb3JtcywgbmV3IEFjdGl2ZUluZm8oXHJcbiAgICAgICAgICAgIGluZm8ubmFtZSxcclxuICAgICAgICAgICAgc3RyaW5nU3RvcmUuaWQoaW5mby5uYW1lKSxcclxuICAgICAgICAgICAgZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sIGluZm8ubmFtZSksXHJcbiAgICAgICAgICAgIGluZm8pKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBncmFiIGF0dHJpYnV0ZXNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHZhciBudW1BdHRyaWJ1dGVzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBHTF9BQ1RJVkVfQVRUUklCVVRFUyk7XHJcbiAgICBpZiAoY29uZmlnLnByb2ZpbGUpIHtcclxuICAgICAgZGVzYy5zdGF0cy5hdHRyaWJ1dGVzQ291bnQgPSBudW1BdHRyaWJ1dGVzO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBhdHRyaWJ1dGVzID0gZGVzYy5hdHRyaWJ1dGVzO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG51bUF0dHJpYnV0ZXM7ICsraSkge1xyXG4gICAgICBpbmZvID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHByb2dyYW0sIGkpO1xyXG4gICAgICBpZiAoaW5mbykge1xyXG4gICAgICAgIGluc2VydEFjdGl2ZUluZm8oYXR0cmlidXRlcywgbmV3IEFjdGl2ZUluZm8oXHJcbiAgICAgICAgICBpbmZvLm5hbWUsXHJcbiAgICAgICAgICBzdHJpbmdTdG9yZS5pZChpbmZvLm5hbWUpLFxyXG4gICAgICAgICAgZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJvZ3JhbSwgaW5mby5uYW1lKSxcclxuICAgICAgICAgIGluZm8pKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaWYgKGNvbmZpZy5wcm9maWxlKSB7XHJcbiAgICBzdGF0cy5nZXRNYXhVbmlmb3Jtc0NvdW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgbSA9IDA7XHJcbiAgICAgIHByb2dyYW1MaXN0LmZvckVhY2goZnVuY3Rpb24gKGRlc2MpIHtcclxuICAgICAgICBpZiAoZGVzYy5zdGF0cy51bmlmb3Jtc0NvdW50ID4gbSkge1xyXG4gICAgICAgICAgbSA9IGRlc2Muc3RhdHMudW5pZm9ybXNDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gbVxyXG4gICAgfTtcclxuXHJcbiAgICBzdGF0cy5nZXRNYXhBdHRyaWJ1dGVzQ291bnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBtID0gMDtcclxuICAgICAgcHJvZ3JhbUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGVzYykge1xyXG4gICAgICAgIGlmIChkZXNjLnN0YXRzLmF0dHJpYnV0ZXNDb3VudCA+IG0pIHtcclxuICAgICAgICAgIG0gPSBkZXNjLnN0YXRzLmF0dHJpYnV0ZXNDb3VudDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gbVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc3RvcmVTaGFkZXJzICgpIHtcclxuICAgIGZyYWdTaGFkZXJzID0ge307XHJcbiAgICB2ZXJ0U2hhZGVycyA9IHt9O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9ncmFtTGlzdC5sZW5ndGg7ICsraSkge1xyXG4gICAgICBsaW5rUHJvZ3JhbShwcm9ncmFtTGlzdFtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIGRlbGV0ZVNoYWRlciA9IGdsLmRlbGV0ZVNoYWRlci5iaW5kKGdsKTtcclxuICAgICAgdmFsdWVzKGZyYWdTaGFkZXJzKS5mb3JFYWNoKGRlbGV0ZVNoYWRlcik7XHJcbiAgICAgIGZyYWdTaGFkZXJzID0ge307XHJcbiAgICAgIHZhbHVlcyh2ZXJ0U2hhZGVycykuZm9yRWFjaChkZWxldGVTaGFkZXIpO1xyXG4gICAgICB2ZXJ0U2hhZGVycyA9IHt9O1xyXG5cclxuICAgICAgcHJvZ3JhbUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGVzYykge1xyXG4gICAgICAgIGdsLmRlbGV0ZVByb2dyYW0oZGVzYy5wcm9ncmFtKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHByb2dyYW1MaXN0Lmxlbmd0aCA9IDA7XHJcbiAgICAgIHByb2dyYW1DYWNoZSA9IHt9O1xyXG5cclxuICAgICAgc3RhdHMuc2hhZGVyQ291bnQgPSAwO1xyXG4gICAgfSxcclxuXHJcbiAgICBwcm9ncmFtOiBmdW5jdGlvbiAodmVydElkLCBmcmFnSWQsIGNvbW1hbmQpIHtcclxuICAgICAgY2hlY2skMS5jb21tYW5kKHZlcnRJZCA+PSAwLCAnbWlzc2luZyB2ZXJ0ZXggc2hhZGVyJywgY29tbWFuZCk7XHJcbiAgICAgIGNoZWNrJDEuY29tbWFuZChmcmFnSWQgPj0gMCwgJ21pc3NpbmcgZnJhZ21lbnQgc2hhZGVyJywgY29tbWFuZCk7XHJcblxyXG4gICAgICB2YXIgY2FjaGUgPSBwcm9ncmFtQ2FjaGVbZnJhZ0lkXTtcclxuICAgICAgaWYgKCFjYWNoZSkge1xyXG4gICAgICAgIGNhY2hlID0gcHJvZ3JhbUNhY2hlW2ZyYWdJZF0gPSB7fTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgcHJvZ3JhbSA9IGNhY2hlW3ZlcnRJZF07XHJcbiAgICAgIGlmICghcHJvZ3JhbSkge1xyXG4gICAgICAgIHByb2dyYW0gPSBuZXcgUkVHTFByb2dyYW0oZnJhZ0lkLCB2ZXJ0SWQpO1xyXG4gICAgICAgIHN0YXRzLnNoYWRlckNvdW50Kys7XHJcblxyXG4gICAgICAgIGxpbmtQcm9ncmFtKHByb2dyYW0sIGNvbW1hbmQpO1xyXG4gICAgICAgIGNhY2hlW3ZlcnRJZF0gPSBwcm9ncmFtO1xyXG4gICAgICAgIHByb2dyYW1MaXN0LnB1c2gocHJvZ3JhbSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHByb2dyYW1cclxuICAgIH0sXHJcblxyXG4gICAgcmVzdG9yZTogcmVzdG9yZVNoYWRlcnMsXHJcblxyXG4gICAgc2hhZGVyOiBnZXRTaGFkZXIsXHJcblxyXG4gICAgZnJhZzogLTEsXHJcbiAgICB2ZXJ0OiAtMVxyXG4gIH1cclxufVxuXG52YXIgR0xfUkdCQSQzID0gNjQwODtcclxudmFyIEdMX1VOU0lHTkVEX0JZVEUkNyA9IDUxMjE7XHJcbnZhciBHTF9QQUNLX0FMSUdOTUVOVCA9IDB4MEQwNTtcclxudmFyIEdMX0ZMT0FUJDcgPSAweDE0MDY7IC8vIDUxMjZcclxuXHJcbmZ1bmN0aW9uIHdyYXBSZWFkUGl4ZWxzIChcclxuICBnbCxcclxuICBmcmFtZWJ1ZmZlclN0YXRlLFxyXG4gIHJlZ2xQb2xsLFxyXG4gIGNvbnRleHQsXHJcbiAgZ2xBdHRyaWJ1dGVzLFxyXG4gIGV4dGVuc2lvbnMsXHJcbiAgbGltaXRzKSB7XHJcbiAgZnVuY3Rpb24gcmVhZFBpeGVsc0ltcGwgKGlucHV0KSB7XHJcbiAgICB2YXIgdHlwZTtcclxuICAgIGlmIChmcmFtZWJ1ZmZlclN0YXRlLm5leHQgPT09IG51bGwpIHtcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICBnbEF0dHJpYnV0ZXMucHJlc2VydmVEcmF3aW5nQnVmZmVyLFxyXG4gICAgICAgICd5b3UgbXVzdCBjcmVhdGUgYSB3ZWJnbCBjb250ZXh0IHdpdGggXCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXJcIjp0cnVlIGluIG9yZGVyIHRvIHJlYWQgcGl4ZWxzIGZyb20gdGhlIGRyYXdpbmcgYnVmZmVyJyk7XHJcbiAgICAgIHR5cGUgPSBHTF9VTlNJR05FRF9CWVRFJDc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjaGVjayQxKFxyXG4gICAgICAgIGZyYW1lYnVmZmVyU3RhdGUubmV4dC5jb2xvckF0dGFjaG1lbnRzWzBdLnRleHR1cmUgIT09IG51bGwsXHJcbiAgICAgICAgICAnWW91IGNhbm5vdCByZWFkIGZyb20gYSByZW5kZXJidWZmZXInKTtcclxuICAgICAgdHlwZSA9IGZyYW1lYnVmZmVyU3RhdGUubmV4dC5jb2xvckF0dGFjaG1lbnRzWzBdLnRleHR1cmUuX3RleHR1cmUudHlwZTtcclxuXHJcbiAgICAgIGlmIChleHRlbnNpb25zLm9lc190ZXh0dXJlX2Zsb2F0KSB7XHJcbiAgICAgICAgY2hlY2skMShcclxuICAgICAgICAgIHR5cGUgPT09IEdMX1VOU0lHTkVEX0JZVEUkNyB8fCB0eXBlID09PSBHTF9GTE9BVCQ3LFxyXG4gICAgICAgICAgJ1JlYWRpbmcgZnJvbSBhIGZyYW1lYnVmZmVyIGlzIG9ubHkgYWxsb3dlZCBmb3IgdGhlIHR5cGVzIFxcJ3VpbnQ4XFwnIGFuZCBcXCdmbG9hdFxcJycpO1xyXG5cclxuICAgICAgICBpZiAodHlwZSA9PT0gR0xfRkxPQVQkNykge1xyXG4gICAgICAgICAgY2hlY2skMShsaW1pdHMucmVhZEZsb2F0LCAnUmVhZGluZyBcXCdmbG9hdFxcJyB2YWx1ZXMgaXMgbm90IHBlcm1pdHRlZCBpbiB5b3VyIGJyb3dzZXIuIEZvciBhIGZhbGxiYWNrLCBwbGVhc2Ugc2VlOiBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9nbHNsLXJlYWQtZmxvYXQnKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY2hlY2skMShcclxuICAgICAgICAgIHR5cGUgPT09IEdMX1VOU0lHTkVEX0JZVEUkNyxcclxuICAgICAgICAgICdSZWFkaW5nIGZyb20gYSBmcmFtZWJ1ZmZlciBpcyBvbmx5IGFsbG93ZWQgZm9yIHRoZSB0eXBlIFxcJ3VpbnQ4XFwnJyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgeCA9IDA7XHJcbiAgICB2YXIgeSA9IDA7XHJcbiAgICB2YXIgd2lkdGggPSBjb250ZXh0LmZyYW1lYnVmZmVyV2lkdGg7XHJcbiAgICB2YXIgaGVpZ2h0ID0gY29udGV4dC5mcmFtZWJ1ZmZlckhlaWdodDtcclxuICAgIHZhciBkYXRhID0gbnVsbDtcclxuXHJcbiAgICBpZiAoaXNUeXBlZEFycmF5KGlucHV0KSkge1xyXG4gICAgICBkYXRhID0gaW5wdXQ7XHJcbiAgICB9IGVsc2UgaWYgKGlucHV0KSB7XHJcbiAgICAgIGNoZWNrJDEudHlwZShpbnB1dCwgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3VtZW50cyB0byByZWdsLnJlYWQoKScpO1xyXG4gICAgICB4ID0gaW5wdXQueCB8IDA7XHJcbiAgICAgIHkgPSBpbnB1dC55IHwgMDtcclxuICAgICAgY2hlY2skMShcclxuICAgICAgICB4ID49IDAgJiYgeCA8IGNvbnRleHQuZnJhbWVidWZmZXJXaWR0aCxcclxuICAgICAgICAnaW52YWxpZCB4IG9mZnNldCBmb3IgcmVnbC5yZWFkJyk7XHJcbiAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgeSA+PSAwICYmIHkgPCBjb250ZXh0LmZyYW1lYnVmZmVySGVpZ2h0LFxyXG4gICAgICAgICdpbnZhbGlkIHkgb2Zmc2V0IGZvciByZWdsLnJlYWQnKTtcclxuICAgICAgd2lkdGggPSAoaW5wdXQud2lkdGggfHwgKGNvbnRleHQuZnJhbWVidWZmZXJXaWR0aCAtIHgpKSB8IDA7XHJcbiAgICAgIGhlaWdodCA9IChpbnB1dC5oZWlnaHQgfHwgKGNvbnRleHQuZnJhbWVidWZmZXJIZWlnaHQgLSB5KSkgfCAwO1xyXG4gICAgICBkYXRhID0gaW5wdXQuZGF0YSB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHNhbml0eSBjaGVjayBpbnB1dC5kYXRhXHJcbiAgICBpZiAoZGF0YSkge1xyXG4gICAgICBpZiAodHlwZSA9PT0gR0xfVU5TSUdORURfQllURSQ3KSB7XHJcbiAgICAgICAgY2hlY2skMShcclxuICAgICAgICAgIGRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5LFxyXG4gICAgICAgICAgJ2J1ZmZlciBtdXN0IGJlIFxcJ1VpbnQ4QXJyYXlcXCcgd2hlbiByZWFkaW5nIGZyb20gYSBmcmFtZWJ1ZmZlciBvZiB0eXBlIFxcJ3VpbnQ4XFwnJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gR0xfRkxPQVQkNykge1xyXG4gICAgICAgIGNoZWNrJDEoXHJcbiAgICAgICAgICBkYXRhIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5LFxyXG4gICAgICAgICAgJ2J1ZmZlciBtdXN0IGJlIFxcJ0Zsb2F0MzJBcnJheVxcJyB3aGVuIHJlYWRpbmcgZnJvbSBhIGZyYW1lYnVmZmVyIG9mIHR5cGUgXFwnZmxvYXRcXCcnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrJDEoXHJcbiAgICAgIHdpZHRoID4gMCAmJiB3aWR0aCArIHggPD0gY29udGV4dC5mcmFtZWJ1ZmZlcldpZHRoLFxyXG4gICAgICAnaW52YWxpZCB3aWR0aCBmb3IgcmVhZCBwaXhlbHMnKTtcclxuICAgIGNoZWNrJDEoXHJcbiAgICAgIGhlaWdodCA+IDAgJiYgaGVpZ2h0ICsgeSA8PSBjb250ZXh0LmZyYW1lYnVmZmVySGVpZ2h0LFxyXG4gICAgICAnaW52YWxpZCBoZWlnaHQgZm9yIHJlYWQgcGl4ZWxzJyk7XHJcblxyXG4gICAgLy8gVXBkYXRlIFdlYkdMIHN0YXRlXHJcbiAgICByZWdsUG9sbCgpO1xyXG5cclxuICAgIC8vIENvbXB1dGUgc2l6ZVxyXG4gICAgdmFyIHNpemUgPSB3aWR0aCAqIGhlaWdodCAqIDQ7XHJcblxyXG4gICAgLy8gQWxsb2NhdGUgZGF0YVxyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIGlmICh0eXBlID09PSBHTF9VTlNJR05FRF9CWVRFJDcpIHtcclxuICAgICAgICBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoc2l6ZSk7XHJcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gR0xfRkxPQVQkNykge1xyXG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IG5ldyBGbG9hdDMyQXJyYXkoc2l6ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBUeXBlIGNoZWNrXHJcbiAgICBjaGVjayQxLmlzVHlwZWRBcnJheShkYXRhLCAnZGF0YSBidWZmZXIgZm9yIHJlZ2wucmVhZCgpIG11c3QgYmUgYSB0eXBlZGFycmF5Jyk7XHJcbiAgICBjaGVjayQxKGRhdGEuYnl0ZUxlbmd0aCA+PSBzaXplLCAnZGF0YSBidWZmZXIgZm9yIHJlZ2wucmVhZCgpIHRvbyBzbWFsbCcpO1xyXG5cclxuICAgIC8vIFJ1biByZWFkIHBpeGVsc1xyXG4gICAgZ2wucGl4ZWxTdG9yZWkoR0xfUEFDS19BTElHTk1FTlQsIDQpO1xyXG4gICAgZ2wucmVhZFBpeGVscyh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBHTF9SR0JBJDMsXHJcbiAgICAgICAgICAgICAgICAgIHR5cGUsXHJcbiAgICAgICAgICAgICAgICAgIGRhdGEpO1xyXG5cclxuICAgIHJldHVybiBkYXRhXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZWFkUGl4ZWxzRkJPIChvcHRpb25zKSB7XHJcbiAgICB2YXIgcmVzdWx0O1xyXG4gICAgZnJhbWVidWZmZXJTdGF0ZS5zZXRGQk8oe1xyXG4gICAgICBmcmFtZWJ1ZmZlcjogb3B0aW9ucy5mcmFtZWJ1ZmZlclxyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXN1bHQgPSByZWFkUGl4ZWxzSW1wbChvcHRpb25zKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVhZFBpeGVscyAob3B0aW9ucykge1xyXG4gICAgaWYgKCFvcHRpb25zIHx8ICEoJ2ZyYW1lYnVmZmVyJyBpbiBvcHRpb25zKSkge1xyXG4gICAgICByZXR1cm4gcmVhZFBpeGVsc0ltcGwob3B0aW9ucylcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiByZWFkUGl4ZWxzRkJPKG9wdGlvbnMpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVhZFBpeGVsc1xyXG59XG5cbmZ1bmN0aW9uIHNsaWNlICh4KSB7XHJcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHgpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGpvaW4gKHgpIHtcclxuICByZXR1cm4gc2xpY2UoeCkuam9pbignJylcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlRW52aXJvbm1lbnQgKCkge1xyXG4gIC8vIFVuaXF1ZSB2YXJpYWJsZSBpZCBjb3VudGVyXHJcbiAgdmFyIHZhckNvdW50ZXIgPSAwO1xyXG5cclxuICAvLyBMaW5rZWQgdmFsdWVzIGFyZSBwYXNzZWQgZnJvbSB0aGlzIHNjb3BlIGludG8gdGhlIGdlbmVyYXRlZCBjb2RlIGJsb2NrXHJcbiAgLy8gQ2FsbGluZyBsaW5rKCkgcGFzc2VzIGEgdmFsdWUgaW50byB0aGUgZ2VuZXJhdGVkIHNjb3BlIGFuZCByZXR1cm5zXHJcbiAgLy8gdGhlIHZhcmlhYmxlIG5hbWUgd2hpY2ggaXQgaXMgYm91bmQgdG9cclxuICB2YXIgbGlua2VkTmFtZXMgPSBbXTtcclxuICB2YXIgbGlua2VkVmFsdWVzID0gW107XHJcbiAgZnVuY3Rpb24gbGluayAodmFsdWUpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlua2VkVmFsdWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmIChsaW5rZWRWYWx1ZXNbaV0gPT09IHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIGxpbmtlZE5hbWVzW2ldXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgbmFtZSA9ICdnJyArICh2YXJDb3VudGVyKyspO1xyXG4gICAgbGlua2VkTmFtZXMucHVzaChuYW1lKTtcclxuICAgIGxpbmtlZFZhbHVlcy5wdXNoKHZhbHVlKTtcclxuICAgIHJldHVybiBuYW1lXHJcbiAgfVxyXG5cclxuICAvLyBjcmVhdGUgYSBjb2RlIGJsb2NrXHJcbiAgZnVuY3Rpb24gYmxvY2sgKCkge1xyXG4gICAgdmFyIGNvZGUgPSBbXTtcclxuICAgIGZ1bmN0aW9uIHB1c2ggKCkge1xyXG4gICAgICBjb2RlLnB1c2guYXBwbHkoY29kZSwgc2xpY2UoYXJndW1lbnRzKSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZhcnMgPSBbXTtcclxuICAgIGZ1bmN0aW9uIGRlZiAoKSB7XHJcbiAgICAgIHZhciBuYW1lID0gJ3YnICsgKHZhckNvdW50ZXIrKyk7XHJcbiAgICAgIHZhcnMucHVzaChuYW1lKTtcclxuXHJcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvZGUucHVzaChuYW1lLCAnPScpO1xyXG4gICAgICAgIGNvZGUucHVzaC5hcHBseShjb2RlLCBzbGljZShhcmd1bWVudHMpKTtcclxuICAgICAgICBjb2RlLnB1c2goJzsnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIG5hbWVcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXh0ZW5kKHB1c2gsIHtcclxuICAgICAgZGVmOiBkZWYsXHJcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGpvaW4oW1xyXG4gICAgICAgICAgKHZhcnMubGVuZ3RoID4gMCA/ICd2YXIgJyArIHZhcnMgKyAnOycgOiAnJyksXHJcbiAgICAgICAgICBqb2luKGNvZGUpXHJcbiAgICAgICAgXSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNjb3BlICgpIHtcclxuICAgIHZhciBlbnRyeSA9IGJsb2NrKCk7XHJcbiAgICB2YXIgZXhpdCA9IGJsb2NrKCk7XHJcblxyXG4gICAgdmFyIGVudHJ5VG9TdHJpbmcgPSBlbnRyeS50b1N0cmluZztcclxuICAgIHZhciBleGl0VG9TdHJpbmcgPSBleGl0LnRvU3RyaW5nO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmUgKG9iamVjdCwgcHJvcCkge1xyXG4gICAgICBleGl0KG9iamVjdCwgcHJvcCwgJz0nLCBlbnRyeS5kZWYob2JqZWN0LCBwcm9wKSwgJzsnKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICgpIHtcclxuICAgICAgZW50cnkuYXBwbHkoZW50cnksIHNsaWNlKGFyZ3VtZW50cykpO1xyXG4gICAgfSwge1xyXG4gICAgICBkZWY6IGVudHJ5LmRlZixcclxuICAgICAgZW50cnk6IGVudHJ5LFxyXG4gICAgICBleGl0OiBleGl0LFxyXG4gICAgICBzYXZlOiBzYXZlLFxyXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChvYmplY3QsIHByb3AsIHZhbHVlKSB7XHJcbiAgICAgICAgc2F2ZShvYmplY3QsIHByb3ApO1xyXG4gICAgICAgIGVudHJ5KG9iamVjdCwgcHJvcCwgJz0nLCB2YWx1ZSwgJzsnKTtcclxuICAgICAgfSxcclxuICAgICAgdG9TdHJpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZW50cnlUb1N0cmluZygpICsgZXhpdFRvU3RyaW5nKClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbmRpdGlvbmFsICgpIHtcclxuICAgIHZhciBwcmVkID0gam9pbihhcmd1bWVudHMpO1xyXG4gICAgdmFyIHRoZW5CbG9jayA9IHNjb3BlKCk7XHJcbiAgICB2YXIgZWxzZUJsb2NrID0gc2NvcGUoKTtcclxuXHJcbiAgICB2YXIgdGhlblRvU3RyaW5nID0gdGhlbkJsb2NrLnRvU3RyaW5nO1xyXG4gICAgdmFyIGVsc2VUb1N0cmluZyA9IGVsc2VCbG9jay50b1N0cmluZztcclxuXHJcbiAgICByZXR1cm4gZXh0ZW5kKHRoZW5CbG9jaywge1xyXG4gICAgICB0aGVuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhlbkJsb2NrLmFwcGx5KHRoZW5CbG9jaywgc2xpY2UoYXJndW1lbnRzKSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgfSxcclxuICAgICAgZWxzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVsc2VCbG9jay5hcHBseShlbHNlQmxvY2ssIHNsaWNlKGFyZ3VtZW50cykpO1xyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGVsc2VDbGF1c2UgPSBlbHNlVG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAoZWxzZUNsYXVzZSkge1xyXG4gICAgICAgICAgZWxzZUNsYXVzZSA9ICdlbHNleycgKyBlbHNlQ2xhdXNlICsgJ30nO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gam9pbihbXHJcbiAgICAgICAgICAnaWYoJywgcHJlZCwgJyl7JyxcclxuICAgICAgICAgIHRoZW5Ub1N0cmluZygpLFxyXG4gICAgICAgICAgJ30nLCBlbHNlQ2xhdXNlXHJcbiAgICAgICAgXSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8vIHByb2NlZHVyZSBsaXN0XHJcbiAgdmFyIGdsb2JhbEJsb2NrID0gYmxvY2soKTtcclxuICB2YXIgcHJvY2VkdXJlcyA9IHt9O1xyXG4gIGZ1bmN0aW9uIHByb2MgKG5hbWUsIGNvdW50KSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgZnVuY3Rpb24gYXJnICgpIHtcclxuICAgICAgdmFyIG5hbWUgPSAnYScgKyBhcmdzLmxlbmd0aDtcclxuICAgICAgYXJncy5wdXNoKG5hbWUpO1xyXG4gICAgICByZXR1cm4gbmFtZVxyXG4gICAgfVxyXG5cclxuICAgIGNvdW50ID0gY291bnQgfHwgMDtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xyXG4gICAgICBhcmcoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYm9keSA9IHNjb3BlKCk7XHJcbiAgICB2YXIgYm9keVRvU3RyaW5nID0gYm9keS50b1N0cmluZztcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gcHJvY2VkdXJlc1tuYW1lXSA9IGV4dGVuZChib2R5LCB7XHJcbiAgICAgIGFyZzogYXJnLFxyXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBqb2luKFtcclxuICAgICAgICAgICdmdW5jdGlvbignLCBhcmdzLmpvaW4oKSwgJyl7JyxcclxuICAgICAgICAgIGJvZHlUb1N0cmluZygpLFxyXG4gICAgICAgICAgJ30nXHJcbiAgICAgICAgXSlcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY29tcGlsZSAoKSB7XHJcbiAgICB2YXIgY29kZSA9IFsnXCJ1c2Ugc3RyaWN0XCI7JyxcclxuICAgICAgZ2xvYmFsQmxvY2ssXHJcbiAgICAgICdyZXR1cm4geyddO1xyXG4gICAgT2JqZWN0LmtleXMocHJvY2VkdXJlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICBjb2RlLnB1c2goJ1wiJywgbmFtZSwgJ1wiOicsIHByb2NlZHVyZXNbbmFtZV0udG9TdHJpbmcoKSwgJywnKTtcclxuICAgIH0pO1xyXG4gICAgY29kZS5wdXNoKCd9Jyk7XHJcbiAgICB2YXIgc3JjID0gam9pbihjb2RlKVxyXG4gICAgICAucmVwbGFjZSgvOy9nLCAnO1xcbicpXHJcbiAgICAgIC5yZXBsYWNlKC99L2csICd9XFxuJylcclxuICAgICAgLnJlcGxhY2UoL3svZywgJ3tcXG4nKTtcclxuICAgIHZhciBwcm9jID0gRnVuY3Rpb24uYXBwbHkobnVsbCwgbGlua2VkTmFtZXMuY29uY2F0KHNyYykpO1xyXG4gICAgcmV0dXJuIHByb2MuYXBwbHkobnVsbCwgbGlua2VkVmFsdWVzKVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdsb2JhbDogZ2xvYmFsQmxvY2ssXHJcbiAgICBsaW5rOiBsaW5rLFxyXG4gICAgYmxvY2s6IGJsb2NrLFxyXG4gICAgcHJvYzogcHJvYyxcclxuICAgIHNjb3BlOiBzY29wZSxcclxuICAgIGNvbmQ6IGNvbmRpdGlvbmFsLFxyXG4gICAgY29tcGlsZTogY29tcGlsZVxyXG4gIH1cclxufVxuXG4vLyBcImN1dGVcIiBuYW1lcyBmb3IgdmVjdG9yIGNvbXBvbmVudHNcclxudmFyIENVVEVfQ09NUE9ORU5UUyA9ICd4eXp3Jy5zcGxpdCgnJyk7XHJcblxyXG52YXIgR0xfVU5TSUdORURfQllURSQ4ID0gNTEyMTtcclxuXHJcbnZhciBBVFRSSUJfU1RBVEVfUE9JTlRFUiA9IDE7XHJcbnZhciBBVFRSSUJfU1RBVEVfQ09OU1RBTlQgPSAyO1xyXG5cclxudmFyIERZTl9GVU5DJDEgPSAwO1xyXG52YXIgRFlOX1BST1AkMSA9IDE7XHJcbnZhciBEWU5fQ09OVEVYVCQxID0gMjtcclxudmFyIERZTl9TVEFURSQxID0gMztcclxudmFyIERZTl9USFVOSyA9IDQ7XHJcblxyXG52YXIgU19ESVRIRVIgPSAnZGl0aGVyJztcclxudmFyIFNfQkxFTkRfRU5BQkxFID0gJ2JsZW5kLmVuYWJsZSc7XHJcbnZhciBTX0JMRU5EX0NPTE9SID0gJ2JsZW5kLmNvbG9yJztcclxudmFyIFNfQkxFTkRfRVFVQVRJT04gPSAnYmxlbmQuZXF1YXRpb24nO1xyXG52YXIgU19CTEVORF9GVU5DID0gJ2JsZW5kLmZ1bmMnO1xyXG52YXIgU19ERVBUSF9FTkFCTEUgPSAnZGVwdGguZW5hYmxlJztcclxudmFyIFNfREVQVEhfRlVOQyA9ICdkZXB0aC5mdW5jJztcclxudmFyIFNfREVQVEhfUkFOR0UgPSAnZGVwdGgucmFuZ2UnO1xyXG52YXIgU19ERVBUSF9NQVNLID0gJ2RlcHRoLm1hc2snO1xyXG52YXIgU19DT0xPUl9NQVNLID0gJ2NvbG9yTWFzayc7XHJcbnZhciBTX0NVTExfRU5BQkxFID0gJ2N1bGwuZW5hYmxlJztcclxudmFyIFNfQ1VMTF9GQUNFID0gJ2N1bGwuZmFjZSc7XHJcbnZhciBTX0ZST05UX0ZBQ0UgPSAnZnJvbnRGYWNlJztcclxudmFyIFNfTElORV9XSURUSCA9ICdsaW5lV2lkdGgnO1xyXG52YXIgU19QT0xZR09OX09GRlNFVF9FTkFCTEUgPSAncG9seWdvbk9mZnNldC5lbmFibGUnO1xyXG52YXIgU19QT0xZR09OX09GRlNFVF9PRkZTRVQgPSAncG9seWdvbk9mZnNldC5vZmZzZXQnO1xyXG52YXIgU19TQU1QTEVfQUxQSEEgPSAnc2FtcGxlLmFscGhhJztcclxudmFyIFNfU0FNUExFX0VOQUJMRSA9ICdzYW1wbGUuZW5hYmxlJztcclxudmFyIFNfU0FNUExFX0NPVkVSQUdFID0gJ3NhbXBsZS5jb3ZlcmFnZSc7XHJcbnZhciBTX1NURU5DSUxfRU5BQkxFID0gJ3N0ZW5jaWwuZW5hYmxlJztcclxudmFyIFNfU1RFTkNJTF9NQVNLID0gJ3N0ZW5jaWwubWFzayc7XHJcbnZhciBTX1NURU5DSUxfRlVOQyA9ICdzdGVuY2lsLmZ1bmMnO1xyXG52YXIgU19TVEVOQ0lMX09QRlJPTlQgPSAnc3RlbmNpbC5vcEZyb250JztcclxudmFyIFNfU1RFTkNJTF9PUEJBQ0sgPSAnc3RlbmNpbC5vcEJhY2snO1xyXG52YXIgU19TQ0lTU09SX0VOQUJMRSA9ICdzY2lzc29yLmVuYWJsZSc7XHJcbnZhciBTX1NDSVNTT1JfQk9YID0gJ3NjaXNzb3IuYm94JztcclxudmFyIFNfVklFV1BPUlQgPSAndmlld3BvcnQnO1xyXG5cclxudmFyIFNfUFJPRklMRSA9ICdwcm9maWxlJztcclxuXHJcbnZhciBTX0ZSQU1FQlVGRkVSID0gJ2ZyYW1lYnVmZmVyJztcclxudmFyIFNfVkVSVCA9ICd2ZXJ0JztcclxudmFyIFNfRlJBRyA9ICdmcmFnJztcclxudmFyIFNfRUxFTUVOVFMgPSAnZWxlbWVudHMnO1xyXG52YXIgU19QUklNSVRJVkUgPSAncHJpbWl0aXZlJztcclxudmFyIFNfQ09VTlQgPSAnY291bnQnO1xyXG52YXIgU19PRkZTRVQgPSAnb2Zmc2V0JztcclxudmFyIFNfSU5TVEFOQ0VTID0gJ2luc3RhbmNlcyc7XHJcblxyXG52YXIgU1VGRklYX1dJRFRIID0gJ1dpZHRoJztcclxudmFyIFNVRkZJWF9IRUlHSFQgPSAnSGVpZ2h0JztcclxuXHJcbnZhciBTX0ZSQU1FQlVGRkVSX1dJRFRIID0gU19GUkFNRUJVRkZFUiArIFNVRkZJWF9XSURUSDtcclxudmFyIFNfRlJBTUVCVUZGRVJfSEVJR0hUID0gU19GUkFNRUJVRkZFUiArIFNVRkZJWF9IRUlHSFQ7XHJcbnZhciBTX1ZJRVdQT1JUX1dJRFRIID0gU19WSUVXUE9SVCArIFNVRkZJWF9XSURUSDtcclxudmFyIFNfVklFV1BPUlRfSEVJR0hUID0gU19WSUVXUE9SVCArIFNVRkZJWF9IRUlHSFQ7XHJcbnZhciBTX0RSQVdJTkdCVUZGRVIgPSAnZHJhd2luZ0J1ZmZlcic7XHJcbnZhciBTX0RSQVdJTkdCVUZGRVJfV0lEVEggPSBTX0RSQVdJTkdCVUZGRVIgKyBTVUZGSVhfV0lEVEg7XHJcbnZhciBTX0RSQVdJTkdCVUZGRVJfSEVJR0hUID0gU19EUkFXSU5HQlVGRkVSICsgU1VGRklYX0hFSUdIVDtcclxuXHJcbnZhciBORVNURURfT1BUSU9OUyA9IFtcclxuICBTX0JMRU5EX0ZVTkMsXHJcbiAgU19CTEVORF9FUVVBVElPTixcclxuICBTX1NURU5DSUxfRlVOQyxcclxuICBTX1NURU5DSUxfT1BGUk9OVCxcclxuICBTX1NURU5DSUxfT1BCQUNLLFxyXG4gIFNfU0FNUExFX0NPVkVSQUdFLFxyXG4gIFNfVklFV1BPUlQsXHJcbiAgU19TQ0lTU09SX0JPWCxcclxuICBTX1BPTFlHT05fT0ZGU0VUX09GRlNFVFxyXG5dO1xyXG5cclxudmFyIEdMX0FSUkFZX0JVRkZFUiQxID0gMzQ5NjI7XHJcbnZhciBHTF9FTEVNRU5UX0FSUkFZX0JVRkZFUiQxID0gMzQ5NjM7XHJcblxyXG52YXIgR0xfRlJBR01FTlRfU0hBREVSJDEgPSAzNTYzMjtcclxudmFyIEdMX1ZFUlRFWF9TSEFERVIkMSA9IDM1NjMzO1xyXG5cclxudmFyIEdMX1RFWFRVUkVfMkQkMyA9IDB4MERFMTtcclxudmFyIEdMX1RFWFRVUkVfQ1VCRV9NQVAkMiA9IDB4ODUxMztcclxuXHJcbnZhciBHTF9DVUxMX0ZBQ0UgPSAweDBCNDQ7XHJcbnZhciBHTF9CTEVORCA9IDB4MEJFMjtcclxudmFyIEdMX0RJVEhFUiA9IDB4MEJEMDtcclxudmFyIEdMX1NURU5DSUxfVEVTVCA9IDB4MEI5MDtcclxudmFyIEdMX0RFUFRIX1RFU1QgPSAweDBCNzE7XHJcbnZhciBHTF9TQ0lTU09SX1RFU1QgPSAweDBDMTE7XHJcbnZhciBHTF9QT0xZR09OX09GRlNFVF9GSUxMID0gMHg4MDM3O1xyXG52YXIgR0xfU0FNUExFX0FMUEhBX1RPX0NPVkVSQUdFID0gMHg4MDlFO1xyXG52YXIgR0xfU0FNUExFX0NPVkVSQUdFID0gMHg4MEEwO1xyXG5cclxudmFyIEdMX0ZMT0FUJDggPSA1MTI2O1xyXG52YXIgR0xfRkxPQVRfVkVDMiA9IDM1NjY0O1xyXG52YXIgR0xfRkxPQVRfVkVDMyA9IDM1NjY1O1xyXG52YXIgR0xfRkxPQVRfVkVDNCA9IDM1NjY2O1xyXG52YXIgR0xfSU5UJDMgPSA1MTI0O1xyXG52YXIgR0xfSU5UX1ZFQzIgPSAzNTY2NztcclxudmFyIEdMX0lOVF9WRUMzID0gMzU2Njg7XHJcbnZhciBHTF9JTlRfVkVDNCA9IDM1NjY5O1xyXG52YXIgR0xfQk9PTCA9IDM1NjcwO1xyXG52YXIgR0xfQk9PTF9WRUMyID0gMzU2NzE7XHJcbnZhciBHTF9CT09MX1ZFQzMgPSAzNTY3MjtcclxudmFyIEdMX0JPT0xfVkVDNCA9IDM1NjczO1xyXG52YXIgR0xfRkxPQVRfTUFUMiA9IDM1Njc0O1xyXG52YXIgR0xfRkxPQVRfTUFUMyA9IDM1Njc1O1xyXG52YXIgR0xfRkxPQVRfTUFUNCA9IDM1Njc2O1xyXG52YXIgR0xfU0FNUExFUl8yRCA9IDM1Njc4O1xyXG52YXIgR0xfU0FNUExFUl9DVUJFID0gMzU2ODA7XHJcblxyXG52YXIgR0xfVFJJQU5HTEVTJDEgPSA0O1xyXG5cclxudmFyIEdMX0ZST05UID0gMTAyODtcclxudmFyIEdMX0JBQ0sgPSAxMDI5O1xyXG52YXIgR0xfQ1cgPSAweDA5MDA7XHJcbnZhciBHTF9DQ1cgPSAweDA5MDE7XHJcbnZhciBHTF9NSU5fRVhUID0gMHg4MDA3O1xyXG52YXIgR0xfTUFYX0VYVCA9IDB4ODAwODtcclxudmFyIEdMX0FMV0FZUyA9IDUxOTtcclxudmFyIEdMX0tFRVAgPSA3NjgwO1xyXG52YXIgR0xfWkVSTyA9IDA7XHJcbnZhciBHTF9PTkUgPSAxO1xyXG52YXIgR0xfRlVOQ19BREQgPSAweDgwMDY7XHJcbnZhciBHTF9MRVNTID0gNTEzO1xyXG5cclxudmFyIEdMX0ZSQU1FQlVGRkVSJDIgPSAweDhENDA7XHJcbnZhciBHTF9DT0xPUl9BVFRBQ0hNRU5UMCQyID0gMHg4Q0UwO1xyXG5cclxudmFyIGJsZW5kRnVuY3MgPSB7XHJcbiAgJzAnOiAwLFxyXG4gICcxJzogMSxcclxuICAnemVybyc6IDAsXHJcbiAgJ29uZSc6IDEsXHJcbiAgJ3NyYyBjb2xvcic6IDc2OCxcclxuICAnb25lIG1pbnVzIHNyYyBjb2xvcic6IDc2OSxcclxuICAnc3JjIGFscGhhJzogNzcwLFxyXG4gICdvbmUgbWludXMgc3JjIGFscGhhJzogNzcxLFxyXG4gICdkc3QgY29sb3InOiA3NzQsXHJcbiAgJ29uZSBtaW51cyBkc3QgY29sb3InOiA3NzUsXHJcbiAgJ2RzdCBhbHBoYSc6IDc3MixcclxuICAnb25lIG1pbnVzIGRzdCBhbHBoYSc6IDc3MyxcclxuICAnY29uc3RhbnQgY29sb3InOiAzMjc2OSxcclxuICAnb25lIG1pbnVzIGNvbnN0YW50IGNvbG9yJzogMzI3NzAsXHJcbiAgJ2NvbnN0YW50IGFscGhhJzogMzI3NzEsXHJcbiAgJ29uZSBtaW51cyBjb25zdGFudCBhbHBoYSc6IDMyNzcyLFxyXG4gICdzcmMgYWxwaGEgc2F0dXJhdGUnOiA3NzZcclxufTtcclxuXHJcbi8vIFRoZXJlIGFyZSBpbnZhbGlkIHZhbHVlcyBmb3Igc3JjUkdCIGFuZCBkc3RSR0IuIFNlZTpcclxuLy8gaHR0cHM6Ly93d3cua2hyb25vcy5vcmcvcmVnaXN0cnkvd2ViZ2wvc3BlY3MvMS4wLyM2LjEzXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9LaHJvbm9zR3JvdXAvV2ViR0wvYmxvYi8wZDMyMDFmNWY3ZWMzYzAwNjBiYzFmMDQwNzc0NjE1NDFmMTk4N2I5L2NvbmZvcm1hbmNlLXN1aXRlcy8xLjAuMy9jb25mb3JtYW5jZS9taXNjL3dlYmdsLXNwZWNpZmljLmh0bWwjTDU2XHJcbnZhciBpbnZhbGlkQmxlbmRDb21iaW5hdGlvbnMgPSBbXHJcbiAgJ2NvbnN0YW50IGNvbG9yLCBjb25zdGFudCBhbHBoYScsXHJcbiAgJ29uZSBtaW51cyBjb25zdGFudCBjb2xvciwgY29uc3RhbnQgYWxwaGEnLFxyXG4gICdjb25zdGFudCBjb2xvciwgb25lIG1pbnVzIGNvbnN0YW50IGFscGhhJyxcclxuICAnb25lIG1pbnVzIGNvbnN0YW50IGNvbG9yLCBvbmUgbWludXMgY29uc3RhbnQgYWxwaGEnLFxyXG4gICdjb25zdGFudCBhbHBoYSwgY29uc3RhbnQgY29sb3InLFxyXG4gICdjb25zdGFudCBhbHBoYSwgb25lIG1pbnVzIGNvbnN0YW50IGNvbG9yJyxcclxuICAnb25lIG1pbnVzIGNvbnN0YW50IGFscGhhLCBjb25zdGFudCBjb2xvcicsXHJcbiAgJ29uZSBtaW51cyBjb25zdGFudCBhbHBoYSwgb25lIG1pbnVzIGNvbnN0YW50IGNvbG9yJ1xyXG5dO1xyXG5cclxudmFyIGNvbXBhcmVGdW5jcyA9IHtcclxuICAnbmV2ZXInOiA1MTIsXHJcbiAgJ2xlc3MnOiA1MTMsXHJcbiAgJzwnOiA1MTMsXHJcbiAgJ2VxdWFsJzogNTE0LFxyXG4gICc9JzogNTE0LFxyXG4gICc9PSc6IDUxNCxcclxuICAnPT09JzogNTE0LFxyXG4gICdsZXF1YWwnOiA1MTUsXHJcbiAgJzw9JzogNTE1LFxyXG4gICdncmVhdGVyJzogNTE2LFxyXG4gICc+JzogNTE2LFxyXG4gICdub3RlcXVhbCc6IDUxNyxcclxuICAnIT0nOiA1MTcsXHJcbiAgJyE9PSc6IDUxNyxcclxuICAnZ2VxdWFsJzogNTE4LFxyXG4gICc+PSc6IDUxOCxcclxuICAnYWx3YXlzJzogNTE5XHJcbn07XHJcblxyXG52YXIgc3RlbmNpbE9wcyA9IHtcclxuICAnMCc6IDAsXHJcbiAgJ3plcm8nOiAwLFxyXG4gICdrZWVwJzogNzY4MCxcclxuICAncmVwbGFjZSc6IDc2ODEsXHJcbiAgJ2luY3JlbWVudCc6IDc2ODIsXHJcbiAgJ2RlY3JlbWVudCc6IDc2ODMsXHJcbiAgJ2luY3JlbWVudCB3cmFwJzogMzQwNTUsXHJcbiAgJ2RlY3JlbWVudCB3cmFwJzogMzQwNTYsXHJcbiAgJ2ludmVydCc6IDUzODZcclxufTtcclxuXHJcbnZhciBzaGFkZXJUeXBlID0ge1xyXG4gICdmcmFnJzogR0xfRlJBR01FTlRfU0hBREVSJDEsXHJcbiAgJ3ZlcnQnOiBHTF9WRVJURVhfU0hBREVSJDFcclxufTtcclxuXHJcbnZhciBvcmllbnRhdGlvblR5cGUgPSB7XHJcbiAgJ2N3JzogR0xfQ1csXHJcbiAgJ2Njdyc6IEdMX0NDV1xyXG59O1xyXG5cclxuZnVuY3Rpb24gaXNCdWZmZXJBcmdzICh4KSB7XHJcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoeCkgfHxcclxuICAgIGlzVHlwZWRBcnJheSh4KSB8fFxyXG4gICAgaXNOREFycmF5TGlrZSh4KVxyXG59XHJcblxyXG4vLyBNYWtlIHN1cmUgdmlld3BvcnQgaXMgcHJvY2Vzc2VkIGZpcnN0XHJcbmZ1bmN0aW9uIHNvcnRTdGF0ZSAoc3RhdGUpIHtcclxuICByZXR1cm4gc3RhdGUuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IFNfVklFV1BPUlQpIHtcclxuICAgICAgcmV0dXJuIC0xXHJcbiAgICB9IGVsc2UgaWYgKGIgPT09IFNfVklFV1BPUlQpIHtcclxuICAgICAgcmV0dXJuIDFcclxuICAgIH1cclxuICAgIHJldHVybiAoYSA8IGIpID8gLTEgOiAxXHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gRGVjbGFyYXRpb24gKHRoaXNEZXAsIGNvbnRleHREZXAsIHByb3BEZXAsIGFwcGVuZCkge1xyXG4gIHRoaXMudGhpc0RlcCA9IHRoaXNEZXA7XHJcbiAgdGhpcy5jb250ZXh0RGVwID0gY29udGV4dERlcDtcclxuICB0aGlzLnByb3BEZXAgPSBwcm9wRGVwO1xyXG4gIHRoaXMuYXBwZW5kID0gYXBwZW5kO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpc1N0YXRpYyAoZGVjbCkge1xyXG4gIHJldHVybiBkZWNsICYmICEoZGVjbC50aGlzRGVwIHx8IGRlY2wuY29udGV4dERlcCB8fCBkZWNsLnByb3BEZXApXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0RlY2wgKGFwcGVuZCkge1xyXG4gIHJldHVybiBuZXcgRGVjbGFyYXRpb24oZmFsc2UsIGZhbHNlLCBmYWxzZSwgYXBwZW5kKVxyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVEeW5hbWljRGVjbCAoZHluLCBhcHBlbmQpIHtcclxuICB2YXIgdHlwZSA9IGR5bi50eXBlO1xyXG4gIGlmICh0eXBlID09PSBEWU5fRlVOQyQxKSB7XHJcbiAgICB2YXIgbnVtQXJncyA9IGR5bi5kYXRhLmxlbmd0aDtcclxuICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXHJcbiAgICAgIHRydWUsXHJcbiAgICAgIG51bUFyZ3MgPj0gMSxcclxuICAgICAgbnVtQXJncyA+PSAyLFxyXG4gICAgICBhcHBlbmQpXHJcbiAgfSBlbHNlIGlmICh0eXBlID09PSBEWU5fVEhVTkspIHtcclxuICAgIHZhciBkYXRhID0gZHluLmRhdGE7XHJcbiAgICByZXR1cm4gbmV3IERlY2xhcmF0aW9uKFxyXG4gICAgICBkYXRhLnRoaXNEZXAsXHJcbiAgICAgIGRhdGEuY29udGV4dERlcCxcclxuICAgICAgZGF0YS5wcm9wRGVwLFxyXG4gICAgICBhcHBlbmQpXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXHJcbiAgICAgIHR5cGUgPT09IERZTl9TVEFURSQxLFxyXG4gICAgICB0eXBlID09PSBEWU5fQ09OVEVYVCQxLFxyXG4gICAgICB0eXBlID09PSBEWU5fUFJPUCQxLFxyXG4gICAgICBhcHBlbmQpXHJcbiAgfVxyXG59XHJcblxyXG52YXIgU0NPUEVfREVDTCA9IG5ldyBEZWNsYXJhdGlvbihmYWxzZSwgZmFsc2UsIGZhbHNlLCBmdW5jdGlvbiAoKSB7fSk7XHJcblxyXG5mdW5jdGlvbiByZWdsQ29yZSAoXHJcbiAgZ2wsXHJcbiAgc3RyaW5nU3RvcmUsXHJcbiAgZXh0ZW5zaW9ucyxcclxuICBsaW1pdHMsXHJcbiAgYnVmZmVyU3RhdGUsXHJcbiAgZWxlbWVudFN0YXRlLFxyXG4gIHRleHR1cmVTdGF0ZSxcclxuICBmcmFtZWJ1ZmZlclN0YXRlLFxyXG4gIHVuaWZvcm1TdGF0ZSxcclxuICBhdHRyaWJ1dGVTdGF0ZSxcclxuICBzaGFkZXJTdGF0ZSxcclxuICBkcmF3U3RhdGUsXHJcbiAgY29udGV4dFN0YXRlLFxyXG4gIHRpbWVyLFxyXG4gIGNvbmZpZykge1xyXG4gIHZhciBBdHRyaWJ1dGVSZWNvcmQgPSBhdHRyaWJ1dGVTdGF0ZS5SZWNvcmQ7XHJcblxyXG4gIHZhciBibGVuZEVxdWF0aW9ucyA9IHtcclxuICAgICdhZGQnOiAzMjc3NCxcclxuICAgICdzdWJ0cmFjdCc6IDMyNzc4LFxyXG4gICAgJ3JldmVyc2Ugc3VidHJhY3QnOiAzMjc3OVxyXG4gIH07XHJcbiAgaWYgKGV4dGVuc2lvbnMuZXh0X2JsZW5kX21pbm1heCkge1xyXG4gICAgYmxlbmRFcXVhdGlvbnMubWluID0gR0xfTUlOX0VYVDtcclxuICAgIGJsZW5kRXF1YXRpb25zLm1heCA9IEdMX01BWF9FWFQ7XHJcbiAgfVxyXG5cclxuICB2YXIgZXh0SW5zdGFuY2luZyA9IGV4dGVuc2lvbnMuYW5nbGVfaW5zdGFuY2VkX2FycmF5cztcclxuICB2YXIgZXh0RHJhd0J1ZmZlcnMgPSBleHRlbnNpb25zLndlYmdsX2RyYXdfYnVmZmVycztcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gV0VCR0wgU1RBVEVcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgY3VycmVudFN0YXRlID0ge1xyXG4gICAgZGlydHk6IHRydWUsXHJcbiAgICBwcm9maWxlOiBjb25maWcucHJvZmlsZVxyXG4gIH07XHJcbiAgdmFyIG5leHRTdGF0ZSA9IHt9O1xyXG4gIHZhciBHTF9TVEFURV9OQU1FUyA9IFtdO1xyXG4gIHZhciBHTF9GTEFHUyA9IHt9O1xyXG4gIHZhciBHTF9WQVJJQUJMRVMgPSB7fTtcclxuXHJcbiAgZnVuY3Rpb24gcHJvcE5hbWUgKG5hbWUpIHtcclxuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoJy4nLCAnXycpXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdGF0ZUZsYWcgKHNuYW1lLCBjYXAsIGluaXQpIHtcclxuICAgIHZhciBuYW1lID0gcHJvcE5hbWUoc25hbWUpO1xyXG4gICAgR0xfU1RBVEVfTkFNRVMucHVzaChzbmFtZSk7XHJcbiAgICBuZXh0U3RhdGVbbmFtZV0gPSBjdXJyZW50U3RhdGVbbmFtZV0gPSAhIWluaXQ7XHJcbiAgICBHTF9GTEFHU1tuYW1lXSA9IGNhcDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXRlVmFyaWFibGUgKHNuYW1lLCBmdW5jLCBpbml0KSB7XHJcbiAgICB2YXIgbmFtZSA9IHByb3BOYW1lKHNuYW1lKTtcclxuICAgIEdMX1NUQVRFX05BTUVTLnB1c2goc25hbWUpO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW5pdCkpIHtcclxuICAgICAgY3VycmVudFN0YXRlW25hbWVdID0gaW5pdC5zbGljZSgpO1xyXG4gICAgICBuZXh0U3RhdGVbbmFtZV0gPSBpbml0LnNsaWNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdXJyZW50U3RhdGVbbmFtZV0gPSBuZXh0U3RhdGVbbmFtZV0gPSBpbml0O1xyXG4gICAgfVxyXG4gICAgR0xfVkFSSUFCTEVTW25hbWVdID0gZnVuYztcclxuICB9XHJcblxyXG4gIC8vIERpdGhlcmluZ1xyXG4gIHN0YXRlRmxhZyhTX0RJVEhFUiwgR0xfRElUSEVSKTtcclxuXHJcbiAgLy8gQmxlbmRpbmdcclxuICBzdGF0ZUZsYWcoU19CTEVORF9FTkFCTEUsIEdMX0JMRU5EKTtcclxuICBzdGF0ZVZhcmlhYmxlKFNfQkxFTkRfQ09MT1IsICdibGVuZENvbG9yJywgWzAsIDAsIDAsIDBdKTtcclxuICBzdGF0ZVZhcmlhYmxlKFNfQkxFTkRfRVFVQVRJT04sICdibGVuZEVxdWF0aW9uU2VwYXJhdGUnLFxyXG4gICAgW0dMX0ZVTkNfQURELCBHTF9GVU5DX0FERF0pO1xyXG4gIHN0YXRlVmFyaWFibGUoU19CTEVORF9GVU5DLCAnYmxlbmRGdW5jU2VwYXJhdGUnLFxyXG4gICAgW0dMX09ORSwgR0xfWkVSTywgR0xfT05FLCBHTF9aRVJPXSk7XHJcblxyXG4gIC8vIERlcHRoXHJcbiAgc3RhdGVGbGFnKFNfREVQVEhfRU5BQkxFLCBHTF9ERVBUSF9URVNULCB0cnVlKTtcclxuICBzdGF0ZVZhcmlhYmxlKFNfREVQVEhfRlVOQywgJ2RlcHRoRnVuYycsIEdMX0xFU1MpO1xyXG4gIHN0YXRlVmFyaWFibGUoU19ERVBUSF9SQU5HRSwgJ2RlcHRoUmFuZ2UnLCBbMCwgMV0pO1xyXG4gIHN0YXRlVmFyaWFibGUoU19ERVBUSF9NQVNLLCAnZGVwdGhNYXNrJywgdHJ1ZSk7XHJcblxyXG4gIC8vIENvbG9yIG1hc2tcclxuICBzdGF0ZVZhcmlhYmxlKFNfQ09MT1JfTUFTSywgU19DT0xPUl9NQVNLLCBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV0pO1xyXG5cclxuICAvLyBGYWNlIGN1bGxpbmdcclxuICBzdGF0ZUZsYWcoU19DVUxMX0VOQUJMRSwgR0xfQ1VMTF9GQUNFKTtcclxuICBzdGF0ZVZhcmlhYmxlKFNfQ1VMTF9GQUNFLCAnY3VsbEZhY2UnLCBHTF9CQUNLKTtcclxuXHJcbiAgLy8gRnJvbnQgZmFjZSBvcmllbnRhdGlvblxyXG4gIHN0YXRlVmFyaWFibGUoU19GUk9OVF9GQUNFLCBTX0ZST05UX0ZBQ0UsIEdMX0NDVyk7XHJcblxyXG4gIC8vIExpbmUgd2lkdGhcclxuICBzdGF0ZVZhcmlhYmxlKFNfTElORV9XSURUSCwgU19MSU5FX1dJRFRILCAxKTtcclxuXHJcbiAgLy8gUG9seWdvbiBvZmZzZXRcclxuICBzdGF0ZUZsYWcoU19QT0xZR09OX09GRlNFVF9FTkFCTEUsIEdMX1BPTFlHT05fT0ZGU0VUX0ZJTEwpO1xyXG4gIHN0YXRlVmFyaWFibGUoU19QT0xZR09OX09GRlNFVF9PRkZTRVQsICdwb2x5Z29uT2Zmc2V0JywgWzAsIDBdKTtcclxuXHJcbiAgLy8gU2FtcGxlIGNvdmVyYWdlXHJcbiAgc3RhdGVGbGFnKFNfU0FNUExFX0FMUEhBLCBHTF9TQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UpO1xyXG4gIHN0YXRlRmxhZyhTX1NBTVBMRV9FTkFCTEUsIEdMX1NBTVBMRV9DT1ZFUkFHRSk7XHJcbiAgc3RhdGVWYXJpYWJsZShTX1NBTVBMRV9DT1ZFUkFHRSwgJ3NhbXBsZUNvdmVyYWdlJywgWzEsIGZhbHNlXSk7XHJcblxyXG4gIC8vIFN0ZW5jaWxcclxuICBzdGF0ZUZsYWcoU19TVEVOQ0lMX0VOQUJMRSwgR0xfU1RFTkNJTF9URVNUKTtcclxuICBzdGF0ZVZhcmlhYmxlKFNfU1RFTkNJTF9NQVNLLCAnc3RlbmNpbE1hc2snLCAtMSk7XHJcbiAgc3RhdGVWYXJpYWJsZShTX1NURU5DSUxfRlVOQywgJ3N0ZW5jaWxGdW5jJywgW0dMX0FMV0FZUywgMCwgLTFdKTtcclxuICBzdGF0ZVZhcmlhYmxlKFNfU1RFTkNJTF9PUEZST05ULCAnc3RlbmNpbE9wU2VwYXJhdGUnLFxyXG4gICAgW0dMX0ZST05ULCBHTF9LRUVQLCBHTF9LRUVQLCBHTF9LRUVQXSk7XHJcbiAgc3RhdGVWYXJpYWJsZShTX1NURU5DSUxfT1BCQUNLLCAnc3RlbmNpbE9wU2VwYXJhdGUnLFxyXG4gICAgW0dMX0JBQ0ssIEdMX0tFRVAsIEdMX0tFRVAsIEdMX0tFRVBdKTtcclxuXHJcbiAgLy8gU2Npc3NvclxyXG4gIHN0YXRlRmxhZyhTX1NDSVNTT1JfRU5BQkxFLCBHTF9TQ0lTU09SX1RFU1QpO1xyXG4gIHN0YXRlVmFyaWFibGUoU19TQ0lTU09SX0JPWCwgJ3NjaXNzb3InLFxyXG4gICAgWzAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodF0pO1xyXG5cclxuICAvLyBWaWV3cG9ydFxyXG4gIHN0YXRlVmFyaWFibGUoU19WSUVXUE9SVCwgU19WSUVXUE9SVCxcclxuICAgIFswLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHRdKTtcclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gRU5WSVJPTk1FTlRcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICB2YXIgc2hhcmVkU3RhdGUgPSB7XHJcbiAgICBnbDogZ2wsXHJcbiAgICBjb250ZXh0OiBjb250ZXh0U3RhdGUsXHJcbiAgICBzdHJpbmdzOiBzdHJpbmdTdG9yZSxcclxuICAgIG5leHQ6IG5leHRTdGF0ZSxcclxuICAgIGN1cnJlbnQ6IGN1cnJlbnRTdGF0ZSxcclxuICAgIGRyYXc6IGRyYXdTdGF0ZSxcclxuICAgIGVsZW1lbnRzOiBlbGVtZW50U3RhdGUsXHJcbiAgICBidWZmZXI6IGJ1ZmZlclN0YXRlLFxyXG4gICAgc2hhZGVyOiBzaGFkZXJTdGF0ZSxcclxuICAgIGF0dHJpYnV0ZXM6IGF0dHJpYnV0ZVN0YXRlLnN0YXRlLFxyXG4gICAgdW5pZm9ybXM6IHVuaWZvcm1TdGF0ZSxcclxuICAgIGZyYW1lYnVmZmVyOiBmcmFtZWJ1ZmZlclN0YXRlLFxyXG4gICAgZXh0ZW5zaW9uczogZXh0ZW5zaW9ucyxcclxuXHJcbiAgICB0aW1lcjogdGltZXIsXHJcbiAgICBpc0J1ZmZlckFyZ3M6IGlzQnVmZmVyQXJnc1xyXG4gIH07XHJcblxyXG4gIHZhciBzaGFyZWRDb25zdGFudHMgPSB7XHJcbiAgICBwcmltVHlwZXM6IHByaW1UeXBlcyxcclxuICAgIGNvbXBhcmVGdW5jczogY29tcGFyZUZ1bmNzLFxyXG4gICAgYmxlbmRGdW5jczogYmxlbmRGdW5jcyxcclxuICAgIGJsZW5kRXF1YXRpb25zOiBibGVuZEVxdWF0aW9ucyxcclxuICAgIHN0ZW5jaWxPcHM6IHN0ZW5jaWxPcHMsXHJcbiAgICBnbFR5cGVzOiBnbFR5cGVzLFxyXG4gICAgb3JpZW50YXRpb25UeXBlOiBvcmllbnRhdGlvblR5cGVcclxuICB9O1xyXG5cclxuICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgIHNoYXJlZFN0YXRlLmlzQXJyYXlMaWtlID0gaXNBcnJheUxpa2U7XHJcbiAgfSk7XHJcblxyXG4gIGlmIChleHREcmF3QnVmZmVycykge1xyXG4gICAgc2hhcmVkQ29uc3RhbnRzLmJhY2tCdWZmZXIgPSBbR0xfQkFDS107XHJcbiAgICBzaGFyZWRDb25zdGFudHMuZHJhd0J1ZmZlciA9IGxvb3AobGltaXRzLm1heERyYXdidWZmZXJzLCBmdW5jdGlvbiAoaSkge1xyXG4gICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiBbMF1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbG9vcChpLCBmdW5jdGlvbiAoaikge1xyXG4gICAgICAgIHJldHVybiBHTF9DT0xPUl9BVFRBQ0hNRU5UMCQyICsgalxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICB2YXIgZHJhd0NhbGxDb3VudGVyID0gMDtcclxuICBmdW5jdGlvbiBjcmVhdGVSRUdMRW52aXJvbm1lbnQgKCkge1xyXG4gICAgdmFyIGVudiA9IGNyZWF0ZUVudmlyb25tZW50KCk7XHJcbiAgICB2YXIgbGluayA9IGVudi5saW5rO1xyXG4gICAgdmFyIGdsb2JhbCA9IGVudi5nbG9iYWw7XHJcbiAgICBlbnYuaWQgPSBkcmF3Q2FsbENvdW50ZXIrKztcclxuXHJcbiAgICBlbnYuYmF0Y2hJZCA9ICcwJztcclxuXHJcbiAgICAvLyBsaW5rIHNoYXJlZCBzdGF0ZVxyXG4gICAgdmFyIFNIQVJFRCA9IGxpbmsoc2hhcmVkU3RhdGUpO1xyXG4gICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQgPSB7XHJcbiAgICAgIHByb3BzOiAnYTAnXHJcbiAgICB9O1xyXG4gICAgT2JqZWN0LmtleXMoc2hhcmVkU3RhdGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgc2hhcmVkW3Byb3BdID0gZ2xvYmFsLmRlZihTSEFSRUQsICcuJywgcHJvcCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBJbmplY3QgcnVudGltZSBhc3NlcnRpb24gc3R1ZmYgZm9yIGRlYnVnIGJ1aWxkc1xyXG4gICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGVudi5DSEVDSyA9IGxpbmsoY2hlY2skMSk7XHJcbiAgICAgIGVudi5jb21tYW5kU3RyID0gY2hlY2skMS5ndWVzc0NvbW1hbmQoKTtcclxuICAgICAgZW52LmNvbW1hbmQgPSBsaW5rKGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgZW52LmFzc2VydCA9IGZ1bmN0aW9uIChibG9jaywgcHJlZCwgbWVzc2FnZSkge1xyXG4gICAgICAgIGJsb2NrKFxyXG4gICAgICAgICAgJ2lmKCEoJywgcHJlZCwgJykpJyxcclxuICAgICAgICAgIHRoaXMuQ0hFQ0ssICcuY29tbWFuZFJhaXNlKCcsIGxpbmsobWVzc2FnZSksICcsJywgdGhpcy5jb21tYW5kLCAnKTsnKTtcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHNoYXJlZENvbnN0YW50cy5pbnZhbGlkQmxlbmRDb21iaW5hdGlvbnMgPSBpbnZhbGlkQmxlbmRDb21iaW5hdGlvbnM7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBDb3B5IEdMIHN0YXRlIHZhcmlhYmxlcyBvdmVyXHJcbiAgICB2YXIgbmV4dFZhcnMgPSBlbnYubmV4dCA9IHt9O1xyXG4gICAgdmFyIGN1cnJlbnRWYXJzID0gZW52LmN1cnJlbnQgPSB7fTtcclxuICAgIE9iamVjdC5rZXlzKEdMX1ZBUklBQkxFUykuZm9yRWFjaChmdW5jdGlvbiAodmFyaWFibGUpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudFN0YXRlW3ZhcmlhYmxlXSkpIHtcclxuICAgICAgICBuZXh0VmFyc1t2YXJpYWJsZV0gPSBnbG9iYWwuZGVmKHNoYXJlZC5uZXh0LCAnLicsIHZhcmlhYmxlKTtcclxuICAgICAgICBjdXJyZW50VmFyc1t2YXJpYWJsZV0gPSBnbG9iYWwuZGVmKHNoYXJlZC5jdXJyZW50LCAnLicsIHZhcmlhYmxlKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gSW5pdGlhbGl6ZSBzaGFyZWQgY29uc3RhbnRzXHJcbiAgICB2YXIgY29uc3RhbnRzID0gZW52LmNvbnN0YW50cyA9IHt9O1xyXG4gICAgT2JqZWN0LmtleXMoc2hhcmVkQ29uc3RhbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIGNvbnN0YW50c1tuYW1lXSA9IGdsb2JhbC5kZWYoSlNPTi5zdHJpbmdpZnkoc2hhcmVkQ29uc3RhbnRzW25hbWVdKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gZm9yIGNhbGxpbmcgYSBibG9ja1xyXG4gICAgZW52Lmludm9rZSA9IGZ1bmN0aW9uIChibG9jaywgeCkge1xyXG4gICAgICBzd2l0Y2ggKHgudHlwZSkge1xyXG4gICAgICAgIGNhc2UgRFlOX0ZVTkMkMTpcclxuICAgICAgICAgIHZhciBhcmdMaXN0ID0gW1xyXG4gICAgICAgICAgICAndGhpcycsXHJcbiAgICAgICAgICAgIHNoYXJlZC5jb250ZXh0LFxyXG4gICAgICAgICAgICBzaGFyZWQucHJvcHMsXHJcbiAgICAgICAgICAgIGVudi5iYXRjaElkXHJcbiAgICAgICAgICBdO1xyXG4gICAgICAgICAgcmV0dXJuIGJsb2NrLmRlZihcclxuICAgICAgICAgICAgbGluayh4LmRhdGEpLCAnLmNhbGwoJyxcclxuICAgICAgICAgICAgICBhcmdMaXN0LnNsaWNlKDAsIE1hdGgubWF4KHguZGF0YS5sZW5ndGggKyAxLCA0KSksXHJcbiAgICAgICAgICAgICAnKScpXHJcbiAgICAgICAgY2FzZSBEWU5fUFJPUCQxOlxyXG4gICAgICAgICAgcmV0dXJuIGJsb2NrLmRlZihzaGFyZWQucHJvcHMsIHguZGF0YSlcclxuICAgICAgICBjYXNlIERZTl9DT05URVhUJDE6XHJcbiAgICAgICAgICByZXR1cm4gYmxvY2suZGVmKHNoYXJlZC5jb250ZXh0LCB4LmRhdGEpXHJcbiAgICAgICAgY2FzZSBEWU5fU1RBVEUkMTpcclxuICAgICAgICAgIHJldHVybiBibG9jay5kZWYoJ3RoaXMnLCB4LmRhdGEpXHJcbiAgICAgICAgY2FzZSBEWU5fVEhVTks6XHJcbiAgICAgICAgICB4LmRhdGEuYXBwZW5kKGVudiwgYmxvY2spO1xyXG4gICAgICAgICAgcmV0dXJuIHguZGF0YS5yZWZcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBlbnYuYXR0cmliQ2FjaGUgPSB7fTtcclxuXHJcbiAgICB2YXIgc2NvcGVBdHRyaWJzID0ge307XHJcbiAgICBlbnYuc2NvcGVBdHRyaWIgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICB2YXIgaWQgPSBzdHJpbmdTdG9yZS5pZChuYW1lKTtcclxuICAgICAgaWYgKGlkIGluIHNjb3BlQXR0cmlicykge1xyXG4gICAgICAgIHJldHVybiBzY29wZUF0dHJpYnNbaWRdXHJcbiAgICAgIH1cclxuICAgICAgdmFyIGJpbmRpbmcgPSBhdHRyaWJ1dGVTdGF0ZS5zY29wZVtpZF07XHJcbiAgICAgIGlmICghYmluZGluZykge1xyXG4gICAgICAgIGJpbmRpbmcgPSBhdHRyaWJ1dGVTdGF0ZS5zY29wZVtpZF0gPSBuZXcgQXR0cmlidXRlUmVjb3JkKCk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHJlc3VsdCA9IHNjb3BlQXR0cmlic1tpZF0gPSBsaW5rKGJpbmRpbmcpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBlbnZcclxuICB9XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIFBBUlNJTkdcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICBmdW5jdGlvbiBwYXJzZVByb2ZpbGUgKG9wdGlvbnMpIHtcclxuICAgIHZhciBzdGF0aWNPcHRpb25zID0gb3B0aW9ucy5zdGF0aWM7XHJcbiAgICB2YXIgZHluYW1pY09wdGlvbnMgPSBvcHRpb25zLmR5bmFtaWM7XHJcblxyXG4gICAgdmFyIHByb2ZpbGVFbmFibGU7XHJcbiAgICBpZiAoU19QUk9GSUxFIGluIHN0YXRpY09wdGlvbnMpIHtcclxuICAgICAgdmFyIHZhbHVlID0gISFzdGF0aWNPcHRpb25zW1NfUFJPRklMRV07XHJcbiAgICAgIHByb2ZpbGVFbmFibGUgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgIH0pO1xyXG4gICAgICBwcm9maWxlRW5hYmxlLmVuYWJsZSA9IHZhbHVlO1xyXG4gICAgfSBlbHNlIGlmIChTX1BST0ZJTEUgaW4gZHluYW1pY09wdGlvbnMpIHtcclxuICAgICAgdmFyIGR5biA9IGR5bmFtaWNPcHRpb25zW1NfUFJPRklMRV07XHJcbiAgICAgIHByb2ZpbGVFbmFibGUgPSBjcmVhdGVEeW5hbWljRGVjbChkeW4sIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgcmV0dXJuIGVudi5pbnZva2Uoc2NvcGUsIGR5bilcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb2ZpbGVFbmFibGVcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlRnJhbWVidWZmZXIgKG9wdGlvbnMsIGVudikge1xyXG4gICAgdmFyIHN0YXRpY09wdGlvbnMgPSBvcHRpb25zLnN0YXRpYztcclxuICAgIHZhciBkeW5hbWljT3B0aW9ucyA9IG9wdGlvbnMuZHluYW1pYztcclxuXHJcbiAgICBpZiAoU19GUkFNRUJVRkZFUiBpbiBzdGF0aWNPcHRpb25zKSB7XHJcbiAgICAgIHZhciBmcmFtZWJ1ZmZlciA9IHN0YXRpY09wdGlvbnNbU19GUkFNRUJVRkZFUl07XHJcbiAgICAgIGlmIChmcmFtZWJ1ZmZlcikge1xyXG4gICAgICAgIGZyYW1lYnVmZmVyID0gZnJhbWVidWZmZXJTdGF0ZS5nZXRGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcik7XHJcbiAgICAgICAgY2hlY2skMS5jb21tYW5kKGZyYW1lYnVmZmVyLCAnaW52YWxpZCBmcmFtZWJ1ZmZlciBvYmplY3QnKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBibG9jaykge1xyXG4gICAgICAgICAgdmFyIEZSQU1FQlVGRkVSID0gZW52LmxpbmsoZnJhbWVidWZmZXIpO1xyXG4gICAgICAgICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XHJcbiAgICAgICAgICBibG9jay5zZXQoXHJcbiAgICAgICAgICAgIHNoYXJlZC5mcmFtZWJ1ZmZlcixcclxuICAgICAgICAgICAgJy5uZXh0JyxcclxuICAgICAgICAgICAgRlJBTUVCVUZGRVIpO1xyXG4gICAgICAgICAgdmFyIENPTlRFWFQgPSBzaGFyZWQuY29udGV4dDtcclxuICAgICAgICAgIGJsb2NrLnNldChcclxuICAgICAgICAgICAgQ09OVEVYVCxcclxuICAgICAgICAgICAgJy4nICsgU19GUkFNRUJVRkZFUl9XSURUSCxcclxuICAgICAgICAgICAgRlJBTUVCVUZGRVIgKyAnLndpZHRoJyk7XHJcbiAgICAgICAgICBibG9jay5zZXQoXHJcbiAgICAgICAgICAgIENPTlRFWFQsXHJcbiAgICAgICAgICAgICcuJyArIFNfRlJBTUVCVUZGRVJfSEVJR0hULFxyXG4gICAgICAgICAgICBGUkFNRUJVRkZFUiArICcuaGVpZ2h0Jyk7XHJcbiAgICAgICAgICByZXR1cm4gRlJBTUVCVUZGRVJcclxuICAgICAgICB9KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuICAgICAgICAgIHNjb3BlLnNldChcclxuICAgICAgICAgICAgc2hhcmVkLmZyYW1lYnVmZmVyLFxyXG4gICAgICAgICAgICAnLm5leHQnLFxyXG4gICAgICAgICAgICAnbnVsbCcpO1xyXG4gICAgICAgICAgdmFyIENPTlRFWFQgPSBzaGFyZWQuY29udGV4dDtcclxuICAgICAgICAgIHNjb3BlLnNldChcclxuICAgICAgICAgICAgQ09OVEVYVCxcclxuICAgICAgICAgICAgJy4nICsgU19GUkFNRUJVRkZFUl9XSURUSCxcclxuICAgICAgICAgICAgQ09OVEVYVCArICcuJyArIFNfRFJBV0lOR0JVRkZFUl9XSURUSCk7XHJcbiAgICAgICAgICBzY29wZS5zZXQoXHJcbiAgICAgICAgICAgIENPTlRFWFQsXHJcbiAgICAgICAgICAgICcuJyArIFNfRlJBTUVCVUZGRVJfSEVJR0hULFxyXG4gICAgICAgICAgICBDT05URVhUICsgJy4nICsgU19EUkFXSU5HQlVGRkVSX0hFSUdIVCk7XHJcbiAgICAgICAgICByZXR1cm4gJ251bGwnXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChTX0ZSQU1FQlVGRkVSIGluIGR5bmFtaWNPcHRpb25zKSB7XHJcbiAgICAgIHZhciBkeW4gPSBkeW5hbWljT3B0aW9uc1tTX0ZSQU1FQlVGRkVSXTtcclxuICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNEZWNsKGR5biwgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICB2YXIgRlJBTUVCVUZGRVJfRlVOQyA9IGVudi5pbnZva2Uoc2NvcGUsIGR5bik7XHJcbiAgICAgICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XHJcbiAgICAgICAgdmFyIEZSQU1FQlVGRkVSX1NUQVRFID0gc2hhcmVkLmZyYW1lYnVmZmVyO1xyXG4gICAgICAgIHZhciBGUkFNRUJVRkZFUiA9IHNjb3BlLmRlZihcclxuICAgICAgICAgIEZSQU1FQlVGRkVSX1NUQVRFLCAnLmdldEZyYW1lYnVmZmVyKCcsIEZSQU1FQlVGRkVSX0ZVTkMsICcpJyk7XHJcblxyXG4gICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgJyEnICsgRlJBTUVCVUZGRVJfRlVOQyArICd8fCcgKyBGUkFNRUJVRkZFUixcclxuICAgICAgICAgICAgJ2ludmFsaWQgZnJhbWVidWZmZXIgb2JqZWN0Jyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHNjb3BlLnNldChcclxuICAgICAgICAgIEZSQU1FQlVGRkVSX1NUQVRFLFxyXG4gICAgICAgICAgJy5uZXh0JyxcclxuICAgICAgICAgIEZSQU1FQlVGRkVSKTtcclxuICAgICAgICB2YXIgQ09OVEVYVCA9IHNoYXJlZC5jb250ZXh0O1xyXG4gICAgICAgIHNjb3BlLnNldChcclxuICAgICAgICAgIENPTlRFWFQsXHJcbiAgICAgICAgICAnLicgKyBTX0ZSQU1FQlVGRkVSX1dJRFRILFxyXG4gICAgICAgICAgRlJBTUVCVUZGRVIgKyAnPycgKyBGUkFNRUJVRkZFUiArICcud2lkdGg6JyArXHJcbiAgICAgICAgICBDT05URVhUICsgJy4nICsgU19EUkFXSU5HQlVGRkVSX1dJRFRIKTtcclxuICAgICAgICBzY29wZS5zZXQoXHJcbiAgICAgICAgICBDT05URVhULFxyXG4gICAgICAgICAgJy4nICsgU19GUkFNRUJVRkZFUl9IRUlHSFQsXHJcbiAgICAgICAgICBGUkFNRUJVRkZFUiArXHJcbiAgICAgICAgICAnPycgKyBGUkFNRUJVRkZFUiArICcuaGVpZ2h0OicgK1xyXG4gICAgICAgICAgQ09OVEVYVCArICcuJyArIFNfRFJBV0lOR0JVRkZFUl9IRUlHSFQpO1xyXG4gICAgICAgIHJldHVybiBGUkFNRUJVRkZFUlxyXG4gICAgICB9KVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlVmlld3BvcnRTY2lzc29yIChvcHRpb25zLCBmcmFtZWJ1ZmZlciwgZW52KSB7XHJcbiAgICB2YXIgc3RhdGljT3B0aW9ucyA9IG9wdGlvbnMuc3RhdGljO1xyXG4gICAgdmFyIGR5bmFtaWNPcHRpb25zID0gb3B0aW9ucy5keW5hbWljO1xyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlQm94IChwYXJhbSkge1xyXG4gICAgICBpZiAocGFyYW0gaW4gc3RhdGljT3B0aW9ucykge1xyXG4gICAgICAgIHZhciBib3ggPSBzdGF0aWNPcHRpb25zW3BhcmFtXTtcclxuICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKGJveCwgJ29iamVjdCcsICdpbnZhbGlkICcgKyBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xyXG5cclxuICAgICAgICB2YXIgaXNTdGF0aWMgPSB0cnVlO1xyXG4gICAgICAgIHZhciB4ID0gYm94LnggfCAwO1xyXG4gICAgICAgIHZhciB5ID0gYm94LnkgfCAwO1xyXG4gICAgICAgIHZhciB3LCBoO1xyXG4gICAgICAgIGlmICgnd2lkdGgnIGluIGJveCkge1xyXG4gICAgICAgICAgdyA9IGJveC53aWR0aCB8IDA7XHJcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQodyA+PSAwLCAnaW52YWxpZCAnICsgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaXNTdGF0aWMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCdoZWlnaHQnIGluIGJveCkge1xyXG4gICAgICAgICAgaCA9IGJveC5oZWlnaHQgfCAwO1xyXG4gICAgICAgICAgY2hlY2skMS5jb21tYW5kKGggPj0gMCwgJ2ludmFsaWQgJyArIHBhcmFtLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlzU3RhdGljID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IERlY2xhcmF0aW9uKFxyXG4gICAgICAgICAgIWlzU3RhdGljICYmIGZyYW1lYnVmZmVyICYmIGZyYW1lYnVmZmVyLnRoaXNEZXAsXHJcbiAgICAgICAgICAhaXNTdGF0aWMgJiYgZnJhbWVidWZmZXIgJiYgZnJhbWVidWZmZXIuY29udGV4dERlcCxcclxuICAgICAgICAgICFpc1N0YXRpYyAmJiBmcmFtZWJ1ZmZlciAmJiBmcmFtZWJ1ZmZlci5wcm9wRGVwLFxyXG4gICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgICAgdmFyIENPTlRFWFQgPSBlbnYuc2hhcmVkLmNvbnRleHQ7XHJcbiAgICAgICAgICAgIHZhciBCT1hfVyA9IHc7XHJcbiAgICAgICAgICAgIGlmICghKCd3aWR0aCcgaW4gYm94KSkge1xyXG4gICAgICAgICAgICAgIEJPWF9XID0gc2NvcGUuZGVmKENPTlRFWFQsICcuJywgU19GUkFNRUJVRkZFUl9XSURUSCwgJy0nLCB4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgQk9YX0ggPSBoO1xyXG4gICAgICAgICAgICBpZiAoISgnaGVpZ2h0JyBpbiBib3gpKSB7XHJcbiAgICAgICAgICAgICAgQk9YX0ggPSBzY29wZS5kZWYoQ09OVEVYVCwgJy4nLCBTX0ZSQU1FQlVGRkVSX0hFSUdIVCwgJy0nLCB5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW3gsIHksIEJPWF9XLCBCT1hfSF1cclxuICAgICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW4gZHluYW1pY09wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZHluQm94ID0gZHluYW1pY09wdGlvbnNbcGFyYW1dO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVEeW5hbWljRGVjbChkeW5Cb3gsIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICB2YXIgQk9YID0gZW52Lmludm9rZShzY29wZSwgZHluQm94KTtcclxuXHJcbiAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICBCT1ggKyAnJiZ0eXBlb2YgJyArIEJPWCArICc9PT1cIm9iamVjdFwiJyxcclxuICAgICAgICAgICAgICAnaW52YWxpZCAnICsgcGFyYW0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgdmFyIENPTlRFWFQgPSBlbnYuc2hhcmVkLmNvbnRleHQ7XHJcbiAgICAgICAgICB2YXIgQk9YX1ggPSBzY29wZS5kZWYoQk9YLCAnLnh8MCcpO1xyXG4gICAgICAgICAgdmFyIEJPWF9ZID0gc2NvcGUuZGVmKEJPWCwgJy55fDAnKTtcclxuICAgICAgICAgIHZhciBCT1hfVyA9IHNjb3BlLmRlZihcclxuICAgICAgICAgICAgJ1wid2lkdGhcIiBpbiAnLCBCT1gsICc/JywgQk9YLCAnLndpZHRofDA6JyxcclxuICAgICAgICAgICAgJygnLCBDT05URVhULCAnLicsIFNfRlJBTUVCVUZGRVJfV0lEVEgsICctJywgQk9YX1gsICcpJyk7XHJcbiAgICAgICAgICB2YXIgQk9YX0ggPSBzY29wZS5kZWYoXHJcbiAgICAgICAgICAgICdcImhlaWdodFwiIGluICcsIEJPWCwgJz8nLCBCT1gsICcuaGVpZ2h0fDA6JyxcclxuICAgICAgICAgICAgJygnLCBDT05URVhULCAnLicsIFNfRlJBTUVCVUZGRVJfSEVJR0hULCAnLScsIEJPWF9ZLCAnKScpO1xyXG5cclxuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgIEJPWF9XICsgJz49MCYmJyArXHJcbiAgICAgICAgICAgICAgQk9YX0ggKyAnPj0wJyxcclxuICAgICAgICAgICAgICAnaW52YWxpZCAnICsgcGFyYW0pO1xyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIFtCT1hfWCwgQk9YX1ksIEJPWF9XLCBCT1hfSF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBpZiAoZnJhbWVidWZmZXIpIHtcclxuICAgICAgICAgIHJlc3VsdC50aGlzRGVwID0gcmVzdWx0LnRoaXNEZXAgfHwgZnJhbWVidWZmZXIudGhpc0RlcDtcclxuICAgICAgICAgIHJlc3VsdC5jb250ZXh0RGVwID0gcmVzdWx0LmNvbnRleHREZXAgfHwgZnJhbWVidWZmZXIuY29udGV4dERlcDtcclxuICAgICAgICAgIHJlc3VsdC5wcm9wRGVwID0gcmVzdWx0LnByb3BEZXAgfHwgZnJhbWVidWZmZXIucHJvcERlcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICB9IGVsc2UgaWYgKGZyYW1lYnVmZmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEZWNsYXJhdGlvbihcclxuICAgICAgICAgIGZyYW1lYnVmZmVyLnRoaXNEZXAsXHJcbiAgICAgICAgICBmcmFtZWJ1ZmZlci5jb250ZXh0RGVwLFxyXG4gICAgICAgICAgZnJhbWVidWZmZXIucHJvcERlcCxcclxuICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgIHZhciBDT05URVhUID0gZW52LnNoYXJlZC5jb250ZXh0O1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgIDAsIDAsXHJcbiAgICAgICAgICAgICAgc2NvcGUuZGVmKENPTlRFWFQsICcuJywgU19GUkFNRUJVRkZFUl9XSURUSCksXHJcbiAgICAgICAgICAgICAgc2NvcGUuZGVmKENPTlRFWFQsICcuJywgU19GUkFNRUJVRkZFUl9IRUlHSFQpXVxyXG4gICAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHZpZXdwb3J0ID0gcGFyc2VCb3goU19WSUVXUE9SVCk7XHJcblxyXG4gICAgaWYgKHZpZXdwb3J0KSB7XHJcbiAgICAgIHZhciBwcmV2Vmlld3BvcnQgPSB2aWV3cG9ydDtcclxuICAgICAgdmlld3BvcnQgPSBuZXcgRGVjbGFyYXRpb24oXHJcbiAgICAgICAgdmlld3BvcnQudGhpc0RlcCxcclxuICAgICAgICB2aWV3cG9ydC5jb250ZXh0RGVwLFxyXG4gICAgICAgIHZpZXdwb3J0LnByb3BEZXAsXHJcbiAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgIHZhciBWSUVXUE9SVCA9IHByZXZWaWV3cG9ydC5hcHBlbmQoZW52LCBzY29wZSk7XHJcbiAgICAgICAgICB2YXIgQ09OVEVYVCA9IGVudi5zaGFyZWQuY29udGV4dDtcclxuICAgICAgICAgIHNjb3BlLnNldChcclxuICAgICAgICAgICAgQ09OVEVYVCxcclxuICAgICAgICAgICAgJy4nICsgU19WSUVXUE9SVF9XSURUSCxcclxuICAgICAgICAgICAgVklFV1BPUlRbMl0pO1xyXG4gICAgICAgICAgc2NvcGUuc2V0KFxyXG4gICAgICAgICAgICBDT05URVhULFxyXG4gICAgICAgICAgICAnLicgKyBTX1ZJRVdQT1JUX0hFSUdIVCxcclxuICAgICAgICAgICAgVklFV1BPUlRbM10pO1xyXG4gICAgICAgICAgcmV0dXJuIFZJRVdQT1JUXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LFxyXG4gICAgICBzY2lzc29yX2JveDogcGFyc2VCb3goU19TQ0lTU09SX0JPWClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlUHJvZ3JhbSAob3B0aW9ucykge1xyXG4gICAgdmFyIHN0YXRpY09wdGlvbnMgPSBvcHRpb25zLnN0YXRpYztcclxuICAgIHZhciBkeW5hbWljT3B0aW9ucyA9IG9wdGlvbnMuZHluYW1pYztcclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVNoYWRlciAobmFtZSkge1xyXG4gICAgICBpZiAobmFtZSBpbiBzdGF0aWNPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGlkID0gc3RyaW5nU3RvcmUuaWQoc3RhdGljT3B0aW9uc1tuYW1lXSk7XHJcbiAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBzaGFkZXJTdGF0ZS5zaGFkZXIoc2hhZGVyVHlwZVtuYW1lXSwgaWQsIGNoZWNrJDEuZ3Vlc3NDb21tYW5kKCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBpZFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlc3VsdC5pZCA9IGlkO1xyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgfSBlbHNlIGlmIChuYW1lIGluIGR5bmFtaWNPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGR5biA9IGR5bmFtaWNPcHRpb25zW25hbWVdO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVEeW5hbWljRGVjbChkeW4sIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICB2YXIgc3RyID0gZW52Lmludm9rZShzY29wZSwgZHluKTtcclxuICAgICAgICAgIHZhciBpZCA9IHNjb3BlLmRlZihlbnYuc2hhcmVkLnN0cmluZ3MsICcuaWQoJywgc3RyLCAnKScpO1xyXG4gICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNjb3BlKFxyXG4gICAgICAgICAgICAgIGVudi5zaGFyZWQuc2hhZGVyLCAnLnNoYWRlcignLFxyXG4gICAgICAgICAgICAgIHNoYWRlclR5cGVbbmFtZV0sICcsJyxcclxuICAgICAgICAgICAgICBpZCwgJywnLFxyXG4gICAgICAgICAgICAgIGVudi5jb21tYW5kLCAnKTsnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIGlkXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBmcmFnID0gcGFyc2VTaGFkZXIoU19GUkFHKTtcclxuICAgIHZhciB2ZXJ0ID0gcGFyc2VTaGFkZXIoU19WRVJUKTtcclxuXHJcbiAgICB2YXIgcHJvZ3JhbSA9IG51bGw7XHJcbiAgICB2YXIgcHJvZ1ZhcjtcclxuICAgIGlmIChpc1N0YXRpYyhmcmFnKSAmJiBpc1N0YXRpYyh2ZXJ0KSkge1xyXG4gICAgICBwcm9ncmFtID0gc2hhZGVyU3RhdGUucHJvZ3JhbSh2ZXJ0LmlkLCBmcmFnLmlkKTtcclxuICAgICAgcHJvZ1ZhciA9IGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICByZXR1cm4gZW52LmxpbmsocHJvZ3JhbSlcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBwcm9nVmFyID0gbmV3IERlY2xhcmF0aW9uKFxyXG4gICAgICAgIChmcmFnICYmIGZyYWcudGhpc0RlcCkgfHwgKHZlcnQgJiYgdmVydC50aGlzRGVwKSxcclxuICAgICAgICAoZnJhZyAmJiBmcmFnLmNvbnRleHREZXApIHx8ICh2ZXJ0ICYmIHZlcnQuY29udGV4dERlcCksXHJcbiAgICAgICAgKGZyYWcgJiYgZnJhZy5wcm9wRGVwKSB8fCAodmVydCAmJiB2ZXJ0LnByb3BEZXApLFxyXG4gICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICB2YXIgU0hBREVSX1NUQVRFID0gZW52LnNoYXJlZC5zaGFkZXI7XHJcbiAgICAgICAgICB2YXIgZnJhZ0lkO1xyXG4gICAgICAgICAgaWYgKGZyYWcpIHtcclxuICAgICAgICAgICAgZnJhZ0lkID0gZnJhZy5hcHBlbmQoZW52LCBzY29wZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmcmFnSWQgPSBzY29wZS5kZWYoU0hBREVSX1NUQVRFLCAnLicsIFNfRlJBRyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2YXIgdmVydElkO1xyXG4gICAgICAgICAgaWYgKHZlcnQpIHtcclxuICAgICAgICAgICAgdmVydElkID0gdmVydC5hcHBlbmQoZW52LCBzY29wZSk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB2ZXJ0SWQgPSBzY29wZS5kZWYoU0hBREVSX1NUQVRFLCAnLicsIFNfVkVSVCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB2YXIgcHJvZ0RlZiA9IFNIQURFUl9TVEFURSArICcucHJvZ3JhbSgnICsgdmVydElkICsgJywnICsgZnJhZ0lkO1xyXG4gICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHByb2dEZWYgKz0gJywnICsgZW52LmNvbW1hbmQ7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiBzY29wZS5kZWYocHJvZ0RlZiArICcpJylcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBmcmFnOiBmcmFnLFxyXG4gICAgICB2ZXJ0OiB2ZXJ0LFxyXG4gICAgICBwcm9nVmFyOiBwcm9nVmFyLFxyXG4gICAgICBwcm9ncmFtOiBwcm9ncmFtXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwYXJzZURyYXcgKG9wdGlvbnMsIGVudikge1xyXG4gICAgdmFyIHN0YXRpY09wdGlvbnMgPSBvcHRpb25zLnN0YXRpYztcclxuICAgIHZhciBkeW5hbWljT3B0aW9ucyA9IG9wdGlvbnMuZHluYW1pYztcclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZUVsZW1lbnRzICgpIHtcclxuICAgICAgaWYgKFNfRUxFTUVOVFMgaW4gc3RhdGljT3B0aW9ucykge1xyXG4gICAgICAgIHZhciBlbGVtZW50cyA9IHN0YXRpY09wdGlvbnNbU19FTEVNRU5UU107XHJcbiAgICAgICAgaWYgKGlzQnVmZmVyQXJncyhlbGVtZW50cykpIHtcclxuICAgICAgICAgIGVsZW1lbnRzID0gZWxlbWVudFN0YXRlLmdldEVsZW1lbnRzKGVsZW1lbnRTdGF0ZS5jcmVhdGUoZWxlbWVudHMsIHRydWUpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICBlbGVtZW50cyA9IGVsZW1lbnRTdGF0ZS5nZXRFbGVtZW50cyhlbGVtZW50cyk7XHJcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoZWxlbWVudHMsICdpbnZhbGlkIGVsZW1lbnRzJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgICAgaWYgKGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBlbnYubGluayhlbGVtZW50cyk7XHJcbiAgICAgICAgICAgIGVudi5FTEVNRU5UUyA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZW52LkVMRU1FTlRTID0gbnVsbDtcclxuICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gZWxlbWVudHM7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICB9IGVsc2UgaWYgKFNfRUxFTUVOVFMgaW4gZHluYW1pY09wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZHluID0gZHluYW1pY09wdGlvbnNbU19FTEVNRU5UU107XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNEZWNsKGR5biwgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xyXG5cclxuICAgICAgICAgIHZhciBJU19CVUZGRVJfQVJHUyA9IHNoYXJlZC5pc0J1ZmZlckFyZ3M7XHJcbiAgICAgICAgICB2YXIgRUxFTUVOVF9TVEFURSA9IHNoYXJlZC5lbGVtZW50cztcclxuXHJcbiAgICAgICAgICB2YXIgZWxlbWVudERlZm4gPSBlbnYuaW52b2tlKHNjb3BlLCBkeW4pO1xyXG4gICAgICAgICAgdmFyIGVsZW1lbnRzID0gc2NvcGUuZGVmKCdudWxsJyk7XHJcbiAgICAgICAgICB2YXIgZWxlbWVudFN0cmVhbSA9IHNjb3BlLmRlZihJU19CVUZGRVJfQVJHUywgJygnLCBlbGVtZW50RGVmbiwgJyknKTtcclxuXHJcbiAgICAgICAgICB2YXIgaWZ0ZSA9IGVudi5jb25kKGVsZW1lbnRTdHJlYW0pXHJcbiAgICAgICAgICAgIC50aGVuKGVsZW1lbnRzLCAnPScsIEVMRU1FTlRfU1RBVEUsICcuY3JlYXRlU3RyZWFtKCcsIGVsZW1lbnREZWZuLCAnKTsnKVxyXG4gICAgICAgICAgICAuZWxzZShlbGVtZW50cywgJz0nLCBFTEVNRU5UX1NUQVRFLCAnLmdldEVsZW1lbnRzKCcsIGVsZW1lbnREZWZuLCAnKTsnKTtcclxuXHJcbiAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZW52LmFzc2VydChpZnRlLmVsc2UsXHJcbiAgICAgICAgICAgICAgJyEnICsgZWxlbWVudERlZm4gKyAnfHwnICsgZWxlbWVudHMsXHJcbiAgICAgICAgICAgICAgJ2ludmFsaWQgZWxlbWVudHMnKTtcclxuICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIHNjb3BlLmVudHJ5KGlmdGUpO1xyXG4gICAgICAgICAgc2NvcGUuZXhpdChcclxuICAgICAgICAgICAgZW52LmNvbmQoZWxlbWVudFN0cmVhbSlcclxuICAgICAgICAgICAgICAudGhlbihFTEVNRU5UX1NUQVRFLCAnLmRlc3Ryb3lTdHJlYW0oJywgZWxlbWVudHMsICcpOycpKTtcclxuXHJcbiAgICAgICAgICBlbnYuRUxFTUVOVFMgPSBlbGVtZW50cztcclxuXHJcbiAgICAgICAgICByZXR1cm4gZWxlbWVudHNcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBlbGVtZW50cyA9IHBhcnNlRWxlbWVudHMoKTtcclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVByaW1pdGl2ZSAoKSB7XHJcbiAgICAgIGlmIChTX1BSSU1JVElWRSBpbiBzdGF0aWNPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHByaW1pdGl2ZSA9IHN0YXRpY09wdGlvbnNbU19QUklNSVRJVkVdO1xyXG4gICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcihwcmltaXRpdmUsIHByaW1UeXBlcywgJ2ludmFsaWQgcHJpbWl0dmUnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgIHJldHVybiBwcmltVHlwZXNbcHJpbWl0aXZlXVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSBpZiAoU19QUklNSVRJVkUgaW4gZHluYW1pY09wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZHluUHJpbWl0aXZlID0gZHluYW1pY09wdGlvbnNbU19QUklNSVRJVkVdO1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVEeW5hbWljRGVjbChkeW5QcmltaXRpdmUsIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICB2YXIgUFJJTV9UWVBFUyA9IGVudi5jb25zdGFudHMucHJpbVR5cGVzO1xyXG4gICAgICAgICAgdmFyIHByaW0gPSBlbnYuaW52b2tlKHNjb3BlLCBkeW5QcmltaXRpdmUpO1xyXG4gICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgcHJpbSArICcgaW4gJyArIFBSSU1fVFlQRVMsXHJcbiAgICAgICAgICAgICAgJ2ludmFsaWQgcHJpbWl0aXZlLCBtdXN0IGJlIG9uZSBvZiAnICsgT2JqZWN0LmtleXMocHJpbVR5cGVzKSk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoUFJJTV9UWVBFUywgJ1snLCBwcmltLCAnXScpXHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIGlmIChlbGVtZW50cykge1xyXG4gICAgICAgIGlmIChpc1N0YXRpYyhlbGVtZW50cykpIHtcclxuICAgICAgICAgIGlmIChlbGVtZW50cy52YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoZW52LkVMRU1FTlRTLCAnLnByaW1UeXBlJylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gR0xfVFJJQU5HTEVTJDFcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBEZWNsYXJhdGlvbihcclxuICAgICAgICAgICAgZWxlbWVudHMudGhpc0RlcCxcclxuICAgICAgICAgICAgZWxlbWVudHMuY29udGV4dERlcCxcclxuICAgICAgICAgICAgZWxlbWVudHMucHJvcERlcCxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSBlbnYuRUxFTUVOVFM7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZihlbGVtZW50cywgJz8nLCBlbGVtZW50cywgJy5wcmltVHlwZTonLCBHTF9UUklBTkdMRVMkMSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBwYXJzZVBhcmFtIChwYXJhbSwgaXNPZmZzZXQpIHtcclxuICAgICAgaWYgKHBhcmFtIGluIHN0YXRpY09wdGlvbnMpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBzdGF0aWNPcHRpb25zW3BhcmFtXSB8IDA7XHJcbiAgICAgICAgY2hlY2skMS5jb21tYW5kKCFpc09mZnNldCB8fCB2YWx1ZSA+PSAwLCAnaW52YWxpZCAnICsgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICByZXR1cm4gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgICAgaWYgKGlzT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIGVudi5PRkZTRVQgPSB2YWx1ZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0gaW4gZHluYW1pY09wdGlvbnMpIHtcclxuICAgICAgICB2YXIgZHluVmFsdWUgPSBkeW5hbWljT3B0aW9uc1twYXJhbV07XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNEZWNsKGR5blZhbHVlLCBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVudi5pbnZva2Uoc2NvcGUsIGR5blZhbHVlKTtcclxuICAgICAgICAgIGlmIChpc09mZnNldCkge1xyXG4gICAgICAgICAgICBlbnYuT0ZGU0VUID0gcmVzdWx0O1xyXG4gICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgcmVzdWx0ICsgJz49MCcsXHJcbiAgICAgICAgICAgICAgICAnaW52YWxpZCAnICsgcGFyYW0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICB9KVxyXG4gICAgICB9IGVsc2UgaWYgKGlzT2Zmc2V0ICYmIGVsZW1lbnRzKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgIGVudi5PRkZTRVQgPSAnMCc7XHJcbiAgICAgICAgICByZXR1cm4gMFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxuXHJcbiAgICB2YXIgT0ZGU0VUID0gcGFyc2VQYXJhbShTX09GRlNFVCwgdHJ1ZSk7XHJcblxyXG4gICAgZnVuY3Rpb24gcGFyc2VWZXJ0Q291bnQgKCkge1xyXG4gICAgICBpZiAoU19DT1VOVCBpbiBzdGF0aWNPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGNvdW50ID0gc3RhdGljT3B0aW9uc1tTX0NPVU5UXSB8IDA7XHJcbiAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgdHlwZW9mIGNvdW50ID09PSAnbnVtYmVyJyAmJiBjb3VudCA+PSAwLCAnaW52YWxpZCB2ZXJ0ZXggY291bnQnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGNvdW50XHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIGlmIChTX0NPVU5UIGluIGR5bmFtaWNPcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIGR5bkNvdW50ID0gZHluYW1pY09wdGlvbnNbU19DT1VOVF07XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUR5bmFtaWNEZWNsKGR5bkNvdW50LCBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGVudi5pbnZva2Uoc2NvcGUsIGR5bkNvdW50KTtcclxuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgICd0eXBlb2YgJyArIHJlc3VsdCArICc9PT1cIm51bWJlclwiJiYnICtcclxuICAgICAgICAgICAgICByZXN1bHQgKyAnPj0wJiYnICtcclxuICAgICAgICAgICAgICByZXN1bHQgKyAnPT09KCcgKyByZXN1bHQgKyAnfDApJyxcclxuICAgICAgICAgICAgICAnaW52YWxpZCB2ZXJ0ZXggY291bnQnKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudHMpIHtcclxuICAgICAgICBpZiAoaXNTdGF0aWMoZWxlbWVudHMpKSB7XHJcbiAgICAgICAgICBpZiAoZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgaWYgKE9GRlNFVCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBuZXcgRGVjbGFyYXRpb24oXHJcbiAgICAgICAgICAgICAgICBPRkZTRVQudGhpc0RlcCxcclxuICAgICAgICAgICAgICAgIE9GRlNFVC5jb250ZXh0RGVwLFxyXG4gICAgICAgICAgICAgICAgT0ZGU0VULnByb3BEZXAsXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gc2NvcGUuZGVmKFxyXG4gICAgICAgICAgICAgICAgICAgIGVudi5FTEVNRU5UUywgJy52ZXJ0Q291bnQtJywgZW52Lk9GRlNFVCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICsgJz49MCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAnaW52YWxpZCB2ZXJ0ZXggb2Zmc2V0L2VsZW1lbnQgYnVmZmVyIHRvbyBzbWFsbCcpO1xyXG4gICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHRcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoZW52LkVMRU1FTlRTLCAnLnZlcnRDb3VudCcpXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAtMVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgcmVzdWx0Lk1JU1NJTkcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgdmFyaWFibGUgPSBuZXcgRGVjbGFyYXRpb24oXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLnRoaXNEZXAgfHwgT0ZGU0VULnRoaXNEZXAsXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLmNvbnRleHREZXAgfHwgT0ZGU0VULmNvbnRleHREZXAsXHJcbiAgICAgICAgICAgIGVsZW1lbnRzLnByb3BEZXAgfHwgT0ZGU0VULnByb3BEZXAsXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgdmFyIGVsZW1lbnRzID0gZW52LkVMRU1FTlRTO1xyXG4gICAgICAgICAgICAgIGlmIChlbnYuT0ZGU0VUKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuZGVmKGVsZW1lbnRzLCAnPycsIGVsZW1lbnRzLCAnLnZlcnRDb3VudC0nLFxyXG4gICAgICAgICAgICAgICAgICBlbnYuT0ZGU0VULCAnOi0xJylcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmRlZihlbGVtZW50cywgJz8nLCBlbGVtZW50cywgJy52ZXJ0Q291bnQ6LTEnKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXJpYWJsZS5EWU5BTUlDID0gdHJ1ZTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgcmV0dXJuIHZhcmlhYmxlXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgZWxlbWVudHM6IGVsZW1lbnRzLFxyXG4gICAgICBwcmltaXRpdmU6IHBhcnNlUHJpbWl0aXZlKCksXHJcbiAgICAgIGNvdW50OiBwYXJzZVZlcnRDb3VudCgpLFxyXG4gICAgICBpbnN0YW5jZXM6IHBhcnNlUGFyYW0oU19JTlNUQU5DRVMsIGZhbHNlKSxcclxuICAgICAgb2Zmc2V0OiBPRkZTRVRcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlR0xTdGF0ZSAob3B0aW9ucywgZW52KSB7XHJcbiAgICB2YXIgc3RhdGljT3B0aW9ucyA9IG9wdGlvbnMuc3RhdGljO1xyXG4gICAgdmFyIGR5bmFtaWNPcHRpb25zID0gb3B0aW9ucy5keW5hbWljO1xyXG5cclxuICAgIHZhciBTVEFURSA9IHt9O1xyXG5cclxuICAgIEdMX1NUQVRFX05BTUVTLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgdmFyIHBhcmFtID0gcHJvcE5hbWUocHJvcCk7XHJcblxyXG4gICAgICBmdW5jdGlvbiBwYXJzZVBhcmFtIChwYXJzZVN0YXRpYywgcGFyc2VEeW5hbWljKSB7XHJcbiAgICAgICAgaWYgKHByb3AgaW4gc3RhdGljT3B0aW9ucykge1xyXG4gICAgICAgICAgdmFyIHZhbHVlID0gcGFyc2VTdGF0aWMoc3RhdGljT3B0aW9uc1twcm9wXSk7XHJcbiAgICAgICAgICBTVEFURVtwYXJhbV0gPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHByb3AgaW4gZHluYW1pY09wdGlvbnMpIHtcclxuICAgICAgICAgIHZhciBkeW4gPSBkeW5hbWljT3B0aW9uc1twcm9wXTtcclxuICAgICAgICAgIFNUQVRFW3BhcmFtXSA9IGNyZWF0ZUR5bmFtaWNEZWNsKGR5biwgZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRHluYW1pYyhlbnYsIHNjb3BlLCBlbnYuaW52b2tlKHNjb3BlLCBkeW4pKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBzd2l0Y2ggKHByb3ApIHtcclxuICAgICAgICBjYXNlIFNfQ1VMTF9FTkFCTEU6XHJcbiAgICAgICAgY2FzZSBTX0JMRU5EX0VOQUJMRTpcclxuICAgICAgICBjYXNlIFNfRElUSEVSOlxyXG4gICAgICAgIGNhc2UgU19TVEVOQ0lMX0VOQUJMRTpcclxuICAgICAgICBjYXNlIFNfREVQVEhfRU5BQkxFOlxyXG4gICAgICAgIGNhc2UgU19TQ0lTU09SX0VOQUJMRTpcclxuICAgICAgICBjYXNlIFNfUE9MWUdPTl9PRkZTRVRfRU5BQkxFOlxyXG4gICAgICAgIGNhc2UgU19TQU1QTEVfQUxQSEE6XHJcbiAgICAgICAgY2FzZSBTX1NBTVBMRV9FTkFCTEU6XHJcbiAgICAgICAgY2FzZSBTX0RFUFRIX01BU0s6XHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZSh2YWx1ZSwgJ2Jvb2xlYW4nLCBwcm9wLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICAgICAgJ3R5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJib29sZWFuXCInLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBmbGFnICcgKyBwcm9wLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNhc2UgU19ERVBUSF9GVU5DOlxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcih2YWx1ZSwgY29tcGFyZUZ1bmNzLCAnaW52YWxpZCAnICsgcHJvcCwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBjb21wYXJlRnVuY3NbdmFsdWVdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIHZhciBDT01QQVJFX0ZVTkNTID0gZW52LmNvbnN0YW50cy5jb21wYXJlRnVuY3M7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICcgaW4gJyArIENPTVBBUkVfRlVOQ1MsXHJcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkICcgKyBwcm9wICsgJywgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKGNvbXBhcmVGdW5jcykpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoQ09NUEFSRV9GVU5DUywgJ1snLCB2YWx1ZSwgJ10nKVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXNlIFNfREVQVEhfUkFOR0U6XHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5sZW5ndGggPT09IDIgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZVswXSA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZVsxXSA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlWzBdIDw9IHZhbHVlWzFdLFxyXG4gICAgICAgICAgICAgICAgJ2RlcHRoIHJhbmdlIGlzIDJkIGFycmF5JyxcclxuICAgICAgICAgICAgICAgIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICBlbnYuc2hhcmVkLmlzQXJyYXlMaWtlICsgJygnICsgdmFsdWUgKyAnKSYmJyArXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJy5sZW5ndGg9PT0yJiYnICtcclxuICAgICAgICAgICAgICAgICAgJ3R5cGVvZiAnICsgdmFsdWUgKyAnWzBdPT09XCJudW1iZXJcIiYmJyArXHJcbiAgICAgICAgICAgICAgICAgICd0eXBlb2YgJyArIHZhbHVlICsgJ1sxXT09PVwibnVtYmVyXCImJicgK1xyXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICdbMF08PScgKyB2YWx1ZSArICdbMV0nLFxyXG4gICAgICAgICAgICAgICAgICAnZGVwdGggcmFuZ2UgbXVzdCBiZSBhIDJkIGFycmF5Jyk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBaX05FQVIgPSBzY29wZS5kZWYoJysnLCB2YWx1ZSwgJ1swXScpO1xyXG4gICAgICAgICAgICAgIHZhciBaX0ZBUiA9IHNjb3BlLmRlZignKycsIHZhbHVlLCAnWzFdJyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtaX05FQVIsIFpfRkFSXVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXNlIFNfQkxFTkRfRlVOQzpcclxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnb2JqZWN0JywgJ2JsZW5kLmZ1bmMnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgdmFyIHNyY1JHQiA9ICgnc3JjUkdCJyBpbiB2YWx1ZSA/IHZhbHVlLnNyY1JHQiA6IHZhbHVlLnNyYyk7XHJcbiAgICAgICAgICAgICAgdmFyIHNyY0FscGhhID0gKCdzcmNBbHBoYScgaW4gdmFsdWUgPyB2YWx1ZS5zcmNBbHBoYSA6IHZhbHVlLnNyYyk7XHJcbiAgICAgICAgICAgICAgdmFyIGRzdFJHQiA9ICgnZHN0UkdCJyBpbiB2YWx1ZSA/IHZhbHVlLmRzdFJHQiA6IHZhbHVlLmRzdCk7XHJcbiAgICAgICAgICAgICAgdmFyIGRzdEFscGhhID0gKCdkc3RBbHBoYScgaW4gdmFsdWUgPyB2YWx1ZS5kc3RBbHBoYSA6IHZhbHVlLmRzdCk7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKHNyY1JHQiwgYmxlbmRGdW5jcywgcGFyYW0gKyAnLnNyY1JHQicsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIoc3JjQWxwaGEsIGJsZW5kRnVuY3MsIHBhcmFtICsgJy5zcmNBbHBoYScsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIoZHN0UkdCLCBibGVuZEZ1bmNzLCBwYXJhbSArICcuZHN0UkdCJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcihkc3RBbHBoYSwgYmxlbmRGdW5jcywgcGFyYW0gKyAnLmRzdEFscGhhJywgZW52LmNvbW1hbmRTdHIpO1xyXG5cclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICAoaW52YWxpZEJsZW5kQ29tYmluYXRpb25zLmluZGV4T2Yoc3JjUkdCICsgJywgJyArIGRzdFJHQikgPT09IC0xKSxcclxuICAgICAgICAgICAgICAgICd1bmFsbG93ZWQgYmxlbmRpbmcgY29tYmluYXRpb24gKHNyY1JHQiwgZHN0UkdCKSA9ICgnICsgc3JjUkdCICsgJywgJyArIGRzdFJHQiArICcpJywgZW52LmNvbW1hbmRTdHIpO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgYmxlbmRGdW5jc1tzcmNSR0JdLFxyXG4gICAgICAgICAgICAgICAgYmxlbmRGdW5jc1tkc3RSR0JdLFxyXG4gICAgICAgICAgICAgICAgYmxlbmRGdW5jc1tzcmNBbHBoYV0sXHJcbiAgICAgICAgICAgICAgICBibGVuZEZ1bmNzW2RzdEFscGhhXVxyXG4gICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgdmFyIEJMRU5EX0ZVTkNTID0gZW52LmNvbnN0YW50cy5ibGVuZEZ1bmNzO1xyXG5cclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJyYmdHlwZW9mICcgKyB2YWx1ZSArICc9PT1cIm9iamVjdFwiJyxcclxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgYmxlbmQgZnVuYywgbXVzdCBiZSBhbiBvYmplY3QnKTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCAocHJlZml4LCBzdWZmaXgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmdW5jID0gc2NvcGUuZGVmKFxyXG4gICAgICAgICAgICAgICAgICAnXCInLCBwcmVmaXgsIHN1ZmZpeCwgJ1wiIGluICcsIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAnPycsIHZhbHVlLCAnLicsIHByZWZpeCwgc3VmZml4LFxyXG4gICAgICAgICAgICAgICAgICAnOicsIHZhbHVlLCAnLicsIHByZWZpeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuYyArICcgaW4gJyArIEJMRU5EX0ZVTkNTLFxyXG4gICAgICAgICAgICAgICAgICAgICdpbnZhbGlkICcgKyBwcm9wICsgJy4nICsgcHJlZml4ICsgc3VmZml4ICsgJywgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKGJsZW5kRnVuY3MpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jXHJcbiAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICB2YXIgc3JjUkdCID0gcmVhZCgnc3JjJywgJ1JHQicpO1xyXG4gICAgICAgICAgICAgIHZhciBkc3RSR0IgPSByZWFkKCdkc3QnLCAnUkdCJyk7XHJcblxyXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIElOVkFMSURfQkxFTkRfQ09NQklOQVRJT05TID0gZW52LmNvbnN0YW50cy5pbnZhbGlkQmxlbmRDb21iaW5hdGlvbnM7XHJcblxyXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5WQUxJRF9CTEVORF9DT01CSU5BVElPTlMgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnLmluZGV4T2YoJyArIHNyY1JHQiArICcrXCIsIFwiKycgKyBkc3RSR0IgKyAnKSA9PT0gLTEgJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VuYWxsb3dlZCBibGVuZGluZyBjb21iaW5hdGlvbiBmb3IgKHNyY1JHQiwgZHN0UkdCKSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgU1JDX1JHQiA9IHNjb3BlLmRlZihCTEVORF9GVU5DUywgJ1snLCBzcmNSR0IsICddJyk7XHJcbiAgICAgICAgICAgICAgdmFyIFNSQ19BTFBIQSA9IHNjb3BlLmRlZihCTEVORF9GVU5DUywgJ1snLCByZWFkKCdzcmMnLCAnQWxwaGEnKSwgJ10nKTtcclxuICAgICAgICAgICAgICB2YXIgRFNUX1JHQiA9IHNjb3BlLmRlZihCTEVORF9GVU5DUywgJ1snLCBkc3RSR0IsICddJyk7XHJcbiAgICAgICAgICAgICAgdmFyIERTVF9BTFBIQSA9IHNjb3BlLmRlZihCTEVORF9GVU5DUywgJ1snLCByZWFkKCdkc3QnLCAnQWxwaGEnKSwgJ10nKTtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtTUkNfUkdCLCBEU1RfUkdCLCBTUkNfQUxQSEEsIERTVF9BTFBIQV1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY2FzZSBTX0JMRU5EX0VRVUFUSU9OOlxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIodmFsdWUsIGJsZW5kRXF1YXRpb25zLCAnaW52YWxpZCAnICsgcHJvcCwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgYmxlbmRFcXVhdGlvbnNbdmFsdWVdLFxyXG4gICAgICAgICAgICAgICAgICBibGVuZEVxdWF0aW9uc1t2YWx1ZV1cclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcihcclxuICAgICAgICAgICAgICAgICAgdmFsdWUucmdiLCBibGVuZEVxdWF0aW9ucywgcHJvcCArICcucmdiJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZS5hbHBoYSwgYmxlbmRFcXVhdGlvbnMsIHByb3AgKyAnLmFscGhhJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgYmxlbmRFcXVhdGlvbnNbdmFsdWUucmdiXSxcclxuICAgICAgICAgICAgICAgICAgYmxlbmRFcXVhdGlvbnNbdmFsdWUuYWxwaGFdXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFJhaXNlKCdpbnZhbGlkIGJsZW5kLmVxdWF0aW9uJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgdmFyIEJMRU5EX0VRVUFUSU9OUyA9IGVudi5jb25zdGFudHMuYmxlbmRFcXVhdGlvbnM7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBSR0IgPSBzY29wZS5kZWYoKTtcclxuICAgICAgICAgICAgICB2YXIgQUxQSEEgPSBzY29wZS5kZWYoKTtcclxuXHJcbiAgICAgICAgICAgICAgdmFyIGlmdGUgPSBlbnYuY29uZCgndHlwZW9mICcsIHZhbHVlLCAnPT09XCJzdHJpbmdcIicpO1xyXG5cclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrUHJvcCAoYmxvY2ssIG5hbWUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoYmxvY2ssXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnIGluICcgKyBCTEVORF9FUVVBVElPTlMsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIG5hbWUgKyAnLCBtdXN0IGJlIG9uZSBvZiAnICsgT2JqZWN0LmtleXMoYmxlbmRFcXVhdGlvbnMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoZWNrUHJvcChpZnRlLnRoZW4sIHByb3AsIHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KGlmdGUuZWxzZSxcclxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnJiZ0eXBlb2YgJyArIHZhbHVlICsgJz09PVwib2JqZWN0XCInLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCAnICsgcHJvcCk7XHJcbiAgICAgICAgICAgICAgICBjaGVja1Byb3AoaWZ0ZS5lbHNlLCBwcm9wICsgJy5yZ2InLCB2YWx1ZSArICcucmdiJyk7XHJcbiAgICAgICAgICAgICAgICBjaGVja1Byb3AoaWZ0ZS5lbHNlLCBwcm9wICsgJy5hbHBoYScsIHZhbHVlICsgJy5hbHBoYScpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICBpZnRlLnRoZW4oXHJcbiAgICAgICAgICAgICAgICBSR0IsICc9JywgQUxQSEEsICc9JywgQkxFTkRfRVFVQVRJT05TLCAnWycsIHZhbHVlLCAnXTsnKTtcclxuICAgICAgICAgICAgICBpZnRlLmVsc2UoXHJcbiAgICAgICAgICAgICAgICBSR0IsICc9JywgQkxFTkRfRVFVQVRJT05TLCAnWycsIHZhbHVlLCAnLnJnYl07JyxcclxuICAgICAgICAgICAgICAgIEFMUEhBLCAnPScsIEJMRU5EX0VRVUFUSU9OUywgJ1snLCB2YWx1ZSwgJy5hbHBoYV07Jyk7XHJcblxyXG4gICAgICAgICAgICAgIHNjb3BlKGlmdGUpO1xyXG5cclxuICAgICAgICAgICAgICByZXR1cm4gW1JHQiwgQUxQSEFdXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNhc2UgU19CTEVORF9DT0xPUjpcclxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlLmxlbmd0aCA9PT0gNCxcclxuICAgICAgICAgICAgICAgICdibGVuZC5jb2xvciBtdXN0IGJlIGEgNGQgYXJyYXknLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGxvb3AoNCwgZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiArdmFsdWVbaV1cclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgIGVudi5zaGFyZWQuaXNBcnJheUxpa2UgKyAnKCcgKyB2YWx1ZSArICcpJiYnICtcclxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnLmxlbmd0aD09PTQnLFxyXG4gICAgICAgICAgICAgICAgICAnYmxlbmQuY29sb3IgbXVzdCBiZSBhIDRkIGFycmF5Jyk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGxvb3AoNCwgZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoJysnLCB2YWx1ZSwgJ1snLCBpLCAnXScpXHJcbiAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY2FzZSBTX1NURU5DSUxfTUFTSzpcclxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnbnVtYmVyJywgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgfCAwXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICAgICAgJ3R5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJudW1iZXJcIicsXHJcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkIHN0ZW5jaWwubWFzaycpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYodmFsdWUsICd8MCcpXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNhc2UgU19TVEVOQ0lMX0ZVTkM6XHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZSh2YWx1ZSwgJ29iamVjdCcsIHBhcmFtLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgdmFyIGNtcCA9IHZhbHVlLmNtcCB8fCAna2VlcCc7XHJcbiAgICAgICAgICAgICAgdmFyIHJlZiA9IHZhbHVlLnJlZiB8fCAwO1xyXG4gICAgICAgICAgICAgIHZhciBtYXNrID0gJ21hc2snIGluIHZhbHVlID8gdmFsdWUubWFzayA6IC0xO1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcihjbXAsIGNvbXBhcmVGdW5jcywgcHJvcCArICcuY21wJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUocmVmLCAnbnVtYmVyJywgcHJvcCArICcucmVmJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUobWFzaywgJ251bWJlcicsIHByb3AgKyAnLm1hc2snLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIGNvbXBhcmVGdW5jc1tjbXBdLFxyXG4gICAgICAgICAgICAgICAgcmVmLFxyXG4gICAgICAgICAgICAgICAgbWFza1xyXG4gICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24gKGVudiwgc2NvcGUsIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgdmFyIENPTVBBUkVfRlVOQ1MgPSBlbnYuY29uc3RhbnRzLmNvbXBhcmVGdW5jcztcclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFzc2VydCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmpvaW4uY2FsbChhcmd1bWVudHMsICcnKSxcclxuICAgICAgICAgICAgICAgICAgICAnaW52YWxpZCBzdGVuY2lsLmZ1bmMnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGFzc2VydCh2YWx1ZSArICcmJnR5cGVvZiAnLCB2YWx1ZSwgJz09PVwib2JqZWN0XCInKTtcclxuICAgICAgICAgICAgICAgIGFzc2VydCgnIShcImNtcFwiIGluICcsIHZhbHVlLCAnKXx8KCcsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlLCAnLmNtcCBpbiAnLCBDT01QQVJFX0ZVTkNTLCAnKScpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHZhciBjbXAgPSBzY29wZS5kZWYoXHJcbiAgICAgICAgICAgICAgICAnXCJjbXBcIiBpbiAnLCB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICc/JywgQ09NUEFSRV9GVU5DUywgJ1snLCB2YWx1ZSwgJy5jbXBdJyxcclxuICAgICAgICAgICAgICAgICc6JywgR0xfS0VFUCk7XHJcbiAgICAgICAgICAgICAgdmFyIHJlZiA9IHNjb3BlLmRlZih2YWx1ZSwgJy5yZWZ8MCcpO1xyXG4gICAgICAgICAgICAgIHZhciBtYXNrID0gc2NvcGUuZGVmKFxyXG4gICAgICAgICAgICAgICAgJ1wibWFza1wiIGluICcsIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgJz8nLCB2YWx1ZSwgJy5tYXNrfDA6LTEnKTtcclxuICAgICAgICAgICAgICByZXR1cm4gW2NtcCwgcmVmLCBtYXNrXVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXNlIFNfU1RFTkNJTF9PUEZST05UOlxyXG4gICAgICAgIGNhc2UgU19TVEVOQ0lMX09QQkFDSzpcclxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnb2JqZWN0JywgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICB2YXIgZmFpbCA9IHZhbHVlLmZhaWwgfHwgJ2tlZXAnO1xyXG4gICAgICAgICAgICAgIHZhciB6ZmFpbCA9IHZhbHVlLnpmYWlsIHx8ICdrZWVwJztcclxuICAgICAgICAgICAgICB2YXIgenBhc3MgPSB2YWx1ZS56cGFzcyB8fCAna2VlcCc7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKGZhaWwsIHN0ZW5jaWxPcHMsIHByb3AgKyAnLmZhaWwnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kUGFyYW1ldGVyKHpmYWlsLCBzdGVuY2lsT3BzLCBwcm9wICsgJy56ZmFpbCcsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIoenBhc3MsIHN0ZW5jaWxPcHMsIHByb3AgKyAnLnpwYXNzJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICBwcm9wID09PSBTX1NURU5DSUxfT1BCQUNLID8gR0xfQkFDSyA6IEdMX0ZST05ULFxyXG4gICAgICAgICAgICAgICAgc3RlbmNpbE9wc1tmYWlsXSxcclxuICAgICAgICAgICAgICAgIHN0ZW5jaWxPcHNbemZhaWxdLFxyXG4gICAgICAgICAgICAgICAgc3RlbmNpbE9wc1t6cGFzc11cclxuICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIHZhciBTVEVOQ0lMX09QUyA9IGVudi5jb25zdGFudHMuc3RlbmNpbE9wcztcclxuXHJcbiAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICcmJnR5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJvYmplY3RcIicsXHJcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkICcgKyBwcm9wKTtcclxuICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgZnVuY3Rpb24gcmVhZCAobmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgICAgJyEoXCInICsgbmFtZSArICdcIiBpbiAnICsgdmFsdWUgKyAnKXx8JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJygnICsgdmFsdWUgKyAnLicgKyBuYW1lICsgJyBpbiAnICsgU1RFTkNJTF9PUFMgKyAnKScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIHByb3AgKyAnLicgKyBuYW1lICsgJywgbXVzdCBiZSBvbmUgb2YgJyArIE9iamVjdC5rZXlzKHN0ZW5jaWxPcHMpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYoXHJcbiAgICAgICAgICAgICAgICAgICdcIicsIG5hbWUsICdcIiBpbiAnLCB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgJz8nLCBTVEVOQ0lMX09QUywgJ1snLCB2YWx1ZSwgJy4nLCBuYW1lLCAnXTonLFxyXG4gICAgICAgICAgICAgICAgICBHTF9LRUVQKVxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIHByb3AgPT09IFNfU1RFTkNJTF9PUEJBQ0sgPyBHTF9CQUNLIDogR0xfRlJPTlQsXHJcbiAgICAgICAgICAgICAgICByZWFkKCdmYWlsJyksXHJcbiAgICAgICAgICAgICAgICByZWFkKCd6ZmFpbCcpLFxyXG4gICAgICAgICAgICAgICAgcmVhZCgnenBhc3MnKVxyXG4gICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY2FzZSBTX1BPTFlHT05fT0ZGU0VUX09GRlNFVDpcclxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnb2JqZWN0JywgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICB2YXIgZmFjdG9yID0gdmFsdWUuZmFjdG9yIHwgMDtcclxuICAgICAgICAgICAgICB2YXIgdW5pdHMgPSB2YWx1ZS51bml0cyB8IDA7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZShmYWN0b3IsICdudW1iZXInLCBwYXJhbSArICcuZmFjdG9yJywgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFR5cGUodW5pdHMsICdudW1iZXInLCBwYXJhbSArICcudW5pdHMnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtmYWN0b3IsIHVuaXRzXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJyYmdHlwZW9mICcgKyB2YWx1ZSArICc9PT1cIm9iamVjdFwiJyxcclxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgJyArIHByb3ApO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICB2YXIgRkFDVE9SID0gc2NvcGUuZGVmKHZhbHVlLCAnLmZhY3RvcnwwJyk7XHJcbiAgICAgICAgICAgICAgdmFyIFVOSVRTID0gc2NvcGUuZGVmKHZhbHVlLCAnLnVuaXRzfDAnKTtcclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtGQUNUT1IsIFVOSVRTXVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXNlIFNfQ1VMTF9GQUNFOlxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIHZhciBmYWNlID0gMDtcclxuICAgICAgICAgICAgICBpZiAodmFsdWUgPT09ICdmcm9udCcpIHtcclxuICAgICAgICAgICAgICAgIGZhY2UgPSBHTF9GUk9OVDtcclxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnYmFjaycpIHtcclxuICAgICAgICAgICAgICAgIGZhY2UgPSBHTF9CQUNLO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoISFmYWNlLCBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWNlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnPT09XCJmcm9udFwifHwnICtcclxuICAgICAgICAgICAgICAgICAgdmFsdWUgKyAnPT09XCJiYWNrXCInLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBjdWxsLmZhY2UnKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuZGVmKHZhbHVlLCAnPT09XCJmcm9udFwiPycsIEdMX0ZST05ULCAnOicsIEdMX0JBQ0spXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIGNhc2UgU19MSU5FX1dJRFRIOlxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcclxuICAgICAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICAgICAgIHZhbHVlID49IGxpbWl0cy5saW5lV2lkdGhEaW1zWzBdICYmXHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA8PSBsaW1pdHMubGluZVdpZHRoRGltc1sxXSxcclxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGxpbmUgd2lkdGgsIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIgYmV0d2VlbiAnICtcclxuICAgICAgICAgICAgICAgIGxpbWl0cy5saW5lV2lkdGhEaW1zWzBdICsgJyBhbmQgJyArIGxpbWl0cy5saW5lV2lkdGhEaW1zWzFdLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICAgICAgJ3R5cGVvZiAnICsgdmFsdWUgKyAnPT09XCJudW1iZXJcIiYmJyArXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJz49JyArIGxpbWl0cy5saW5lV2lkdGhEaW1zWzBdICsgJyYmJyArXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJzw9JyArIGxpbWl0cy5saW5lV2lkdGhEaW1zWzFdLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBsaW5lIHdpZHRoJyk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXNlIFNfRlJPTlRfRkFDRTpcclxuICAgICAgICAgIHJldHVybiBwYXJzZVBhcmFtKFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRQYXJhbWV0ZXIodmFsdWUsIG9yaWVudGF0aW9uVHlwZSwgcGFyYW0sIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICByZXR1cm4gb3JpZW50YXRpb25UeXBlW3ZhbHVlXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJz09PVwiY3dcInx8JyArXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJz09PVwiY2N3XCInLFxyXG4gICAgICAgICAgICAgICAgICAnaW52YWxpZCBmcm9udEZhY2UsIG11c3QgYmUgb25lIG9mIGN3LGNjdycpO1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgIHJldHVybiBzY29wZS5kZWYodmFsdWUgKyAnPT09XCJjd1wiPycgKyBHTF9DVyArICc6JyArIEdMX0NDVylcclxuICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY2FzZSBTX0NPTE9SX01BU0s6XHJcbiAgICAgICAgICByZXR1cm4gcGFyc2VQYXJhbShcclxuICAgICAgICAgICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gNCxcclxuICAgICAgICAgICAgICAgICdjb2xvci5tYXNrIG11c3QgYmUgbGVuZ3RoIDQgYXJyYXknLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gISF2IH0pXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIChlbnYsIHNjb3BlLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSxcclxuICAgICAgICAgICAgICAgICAgZW52LnNoYXJlZC5pc0FycmF5TGlrZSArICcoJyArIHZhbHVlICsgJykmJicgK1xyXG4gICAgICAgICAgICAgICAgICB2YWx1ZSArICcubGVuZ3RoPT09NCcsXHJcbiAgICAgICAgICAgICAgICAgICdpbnZhbGlkIGNvbG9yLm1hc2snKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICByZXR1cm4gbG9vcCg0LCBmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICchIScgKyB2YWx1ZSArICdbJyArIGkgKyAnXSdcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICBjYXNlIFNfU0FNUExFX0NPVkVSQUdFOlxyXG4gICAgICAgICAgcmV0dXJuIHBhcnNlUGFyYW0oXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZCh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlLCBwYXJhbSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIHZhciBzYW1wbGVWYWx1ZSA9ICd2YWx1ZScgaW4gdmFsdWUgPyB2YWx1ZS52YWx1ZSA6IDE7XHJcbiAgICAgICAgICAgICAgdmFyIHNhbXBsZUludmVydCA9ICEhdmFsdWUuaW52ZXJ0O1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcclxuICAgICAgICAgICAgICAgIHR5cGVvZiBzYW1wbGVWYWx1ZSA9PT0gJ251bWJlcicgJiZcclxuICAgICAgICAgICAgICAgIHNhbXBsZVZhbHVlID49IDAgJiYgc2FtcGxlVmFsdWUgPD0gMSxcclxuICAgICAgICAgICAgICAgICdzYW1wbGUuY292ZXJhZ2UudmFsdWUgbXVzdCBiZSBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDEnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtzYW1wbGVWYWx1ZSwgc2FtcGxlSW52ZXJ0XVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmdW5jdGlvbiAoZW52LCBzY29wZSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsXHJcbiAgICAgICAgICAgICAgICAgIHZhbHVlICsgJyYmdHlwZW9mICcgKyB2YWx1ZSArICc9PT1cIm9iamVjdFwiJyxcclxuICAgICAgICAgICAgICAgICAgJ2ludmFsaWQgc2FtcGxlLmNvdmVyYWdlJyk7XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgdmFyIFZBTFVFID0gc2NvcGUuZGVmKFxyXG4gICAgICAgICAgICAgICAgJ1widmFsdWVcIiBpbiAnLCB2YWx1ZSwgJz8rJywgdmFsdWUsICcudmFsdWU6MScpO1xyXG4gICAgICAgICAgICAgIHZhciBJTlZFUlQgPSBzY29wZS5kZWYoJyEhJywgdmFsdWUsICcuaW52ZXJ0Jyk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIFtWQUxVRSwgSU5WRVJUXVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gU1RBVEVcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlVW5pZm9ybXMgKHVuaWZvcm1zLCBlbnYpIHtcclxuICAgIHZhciBzdGF0aWNVbmlmb3JtcyA9IHVuaWZvcm1zLnN0YXRpYztcclxuICAgIHZhciBkeW5hbWljVW5pZm9ybXMgPSB1bmlmb3Jtcy5keW5hbWljO1xyXG5cclxuICAgIHZhciBVTklGT1JNUyA9IHt9O1xyXG5cclxuICAgIE9iamVjdC5rZXlzKHN0YXRpY1VuaWZvcm1zKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IHN0YXRpY1VuaWZvcm1zW25hbWVdO1xyXG4gICAgICB2YXIgcmVzdWx0O1xyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiB2YWx1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHZhciByZWdsVHlwZSA9IHZhbHVlLl9yZWdsVHlwZTtcclxuICAgICAgICBpZiAocmVnbFR5cGUgPT09ICd0ZXh0dXJlMmQnIHx8XHJcbiAgICAgICAgICAgIHJlZ2xUeXBlID09PSAndGV4dHVyZUN1YmUnKSB7XHJcbiAgICAgICAgICByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVudi5saW5rKHZhbHVlKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChyZWdsVHlwZSA9PT0gJ2ZyYW1lYnVmZmVyJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgcmVnbFR5cGUgPT09ICdmcmFtZWJ1ZmZlckN1YmUnKSB7XHJcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQodmFsdWUuY29sb3IubGVuZ3RoID4gMCxcclxuICAgICAgICAgICAgJ21pc3NpbmcgY29sb3IgYXR0YWNobWVudCBmb3IgZnJhbWVidWZmZXIgc2VudCB0byB1bmlmb3JtIFwiJyArIG5hbWUgKyAnXCInLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICByZXN1bHQgPSBjcmVhdGVTdGF0aWNEZWNsKGZ1bmN0aW9uIChlbnYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVudi5saW5rKHZhbHVlLmNvbG9yWzBdKVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFJhaXNlKCdpbnZhbGlkIGRhdGEgZm9yIHVuaWZvcm0gXCInICsgbmFtZSArICdcIicsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUxpa2UodmFsdWUpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52KSB7XHJcbiAgICAgICAgICB2YXIgSVRFTSA9IGVudi5nbG9iYWwuZGVmKCdbJyxcclxuICAgICAgICAgICAgbG9vcCh2YWx1ZS5sZW5ndGgsIGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlW2ldID09PSAnbnVtYmVyJyB8fFxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlW2ldID09PSAnYm9vbGVhbicsXHJcbiAgICAgICAgICAgICAgICAnaW52YWxpZCB1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlW2ldXHJcbiAgICAgICAgICAgIH0pLCAnXScpO1xyXG4gICAgICAgICAgcmV0dXJuIElURU1cclxuICAgICAgICB9KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjaGVjayQxLmNvbW1hbmRSYWlzZSgnaW52YWxpZCBvciBtaXNzaW5nIGRhdGEgZm9yIHVuaWZvcm0gXCInICsgbmFtZSArICdcIicsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgfVxyXG4gICAgICByZXN1bHQudmFsdWUgPSB2YWx1ZTtcclxuICAgICAgVU5JRk9STVNbbmFtZV0gPSByZXN1bHQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhkeW5hbWljVW5pZm9ybXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICB2YXIgZHluID0gZHluYW1pY1VuaWZvcm1zW2tleV07XHJcbiAgICAgIFVOSUZPUk1TW2tleV0gPSBjcmVhdGVEeW5hbWljRGVjbChkeW4sIGZ1bmN0aW9uIChlbnYsIHNjb3BlKSB7XHJcbiAgICAgICAgcmV0dXJuIGVudi5pbnZva2Uoc2NvcGUsIGR5bilcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gVU5JRk9STVNcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyAoYXR0cmlidXRlcywgZW52KSB7XHJcbiAgICB2YXIgc3RhdGljQXR0cmlidXRlcyA9IGF0dHJpYnV0ZXMuc3RhdGljO1xyXG4gICAgdmFyIGR5bmFtaWNBdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5keW5hbWljO1xyXG5cclxuICAgIHZhciBhdHRyaWJ1dGVEZWZzID0ge307XHJcblxyXG4gICAgT2JqZWN0LmtleXMoc3RhdGljQXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IHN0YXRpY0F0dHJpYnV0ZXNbYXR0cmlidXRlXTtcclxuICAgICAgdmFyIGlkID0gc3RyaW5nU3RvcmUuaWQoYXR0cmlidXRlKTtcclxuXHJcbiAgICAgIHZhciByZWNvcmQgPSBuZXcgQXR0cmlidXRlUmVjb3JkKCk7XHJcbiAgICAgIGlmIChpc0J1ZmZlckFyZ3ModmFsdWUpKSB7XHJcbiAgICAgICAgcmVjb3JkLnN0YXRlID0gQVRUUklCX1NUQVRFX1BPSU5URVI7XHJcbiAgICAgICAgcmVjb3JkLmJ1ZmZlciA9IGJ1ZmZlclN0YXRlLmdldEJ1ZmZlcihcclxuICAgICAgICAgIGJ1ZmZlclN0YXRlLmNyZWF0ZSh2YWx1ZSwgR0xfQVJSQVlfQlVGRkVSJDEsIGZhbHNlLCB0cnVlKSk7XHJcbiAgICAgICAgcmVjb3JkLnR5cGUgPSAwO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBidWZmZXIgPSBidWZmZXJTdGF0ZS5nZXRCdWZmZXIodmFsdWUpO1xyXG4gICAgICAgIGlmIChidWZmZXIpIHtcclxuICAgICAgICAgIHJlY29yZC5zdGF0ZSA9IEFUVFJJQl9TVEFURV9QT0lOVEVSO1xyXG4gICAgICAgICAgcmVjb3JkLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuICAgICAgICAgIHJlY29yZC50eXBlID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY2hlY2skMS5jb21tYW5kKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUsXHJcbiAgICAgICAgICAgICdpbnZhbGlkIGRhdGEgZm9yIGF0dHJpYnV0ZSAnICsgYXR0cmlidXRlLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICBpZiAoJ2NvbnN0YW50JyBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICB2YXIgY29uc3RhbnQgPSB2YWx1ZS5jb25zdGFudDtcclxuICAgICAgICAgICAgcmVjb3JkLmJ1ZmZlciA9ICdudWxsJztcclxuICAgICAgICAgICAgcmVjb3JkLnN0YXRlID0gQVRUUklCX1NUQVRFX0NPTlNUQU5UO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnN0YW50ID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgIHJlY29yZC54ID0gY29uc3RhbnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgaXNBcnJheUxpa2UoY29uc3RhbnQpICYmXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudC5sZW5ndGggPiAwICYmXHJcbiAgICAgICAgICAgICAgICBjb25zdGFudC5sZW5ndGggPD0gNCxcclxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGNvbnN0YW50IGZvciBhdHRyaWJ1dGUgJyArIGF0dHJpYnV0ZSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIENVVEVfQ09NUE9ORU5UUy5mb3JFYWNoKGZ1bmN0aW9uIChjLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IGNvbnN0YW50Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICByZWNvcmRbY10gPSBjb25zdGFudFtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlzQnVmZmVyQXJncyh2YWx1ZS5idWZmZXIpKSB7XHJcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyU3RhdGUuZ2V0QnVmZmVyKFxyXG4gICAgICAgICAgICAgICAgYnVmZmVyU3RhdGUuY3JlYXRlKHZhbHVlLmJ1ZmZlciwgR0xfQVJSQVlfQlVGRkVSJDEsIGZhbHNlLCB0cnVlKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyU3RhdGUuZ2V0QnVmZmVyKHZhbHVlLmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKCEhYnVmZmVyLCAnbWlzc2luZyBidWZmZXIgZm9yIGF0dHJpYnV0ZSBcIicgKyBhdHRyaWJ1dGUgKyAnXCInLCBlbnYuY29tbWFuZFN0cik7XHJcblxyXG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdmFsdWUub2Zmc2V0IHwgMDtcclxuICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKG9mZnNldCA+PSAwLFxyXG4gICAgICAgICAgICAgICdpbnZhbGlkIG9mZnNldCBmb3IgYXR0cmlidXRlIFwiJyArIGF0dHJpYnV0ZSArICdcIicsIGVudi5jb21tYW5kU3RyKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzdHJpZGUgPSB2YWx1ZS5zdHJpZGUgfCAwO1xyXG4gICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoc3RyaWRlID49IDAgJiYgc3RyaWRlIDwgMjU2LFxyXG4gICAgICAgICAgICAgICdpbnZhbGlkIHN0cmlkZSBmb3IgYXR0cmlidXRlIFwiJyArIGF0dHJpYnV0ZSArICdcIiwgbXVzdCBiZSBpbnRlZ2VyIGJldHdlZWVuIFswLCAyNTVdJywgZW52LmNvbW1hbmRTdHIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNpemUgPSB2YWx1ZS5zaXplIHwgMDtcclxuICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKCEoJ3NpemUnIGluIHZhbHVlKSB8fCAoc2l6ZSA+IDAgJiYgc2l6ZSA8PSA0KSxcclxuICAgICAgICAgICAgICAnaW52YWxpZCBzaXplIGZvciBhdHRyaWJ1dGUgXCInICsgYXR0cmlidXRlICsgJ1wiLCBtdXN0IGJlIDEsMiwzLDQnLCBlbnYuY29tbWFuZFN0cik7XHJcblxyXG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZCA9ICEhdmFsdWUubm9ybWFsaXplZDtcclxuXHJcbiAgICAgICAgICAgIHZhciB0eXBlID0gMDtcclxuICAgICAgICAgICAgaWYgKCd0eXBlJyBpbiB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZFBhcmFtZXRlcihcclxuICAgICAgICAgICAgICAgIHZhbHVlLnR5cGUsIGdsVHlwZXMsXHJcbiAgICAgICAgICAgICAgICAnaW52YWxpZCB0eXBlIGZvciBhdHRyaWJ1dGUgJyArIGF0dHJpYnV0ZSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgIHR5cGUgPSBnbFR5cGVzW3ZhbHVlLnR5cGVdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZGl2aXNvciA9IHZhbHVlLmRpdmlzb3IgfCAwO1xyXG4gICAgICAgICAgICBpZiAoJ2Rpdmlzb3InIGluIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKGRpdmlzb3IgPT09IDAgfHwgZXh0SW5zdGFuY2luZyxcclxuICAgICAgICAgICAgICAgICdjYW5ub3Qgc3BlY2lmeSBkaXZpc29yIGZvciBhdHRyaWJ1dGUgXCInICsgYXR0cmlidXRlICsgJ1wiLCBpbnN0YW5jaW5nIG5vdCBzdXBwb3J0ZWQnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKGRpdmlzb3IgPj0gMCxcclxuICAgICAgICAgICAgICAgICdpbnZhbGlkIGRpdmlzb3IgZm9yIGF0dHJpYnV0ZSBcIicgKyBhdHRyaWJ1dGUgKyAnXCInLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHZhciBjb21tYW5kID0gZW52LmNvbW1hbmRTdHI7XHJcblxyXG4gICAgICAgICAgICAgIHZhciBWQUxJRF9LRVlTID0gW1xyXG4gICAgICAgICAgICAgICAgJ2J1ZmZlcicsXHJcbiAgICAgICAgICAgICAgICAnb2Zmc2V0JyxcclxuICAgICAgICAgICAgICAgICdkaXZpc29yJyxcclxuICAgICAgICAgICAgICAgICdub3JtYWxpemVkJyxcclxuICAgICAgICAgICAgICAgICd0eXBlJyxcclxuICAgICAgICAgICAgICAgICdzaXplJyxcclxuICAgICAgICAgICAgICAgICdzdHJpZGUnXHJcbiAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgICAgT2JqZWN0LmtleXModmFsdWUpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcclxuICAgICAgICAgICAgICAgICAgVkFMSURfS0VZUy5pbmRleE9mKHByb3ApID49IDAsXHJcbiAgICAgICAgICAgICAgICAgICd1bmtub3duIHBhcmFtZXRlciBcIicgKyBwcm9wICsgJ1wiIGZvciBhdHRyaWJ1dGUgcG9pbnRlciBcIicgKyBhdHRyaWJ1dGUgKyAnXCIgKHZhbGlkIHBhcmFtZXRlcnMgYXJlICcgKyBWQUxJRF9LRVlTICsgJyknLFxyXG4gICAgICAgICAgICAgICAgICBjb21tYW5kKTtcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZWNvcmQuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgICAgICAgICByZWNvcmQuc3RhdGUgPSBBVFRSSUJfU1RBVEVfUE9JTlRFUjtcclxuICAgICAgICAgICAgcmVjb3JkLnNpemUgPSBzaXplO1xyXG4gICAgICAgICAgICByZWNvcmQubm9ybWFsaXplZCA9IG5vcm1hbGl6ZWQ7XHJcbiAgICAgICAgICAgIHJlY29yZC50eXBlID0gdHlwZSB8fCBidWZmZXIuZHR5cGU7XHJcbiAgICAgICAgICAgIHJlY29yZC5vZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIHJlY29yZC5zdHJpZGUgPSBzdHJpZGU7XHJcbiAgICAgICAgICAgIHJlY29yZC5kaXZpc29yID0gZGl2aXNvcjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGF0dHJpYnV0ZURlZnNbYXR0cmlidXRlXSA9IGNyZWF0ZVN0YXRpY0RlY2woZnVuY3Rpb24gKGVudiwgc2NvcGUpIHtcclxuICAgICAgICB2YXIgY2FjaGUgPSBlbnYuYXR0cmliQ2FjaGU7XHJcbiAgICAgICAgaWYgKGlkIGluIGNhY2hlKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2FjaGVbaWRdXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICBpc1N0cmVhbTogZmFsc2VcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKHJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHJlY29yZFtrZXldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmIChyZWNvcmQuYnVmZmVyKSB7XHJcbiAgICAgICAgICByZXN1bHQuYnVmZmVyID0gZW52LmxpbmsocmVjb3JkLmJ1ZmZlcik7XHJcbiAgICAgICAgICByZXN1bHQudHlwZSA9IHJlc3VsdC50eXBlIHx8IChyZXN1bHQuYnVmZmVyICsgJy5kdHlwZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWNoZVtpZF0gPSByZXN1bHQ7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKGR5bmFtaWNBdHRyaWJ1dGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcclxuICAgICAgdmFyIGR5biA9IGR5bmFtaWNBdHRyaWJ1dGVzW2F0dHJpYnV0ZV07XHJcblxyXG4gICAgICBmdW5jdGlvbiBhcHBlbmRBdHRyaWJ1dGVDb2RlIChlbnYsIGJsb2NrKSB7XHJcbiAgICAgICAgdmFyIFZBTFVFID0gZW52Lmludm9rZShibG9jaywgZHluKTtcclxuXHJcbiAgICAgICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XHJcbiAgICAgICAgdmFyIGNvbnN0YW50cyA9IGVudi5jb25zdGFudHM7XHJcblxyXG4gICAgICAgIHZhciBJU19CVUZGRVJfQVJHUyA9IHNoYXJlZC5pc0J1ZmZlckFyZ3M7XHJcbiAgICAgICAgdmFyIEJVRkZFUl9TVEFURSA9IHNoYXJlZC5idWZmZXI7XHJcblxyXG4gICAgICAgIC8vIFBlcmZvcm0gdmFsaWRhdGlvbiBvbiBhdHRyaWJ1dGVcclxuICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGVudi5hc3NlcnQoYmxvY2ssXHJcbiAgICAgICAgICAgIFZBTFVFICsgJyYmKHR5cGVvZiAnICsgVkFMVUUgKyAnPT09XCJvYmplY3RcInx8dHlwZW9mICcgK1xyXG4gICAgICAgICAgICBWQUxVRSArICc9PT1cImZ1bmN0aW9uXCIpJiYoJyArXHJcbiAgICAgICAgICAgIElTX0JVRkZFUl9BUkdTICsgJygnICsgVkFMVUUgKyAnKXx8JyArXHJcbiAgICAgICAgICAgIEJVRkZFUl9TVEFURSArICcuZ2V0QnVmZmVyKCcgKyBWQUxVRSArICcpfHwnICtcclxuICAgICAgICAgICAgQlVGRkVSX1NUQVRFICsgJy5nZXRCdWZmZXIoJyArIFZBTFVFICsgJy5idWZmZXIpfHwnICtcclxuICAgICAgICAgICAgSVNfQlVGRkVSX0FSR1MgKyAnKCcgKyBWQUxVRSArICcuYnVmZmVyKXx8JyArXHJcbiAgICAgICAgICAgICcoXCJjb25zdGFudFwiIGluICcgKyBWQUxVRSArXHJcbiAgICAgICAgICAgICcmJih0eXBlb2YgJyArIFZBTFVFICsgJy5jb25zdGFudD09PVwibnVtYmVyXCJ8fCcgK1xyXG4gICAgICAgICAgICBzaGFyZWQuaXNBcnJheUxpa2UgKyAnKCcgKyBWQUxVRSArICcuY29uc3RhbnQpKSkpJyxcclxuICAgICAgICAgICAgJ2ludmFsaWQgZHluYW1pYyBhdHRyaWJ1dGUgXCInICsgYXR0cmlidXRlICsgJ1wiJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIGFsbG9jYXRlIG5hbWVzIGZvciByZXN1bHRcclxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgaXNTdHJlYW06IGJsb2NrLmRlZihmYWxzZSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBkZWZhdWx0UmVjb3JkID0gbmV3IEF0dHJpYnV0ZVJlY29yZCgpO1xyXG4gICAgICAgIGRlZmF1bHRSZWNvcmQuc3RhdGUgPSBBVFRSSUJfU1RBVEVfUE9JTlRFUjtcclxuICAgICAgICBPYmplY3Qua2V5cyhkZWZhdWx0UmVjb3JkKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgIHJlc3VsdFtrZXldID0gYmxvY2suZGVmKCcnICsgZGVmYXVsdFJlY29yZFtrZXldKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdmFyIEJVRkZFUiA9IHJlc3VsdC5idWZmZXI7XHJcbiAgICAgICAgdmFyIFRZUEUgPSByZXN1bHQudHlwZTtcclxuICAgICAgICBibG9jayhcclxuICAgICAgICAgICdpZignLCBJU19CVUZGRVJfQVJHUywgJygnLCBWQUxVRSwgJykpeycsXHJcbiAgICAgICAgICByZXN1bHQuaXNTdHJlYW0sICc9dHJ1ZTsnLFxyXG4gICAgICAgICAgQlVGRkVSLCAnPScsIEJVRkZFUl9TVEFURSwgJy5jcmVhdGVTdHJlYW0oJywgR0xfQVJSQVlfQlVGRkVSJDEsICcsJywgVkFMVUUsICcpOycsXHJcbiAgICAgICAgICBUWVBFLCAnPScsIEJVRkZFUiwgJy5kdHlwZTsnLFxyXG4gICAgICAgICAgJ31lbHNleycsXHJcbiAgICAgICAgICBCVUZGRVIsICc9JywgQlVGRkVSX1NUQVRFLCAnLmdldEJ1ZmZlcignLCBWQUxVRSwgJyk7JyxcclxuICAgICAgICAgICdpZignLCBCVUZGRVIsICcpeycsXHJcbiAgICAgICAgICBUWVBFLCAnPScsIEJVRkZFUiwgJy5kdHlwZTsnLFxyXG4gICAgICAgICAgJ31lbHNlIGlmKFwiY29uc3RhbnRcIiBpbiAnLCBWQUxVRSwgJyl7JyxcclxuICAgICAgICAgIHJlc3VsdC5zdGF0ZSwgJz0nLCBBVFRSSUJfU1RBVEVfQ09OU1RBTlQsICc7JyxcclxuICAgICAgICAgICdpZih0eXBlb2YgJyArIFZBTFVFICsgJy5jb25zdGFudCA9PT0gXCJudW1iZXJcIil7JyxcclxuICAgICAgICAgIHJlc3VsdFtDVVRFX0NPTVBPTkVOVFNbMF1dLCAnPScsIFZBTFVFLCAnLmNvbnN0YW50OycsXHJcbiAgICAgICAgICBDVVRFX0NPTVBPTkVOVFMuc2xpY2UoMSkubWFwKGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRbbl1cclxuICAgICAgICAgIH0pLmpvaW4oJz0nKSwgJz0wOycsXHJcbiAgICAgICAgICAnfWVsc2V7JyxcclxuICAgICAgICAgIENVVEVfQ09NUE9ORU5UUy5tYXAoZnVuY3Rpb24gKG5hbWUsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICByZXN1bHRbbmFtZV0gKyAnPScgKyBWQUxVRSArICcuY29uc3RhbnQubGVuZ3RoPicgKyBpICtcclxuICAgICAgICAgICAgICAnPycgKyBWQUxVRSArICcuY29uc3RhbnRbJyArIGkgKyAnXTowOydcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICAgfSkuam9pbignJyksXHJcbiAgICAgICAgICAnfX1lbHNleycsXHJcbiAgICAgICAgICAnaWYoJywgSVNfQlVGRkVSX0FSR1MsICcoJywgVkFMVUUsICcuYnVmZmVyKSl7JyxcclxuICAgICAgICAgIEJVRkZFUiwgJz0nLCBCVUZGRVJfU1RBVEUsICcuY3JlYXRlU3RyZWFtKCcsIEdMX0FSUkFZX0JVRkZFUiQxLCAnLCcsIFZBTFVFLCAnLmJ1ZmZlcik7JyxcclxuICAgICAgICAgICd9ZWxzZXsnLFxyXG4gICAgICAgICAgQlVGRkVSLCAnPScsIEJVRkZFUl9TVEFURSwgJy5nZXRCdWZmZXIoJywgVkFMVUUsICcuYnVmZmVyKTsnLFxyXG4gICAgICAgICAgJ30nLFxyXG4gICAgICAgICAgVFlQRSwgJz1cInR5cGVcIiBpbiAnLCBWQUxVRSwgJz8nLFxyXG4gICAgICAgICAgY29uc3RhbnRzLmdsVHlwZXMsICdbJywgVkFMVUUsICcudHlwZV06JywgQlVGRkVSLCAnLmR0eXBlOycsXHJcbiAgICAgICAgICByZXN1bHQubm9ybWFsaXplZCwgJz0hIScsIFZBTFVFLCAnLm5vcm1hbGl6ZWQ7Jyk7XHJcbiAgICAgICAgZnVuY3Rpb24gZW1pdFJlYWRSZWNvcmQgKG5hbWUpIHtcclxuICAgICAgICAgIGJsb2NrKHJlc3VsdFtuYW1lXSwgJz0nLCBWQUxVRSwgJy4nLCBuYW1lLCAnfDA7Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVtaXRSZWFkUmVjb3JkKCdzaXplJyk7XHJcbiAgICAgICAgZW1pdFJlYWRSZWNvcmQoJ29mZnNldCcpO1xyXG4gICAgICAgIGVtaXRSZWFkUmVjb3JkKCdzdHJpZGUnKTtcclxuICAgICAgICBlbWl0UmVhZFJlY29yZCgnZGl2aXNvcicpO1xyXG5cclxuICAgICAgICBibG9jaygnfX0nKTtcclxuXHJcbiAgICAgICAgYmxvY2suZXhpdChcclxuICAgICAgICAgICdpZignLCByZXN1bHQuaXNTdHJlYW0sICcpeycsXHJcbiAgICAgICAgICBCVUZGRVJfU1RBVEUsICcuZGVzdHJveVN0cmVhbSgnLCBCVUZGRVIsICcpOycsXHJcbiAgICAgICAgICAnfScpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGF0dHJpYnV0ZURlZnNbYXR0cmlidXRlXSA9IGNyZWF0ZUR5bmFtaWNEZWNsKGR5biwgYXBwZW5kQXR0cmlidXRlQ29kZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gYXR0cmlidXRlRGVmc1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VDb250ZXh0IChjb250ZXh0KSB7XHJcbiAgICB2YXIgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljO1xyXG4gICAgdmFyIGR5bmFtaWNDb250ZXh0ID0gY29udGV4dC5keW5hbWljO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG5cclxuICAgIE9iamVjdC5rZXlzKHN0YXRpY0NvbnRleHQpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgdmFyIHZhbHVlID0gc3RhdGljQ29udGV4dFtuYW1lXTtcclxuICAgICAgcmVzdWx0W25hbWVdID0gY3JlYXRlU3RhdGljRGVjbChmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICByZXR1cm4gJycgKyB2YWx1ZVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXR1cm4gZW52LmxpbmsodmFsdWUpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKGR5bmFtaWNDb250ZXh0KS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIHZhciBkeW4gPSBkeW5hbWljQ29udGV4dFtuYW1lXTtcclxuICAgICAgcmVzdWx0W25hbWVdID0gY3JlYXRlRHluYW1pY0RlY2woZHluLCBmdW5jdGlvbiAoZW52LCBzY29wZSkge1xyXG4gICAgICAgIHJldHVybiBlbnYuaW52b2tlKHNjb3BlLCBkeW4pXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdFxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMgKG9wdGlvbnMsIGF0dHJpYnV0ZXMsIHVuaWZvcm1zLCBjb250ZXh0LCBlbnYpIHtcclxuICAgIHZhciBzdGF0aWNPcHRpb25zID0gb3B0aW9ucy5zdGF0aWM7XHJcbiAgICB2YXIgZHluYW1pY09wdGlvbnMgPSBvcHRpb25zLmR5bmFtaWM7XHJcblxyXG4gICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBLRVlfTkFNRVMgPSBbXHJcbiAgICAgICAgU19GUkFNRUJVRkZFUixcclxuICAgICAgICBTX1ZFUlQsXHJcbiAgICAgICAgU19GUkFHLFxyXG4gICAgICAgIFNfRUxFTUVOVFMsXHJcbiAgICAgICAgU19QUklNSVRJVkUsXHJcbiAgICAgICAgU19PRkZTRVQsXHJcbiAgICAgICAgU19DT1VOVCxcclxuICAgICAgICBTX0lOU1RBTkNFUyxcclxuICAgICAgICBTX1BST0ZJTEVcclxuICAgICAgXS5jb25jYXQoR0xfU1RBVEVfTkFNRVMpO1xyXG5cclxuICAgICAgZnVuY3Rpb24gY2hlY2tLZXlzIChkaWN0KSB7XHJcbiAgICAgICAgT2JqZWN0LmtleXMoZGljdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgIEtFWV9OQU1FUy5pbmRleE9mKGtleSkgPj0gMCxcclxuICAgICAgICAgICAgJ3Vua25vd24gcGFyYW1ldGVyIFwiJyArIGtleSArICdcIicsXHJcbiAgICAgICAgICAgIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY2hlY2tLZXlzKHN0YXRpY09wdGlvbnMpO1xyXG4gICAgICBjaGVja0tleXMoZHluYW1pY09wdGlvbnMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIGZyYW1lYnVmZmVyID0gcGFyc2VGcmFtZWJ1ZmZlcihvcHRpb25zLCBlbnYpO1xyXG4gICAgdmFyIHZpZXdwb3J0QW5kU2Npc3NvciA9IHBhcnNlVmlld3BvcnRTY2lzc29yKG9wdGlvbnMsIGZyYW1lYnVmZmVyLCBlbnYpO1xyXG4gICAgdmFyIGRyYXcgPSBwYXJzZURyYXcob3B0aW9ucywgZW52KTtcclxuICAgIHZhciBzdGF0ZSA9IHBhcnNlR0xTdGF0ZShvcHRpb25zLCBlbnYpO1xyXG4gICAgdmFyIHNoYWRlciA9IHBhcnNlUHJvZ3JhbShvcHRpb25zLCBlbnYpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNvcHlCb3ggKG5hbWUpIHtcclxuICAgICAgdmFyIGRlZm4gPSB2aWV3cG9ydEFuZFNjaXNzb3JbbmFtZV07XHJcbiAgICAgIGlmIChkZWZuKSB7XHJcbiAgICAgICAgc3RhdGVbbmFtZV0gPSBkZWZuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb3B5Qm94KFNfVklFV1BPUlQpO1xyXG4gICAgY29weUJveChwcm9wTmFtZShTX1NDSVNTT1JfQk9YKSk7XHJcblxyXG4gICAgdmFyIGRpcnR5ID0gT2JqZWN0LmtleXMoc3RhdGUpLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgZnJhbWVidWZmZXI6IGZyYW1lYnVmZmVyLFxyXG4gICAgICBkcmF3OiBkcmF3LFxyXG4gICAgICBzaGFkZXI6IHNoYWRlcixcclxuICAgICAgc3RhdGU6IHN0YXRlLFxyXG4gICAgICBkaXJ0eTogZGlydHlcclxuICAgIH07XHJcblxyXG4gICAgcmVzdWx0LnByb2ZpbGUgPSBwYXJzZVByb2ZpbGUob3B0aW9ucywgZW52KTtcclxuICAgIHJlc3VsdC51bmlmb3JtcyA9IHBhcnNlVW5pZm9ybXModW5pZm9ybXMsIGVudik7XHJcbiAgICByZXN1bHQuYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyhhdHRyaWJ1dGVzLCBlbnYpO1xyXG4gICAgcmVzdWx0LmNvbnRleHQgPSBwYXJzZUNvbnRleHQoY29udGV4dCwgZW52KTtcclxuICAgIHJldHVybiByZXN1bHRcclxuICB9XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIENPTU1PTiBVUERBVEUgRlVOQ1RJT05TXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgZnVuY3Rpb24gZW1pdENvbnRleHQgKGVudiwgc2NvcGUsIGNvbnRleHQpIHtcclxuICAgIHZhciBzaGFyZWQgPSBlbnYuc2hhcmVkO1xyXG4gICAgdmFyIENPTlRFWFQgPSBzaGFyZWQuY29udGV4dDtcclxuXHJcbiAgICB2YXIgY29udGV4dEVudGVyID0gZW52LnNjb3BlKCk7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICBzY29wZS5zYXZlKENPTlRFWFQsICcuJyArIG5hbWUpO1xyXG4gICAgICB2YXIgZGVmbiA9IGNvbnRleHRbbmFtZV07XHJcbiAgICAgIGNvbnRleHRFbnRlcihDT05URVhULCAnLicsIG5hbWUsICc9JywgZGVmbi5hcHBlbmQoZW52LCBzY29wZSksICc7Jyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBzY29wZShjb250ZXh0RW50ZXIpO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gQ09NTU9OIERSQVdJTkcgRlVOQ1RJT05TXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgZnVuY3Rpb24gZW1pdFBvbGxGcmFtZWJ1ZmZlciAoZW52LCBzY29wZSwgZnJhbWVidWZmZXIsIHNraXBDaGVjaykge1xyXG4gICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XHJcblxyXG4gICAgdmFyIEdMID0gc2hhcmVkLmdsO1xyXG4gICAgdmFyIEZSQU1FQlVGRkVSX1NUQVRFID0gc2hhcmVkLmZyYW1lYnVmZmVyO1xyXG4gICAgdmFyIEVYVF9EUkFXX0JVRkZFUlM7XHJcbiAgICBpZiAoZXh0RHJhd0J1ZmZlcnMpIHtcclxuICAgICAgRVhUX0RSQVdfQlVGRkVSUyA9IHNjb3BlLmRlZihzaGFyZWQuZXh0ZW5zaW9ucywgJy53ZWJnbF9kcmF3X2J1ZmZlcnMnKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY29uc3RhbnRzID0gZW52LmNvbnN0YW50cztcclxuXHJcbiAgICB2YXIgRFJBV19CVUZGRVJTID0gY29uc3RhbnRzLmRyYXdCdWZmZXI7XHJcbiAgICB2YXIgQkFDS19CVUZGRVIgPSBjb25zdGFudHMuYmFja0J1ZmZlcjtcclxuXHJcbiAgICB2YXIgTkVYVDtcclxuICAgIGlmIChmcmFtZWJ1ZmZlcikge1xyXG4gICAgICBORVhUID0gZnJhbWVidWZmZXIuYXBwZW5kKGVudiwgc2NvcGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgTkVYVCA9IHNjb3BlLmRlZihGUkFNRUJVRkZFUl9TVEFURSwgJy5uZXh0Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFza2lwQ2hlY2spIHtcclxuICAgICAgc2NvcGUoJ2lmKCcsIE5FWFQsICchPT0nLCBGUkFNRUJVRkZFUl9TVEFURSwgJy5jdXIpeycpO1xyXG4gICAgfVxyXG4gICAgc2NvcGUoXHJcbiAgICAgICdpZignLCBORVhULCAnKXsnLFxyXG4gICAgICBHTCwgJy5iaW5kRnJhbWVidWZmZXIoJywgR0xfRlJBTUVCVUZGRVIkMiwgJywnLCBORVhULCAnLmZyYW1lYnVmZmVyKTsnKTtcclxuICAgIGlmIChleHREcmF3QnVmZmVycykge1xyXG4gICAgICBzY29wZShFWFRfRFJBV19CVUZGRVJTLCAnLmRyYXdCdWZmZXJzV0VCR0woJyxcclxuICAgICAgICBEUkFXX0JVRkZFUlMsICdbJywgTkVYVCwgJy5jb2xvckF0dGFjaG1lbnRzLmxlbmd0aF0pOycpO1xyXG4gICAgfVxyXG4gICAgc2NvcGUoJ31lbHNleycsXHJcbiAgICAgIEdMLCAnLmJpbmRGcmFtZWJ1ZmZlcignLCBHTF9GUkFNRUJVRkZFUiQyLCAnLG51bGwpOycpO1xyXG4gICAgaWYgKGV4dERyYXdCdWZmZXJzKSB7XHJcbiAgICAgIHNjb3BlKEVYVF9EUkFXX0JVRkZFUlMsICcuZHJhd0J1ZmZlcnNXRUJHTCgnLCBCQUNLX0JVRkZFUiwgJyk7Jyk7XHJcbiAgICB9XHJcbiAgICBzY29wZShcclxuICAgICAgJ30nLFxyXG4gICAgICBGUkFNRUJVRkZFUl9TVEFURSwgJy5jdXI9JywgTkVYVCwgJzsnKTtcclxuICAgIGlmICghc2tpcENoZWNrKSB7XHJcbiAgICAgIHNjb3BlKCd9Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbWl0UG9sbFN0YXRlIChlbnYsIHNjb3BlLCBhcmdzKSB7XHJcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuXHJcbiAgICB2YXIgR0wgPSBzaGFyZWQuZ2w7XHJcblxyXG4gICAgdmFyIENVUlJFTlRfVkFSUyA9IGVudi5jdXJyZW50O1xyXG4gICAgdmFyIE5FWFRfVkFSUyA9IGVudi5uZXh0O1xyXG4gICAgdmFyIENVUlJFTlRfU1RBVEUgPSBzaGFyZWQuY3VycmVudDtcclxuICAgIHZhciBORVhUX1NUQVRFID0gc2hhcmVkLm5leHQ7XHJcblxyXG4gICAgdmFyIGJsb2NrID0gZW52LmNvbmQoQ1VSUkVOVF9TVEFURSwgJy5kaXJ0eScpO1xyXG5cclxuICAgIEdMX1NUQVRFX05BTUVTLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgdmFyIHBhcmFtID0gcHJvcE5hbWUocHJvcCk7XHJcbiAgICAgIGlmIChwYXJhbSBpbiBhcmdzLnN0YXRlKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBORVhULCBDVVJSRU5UO1xyXG4gICAgICBpZiAocGFyYW0gaW4gTkVYVF9WQVJTKSB7XHJcbiAgICAgICAgTkVYVCA9IE5FWFRfVkFSU1twYXJhbV07XHJcbiAgICAgICAgQ1VSUkVOVCA9IENVUlJFTlRfVkFSU1twYXJhbV07XHJcbiAgICAgICAgdmFyIHBhcnRzID0gbG9vcChjdXJyZW50U3RhdGVbcGFyYW1dLmxlbmd0aCwgZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgIHJldHVybiBibG9jay5kZWYoTkVYVCwgJ1snLCBpLCAnXScpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmxvY2soZW52LmNvbmQocGFydHMubWFwKGZ1bmN0aW9uIChwLCBpKSB7XHJcbiAgICAgICAgICByZXR1cm4gcCArICchPT0nICsgQ1VSUkVOVCArICdbJyArIGkgKyAnXSdcclxuICAgICAgICB9KS5qb2luKCd8fCcpKVxyXG4gICAgICAgICAgLnRoZW4oXHJcbiAgICAgICAgICAgIEdMLCAnLicsIEdMX1ZBUklBQkxFU1twYXJhbV0sICcoJywgcGFydHMsICcpOycsXHJcbiAgICAgICAgICAgIHBhcnRzLm1hcChmdW5jdGlvbiAocCwgaSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBDVVJSRU5UICsgJ1snICsgaSArICddPScgKyBwXHJcbiAgICAgICAgICAgIH0pLmpvaW4oJzsnKSwgJzsnKSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgTkVYVCA9IGJsb2NrLmRlZihORVhUX1NUQVRFLCAnLicsIHBhcmFtKTtcclxuICAgICAgICB2YXIgaWZ0ZSA9IGVudi5jb25kKE5FWFQsICchPT0nLCBDVVJSRU5UX1NUQVRFLCAnLicsIHBhcmFtKTtcclxuICAgICAgICBibG9jayhpZnRlKTtcclxuICAgICAgICBpZiAocGFyYW0gaW4gR0xfRkxBR1MpIHtcclxuICAgICAgICAgIGlmdGUoXHJcbiAgICAgICAgICAgIGVudi5jb25kKE5FWFQpXHJcbiAgICAgICAgICAgICAgICAudGhlbihHTCwgJy5lbmFibGUoJywgR0xfRkxBR1NbcGFyYW1dLCAnKTsnKVxyXG4gICAgICAgICAgICAgICAgLmVsc2UoR0wsICcuZGlzYWJsZSgnLCBHTF9GTEFHU1twYXJhbV0sICcpOycpLFxyXG4gICAgICAgICAgICBDVVJSRU5UX1NUQVRFLCAnLicsIHBhcmFtLCAnPScsIE5FWFQsICc7Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmdGUoXHJcbiAgICAgICAgICAgIEdMLCAnLicsIEdMX1ZBUklBQkxFU1twYXJhbV0sICcoJywgTkVYVCwgJyk7JyxcclxuICAgICAgICAgICAgQ1VSUkVOVF9TVEFURSwgJy4nLCBwYXJhbSwgJz0nLCBORVhULCAnOycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAoT2JqZWN0LmtleXMoYXJncy5zdGF0ZSkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIGJsb2NrKENVUlJFTlRfU1RBVEUsICcuZGlydHk9ZmFsc2U7Jyk7XHJcbiAgICB9XHJcbiAgICBzY29wZShibG9jayk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbWl0U2V0T3B0aW9ucyAoZW52LCBzY29wZSwgb3B0aW9ucywgZmlsdGVyKSB7XHJcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuICAgIHZhciBDVVJSRU5UX1ZBUlMgPSBlbnYuY3VycmVudDtcclxuICAgIHZhciBDVVJSRU5UX1NUQVRFID0gc2hhcmVkLmN1cnJlbnQ7XHJcbiAgICB2YXIgR0wgPSBzaGFyZWQuZ2w7XHJcbiAgICBzb3J0U3RhdGUoT2JqZWN0LmtleXMob3B0aW9ucykpLmZvckVhY2goZnVuY3Rpb24gKHBhcmFtKSB7XHJcbiAgICAgIHZhciBkZWZuID0gb3B0aW9uc1twYXJhbV07XHJcbiAgICAgIGlmIChmaWx0ZXIgJiYgIWZpbHRlcihkZWZuKSkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIHZhciB2YXJpYWJsZSA9IGRlZm4uYXBwZW5kKGVudiwgc2NvcGUpO1xyXG4gICAgICBpZiAoR0xfRkxBR1NbcGFyYW1dKSB7XHJcbiAgICAgICAgdmFyIGZsYWcgPSBHTF9GTEFHU1twYXJhbV07XHJcbiAgICAgICAgaWYgKGlzU3RhdGljKGRlZm4pKSB7XHJcbiAgICAgICAgICBpZiAodmFyaWFibGUpIHtcclxuICAgICAgICAgICAgc2NvcGUoR0wsICcuZW5hYmxlKCcsIGZsYWcsICcpOycpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgc2NvcGUoR0wsICcuZGlzYWJsZSgnLCBmbGFnLCAnKTsnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgc2NvcGUoZW52LmNvbmQodmFyaWFibGUpXHJcbiAgICAgICAgICAgIC50aGVuKEdMLCAnLmVuYWJsZSgnLCBmbGFnLCAnKTsnKVxyXG4gICAgICAgICAgICAuZWxzZShHTCwgJy5kaXNhYmxlKCcsIGZsYWcsICcpOycpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2NvcGUoQ1VSUkVOVF9TVEFURSwgJy4nLCBwYXJhbSwgJz0nLCB2YXJpYWJsZSwgJzsnKTtcclxuICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZSh2YXJpYWJsZSkpIHtcclxuICAgICAgICB2YXIgQ1VSUkVOVCA9IENVUlJFTlRfVkFSU1twYXJhbV07XHJcbiAgICAgICAgc2NvcGUoXHJcbiAgICAgICAgICBHTCwgJy4nLCBHTF9WQVJJQUJMRVNbcGFyYW1dLCAnKCcsIHZhcmlhYmxlLCAnKTsnLFxyXG4gICAgICAgICAgdmFyaWFibGUubWFwKGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBDVVJSRU5UICsgJ1snICsgaSArICddPScgKyB2XHJcbiAgICAgICAgICB9KS5qb2luKCc7JyksICc7Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2NvcGUoXHJcbiAgICAgICAgICBHTCwgJy4nLCBHTF9WQVJJQUJMRVNbcGFyYW1dLCAnKCcsIHZhcmlhYmxlLCAnKTsnLFxyXG4gICAgICAgICAgQ1VSUkVOVF9TVEFURSwgJy4nLCBwYXJhbSwgJz0nLCB2YXJpYWJsZSwgJzsnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbmplY3RFeHRlbnNpb25zIChlbnYsIHNjb3BlKSB7XHJcbiAgICBpZiAoZXh0SW5zdGFuY2luZykge1xyXG4gICAgICBlbnYuaW5zdGFuY2luZyA9IHNjb3BlLmRlZihcclxuICAgICAgICBlbnYuc2hhcmVkLmV4dGVuc2lvbnMsICcuYW5nbGVfaW5zdGFuY2VkX2FycmF5cycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW1pdFByb2ZpbGUgKGVudiwgc2NvcGUsIGFyZ3MsIHVzZVNjb3BlLCBpbmNyZW1lbnRDb3VudGVyKSB7XHJcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuICAgIHZhciBTVEFUUyA9IGVudi5zdGF0cztcclxuICAgIHZhciBDVVJSRU5UX1NUQVRFID0gc2hhcmVkLmN1cnJlbnQ7XHJcbiAgICB2YXIgVElNRVIgPSBzaGFyZWQudGltZXI7XHJcbiAgICB2YXIgcHJvZmlsZUFyZyA9IGFyZ3MucHJvZmlsZTtcclxuXHJcbiAgICBmdW5jdGlvbiBwZXJmQ291bnRlciAoKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuICdEYXRlLm5vdygpJ1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAncGVyZm9ybWFuY2Uubm93KCknXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB2YXIgQ1BVX1NUQVJULCBRVUVSWV9DT1VOVEVSO1xyXG4gICAgZnVuY3Rpb24gZW1pdFByb2ZpbGVTdGFydCAoYmxvY2spIHtcclxuICAgICAgQ1BVX1NUQVJUID0gc2NvcGUuZGVmKCk7XHJcbiAgICAgIGJsb2NrKENQVV9TVEFSVCwgJz0nLCBwZXJmQ291bnRlcigpLCAnOycpO1xyXG4gICAgICBpZiAodHlwZW9mIGluY3JlbWVudENvdW50ZXIgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgYmxvY2soU1RBVFMsICcuY291bnQrPScsIGluY3JlbWVudENvdW50ZXIsICc7Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYmxvY2soU1RBVFMsICcuY291bnQrKzsnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGltZXIpIHtcclxuICAgICAgICBpZiAodXNlU2NvcGUpIHtcclxuICAgICAgICAgIFFVRVJZX0NPVU5URVIgPSBzY29wZS5kZWYoKTtcclxuICAgICAgICAgIGJsb2NrKFFVRVJZX0NPVU5URVIsICc9JywgVElNRVIsICcuZ2V0TnVtUGVuZGluZ1F1ZXJpZXMoKTsnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYmxvY2soVElNRVIsICcuYmVnaW5RdWVyeSgnLCBTVEFUUywgJyk7Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZW1pdFByb2ZpbGVFbmQgKGJsb2NrKSB7XHJcbiAgICAgIGJsb2NrKFNUQVRTLCAnLmNwdVRpbWUrPScsIHBlcmZDb3VudGVyKCksICctJywgQ1BVX1NUQVJULCAnOycpO1xyXG4gICAgICBpZiAodGltZXIpIHtcclxuICAgICAgICBpZiAodXNlU2NvcGUpIHtcclxuICAgICAgICAgIGJsb2NrKFRJTUVSLCAnLnB1c2hTY29wZVN0YXRzKCcsXHJcbiAgICAgICAgICAgIFFVRVJZX0NPVU5URVIsICcsJyxcclxuICAgICAgICAgICAgVElNRVIsICcuZ2V0TnVtUGVuZGluZ1F1ZXJpZXMoKSwnLFxyXG4gICAgICAgICAgICBTVEFUUywgJyk7Jyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGJsb2NrKFRJTUVSLCAnLmVuZFF1ZXJ5KCk7Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2NvcGVQcm9maWxlICh2YWx1ZSkge1xyXG4gICAgICB2YXIgcHJldiA9IHNjb3BlLmRlZihDVVJSRU5UX1NUQVRFLCAnLnByb2ZpbGUnKTtcclxuICAgICAgc2NvcGUoQ1VSUkVOVF9TVEFURSwgJy5wcm9maWxlPScsIHZhbHVlLCAnOycpO1xyXG4gICAgICBzY29wZS5leGl0KENVUlJFTlRfU1RBVEUsICcucHJvZmlsZT0nLCBwcmV2LCAnOycpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBVU0VfUFJPRklMRTtcclxuICAgIGlmIChwcm9maWxlQXJnKSB7XHJcbiAgICAgIGlmIChpc1N0YXRpYyhwcm9maWxlQXJnKSkge1xyXG4gICAgICAgIGlmIChwcm9maWxlQXJnLmVuYWJsZSkge1xyXG4gICAgICAgICAgZW1pdFByb2ZpbGVTdGFydChzY29wZSk7XHJcbiAgICAgICAgICBlbWl0UHJvZmlsZUVuZChzY29wZS5leGl0KTtcclxuICAgICAgICAgIHNjb3BlUHJvZmlsZSgndHJ1ZScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzY29wZVByb2ZpbGUoJ2ZhbHNlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIFVTRV9QUk9GSUxFID0gcHJvZmlsZUFyZy5hcHBlbmQoZW52LCBzY29wZSk7XHJcbiAgICAgIHNjb3BlUHJvZmlsZShVU0VfUFJPRklMRSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBVU0VfUFJPRklMRSA9IHNjb3BlLmRlZihDVVJSRU5UX1NUQVRFLCAnLnByb2ZpbGUnKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgc3RhcnQgPSBlbnYuYmxvY2soKTtcclxuICAgIGVtaXRQcm9maWxlU3RhcnQoc3RhcnQpO1xyXG4gICAgc2NvcGUoJ2lmKCcsIFVTRV9QUk9GSUxFLCAnKXsnLCBzdGFydCwgJ30nKTtcclxuICAgIHZhciBlbmQgPSBlbnYuYmxvY2soKTtcclxuICAgIGVtaXRQcm9maWxlRW5kKGVuZCk7XHJcbiAgICBzY29wZS5leGl0KCdpZignLCBVU0VfUFJPRklMRSwgJyl7JywgZW5kLCAnfScpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW1pdEF0dHJpYnV0ZXMgKGVudiwgc2NvcGUsIGFyZ3MsIGF0dHJpYnV0ZXMsIGZpbHRlcikge1xyXG4gICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XHJcblxyXG4gICAgZnVuY3Rpb24gdHlwZUxlbmd0aCAoeCkge1xyXG4gICAgICBzd2l0Y2ggKHgpIHtcclxuICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzI6XHJcbiAgICAgICAgY2FzZSBHTF9JTlRfVkVDMjpcclxuICAgICAgICBjYXNlIEdMX0JPT0xfVkVDMjpcclxuICAgICAgICAgIHJldHVybiAyXHJcbiAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUMzOlxyXG4gICAgICAgIGNhc2UgR0xfSU5UX1ZFQzM6XHJcbiAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzM6XHJcbiAgICAgICAgICByZXR1cm4gM1xyXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDNDpcclxuICAgICAgICBjYXNlIEdMX0lOVF9WRUM0OlxyXG4gICAgICAgIGNhc2UgR0xfQk9PTF9WRUM0OlxyXG4gICAgICAgICAgcmV0dXJuIDRcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgcmV0dXJuIDFcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVtaXRCaW5kQXR0cmlidXRlIChBVFRSSUJVVEUsIHNpemUsIHJlY29yZCkge1xyXG4gICAgICB2YXIgR0wgPSBzaGFyZWQuZ2w7XHJcblxyXG4gICAgICB2YXIgTE9DQVRJT04gPSBzY29wZS5kZWYoQVRUUklCVVRFLCAnLmxvY2F0aW9uJyk7XHJcbiAgICAgIHZhciBCSU5ESU5HID0gc2NvcGUuZGVmKHNoYXJlZC5hdHRyaWJ1dGVzLCAnWycsIExPQ0FUSU9OLCAnXScpO1xyXG5cclxuICAgICAgdmFyIFNUQVRFID0gcmVjb3JkLnN0YXRlO1xyXG4gICAgICB2YXIgQlVGRkVSID0gcmVjb3JkLmJ1ZmZlcjtcclxuICAgICAgdmFyIENPTlNUX0NPTVBPTkVOVFMgPSBbXHJcbiAgICAgICAgcmVjb3JkLngsXHJcbiAgICAgICAgcmVjb3JkLnksXHJcbiAgICAgICAgcmVjb3JkLnosXHJcbiAgICAgICAgcmVjb3JkLndcclxuICAgICAgXTtcclxuXHJcbiAgICAgIHZhciBDT01NT05fS0VZUyA9IFtcclxuICAgICAgICAnYnVmZmVyJyxcclxuICAgICAgICAnbm9ybWFsaXplZCcsXHJcbiAgICAgICAgJ29mZnNldCcsXHJcbiAgICAgICAgJ3N0cmlkZSdcclxuICAgICAgXTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIGVtaXRCdWZmZXIgKCkge1xyXG4gICAgICAgIHNjb3BlKFxyXG4gICAgICAgICAgJ2lmKCEnLCBCSU5ESU5HLCAnLmJ1ZmZlcil7JyxcclxuICAgICAgICAgIEdMLCAnLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KCcsIExPQ0FUSU9OLCAnKTt9Jyk7XHJcblxyXG4gICAgICAgIHZhciBUWVBFID0gcmVjb3JkLnR5cGU7XHJcbiAgICAgICAgdmFyIFNJWkU7XHJcbiAgICAgICAgaWYgKCFyZWNvcmQuc2l6ZSkge1xyXG4gICAgICAgICAgU0laRSA9IHNpemU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIFNJWkUgPSBzY29wZS5kZWYocmVjb3JkLnNpemUsICd8fCcsIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2NvcGUoJ2lmKCcsXHJcbiAgICAgICAgICBCSU5ESU5HLCAnLnR5cGUhPT0nLCBUWVBFLCAnfHwnLFxyXG4gICAgICAgICAgQklORElORywgJy5zaXplIT09JywgU0laRSwgJ3x8JyxcclxuICAgICAgICAgIENPTU1PTl9LRVlTLm1hcChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBCSU5ESU5HICsgJy4nICsga2V5ICsgJyE9PScgKyByZWNvcmRba2V5XVxyXG4gICAgICAgICAgfSkuam9pbignfHwnKSxcclxuICAgICAgICAgICcpeycsXHJcbiAgICAgICAgICBHTCwgJy5iaW5kQnVmZmVyKCcsIEdMX0FSUkFZX0JVRkZFUiQxLCAnLCcsIEJVRkZFUiwgJy5idWZmZXIpOycsXHJcbiAgICAgICAgICBHTCwgJy52ZXJ0ZXhBdHRyaWJQb2ludGVyKCcsIFtcclxuICAgICAgICAgICAgTE9DQVRJT04sXHJcbiAgICAgICAgICAgIFNJWkUsXHJcbiAgICAgICAgICAgIFRZUEUsXHJcbiAgICAgICAgICAgIHJlY29yZC5ub3JtYWxpemVkLFxyXG4gICAgICAgICAgICByZWNvcmQuc3RyaWRlLFxyXG4gICAgICAgICAgICByZWNvcmQub2Zmc2V0XHJcbiAgICAgICAgICBdLCAnKTsnLFxyXG4gICAgICAgICAgQklORElORywgJy50eXBlPScsIFRZUEUsICc7JyxcclxuICAgICAgICAgIEJJTkRJTkcsICcuc2l6ZT0nLCBTSVpFLCAnOycsXHJcbiAgICAgICAgICBDT01NT05fS0VZUy5tYXAoZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQklORElORyArICcuJyArIGtleSArICc9JyArIHJlY29yZFtrZXldICsgJzsnXHJcbiAgICAgICAgICB9KS5qb2luKCcnKSxcclxuICAgICAgICAgICd9Jyk7XHJcblxyXG4gICAgICAgIGlmIChleHRJbnN0YW5jaW5nKSB7XHJcbiAgICAgICAgICB2YXIgRElWSVNPUiA9IHJlY29yZC5kaXZpc29yO1xyXG4gICAgICAgICAgc2NvcGUoXHJcbiAgICAgICAgICAgICdpZignLCBCSU5ESU5HLCAnLmRpdmlzb3IhPT0nLCBESVZJU09SLCAnKXsnLFxyXG4gICAgICAgICAgICBlbnYuaW5zdGFuY2luZywgJy52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoJywgW0xPQ0FUSU9OLCBESVZJU09SXSwgJyk7JyxcclxuICAgICAgICAgICAgQklORElORywgJy5kaXZpc29yPScsIERJVklTT1IsICc7fScpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZW1pdENvbnN0YW50ICgpIHtcclxuICAgICAgICBzY29wZShcclxuICAgICAgICAgICdpZignLCBCSU5ESU5HLCAnLmJ1ZmZlcil7JyxcclxuICAgICAgICAgIEdMLCAnLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSgnLCBMT0NBVElPTiwgJyk7JyxcclxuICAgICAgICAgICd9aWYoJywgQ1VURV9DT01QT05FTlRTLm1hcChmdW5jdGlvbiAoYywgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQklORElORyArICcuJyArIGMgKyAnIT09JyArIENPTlNUX0NPTVBPTkVOVFNbaV1cclxuICAgICAgICAgIH0pLmpvaW4oJ3x8JyksICcpeycsXHJcbiAgICAgICAgICBHTCwgJy52ZXJ0ZXhBdHRyaWI0ZignLCBMT0NBVElPTiwgJywnLCBDT05TVF9DT01QT05FTlRTLCAnKTsnLFxyXG4gICAgICAgICAgQ1VURV9DT01QT05FTlRTLm1hcChmdW5jdGlvbiAoYywgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQklORElORyArICcuJyArIGMgKyAnPScgKyBDT05TVF9DT01QT05FTlRTW2ldICsgJzsnXHJcbiAgICAgICAgICB9KS5qb2luKCcnKSxcclxuICAgICAgICAgICd9Jyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChTVEFURSA9PT0gQVRUUklCX1NUQVRFX1BPSU5URVIpIHtcclxuICAgICAgICBlbWl0QnVmZmVyKCk7XHJcbiAgICAgIH0gZWxzZSBpZiAoU1RBVEUgPT09IEFUVFJJQl9TVEFURV9DT05TVEFOVCkge1xyXG4gICAgICAgIGVtaXRDb25zdGFudCgpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNjb3BlKCdpZignLCBTVEFURSwgJz09PScsIEFUVFJJQl9TVEFURV9QT0lOVEVSLCAnKXsnKTtcclxuICAgICAgICBlbWl0QnVmZmVyKCk7XHJcbiAgICAgICAgc2NvcGUoJ31lbHNleycpO1xyXG4gICAgICAgIGVtaXRDb25zdGFudCgpO1xyXG4gICAgICAgIHNjb3BlKCd9Jyk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhdHRyaWJ1dGVzLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xyXG4gICAgICB2YXIgbmFtZSA9IGF0dHJpYnV0ZS5uYW1lO1xyXG4gICAgICB2YXIgYXJnID0gYXJncy5hdHRyaWJ1dGVzW25hbWVdO1xyXG4gICAgICB2YXIgcmVjb3JkO1xyXG4gICAgICBpZiAoYXJnKSB7XHJcbiAgICAgICAgaWYgKCFmaWx0ZXIoYXJnKSkge1xyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlY29yZCA9IGFyZy5hcHBlbmQoZW52LCBzY29wZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCFmaWx0ZXIoU0NPUEVfREVDTCkpIHtcclxuICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgc2NvcGVBdHRyaWIgPSBlbnYuc2NvcGVBdHRyaWIobmFtZSk7XHJcbiAgICAgICAgY2hlY2skMS5vcHRpb25hbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICBlbnYuYXNzZXJ0KHNjb3BlLFxyXG4gICAgICAgICAgICBzY29wZUF0dHJpYiArICcuc3RhdGUnLFxyXG4gICAgICAgICAgICAnbWlzc2luZyBhdHRyaWJ1dGUgJyArIG5hbWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJlY29yZCA9IHt9O1xyXG4gICAgICAgIE9iamVjdC5rZXlzKG5ldyBBdHRyaWJ1dGVSZWNvcmQoKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICByZWNvcmRba2V5XSA9IHNjb3BlLmRlZihzY29wZUF0dHJpYiwgJy4nLCBrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIGVtaXRCaW5kQXR0cmlidXRlKFxyXG4gICAgICAgIGVudi5saW5rKGF0dHJpYnV0ZSksIHR5cGVMZW5ndGgoYXR0cmlidXRlLmluZm8udHlwZSksIHJlY29yZCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVtaXRVbmlmb3JtcyAoZW52LCBzY29wZSwgYXJncywgdW5pZm9ybXMsIGZpbHRlcikge1xyXG4gICAgdmFyIHNoYXJlZCA9IGVudi5zaGFyZWQ7XHJcbiAgICB2YXIgR0wgPSBzaGFyZWQuZ2w7XHJcblxyXG4gICAgdmFyIGluZml4O1xyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmlmb3Jtcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICB2YXIgdW5pZm9ybSA9IHVuaWZvcm1zW2ldO1xyXG4gICAgICB2YXIgbmFtZSA9IHVuaWZvcm0ubmFtZTtcclxuICAgICAgdmFyIHR5cGUgPSB1bmlmb3JtLmluZm8udHlwZTtcclxuICAgICAgdmFyIGFyZyA9IGFyZ3MudW5pZm9ybXNbbmFtZV07XHJcbiAgICAgIHZhciBVTklGT1JNID0gZW52LmxpbmsodW5pZm9ybSk7XHJcbiAgICAgIHZhciBMT0NBVElPTiA9IFVOSUZPUk0gKyAnLmxvY2F0aW9uJztcclxuXHJcbiAgICAgIHZhciBWQUxVRTtcclxuICAgICAgaWYgKGFyZykge1xyXG4gICAgICAgIGlmICghZmlsdGVyKGFyZykpIHtcclxuICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpc1N0YXRpYyhhcmcpKSB7XHJcbiAgICAgICAgICB2YXIgdmFsdWUgPSBhcmcudmFsdWU7XHJcbiAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcsXHJcbiAgICAgICAgICAgICdtaXNzaW5nIHVuaWZvcm0gXCInICsgbmFtZSArICdcIicsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgIGlmICh0eXBlID09PSBHTF9TQU1QTEVSXzJEIHx8IHR5cGUgPT09IEdMX1NBTVBMRVJfQ1VCRSkge1xyXG4gICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nICYmXHJcbiAgICAgICAgICAgICAgKCh0eXBlID09PSBHTF9TQU1QTEVSXzJEICYmXHJcbiAgICAgICAgICAgICAgICAodmFsdWUuX3JlZ2xUeXBlID09PSAndGV4dHVyZTJkJyB8fFxyXG4gICAgICAgICAgICAgICAgdmFsdWUuX3JlZ2xUeXBlID09PSAnZnJhbWVidWZmZXInKSkgfHxcclxuICAgICAgICAgICAgICAodHlwZSA9PT0gR0xfU0FNUExFUl9DVUJFICYmXHJcbiAgICAgICAgICAgICAgICAodmFsdWUuX3JlZ2xUeXBlID09PSAndGV4dHVyZUN1YmUnIHx8XHJcbiAgICAgICAgICAgICAgICB2YWx1ZS5fcmVnbFR5cGUgPT09ICdmcmFtZWJ1ZmZlckN1YmUnKSkpLFxyXG4gICAgICAgICAgICAgICdpbnZhbGlkIHRleHR1cmUgZm9yIHVuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgdmFyIFRFWF9WQUxVRSA9IGVudi5saW5rKHZhbHVlLl90ZXh0dXJlIHx8IHZhbHVlLmNvbG9yWzBdLl90ZXh0dXJlKTtcclxuICAgICAgICAgICAgc2NvcGUoR0wsICcudW5pZm9ybTFpKCcsIExPQ0FUSU9OLCAnLCcsIFRFWF9WQUxVRSArICcuYmluZCgpKTsnKTtcclxuICAgICAgICAgICAgc2NvcGUuZXhpdChURVhfVkFMVUUsICcudW5iaW5kKCk7Jyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICB0eXBlID09PSBHTF9GTE9BVF9NQVQyIHx8XHJcbiAgICAgICAgICAgIHR5cGUgPT09IEdMX0ZMT0FUX01BVDMgfHxcclxuICAgICAgICAgICAgdHlwZSA9PT0gR0xfRkxPQVRfTUFUNCkge1xyXG4gICAgICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoaXNBcnJheUxpa2UodmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgJ2ludmFsaWQgbWF0cml4IGZvciB1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDIgJiYgdmFsdWUubGVuZ3RoID09PSA0KSB8fFxyXG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDMgJiYgdmFsdWUubGVuZ3RoID09PSA5KSB8fFxyXG4gICAgICAgICAgICAgICAgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDQgJiYgdmFsdWUubGVuZ3RoID09PSAxNiksXHJcbiAgICAgICAgICAgICAgICAnaW52YWxpZCBsZW5ndGggZm9yIG1hdHJpeCB1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgTUFUX1ZBTFVFID0gZW52Lmdsb2JhbC5kZWYoJ25ldyBGbG9hdDMyQXJyYXkoWycgK1xyXG4gICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbHVlKSArICddKScpO1xyXG4gICAgICAgICAgICB2YXIgZGltID0gMjtcclxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDMpIHtcclxuICAgICAgICAgICAgICBkaW0gPSAzO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEdMX0ZMT0FUX01BVDQpIHtcclxuICAgICAgICAgICAgICBkaW0gPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNjb3BlKFxyXG4gICAgICAgICAgICAgIEdMLCAnLnVuaWZvcm1NYXRyaXgnLCBkaW0sICdmdignLFxyXG4gICAgICAgICAgICAgIExPQ0FUSU9OLCAnLGZhbHNlLCcsIE1BVF9WQUxVRSwgJyk7Jyk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgICBjYXNlIEdMX0ZMT0FUJDg6XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmRUeXBlKHZhbHVlLCAnbnVtYmVyJywgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICAgIGluZml4ID0gJzFmJztcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUMyOlxyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyLFxyXG4gICAgICAgICAgICAgICAgICAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgaW5maXggPSAnMmYnO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzM6XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDMsXHJcbiAgICAgICAgICAgICAgICAgICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICczZic7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDNDpcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcclxuICAgICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gNCxcclxuICAgICAgICAgICAgICAgICAgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICAgIGluZml4ID0gJzRmJztcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgY2FzZSBHTF9CT09MOlxyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZSh2YWx1ZSwgJ2Jvb2xlYW4nLCAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgaW5maXggPSAnMWknO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBjYXNlIEdMX0lOVCQzOlxyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kVHlwZSh2YWx1ZSwgJ251bWJlcicsICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICcxaSc7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgIGNhc2UgR0xfQk9PTF9WRUMyOlxyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyLFxyXG4gICAgICAgICAgICAgICAgICAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgaW5maXggPSAnMmknO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBjYXNlIEdMX0lOVF9WRUMyOlxyXG4gICAgICAgICAgICAgICAgY2hlY2skMS5jb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgICBpc0FycmF5TGlrZSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSAyLFxyXG4gICAgICAgICAgICAgICAgICAndW5pZm9ybSAnICsgbmFtZSwgZW52LmNvbW1hbmRTdHIpO1xyXG4gICAgICAgICAgICAgICAgaW5maXggPSAnMmknO1xyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBjYXNlIEdMX0JPT0xfVkVDMzpcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcclxuICAgICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMyxcclxuICAgICAgICAgICAgICAgICAgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICAgIGluZml4ID0gJzNpJztcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgY2FzZSBHTF9JTlRfVkVDMzpcclxuICAgICAgICAgICAgICAgIGNoZWNrJDEuY29tbWFuZChcclxuICAgICAgICAgICAgICAgICAgaXNBcnJheUxpa2UodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMyxcclxuICAgICAgICAgICAgICAgICAgJ3VuaWZvcm0gJyArIG5hbWUsIGVudi5jb21tYW5kU3RyKTtcclxuICAgICAgICAgICAgICAgIGluZml4ID0gJzNpJztcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzQ6XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDQsXHJcbiAgICAgICAgICAgICAgICAgICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICc0aSc7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgIGNhc2UgR0xfSU5UX1ZFQzQ6XHJcbiAgICAgICAgICAgICAgICBjaGVjayQxLmNvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDQsXHJcbiAgICAgICAgICAgICAgICAgICd1bmlmb3JtICcgKyBuYW1lLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgICAgICAgICBpbmZpeCA9ICc0aSc7XHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHNjb3BlKEdMLCAnLnVuaWZvcm0nLCBpbmZpeCwgJygnLCBMT0NBVElPTiwgJywnLFxyXG4gICAgICAgICAgICAgIGlzQXJyYXlMaWtlKHZhbHVlKSA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbHVlKSA6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICcpOycpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udGludWVcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgVkFMVUUgPSBhcmcuYXBwZW5kKGVudiwgc2NvcGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIWZpbHRlcihTQ09QRV9ERUNMKSkge1xyXG4gICAgICAgICAgY29udGludWVcclxuICAgICAgICB9XHJcbiAgICAgICAgVkFMVUUgPSBzY29wZS5kZWYoc2hhcmVkLnVuaWZvcm1zLCAnWycsIHN0cmluZ1N0b3JlLmlkKG5hbWUpLCAnXScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZSA9PT0gR0xfU0FNUExFUl8yRCkge1xyXG4gICAgICAgIHNjb3BlKFxyXG4gICAgICAgICAgJ2lmKCcsIFZBTFVFLCAnJiYnLCBWQUxVRSwgJy5fcmVnbFR5cGU9PT1cImZyYW1lYnVmZmVyXCIpeycsXHJcbiAgICAgICAgICBWQUxVRSwgJz0nLCBWQUxVRSwgJy5jb2xvclswXTsnLFxyXG4gICAgICAgICAgJ30nKTtcclxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBHTF9TQU1QTEVSX0NVQkUpIHtcclxuICAgICAgICBzY29wZShcclxuICAgICAgICAgICdpZignLCBWQUxVRSwgJyYmJywgVkFMVUUsICcuX3JlZ2xUeXBlPT09XCJmcmFtZWJ1ZmZlckN1YmVcIil7JyxcclxuICAgICAgICAgIFZBTFVFLCAnPScsIFZBTFVFLCAnLmNvbG9yWzBdOycsXHJcbiAgICAgICAgICAnfScpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBwZXJmb3JtIHR5cGUgdmFsaWRhdGlvblxyXG4gICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBjaGVjayAocHJlZCwgbWVzc2FnZSkge1xyXG4gICAgICAgICAgZW52LmFzc2VydChzY29wZSwgcHJlZCxcclxuICAgICAgICAgICAgJ2JhZCBkYXRhIG9yIG1pc3NpbmcgZm9yIHVuaWZvcm0gXCInICsgbmFtZSArICdcIi4gICcgKyBtZXNzYWdlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrVHlwZSAodHlwZSkge1xyXG4gICAgICAgICAgY2hlY2soXHJcbiAgICAgICAgICAgICd0eXBlb2YgJyArIFZBTFVFICsgJz09PVwiJyArIHR5cGUgKyAnXCInLFxyXG4gICAgICAgICAgICAnaW52YWxpZCB0eXBlLCBleHBlY3RlZCAnICsgdHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1ZlY3RvciAobiwgdHlwZSkge1xyXG4gICAgICAgICAgY2hlY2soXHJcbiAgICAgICAgICAgIHNoYXJlZC5pc0FycmF5TGlrZSArICcoJyArIFZBTFVFICsgJykmJicgKyBWQUxVRSArICcubGVuZ3RoPT09JyArIG4sXHJcbiAgICAgICAgICAgICdpbnZhbGlkIHZlY3Rvciwgc2hvdWxkIGhhdmUgbGVuZ3RoICcgKyBuLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1RleHR1cmUgKHRhcmdldCkge1xyXG4gICAgICAgICAgY2hlY2soXHJcbiAgICAgICAgICAgICd0eXBlb2YgJyArIFZBTFVFICsgJz09PVwiZnVuY3Rpb25cIiYmJyArXHJcbiAgICAgICAgICAgIFZBTFVFICsgJy5fcmVnbFR5cGU9PT1cInRleHR1cmUnICtcclxuICAgICAgICAgICAgKHRhcmdldCA9PT0gR0xfVEVYVFVSRV8yRCQzID8gJzJkJyA6ICdDdWJlJykgKyAnXCInLFxyXG4gICAgICAgICAgICAnaW52YWxpZCB0ZXh0dXJlIHR5cGUnLCBlbnYuY29tbWFuZFN0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgIGNhc2UgR0xfSU5UJDM6XHJcbiAgICAgICAgICAgIGNoZWNrVHlwZSgnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0lOVF9WRUMyOlxyXG4gICAgICAgICAgICBjaGVja1ZlY3RvcigyLCAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0lOVF9WRUMzOlxyXG4gICAgICAgICAgICBjaGVja1ZlY3RvcigzLCAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0lOVF9WRUM0OlxyXG4gICAgICAgICAgICBjaGVja1ZlY3Rvcig0LCAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0ZMT0FUJDg6XHJcbiAgICAgICAgICAgIGNoZWNrVHlwZSgnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzI6XHJcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDIsICdudW1iZXInKTtcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDMzpcclxuICAgICAgICAgICAgY2hlY2tWZWN0b3IoMywgJ251bWJlcicpO1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUM0OlxyXG4gICAgICAgICAgICBjaGVja1ZlY3Rvcig0LCAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0JPT0w6XHJcbiAgICAgICAgICAgIGNoZWNrVHlwZSgnYm9vbGVhbicpO1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzI6XHJcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDIsICdib29sZWFuJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0JPT0xfVkVDMzpcclxuICAgICAgICAgICAgY2hlY2tWZWN0b3IoMywgJ2Jvb2xlYW4nKTtcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIGNhc2UgR0xfQk9PTF9WRUM0OlxyXG4gICAgICAgICAgICBjaGVja1ZlY3Rvcig0LCAnYm9vbGVhbicpO1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSBHTF9GTE9BVF9NQVQyOlxyXG4gICAgICAgICAgICBjaGVja1ZlY3Rvcig0LCAnbnVtYmVyJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX0ZMT0FUX01BVDM6XHJcbiAgICAgICAgICAgIGNoZWNrVmVjdG9yKDksICdudW1iZXInKTtcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIGNhc2UgR0xfRkxPQVRfTUFUNDpcclxuICAgICAgICAgICAgY2hlY2tWZWN0b3IoMTYsICdudW1iZXInKTtcclxuICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgIGNhc2UgR0xfU0FNUExFUl8yRDpcclxuICAgICAgICAgICAgY2hlY2tUZXh0dXJlKEdMX1RFWFRVUkVfMkQkMyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlIEdMX1NBTVBMRVJfQ1VCRTpcclxuICAgICAgICAgICAgY2hlY2tUZXh0dXJlKEdMX1RFWFRVUkVfQ1VCRV9NQVAkMik7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHZhciB1bnJvbGwgPSAxO1xyXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICBjYXNlIEdMX1NBTVBMRVJfMkQ6XHJcbiAgICAgICAgY2FzZSBHTF9TQU1QTEVSX0NVQkU6XHJcbiAgICAgICAgICB2YXIgVEVYID0gc2NvcGUuZGVmKFZBTFVFLCAnLl90ZXh0dXJlJyk7XHJcbiAgICAgICAgICBzY29wZShHTCwgJy51bmlmb3JtMWkoJywgTE9DQVRJT04sICcsJywgVEVYLCAnLmJpbmQoKSk7Jyk7XHJcbiAgICAgICAgICBzY29wZS5leGl0KFRFWCwgJy51bmJpbmQoKTsnKTtcclxuICAgICAgICAgIGNvbnRpbnVlXHJcblxyXG4gICAgICAgIGNhc2UgR0xfSU5UJDM6XHJcbiAgICAgICAgY2FzZSBHTF9CT09MOlxyXG4gICAgICAgICAgaW5maXggPSAnMWknO1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgY2FzZSBHTF9JTlRfVkVDMjpcclxuICAgICAgICBjYXNlIEdMX0JPT0xfVkVDMjpcclxuICAgICAgICAgIGluZml4ID0gJzJpJztcclxuICAgICAgICAgIHVucm9sbCA9IDI7XHJcbiAgICAgICAgICBicmVha1xyXG5cclxuICAgICAgICBjYXNlIEdMX0lOVF9WRUMzOlxyXG4gICAgICAgIGNhc2UgR0xfQk9PTF9WRUMzOlxyXG4gICAgICAgICAgaW5maXggPSAnM2knO1xyXG4gICAgICAgICAgdW5yb2xsID0gMztcclxuICAgICAgICAgIGJyZWFrXHJcblxyXG4gICAgICAgIGNhc2UgR0xfSU5UX1ZFQzQ6XHJcbiAgICAgICAgY2FzZSBHTF9CT09MX1ZFQzQ6XHJcbiAgICAgICAgICBpbmZpeCA9ICc0aSc7XHJcbiAgICAgICAgICB1bnJvbGwgPSA0O1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgY2FzZSBHTF9GTE9BVCQ4OlxyXG4gICAgICAgICAgaW5maXggPSAnMWYnO1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgY2FzZSBHTF9GTE9BVF9WRUMyOlxyXG4gICAgICAgICAgaW5maXggPSAnMmYnO1xyXG4gICAgICAgICAgdW5yb2xsID0gMjtcclxuICAgICAgICAgIGJyZWFrXHJcblxyXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfVkVDMzpcclxuICAgICAgICAgIGluZml4ID0gJzNmJztcclxuICAgICAgICAgIHVucm9sbCA9IDM7XHJcbiAgICAgICAgICBicmVha1xyXG5cclxuICAgICAgICBjYXNlIEdMX0ZMT0FUX1ZFQzQ6XHJcbiAgICAgICAgICBpbmZpeCA9ICc0Zic7XHJcbiAgICAgICAgICB1bnJvbGwgPSA0O1xyXG4gICAgICAgICAgYnJlYWtcclxuXHJcbiAgICAgICAgY2FzZSBHTF9GTE9BVF9NQVQyOlxyXG4gICAgICAgICAgaW5maXggPSAnTWF0cml4MmZ2JztcclxuICAgICAgICAgIGJyZWFrXHJcblxyXG4gICAgICAgIGNhc2UgR0xfRkxPQVRfTUFUMzpcclxuICAgICAgICAgIGluZml4ID0gJ01hdHJpeDNmdic7XHJcbiAgICAgICAgICBicmVha1xyXG5cclxuICAgICAgICBjYXNlIEdMX0ZMT0FUX01BVDQ6XHJcbiAgICAgICAgICBpbmZpeCA9ICdNYXRyaXg0ZnYnO1xyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgfVxyXG5cclxuICAgICAgc2NvcGUoR0wsICcudW5pZm9ybScsIGluZml4LCAnKCcsIExPQ0FUSU9OLCAnLCcpO1xyXG4gICAgICBpZiAoaW5maXguY2hhckF0KDApID09PSAnTScpIHtcclxuICAgICAgICB2YXIgbWF0U2l6ZSA9IE1hdGgucG93KHR5cGUgLSBHTF9GTE9BVF9NQVQyICsgMiwgMik7XHJcbiAgICAgICAgdmFyIFNUT1JBR0UgPSBlbnYuZ2xvYmFsLmRlZignbmV3IEZsb2F0MzJBcnJheSgnLCBtYXRTaXplLCAnKScpO1xyXG4gICAgICAgIHNjb3BlKFxyXG4gICAgICAgICAgJ2ZhbHNlLChBcnJheS5pc0FycmF5KCcsIFZBTFVFLCAnKXx8JywgVkFMVUUsICcgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpPycsIFZBTFVFLCAnOignLFxyXG4gICAgICAgICAgbG9vcChtYXRTaXplLCBmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gU1RPUkFHRSArICdbJyArIGkgKyAnXT0nICsgVkFMVUUgKyAnWycgKyBpICsgJ10nXHJcbiAgICAgICAgICB9KSwgJywnLCBTVE9SQUdFLCAnKScpO1xyXG4gICAgICB9IGVsc2UgaWYgKHVucm9sbCA+IDEpIHtcclxuICAgICAgICBzY29wZShsb29wKHVucm9sbCwgZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgIHJldHVybiBWQUxVRSArICdbJyArIGkgKyAnXSdcclxuICAgICAgICB9KSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2NvcGUoVkFMVUUpO1xyXG4gICAgICB9XHJcbiAgICAgIHNjb3BlKCcpOycpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW1pdERyYXcgKGVudiwgb3V0ZXIsIGlubmVyLCBhcmdzKSB7XHJcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuICAgIHZhciBHTCA9IHNoYXJlZC5nbDtcclxuICAgIHZhciBEUkFXX1NUQVRFID0gc2hhcmVkLmRyYXc7XHJcblxyXG4gICAgdmFyIGRyYXdPcHRpb25zID0gYXJncy5kcmF3O1xyXG5cclxuICAgIGZ1bmN0aW9uIGVtaXRFbGVtZW50cyAoKSB7XHJcbiAgICAgIHZhciBkZWZuID0gZHJhd09wdGlvbnMuZWxlbWVudHM7XHJcbiAgICAgIHZhciBFTEVNRU5UUztcclxuICAgICAgdmFyIHNjb3BlID0gb3V0ZXI7XHJcbiAgICAgIGlmIChkZWZuKSB7XHJcbiAgICAgICAgaWYgKChkZWZuLmNvbnRleHREZXAgJiYgYXJncy5jb250ZXh0RHluYW1pYykgfHwgZGVmbi5wcm9wRGVwKSB7XHJcbiAgICAgICAgICBzY29wZSA9IGlubmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBFTEVNRU5UUyA9IGRlZm4uYXBwZW5kKGVudiwgc2NvcGUpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIEVMRU1FTlRTID0gc2NvcGUuZGVmKERSQVdfU1RBVEUsICcuJywgU19FTEVNRU5UUyk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKEVMRU1FTlRTKSB7XHJcbiAgICAgICAgc2NvcGUoXHJcbiAgICAgICAgICAnaWYoJyArIEVMRU1FTlRTICsgJyknICtcclxuICAgICAgICAgIEdMICsgJy5iaW5kQnVmZmVyKCcgKyBHTF9FTEVNRU5UX0FSUkFZX0JVRkZFUiQxICsgJywnICsgRUxFTUVOVFMgKyAnLmJ1ZmZlci5idWZmZXIpOycpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBFTEVNRU5UU1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVtaXRDb3VudCAoKSB7XHJcbiAgICAgIHZhciBkZWZuID0gZHJhd09wdGlvbnMuY291bnQ7XHJcbiAgICAgIHZhciBDT1VOVDtcclxuICAgICAgdmFyIHNjb3BlID0gb3V0ZXI7XHJcbiAgICAgIGlmIChkZWZuKSB7XHJcbiAgICAgICAgaWYgKChkZWZuLmNvbnRleHREZXAgJiYgYXJncy5jb250ZXh0RHluYW1pYykgfHwgZGVmbi5wcm9wRGVwKSB7XHJcbiAgICAgICAgICBzY29wZSA9IGlubmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBDT1VOVCA9IGRlZm4uYXBwZW5kKGVudiwgc2NvcGUpO1xyXG4gICAgICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgaWYgKGRlZm4uTUlTU0lORykge1xyXG4gICAgICAgICAgICBlbnYuYXNzZXJ0KG91dGVyLCAnZmFsc2UnLCAnbWlzc2luZyB2ZXJ0ZXggY291bnQnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChkZWZuLkRZTkFNSUMpIHtcclxuICAgICAgICAgICAgZW52LmFzc2VydChzY29wZSwgQ09VTlQgKyAnPj0wJywgJ21pc3NpbmcgdmVydGV4IGNvdW50Jyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgQ09VTlQgPSBzY29wZS5kZWYoRFJBV19TVEFURSwgJy4nLCBTX0NPVU5UKTtcclxuICAgICAgICBjaGVjayQxLm9wdGlvbmFsKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGVudi5hc3NlcnQoc2NvcGUsIENPVU5UICsgJz49MCcsICdtaXNzaW5nIHZlcnRleCBjb3VudCcpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBDT1VOVFxyXG4gICAgfVxyXG5cclxuICAgIHZhciBFTEVNRU5UUyA9IGVtaXRFbGVtZW50cygpO1xyXG4gICAgZnVuY3Rpb24gZW1pdFZhbHVlIChuYW1lKSB7XHJcbiAgICAgIHZhciBkZWZuID0gZHJhd09wdGlvbnNbbmFtZV07XHJcbiAgICAgIGlmIChkZWZuKSB7XHJcbiAgICAgICAgaWYgKChkZWZuLmNvbnRleHREZXAgJiYgYXJncy5jb250ZXh0RHluYW1pYykgfHwgZGVmbi5wcm9wRGVwKSB7XHJcbiAgICAgICAgICByZXR1cm4gZGVmbi5hcHBlbmQoZW52LCBpbm5lcilcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIGRlZm4uYXBwZW5kKGVudiwgb3V0ZXIpXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBvdXRlci5kZWYoRFJBV19TVEFURSwgJy4nLCBuYW1lKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIFBSSU1JVElWRSA9IGVtaXRWYWx1ZShTX1BSSU1JVElWRSk7XHJcbiAgICB2YXIgT0ZGU0VUID0gZW1pdFZhbHVlKFNfT0ZGU0VUKTtcclxuXHJcbiAgICB2YXIgQ09VTlQgPSBlbWl0Q291bnQoKTtcclxuICAgIGlmICh0eXBlb2YgQ09VTlQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIGlmIChDT1VOVCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpbm5lcignaWYoJywgQ09VTlQsICcpeycpO1xyXG4gICAgICBpbm5lci5leGl0KCd9Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIElOU1RBTkNFUywgRVhUX0lOU1RBTkNJTkc7XHJcbiAgICBpZiAoZXh0SW5zdGFuY2luZykge1xyXG4gICAgICBJTlNUQU5DRVMgPSBlbWl0VmFsdWUoU19JTlNUQU5DRVMpO1xyXG4gICAgICBFWFRfSU5TVEFOQ0lORyA9IGVudi5pbnN0YW5jaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBFTEVNRU5UX1RZUEUgPSBFTEVNRU5UUyArICcudHlwZSc7XHJcblxyXG4gICAgdmFyIGVsZW1lbnRzU3RhdGljID0gZHJhd09wdGlvbnMuZWxlbWVudHMgJiYgaXNTdGF0aWMoZHJhd09wdGlvbnMuZWxlbWVudHMpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGVtaXRJbnN0YW5jaW5nICgpIHtcclxuICAgICAgZnVuY3Rpb24gZHJhd0VsZW1lbnRzICgpIHtcclxuICAgICAgICBpbm5lcihFWFRfSU5TVEFOQ0lORywgJy5kcmF3RWxlbWVudHNJbnN0YW5jZWRBTkdMRSgnLCBbXHJcbiAgICAgICAgICBQUklNSVRJVkUsXHJcbiAgICAgICAgICBDT1VOVCxcclxuICAgICAgICAgIEVMRU1FTlRfVFlQRSxcclxuICAgICAgICAgIE9GRlNFVCArICc8PCgoJyArIEVMRU1FTlRfVFlQRSArICctJyArIEdMX1VOU0lHTkVEX0JZVEUkOCArICcpPj4xKScsXHJcbiAgICAgICAgICBJTlNUQU5DRVNcclxuICAgICAgICBdLCAnKTsnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZnVuY3Rpb24gZHJhd0FycmF5cyAoKSB7XHJcbiAgICAgICAgaW5uZXIoRVhUX0lOU1RBTkNJTkcsICcuZHJhd0FycmF5c0luc3RhbmNlZEFOR0xFKCcsXHJcbiAgICAgICAgICBbUFJJTUlUSVZFLCBPRkZTRVQsIENPVU5ULCBJTlNUQU5DRVNdLCAnKTsnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKEVMRU1FTlRTKSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50c1N0YXRpYykge1xyXG4gICAgICAgICAgaW5uZXIoJ2lmKCcsIEVMRU1FTlRTLCAnKXsnKTtcclxuICAgICAgICAgIGRyYXdFbGVtZW50cygpO1xyXG4gICAgICAgICAgaW5uZXIoJ31lbHNleycpO1xyXG4gICAgICAgICAgZHJhd0FycmF5cygpO1xyXG4gICAgICAgICAgaW5uZXIoJ30nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgZHJhd0VsZW1lbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRyYXdBcnJheXMoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGVtaXRSZWd1bGFyICgpIHtcclxuICAgICAgZnVuY3Rpb24gZHJhd0VsZW1lbnRzICgpIHtcclxuICAgICAgICBpbm5lcihHTCArICcuZHJhd0VsZW1lbnRzKCcgKyBbXHJcbiAgICAgICAgICBQUklNSVRJVkUsXHJcbiAgICAgICAgICBDT1VOVCxcclxuICAgICAgICAgIEVMRU1FTlRfVFlQRSxcclxuICAgICAgICAgIE9GRlNFVCArICc8PCgoJyArIEVMRU1FTlRfVFlQRSArICctJyArIEdMX1VOU0lHTkVEX0JZVEUkOCArICcpPj4xKSdcclxuICAgICAgICBdICsgJyk7Jyk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGRyYXdBcnJheXMgKCkge1xyXG4gICAgICAgIGlubmVyKEdMICsgJy5kcmF3QXJyYXlzKCcgKyBbUFJJTUlUSVZFLCBPRkZTRVQsIENPVU5UXSArICcpOycpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoRUxFTUVOVFMpIHtcclxuICAgICAgICBpZiAoIWVsZW1lbnRzU3RhdGljKSB7XHJcbiAgICAgICAgICBpbm5lcignaWYoJywgRUxFTUVOVFMsICcpeycpO1xyXG4gICAgICAgICAgZHJhd0VsZW1lbnRzKCk7XHJcbiAgICAgICAgICBpbm5lcignfWVsc2V7Jyk7XHJcbiAgICAgICAgICBkcmF3QXJyYXlzKCk7XHJcbiAgICAgICAgICBpbm5lcignfScpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBkcmF3RWxlbWVudHMoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZHJhd0FycmF5cygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGV4dEluc3RhbmNpbmcgJiYgKHR5cGVvZiBJTlNUQU5DRVMgIT09ICdudW1iZXInIHx8IElOU1RBTkNFUyA+PSAwKSkge1xyXG4gICAgICBpZiAodHlwZW9mIElOU1RBTkNFUyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBpbm5lcignaWYoJywgSU5TVEFOQ0VTLCAnPjApeycpO1xyXG4gICAgICAgIGVtaXRJbnN0YW5jaW5nKCk7XHJcbiAgICAgICAgaW5uZXIoJ31lbHNlIGlmKCcsIElOU1RBTkNFUywgJzwwKXsnKTtcclxuICAgICAgICBlbWl0UmVndWxhcigpO1xyXG4gICAgICAgIGlubmVyKCd9Jyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZW1pdEluc3RhbmNpbmcoKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZW1pdFJlZ3VsYXIoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNyZWF0ZUJvZHkgKGVtaXRCb2R5LCBwYXJlbnRFbnYsIGFyZ3MsIHByb2dyYW0sIGNvdW50KSB7XHJcbiAgICB2YXIgZW52ID0gY3JlYXRlUkVHTEVudmlyb25tZW50KCk7XHJcbiAgICB2YXIgc2NvcGUgPSBlbnYucHJvYygnYm9keScsIGNvdW50KTtcclxuICAgIGNoZWNrJDEub3B0aW9uYWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICBlbnYuY29tbWFuZFN0ciA9IHBhcmVudEVudi5jb21tYW5kU3RyO1xyXG4gICAgICBlbnYuY29tbWFuZCA9IGVudi5saW5rKHBhcmVudEVudi5jb21tYW5kU3RyKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGV4dEluc3RhbmNpbmcpIHtcclxuICAgICAgZW52Lmluc3RhbmNpbmcgPSBzY29wZS5kZWYoXHJcbiAgICAgICAgZW52LnNoYXJlZC5leHRlbnNpb25zLCAnLmFuZ2xlX2luc3RhbmNlZF9hcnJheXMnKTtcclxuICAgIH1cclxuICAgIGVtaXRCb2R5KGVudiwgc2NvcGUsIGFyZ3MsIHByb2dyYW0pO1xyXG4gICAgcmV0dXJuIGVudi5jb21waWxlKCkuYm9keVxyXG4gIH1cclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gRFJBVyBQUk9DXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgZnVuY3Rpb24gZW1pdERyYXdCb2R5IChlbnYsIGRyYXcsIGFyZ3MsIHByb2dyYW0pIHtcclxuICAgIGluamVjdEV4dGVuc2lvbnMoZW52LCBkcmF3KTtcclxuICAgIGVtaXRBdHRyaWJ1dGVzKGVudiwgZHJhdywgYXJncywgcHJvZ3JhbS5hdHRyaWJ1dGVzLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9KTtcclxuICAgIGVtaXRVbmlmb3JtcyhlbnYsIGRyYXcsIGFyZ3MsIHByb2dyYW0udW5pZm9ybXMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH0pO1xyXG4gICAgZW1pdERyYXcoZW52LCBkcmF3LCBkcmF3LCBhcmdzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGVtaXREcmF3UHJvYyAoZW52LCBhcmdzKSB7XHJcbiAgICB2YXIgZHJhdyA9IGVudi5wcm9jKCdkcmF3JywgMSk7XHJcblxyXG4gICAgaW5qZWN0RXh0ZW5zaW9ucyhlbnYsIGRyYXcpO1xyXG5cclxuICAgIGVtaXRDb250ZXh0KGVudiwgZHJhdywgYXJncy5jb250ZXh0KTtcclxuICAgIGVtaXRQb2xsRnJhbWVidWZmZXIoZW52LCBkcmF3LCBhcmdzLmZyYW1lYnVmZmVyKTtcclxuXHJcbiAgICBlbWl0UG9sbFN0YXRlKGVudiwgZHJhdywgYXJncyk7XHJcbiAgICBlbWl0U2V0T3B0aW9ucyhlbnYsIGRyYXcsIGFyZ3Muc3RhdGUpO1xyXG5cclxuICAgIGVtaXRQcm9maWxlKGVudiwgZHJhdywgYXJncywgZmFsc2UsIHRydWUpO1xyXG5cclxuICAgIHZhciBwcm9ncmFtID0gYXJncy5zaGFkZXIucHJvZ1Zhci5hcHBlbmQoZW52LCBkcmF3KTtcclxuICAgIGRyYXcoZW52LnNoYXJlZC5nbCwgJy51c2VQcm9ncmFtKCcsIHByb2dyYW0sICcucHJvZ3JhbSk7Jyk7XHJcblxyXG4gICAgaWYgKGFyZ3Muc2hhZGVyLnByb2dyYW0pIHtcclxuICAgICAgZW1pdERyYXdCb2R5KGVudiwgZHJhdywgYXJncywgYXJncy5zaGFkZXIucHJvZ3JhbSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgZHJhd0NhY2hlID0gZW52Lmdsb2JhbC5kZWYoJ3t9Jyk7XHJcbiAgICAgIHZhciBQUk9HX0lEID0gZHJhdy5kZWYocHJvZ3JhbSwgJy5pZCcpO1xyXG4gICAgICB2YXIgQ0FDSEVEX1BST0MgPSBkcmF3LmRlZihkcmF3Q2FjaGUsICdbJywgUFJPR19JRCwgJ10nKTtcclxuICAgICAgZHJhdyhcclxuICAgICAgICBlbnYuY29uZChDQUNIRURfUFJPQylcclxuICAgICAgICAgIC50aGVuKENBQ0hFRF9QUk9DLCAnLmNhbGwodGhpcyxhMCk7JylcclxuICAgICAgICAgIC5lbHNlKFxyXG4gICAgICAgICAgICBDQUNIRURfUFJPQywgJz0nLCBkcmF3Q2FjaGUsICdbJywgUFJPR19JRCwgJ109JyxcclxuICAgICAgICAgICAgZW52LmxpbmsoZnVuY3Rpb24gKHByb2dyYW0pIHtcclxuICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlQm9keShlbWl0RHJhd0JvZHksIGVudiwgYXJncywgcHJvZ3JhbSwgMSlcclxuICAgICAgICAgICAgfSksICcoJywgcHJvZ3JhbSwgJyk7JyxcclxuICAgICAgICAgICAgQ0FDSEVEX1BST0MsICcuY2FsbCh0aGlzLGEwKTsnKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5rZXlzKGFyZ3Muc3RhdGUpLmxlbmd0aCA+IDApIHtcclxuICAgICAgZHJhdyhlbnYuc2hhcmVkLmN1cnJlbnQsICcuZGlydHk9dHJ1ZTsnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gIC8vIEJBVENIIFBST0NcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgZnVuY3Rpb24gZW1pdEJhdGNoRHluYW1pY1NoYWRlckJvZHkgKGVudiwgc2NvcGUsIGFyZ3MsIHByb2dyYW0pIHtcclxuICAgIGVudi5iYXRjaElkID0gJ2ExJztcclxuXHJcbiAgICBpbmplY3RFeHRlbnNpb25zKGVudiwgc2NvcGUpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFsbCAoKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgZW1pdEF0dHJpYnV0ZXMoZW52LCBzY29wZSwgYXJncywgcHJvZ3JhbS5hdHRyaWJ1dGVzLCBhbGwpO1xyXG4gICAgZW1pdFVuaWZvcm1zKGVudiwgc2NvcGUsIGFyZ3MsIHByb2dyYW0udW5pZm9ybXMsIGFsbCk7XHJcbiAgICBlbWl0RHJhdyhlbnYsIHNjb3BlLCBzY29wZSwgYXJncyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbWl0QmF0Y2hCb2R5IChlbnYsIHNjb3BlLCBhcmdzLCBwcm9ncmFtKSB7XHJcbiAgICBpbmplY3RFeHRlbnNpb25zKGVudiwgc2NvcGUpO1xyXG5cclxuICAgIHZhciBjb250ZXh0RHluYW1pYyA9IGFyZ3MuY29udGV4dERlcDtcclxuXHJcbiAgICB2YXIgQkFUQ0hfSUQgPSBzY29wZS5kZWYoKTtcclxuICAgIHZhciBQUk9QX0xJU1QgPSAnYTAnO1xyXG4gICAgdmFyIE5VTV9QUk9QUyA9ICdhMSc7XHJcbiAgICB2YXIgUFJPUFMgPSBzY29wZS5kZWYoKTtcclxuICAgIGVudi5zaGFyZWQucHJvcHMgPSBQUk9QUztcclxuICAgIGVudi5iYXRjaElkID0gQkFUQ0hfSUQ7XHJcblxyXG4gICAgdmFyIG91dGVyID0gZW52LnNjb3BlKCk7XHJcbiAgICB2YXIgaW5uZXIgPSBlbnYuc2NvcGUoKTtcclxuXHJcbiAgICBzY29wZShcclxuICAgICAgb3V0ZXIuZW50cnksXHJcbiAgICAgICdmb3IoJywgQkFUQ0hfSUQsICc9MDsnLCBCQVRDSF9JRCwgJzwnLCBOVU1fUFJPUFMsICc7KysnLCBCQVRDSF9JRCwgJyl7JyxcclxuICAgICAgUFJPUFMsICc9JywgUFJPUF9MSVNULCAnWycsIEJBVENIX0lELCAnXTsnLFxyXG4gICAgICBpbm5lcixcclxuICAgICAgJ30nLFxyXG4gICAgICBvdXRlci5leGl0KTtcclxuXHJcbiAgICBmdW5jdGlvbiBpc0lubmVyRGVmbiAoZGVmbikge1xyXG4gICAgICByZXR1cm4gKChkZWZuLmNvbnRleHREZXAgJiYgY29udGV4dER5bmFtaWMpIHx8IGRlZm4ucHJvcERlcClcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpc091dGVyRGVmbiAoZGVmbikge1xyXG4gICAgICByZXR1cm4gIWlzSW5uZXJEZWZuKGRlZm4pXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGFyZ3MubmVlZHNDb250ZXh0KSB7XHJcbiAgICAgIGVtaXRDb250ZXh0KGVudiwgaW5uZXIsIGFyZ3MuY29udGV4dCk7XHJcbiAgICB9XHJcbiAgICBpZiAoYXJncy5uZWVkc0ZyYW1lYnVmZmVyKSB7XHJcbiAgICAgIGVtaXRQb2xsRnJhbWVidWZmZXIoZW52LCBpbm5lciwgYXJncy5mcmFtZWJ1ZmZlcik7XHJcbiAgICB9XHJcbiAgICBlbWl0U2V0T3B0aW9ucyhlbnYsIGlubmVyLCBhcmdzLnN0YXRlLCBpc0lubmVyRGVmbik7XHJcblxyXG4gICAgaWYgKGFyZ3MucHJvZmlsZSAmJiBpc0lubmVyRGVmbihhcmdzLnByb2ZpbGUpKSB7XHJcbiAgICAgIGVtaXRQcm9maWxlKGVudiwgaW5uZXIsIGFyZ3MsIGZhbHNlLCB0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXByb2dyYW0pIHtcclxuICAgICAgdmFyIHByb2dDYWNoZSA9IGVudi5nbG9iYWwuZGVmKCd7fScpO1xyXG4gICAgICB2YXIgUFJPR1JBTSA9IGFyZ3Muc2hhZGVyLnByb2dWYXIuYXBwZW5kKGVudiwgaW5uZXIpO1xyXG4gICAgICB2YXIgUFJPR19JRCA9IGlubmVyLmRlZihQUk9HUkFNLCAnLmlkJyk7XHJcbiAgICAgIHZhciBDQUNIRURfUFJPQyA9IGlubmVyLmRlZihwcm9nQ2FjaGUsICdbJywgUFJPR19JRCwgJ10nKTtcclxuICAgICAgaW5uZXIoXHJcbiAgICAgICAgZW52LnNoYXJlZC5nbCwgJy51c2VQcm9ncmFtKCcsIFBST0dSQU0sICcucHJvZ3JhbSk7JyxcclxuICAgICAgICAnaWYoIScsIENBQ0hFRF9QUk9DLCAnKXsnLFxyXG4gICAgICAgIENBQ0hFRF9QUk9DLCAnPScsIHByb2dDYWNoZSwgJ1snLCBQUk9HX0lELCAnXT0nLFxyXG4gICAgICAgIGVudi5saW5rKGZ1bmN0aW9uIChwcm9ncmFtKSB7XHJcbiAgICAgICAgICByZXR1cm4gY3JlYXRlQm9keShcclxuICAgICAgICAgICAgZW1pdEJhdGNoRHluYW1pY1NoYWRlckJvZHksIGVudiwgYXJncywgcHJvZ3JhbSwgMilcclxuICAgICAgICB9KSwgJygnLCBQUk9HUkFNLCAnKTt9JyxcclxuICAgICAgICBDQUNIRURfUFJPQywgJy5jYWxsKHRoaXMsYTBbJywgQkFUQ0hfSUQsICddLCcsIEJBVENIX0lELCAnKTsnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGVtaXRBdHRyaWJ1dGVzKGVudiwgb3V0ZXIsIGFyZ3MsIHByb2dyYW0uYXR0cmlidXRlcywgaXNPdXRlckRlZm4pO1xyXG4gICAgICBlbWl0QXR0cmlidXRlcyhlbnYsIGlubmVyLCBhcmdzLCBwcm9ncmFtLmF0dHJpYnV0ZXMsIGlzSW5uZXJEZWZuKTtcclxuICAgICAgZW1pdFVuaWZvcm1zKGVudiwgb3V0ZXIsIGFyZ3MsIHByb2dyYW0udW5pZm9ybXMsIGlzT3V0ZXJEZWZuKTtcclxuICAgICAgZW1pdFVuaWZvcm1zKGVudiwgaW5uZXIsIGFyZ3MsIHByb2dyYW0udW5pZm9ybXMsIGlzSW5uZXJEZWZuKTtcclxuICAgICAgZW1pdERyYXcoZW52LCBvdXRlciwgaW5uZXIsIGFyZ3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gZW1pdEJhdGNoUHJvYyAoZW52LCBhcmdzKSB7XHJcbiAgICB2YXIgYmF0Y2ggPSBlbnYucHJvYygnYmF0Y2gnLCAyKTtcclxuICAgIGVudi5iYXRjaElkID0gJzAnO1xyXG5cclxuICAgIGluamVjdEV4dGVuc2lvbnMoZW52LCBiYXRjaCk7XHJcblxyXG4gICAgLy8gQ2hlY2sgaWYgYW55IGNvbnRleHQgdmFyaWFibGVzIGRlcGVuZCBvbiBwcm9wc1xyXG4gICAgdmFyIGNvbnRleHREeW5hbWljID0gZmFsc2U7XHJcbiAgICB2YXIgbmVlZHNDb250ZXh0ID0gdHJ1ZTtcclxuICAgIE9iamVjdC5rZXlzKGFyZ3MuY29udGV4dCkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICBjb250ZXh0RHluYW1pYyA9IGNvbnRleHREeW5hbWljIHx8IGFyZ3MuY29udGV4dFtuYW1lXS5wcm9wRGVwO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoIWNvbnRleHREeW5hbWljKSB7XHJcbiAgICAgIGVtaXRDb250ZXh0KGVudiwgYmF0Y2gsIGFyZ3MuY29udGV4dCk7XHJcbiAgICAgIG5lZWRzQ29udGV4dCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGZyYW1lYnVmZmVyIHN0YXRlIGFmZmVjdHMgZnJhbWVidWZmZXJXaWR0aC9oZWlnaHQgY29udGV4dCB2YXJzXHJcbiAgICB2YXIgZnJhbWVidWZmZXIgPSBhcmdzLmZyYW1lYnVmZmVyO1xyXG4gICAgdmFyIG5lZWRzRnJhbWVidWZmZXIgPSBmYWxzZTtcclxuICAgIGlmIChmcmFtZWJ1ZmZlcikge1xyXG4gICAgICBpZiAoZnJhbWVidWZmZXIucHJvcERlcCkge1xyXG4gICAgICAgIGNvbnRleHREeW5hbWljID0gbmVlZHNGcmFtZWJ1ZmZlciA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAoZnJhbWVidWZmZXIuY29udGV4dERlcCAmJiBjb250ZXh0RHluYW1pYykge1xyXG4gICAgICAgIG5lZWRzRnJhbWVidWZmZXIgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghbmVlZHNGcmFtZWJ1ZmZlcikge1xyXG4gICAgICAgIGVtaXRQb2xsRnJhbWVidWZmZXIoZW52LCBiYXRjaCwgZnJhbWVidWZmZXIpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbWl0UG9sbEZyYW1lYnVmZmVyKGVudiwgYmF0Y2gsIG51bGwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHZpZXdwb3J0IGlzIHdlaXJkIGJlY2F1c2UgaXQgY2FuIGFmZmVjdCBjb250ZXh0IHZhcnNcclxuICAgIGlmIChhcmdzLnN0YXRlLnZpZXdwb3J0ICYmIGFyZ3Muc3RhdGUudmlld3BvcnQucHJvcERlcCkge1xyXG4gICAgICBjb250ZXh0RHluYW1pYyA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaXNJbm5lckRlZm4gKGRlZm4pIHtcclxuICAgICAgcmV0dXJuIChkZWZuLmNvbnRleHREZXAgJiYgY29udGV4dER5bmFtaWMpIHx8IGRlZm4ucHJvcERlcFxyXG4gICAgfVxyXG5cclxuICAgIC8vIHNldCB3ZWJnbCBvcHRpb25zXHJcbiAgICBlbWl0UG9sbFN0YXRlKGVudiwgYmF0Y2gsIGFyZ3MpO1xyXG4gICAgZW1pdFNldE9wdGlvbnMoZW52LCBiYXRjaCwgYXJncy5zdGF0ZSwgZnVuY3Rpb24gKGRlZm4pIHtcclxuICAgICAgcmV0dXJuICFpc0lubmVyRGVmbihkZWZuKVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKCFhcmdzLnByb2ZpbGUgfHwgIWlzSW5uZXJEZWZuKGFyZ3MucHJvZmlsZSkpIHtcclxuICAgICAgZW1pdFByb2ZpbGUoZW52LCBiYXRjaCwgYXJncywgZmFsc2UsICdhMScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFNhdmUgdGhlc2UgdmFsdWVzIHRvIGFyZ3Mgc28gdGhhdCB0aGUgYmF0Y2ggYm9keSByb3V0aW5lIGNhbiB1c2UgdGhlbVxyXG4gICAgYXJncy5jb250ZXh0RGVwID0gY29udGV4dER5bmFtaWM7XHJcbiAgICBhcmdzLm5lZWRzQ29udGV4dCA9IG5lZWRzQ29udGV4dDtcclxuICAgIGFyZ3MubmVlZHNGcmFtZWJ1ZmZlciA9IG5lZWRzRnJhbWVidWZmZXI7XHJcblxyXG4gICAgLy8gZGV0ZXJtaW5lIGlmIHNoYWRlciBpcyBkeW5hbWljXHJcbiAgICB2YXIgcHJvZ0RlZm4gPSBhcmdzLnNoYWRlci5wcm9nVmFyO1xyXG4gICAgaWYgKChwcm9nRGVmbi5jb250ZXh0RGVwICYmIGNvbnRleHREeW5hbWljKSB8fCBwcm9nRGVmbi5wcm9wRGVwKSB7XHJcbiAgICAgIGVtaXRCYXRjaEJvZHkoXHJcbiAgICAgICAgZW52LFxyXG4gICAgICAgIGJhdGNoLFxyXG4gICAgICAgIGFyZ3MsXHJcbiAgICAgICAgbnVsbCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgUFJPR1JBTSA9IHByb2dEZWZuLmFwcGVuZChlbnYsIGJhdGNoKTtcclxuICAgICAgYmF0Y2goZW52LnNoYXJlZC5nbCwgJy51c2VQcm9ncmFtKCcsIFBST0dSQU0sICcucHJvZ3JhbSk7Jyk7XHJcbiAgICAgIGlmIChhcmdzLnNoYWRlci5wcm9ncmFtKSB7XHJcbiAgICAgICAgZW1pdEJhdGNoQm9keShcclxuICAgICAgICAgIGVudixcclxuICAgICAgICAgIGJhdGNoLFxyXG4gICAgICAgICAgYXJncyxcclxuICAgICAgICAgIGFyZ3Muc2hhZGVyLnByb2dyYW0pO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciBiYXRjaENhY2hlID0gZW52Lmdsb2JhbC5kZWYoJ3t9Jyk7XHJcbiAgICAgICAgdmFyIFBST0dfSUQgPSBiYXRjaC5kZWYoUFJPR1JBTSwgJy5pZCcpO1xyXG4gICAgICAgIHZhciBDQUNIRURfUFJPQyA9IGJhdGNoLmRlZihiYXRjaENhY2hlLCAnWycsIFBST0dfSUQsICddJyk7XHJcbiAgICAgICAgYmF0Y2goXHJcbiAgICAgICAgICBlbnYuY29uZChDQUNIRURfUFJPQylcclxuICAgICAgICAgICAgLnRoZW4oQ0FDSEVEX1BST0MsICcuY2FsbCh0aGlzLGEwLGExKTsnKVxyXG4gICAgICAgICAgICAuZWxzZShcclxuICAgICAgICAgICAgICBDQUNIRURfUFJPQywgJz0nLCBiYXRjaENhY2hlLCAnWycsIFBST0dfSUQsICddPScsXHJcbiAgICAgICAgICAgICAgZW52LmxpbmsoZnVuY3Rpb24gKHByb2dyYW0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCb2R5KGVtaXRCYXRjaEJvZHksIGVudiwgYXJncywgcHJvZ3JhbSwgMilcclxuICAgICAgICAgICAgICB9KSwgJygnLCBQUk9HUkFNLCAnKTsnLFxyXG4gICAgICAgICAgICAgIENBQ0hFRF9QUk9DLCAnLmNhbGwodGhpcyxhMCxhMSk7JykpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKE9iamVjdC5rZXlzKGFyZ3Muc3RhdGUpLmxlbmd0aCA+IDApIHtcclxuICAgICAgYmF0Y2goZW52LnNoYXJlZC5jdXJyZW50LCAnLmRpcnR5PXRydWU7Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyBTQ09QRSBDT01NQU5EXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgZnVuY3Rpb24gZW1pdFNjb3BlUHJvYyAoZW52LCBhcmdzKSB7XHJcbiAgICB2YXIgc2NvcGUgPSBlbnYucHJvYygnc2NvcGUnLCAzKTtcclxuICAgIGVudi5iYXRjaElkID0gJ2EyJztcclxuXHJcbiAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuICAgIHZhciBDVVJSRU5UX1NUQVRFID0gc2hhcmVkLmN1cnJlbnQ7XHJcblxyXG4gICAgZW1pdENvbnRleHQoZW52LCBzY29wZSwgYXJncy5jb250ZXh0KTtcclxuXHJcbiAgICBpZiAoYXJncy5mcmFtZWJ1ZmZlcikge1xyXG4gICAgICBhcmdzLmZyYW1lYnVmZmVyLmFwcGVuZChlbnYsIHNjb3BlKTtcclxuICAgIH1cclxuXHJcbiAgICBzb3J0U3RhdGUoT2JqZWN0LmtleXMoYXJncy5zdGF0ZSkpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgdmFyIGRlZm4gPSBhcmdzLnN0YXRlW25hbWVdO1xyXG4gICAgICB2YXIgdmFsdWUgPSBkZWZuLmFwcGVuZChlbnYsIHNjb3BlKTtcclxuICAgICAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xyXG4gICAgICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24gKHYsIGkpIHtcclxuICAgICAgICAgIHNjb3BlLnNldChlbnYubmV4dFtuYW1lXSwgJ1snICsgaSArICddJywgdik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgc2NvcGUuc2V0KHNoYXJlZC5uZXh0LCAnLicgKyBuYW1lLCB2YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGVtaXRQcm9maWxlKGVudiwgc2NvcGUsIGFyZ3MsIHRydWUsIHRydWUpXHJcblxyXG4gICAgO1tTX0VMRU1FTlRTLCBTX09GRlNFVCwgU19DT1VOVCwgU19JTlNUQU5DRVMsIFNfUFJJTUlUSVZFXS5mb3JFYWNoKFxyXG4gICAgICBmdW5jdGlvbiAob3B0KSB7XHJcbiAgICAgICAgdmFyIHZhcmlhYmxlID0gYXJncy5kcmF3W29wdF07XHJcbiAgICAgICAgaWYgKCF2YXJpYWJsZSkge1xyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHNjb3BlLnNldChzaGFyZWQuZHJhdywgJy4nICsgb3B0LCAnJyArIHZhcmlhYmxlLmFwcGVuZChlbnYsIHNjb3BlKSk7XHJcbiAgICAgIH0pO1xyXG5cclxuICAgIE9iamVjdC5rZXlzKGFyZ3MudW5pZm9ybXMpLmZvckVhY2goZnVuY3Rpb24gKG9wdCkge1xyXG4gICAgICBzY29wZS5zZXQoXHJcbiAgICAgICAgc2hhcmVkLnVuaWZvcm1zLFxyXG4gICAgICAgICdbJyArIHN0cmluZ1N0b3JlLmlkKG9wdCkgKyAnXScsXHJcbiAgICAgICAgYXJncy51bmlmb3Jtc1tvcHRdLmFwcGVuZChlbnYsIHNjb3BlKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhhcmdzLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgdmFyIHJlY29yZCA9IGFyZ3MuYXR0cmlidXRlc1tuYW1lXS5hcHBlbmQoZW52LCBzY29wZSk7XHJcbiAgICAgIHZhciBzY29wZUF0dHJpYiA9IGVudi5zY29wZUF0dHJpYihuYW1lKTtcclxuICAgICAgT2JqZWN0LmtleXMobmV3IEF0dHJpYnV0ZVJlY29yZCgpKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XHJcbiAgICAgICAgc2NvcGUuc2V0KHNjb3BlQXR0cmliLCAnLicgKyBwcm9wLCByZWNvcmRbcHJvcF0pO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGZ1bmN0aW9uIHNhdmVTaGFkZXIgKG5hbWUpIHtcclxuICAgICAgdmFyIHNoYWRlciA9IGFyZ3Muc2hhZGVyW25hbWVdO1xyXG4gICAgICBpZiAoc2hhZGVyKSB7XHJcbiAgICAgICAgc2NvcGUuc2V0KHNoYXJlZC5zaGFkZXIsICcuJyArIG5hbWUsIHNoYWRlci5hcHBlbmQoZW52LCBzY29wZSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBzYXZlU2hhZGVyKFNfVkVSVCk7XHJcbiAgICBzYXZlU2hhZGVyKFNfRlJBRyk7XHJcblxyXG4gICAgaWYgKE9iamVjdC5rZXlzKGFyZ3Muc3RhdGUpLmxlbmd0aCA+IDApIHtcclxuICAgICAgc2NvcGUoQ1VSUkVOVF9TVEFURSwgJy5kaXJ0eT10cnVlOycpO1xyXG4gICAgICBzY29wZS5leGl0KENVUlJFTlRfU1RBVEUsICcuZGlydHk9dHJ1ZTsnKTtcclxuICAgIH1cclxuXHJcbiAgICBzY29wZSgnYTEoJywgZW52LnNoYXJlZC5jb250ZXh0LCAnLGEwLCcsIGVudi5iYXRjaElkLCAnKTsnKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGlzRHluYW1pY09iamVjdCAob2JqZWN0KSB7XHJcbiAgICBpZiAodHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcgfHwgaXNBcnJheUxpa2Uob2JqZWN0KSkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHZhciBwcm9wcyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIGlmIChkeW5hbWljLmlzRHluYW1pYyhvYmplY3RbcHJvcHNbaV1dKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc3BsYXRPYmplY3QgKGVudiwgb3B0aW9ucywgbmFtZSkge1xyXG4gICAgdmFyIG9iamVjdCA9IG9wdGlvbnMuc3RhdGljW25hbWVdO1xyXG4gICAgaWYgKCFvYmplY3QgfHwgIWlzRHluYW1pY09iamVjdChvYmplY3QpKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIHZhciBnbG9iYWxzID0gZW52Lmdsb2JhbDtcclxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcclxuICAgIHZhciB0aGlzRGVwID0gZmFsc2U7XHJcbiAgICB2YXIgY29udGV4dERlcCA9IGZhbHNlO1xyXG4gICAgdmFyIHByb3BEZXAgPSBmYWxzZTtcclxuICAgIHZhciBvYmplY3RSZWYgPSBlbnYuZ2xvYmFsLmRlZigne30nKTtcclxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIHZhciB2YWx1ZSA9IG9iamVjdFtrZXldO1xyXG4gICAgICBpZiAoZHluYW1pYy5pc0R5bmFtaWModmFsdWUpKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XSA9IGR5bmFtaWMudW5ib3godmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZGVwcyA9IGNyZWF0ZUR5bmFtaWNEZWNsKHZhbHVlLCBudWxsKTtcclxuICAgICAgICB0aGlzRGVwID0gdGhpc0RlcCB8fCBkZXBzLnRoaXNEZXA7XHJcbiAgICAgICAgcHJvcERlcCA9IHByb3BEZXAgfHwgZGVwcy5wcm9wRGVwO1xyXG4gICAgICAgIGNvbnRleHREZXAgPSBjb250ZXh0RGVwIHx8IGRlcHMuY29udGV4dERlcDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBnbG9iYWxzKG9iamVjdFJlZiwgJy4nLCBrZXksICc9Jyk7XHJcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgdmFsdWUpIHtcclxuICAgICAgICAgIGNhc2UgJ251bWJlcic6XHJcbiAgICAgICAgICAgIGdsb2JhbHModmFsdWUpO1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgZ2xvYmFscygnXCInLCB2YWx1ZSwgJ1wiJyk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBjYXNlICdvYmplY3QnOlxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICBnbG9iYWxzKCdbJywgdmFsdWUuam9pbigpLCAnXScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICBnbG9iYWxzKGVudi5saW5rKHZhbHVlKSk7XHJcbiAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGdsb2JhbHMoJzsnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwZW5kQmxvY2sgKGVudiwgYmxvY2spIHtcclxuICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcclxuICAgICAgICBpZiAoIWR5bmFtaWMuaXNEeW5hbWljKHZhbHVlKSkge1xyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZWYgPSBlbnYuaW52b2tlKGJsb2NrLCB2YWx1ZSk7XHJcbiAgICAgICAgYmxvY2sob2JqZWN0UmVmLCAnLicsIGtleSwgJz0nLCByZWYsICc7Jyk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9wdGlvbnMuZHluYW1pY1tuYW1lXSA9IG5ldyBkeW5hbWljLkR5bmFtaWNWYXJpYWJsZShEWU5fVEhVTkssIHtcclxuICAgICAgdGhpc0RlcDogdGhpc0RlcCxcclxuICAgICAgY29udGV4dERlcDogY29udGV4dERlcCxcclxuICAgICAgcHJvcERlcDogcHJvcERlcCxcclxuICAgICAgcmVmOiBvYmplY3RSZWYsXHJcbiAgICAgIGFwcGVuZDogYXBwZW5kQmxvY2tcclxuICAgIH0pO1xyXG4gICAgZGVsZXRlIG9wdGlvbnMuc3RhdGljW25hbWVdO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gTUFJTiBEUkFXIENPTU1BTkRcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICBmdW5jdGlvbiBjb21waWxlQ29tbWFuZCAob3B0aW9ucywgYXR0cmlidXRlcywgdW5pZm9ybXMsIGNvbnRleHQsIHN0YXRzKSB7XHJcbiAgICB2YXIgZW52ID0gY3JlYXRlUkVHTEVudmlyb25tZW50KCk7XHJcblxyXG4gICAgLy8gbGluayBzdGF0cywgc28gdGhhdCB3ZSBjYW4gZWFzaWx5IGFjY2VzcyBpdCBpbiB0aGUgcHJvZ3JhbS5cclxuICAgIGVudi5zdGF0cyA9IGVudi5saW5rKHN0YXRzKTtcclxuXHJcbiAgICAvLyBzcGxhdCBvcHRpb25zIGFuZCBhdHRyaWJ1dGVzIHRvIGFsbG93IGZvciBkeW5hbWljIG5lc3RlZCBwcm9wZXJ0aWVzXHJcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzLnN0YXRpYykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgIHNwbGF0T2JqZWN0KGVudiwgYXR0cmlidXRlcywga2V5KTtcclxuICAgIH0pO1xyXG4gICAgTkVTVEVEX09QVElPTlMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICBzcGxhdE9iamVjdChlbnYsIG9wdGlvbnMsIG5hbWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdmFyIGFyZ3MgPSBwYXJzZUFyZ3VtZW50cyhvcHRpb25zLCBhdHRyaWJ1dGVzLCB1bmlmb3JtcywgY29udGV4dCwgZW52KTtcclxuXHJcbiAgICBlbWl0RHJhd1Byb2MoZW52LCBhcmdzKTtcclxuICAgIGVtaXRTY29wZVByb2MoZW52LCBhcmdzKTtcclxuICAgIGVtaXRCYXRjaFByb2MoZW52LCBhcmdzKTtcclxuXHJcbiAgICByZXR1cm4gZW52LmNvbXBpbGUoKVxyXG4gIH1cclxuXHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgLy8gUE9MTCAvIFJFRlJFU0hcclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICByZXR1cm4ge1xyXG4gICAgbmV4dDogbmV4dFN0YXRlLFxyXG4gICAgY3VycmVudDogY3VycmVudFN0YXRlLFxyXG4gICAgcHJvY3M6IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHZhciBlbnYgPSBjcmVhdGVSRUdMRW52aXJvbm1lbnQoKTtcclxuICAgICAgdmFyIHBvbGwgPSBlbnYucHJvYygncG9sbCcpO1xyXG4gICAgICB2YXIgcmVmcmVzaCA9IGVudi5wcm9jKCdyZWZyZXNoJyk7XHJcbiAgICAgIHZhciBjb21tb24gPSBlbnYuYmxvY2soKTtcclxuICAgICAgcG9sbChjb21tb24pO1xyXG4gICAgICByZWZyZXNoKGNvbW1vbik7XHJcblxyXG4gICAgICB2YXIgc2hhcmVkID0gZW52LnNoYXJlZDtcclxuICAgICAgdmFyIEdMID0gc2hhcmVkLmdsO1xyXG4gICAgICB2YXIgTkVYVF9TVEFURSA9IHNoYXJlZC5uZXh0O1xyXG4gICAgICB2YXIgQ1VSUkVOVF9TVEFURSA9IHNoYXJlZC5jdXJyZW50O1xyXG5cclxuICAgICAgY29tbW9uKENVUlJFTlRfU1RBVEUsICcuZGlydHk9ZmFsc2U7Jyk7XHJcblxyXG4gICAgICBlbWl0UG9sbEZyYW1lYnVmZmVyKGVudiwgcG9sbCk7XHJcbiAgICAgIGVtaXRQb2xsRnJhbWVidWZmZXIoZW52LCByZWZyZXNoLCBudWxsLCB0cnVlKTtcclxuXHJcbiAgICAgIC8vIFJlZnJlc2ggdXBkYXRlcyBhbGwgYXR0cmlidXRlIHN0YXRlIGNoYW5nZXNcclxuICAgICAgdmFyIElOU1RBTkNJTkc7XHJcbiAgICAgIGlmIChleHRJbnN0YW5jaW5nKSB7XHJcbiAgICAgICAgSU5TVEFOQ0lORyA9IGVudi5saW5rKGV4dEluc3RhbmNpbmcpO1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGltaXRzLm1heEF0dHJpYnV0ZXM7ICsraSkge1xyXG4gICAgICAgIHZhciBCSU5ESU5HID0gcmVmcmVzaC5kZWYoc2hhcmVkLmF0dHJpYnV0ZXMsICdbJywgaSwgJ10nKTtcclxuICAgICAgICB2YXIgaWZ0ZSA9IGVudi5jb25kKEJJTkRJTkcsICcuYnVmZmVyJyk7XHJcbiAgICAgICAgaWZ0ZS50aGVuKFxyXG4gICAgICAgICAgR0wsICcuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoJywgaSwgJyk7JyxcclxuICAgICAgICAgIEdMLCAnLmJpbmRCdWZmZXIoJyxcclxuICAgICAgICAgICAgR0xfQVJSQVlfQlVGRkVSJDEsICcsJyxcclxuICAgICAgICAgICAgQklORElORywgJy5idWZmZXIuYnVmZmVyKTsnLFxyXG4gICAgICAgICAgR0wsICcudmVydGV4QXR0cmliUG9pbnRlcignLFxyXG4gICAgICAgICAgICBpLCAnLCcsXHJcbiAgICAgICAgICAgIEJJTkRJTkcsICcuc2l6ZSwnLFxyXG4gICAgICAgICAgICBCSU5ESU5HLCAnLnR5cGUsJyxcclxuICAgICAgICAgICAgQklORElORywgJy5ub3JtYWxpemVkLCcsXHJcbiAgICAgICAgICAgIEJJTkRJTkcsICcuc3RyaWRlLCcsXHJcbiAgICAgICAgICAgIEJJTkRJTkcsICcub2Zmc2V0KTsnXHJcbiAgICAgICAgKS5lbHNlKFxyXG4gICAgICAgICAgR0wsICcuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KCcsIGksICcpOycsXHJcbiAgICAgICAgICBHTCwgJy52ZXJ0ZXhBdHRyaWI0ZignLFxyXG4gICAgICAgICAgICBpLCAnLCcsXHJcbiAgICAgICAgICAgIEJJTkRJTkcsICcueCwnLFxyXG4gICAgICAgICAgICBCSU5ESU5HLCAnLnksJyxcclxuICAgICAgICAgICAgQklORElORywgJy56LCcsXHJcbiAgICAgICAgICAgIEJJTkRJTkcsICcudyk7JyxcclxuICAgICAgICAgIEJJTkRJTkcsICcuYnVmZmVyPW51bGw7Jyk7XHJcbiAgICAgICAgcmVmcmVzaChpZnRlKTtcclxuICAgICAgICBpZiAoZXh0SW5zdGFuY2luZykge1xyXG4gICAgICAgICAgcmVmcmVzaChcclxuICAgICAgICAgICAgSU5TVEFOQ0lORywgJy52ZXJ0ZXhBdHRyaWJEaXZpc29yQU5HTEUoJyxcclxuICAgICAgICAgICAgaSwgJywnLFxyXG4gICAgICAgICAgICBCSU5ESU5HLCAnLmRpdmlzb3IpOycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgT2JqZWN0LmtleXMoR0xfRkxBR1MpLmZvckVhY2goZnVuY3Rpb24gKGZsYWcpIHtcclxuICAgICAgICB2YXIgY2FwID0gR0xfRkxBR1NbZmxhZ107XHJcbiAgICAgICAgdmFyIE5FWFQgPSBjb21tb24uZGVmKE5FWFRfU1RBVEUsICcuJywgZmxhZyk7XHJcbiAgICAgICAgdmFyIGJsb2NrID0gZW52LmJsb2NrKCk7XHJcbiAgICAgICAgYmxvY2soJ2lmKCcsIE5FWFQsICcpeycsXHJcbiAgICAgICAgICBHTCwgJy5lbmFibGUoJywgY2FwLCAnKX1lbHNleycsXHJcbiAgICAgICAgICBHTCwgJy5kaXNhYmxlKCcsIGNhcCwgJyl9JyxcclxuICAgICAgICAgIENVUlJFTlRfU1RBVEUsICcuJywgZmxhZywgJz0nLCBORVhULCAnOycpO1xyXG4gICAgICAgIHJlZnJlc2goYmxvY2spO1xyXG4gICAgICAgIHBvbGwoXHJcbiAgICAgICAgICAnaWYoJywgTkVYVCwgJyE9PScsIENVUlJFTlRfU1RBVEUsICcuJywgZmxhZywgJyl7JyxcclxuICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgJ30nKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBPYmplY3Qua2V5cyhHTF9WQVJJQUJMRVMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgICAgICB2YXIgZnVuYyA9IEdMX1ZBUklBQkxFU1tuYW1lXTtcclxuICAgICAgICB2YXIgaW5pdCA9IGN1cnJlbnRTdGF0ZVtuYW1lXTtcclxuICAgICAgICB2YXIgTkVYVCwgQ1VSUkVOVDtcclxuICAgICAgICB2YXIgYmxvY2sgPSBlbnYuYmxvY2soKTtcclxuICAgICAgICBibG9jayhHTCwgJy4nLCBmdW5jLCAnKCcpO1xyXG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbml0KSkge1xyXG4gICAgICAgICAgdmFyIG4gPSBpbml0Lmxlbmd0aDtcclxuICAgICAgICAgIE5FWFQgPSBlbnYuZ2xvYmFsLmRlZihORVhUX1NUQVRFLCAnLicsIG5hbWUpO1xyXG4gICAgICAgICAgQ1VSUkVOVCA9IGVudi5nbG9iYWwuZGVmKENVUlJFTlRfU1RBVEUsICcuJywgbmFtZSk7XHJcbiAgICAgICAgICBibG9jayhcclxuICAgICAgICAgICAgbG9vcChuLCBmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBORVhUICsgJ1snICsgaSArICddJ1xyXG4gICAgICAgICAgICB9KSwgJyk7JyxcclxuICAgICAgICAgICAgbG9vcChuLCBmdW5jdGlvbiAoaSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBDVVJSRU5UICsgJ1snICsgaSArICddPScgKyBORVhUICsgJ1snICsgaSArICddOydcclxuICAgICAgICAgICAgfSkuam9pbignJykpO1xyXG4gICAgICAgICAgcG9sbChcclxuICAgICAgICAgICAgJ2lmKCcsIGxvb3AobiwgZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gTkVYVCArICdbJyArIGkgKyAnXSE9PScgKyBDVVJSRU5UICsgJ1snICsgaSArICddJ1xyXG4gICAgICAgICAgICB9KS5qb2luKCd8fCcpLCAnKXsnLFxyXG4gICAgICAgICAgICBibG9jayxcclxuICAgICAgICAgICAgJ30nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgTkVYVCA9IGNvbW1vbi5kZWYoTkVYVF9TVEFURSwgJy4nLCBuYW1lKTtcclxuICAgICAgICAgIENVUlJFTlQgPSBjb21tb24uZGVmKENVUlJFTlRfU1RBVEUsICcuJywgbmFtZSk7XHJcbiAgICAgICAgICBibG9jayhcclxuICAgICAgICAgICAgTkVYVCwgJyk7JyxcclxuICAgICAgICAgICAgQ1VSUkVOVF9TVEFURSwgJy4nLCBuYW1lLCAnPScsIE5FWFQsICc7Jyk7XHJcbiAgICAgICAgICBwb2xsKFxyXG4gICAgICAgICAgICAnaWYoJywgTkVYVCwgJyE9PScsIENVUlJFTlQsICcpeycsXHJcbiAgICAgICAgICAgIGJsb2NrLFxyXG4gICAgICAgICAgICAnfScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZWZyZXNoKGJsb2NrKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICByZXR1cm4gZW52LmNvbXBpbGUoKVxyXG4gICAgfSkoKSxcclxuICAgIGNvbXBpbGU6IGNvbXBpbGVDb21tYW5kXHJcbiAgfVxyXG59XG5cbmZ1bmN0aW9uIHN0YXRzICgpIHtcclxuICByZXR1cm4ge1xyXG4gICAgYnVmZmVyQ291bnQ6IDAsXHJcbiAgICBlbGVtZW50c0NvdW50OiAwLFxyXG4gICAgZnJhbWVidWZmZXJDb3VudDogMCxcclxuICAgIHNoYWRlckNvdW50OiAwLFxyXG4gICAgdGV4dHVyZUNvdW50OiAwLFxyXG4gICAgY3ViZUNvdW50OiAwLFxyXG4gICAgcmVuZGVyYnVmZmVyQ291bnQ6IDAsXHJcbiAgICBtYXhUZXh0dXJlVW5pdHM6IDBcclxuICB9XHJcbn1cblxudmFyIEdMX1FVRVJZX1JFU1VMVF9FWFQgPSAweDg4NjY7XHJcbnZhciBHTF9RVUVSWV9SRVNVTFRfQVZBSUxBQkxFX0VYVCA9IDB4ODg2NztcclxudmFyIEdMX1RJTUVfRUxBUFNFRF9FWFQgPSAweDg4QkY7XHJcblxyXG52YXIgY3JlYXRlVGltZXIgPSBmdW5jdGlvbiAoZ2wsIGV4dGVuc2lvbnMpIHtcclxuICBpZiAoIWV4dGVuc2lvbnMuZXh0X2Rpc2pvaW50X3RpbWVyX3F1ZXJ5KSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgLy8gUVVFUlkgUE9PTCBCRUdJTlxyXG4gIHZhciBxdWVyeVBvb2wgPSBbXTtcclxuICBmdW5jdGlvbiBhbGxvY1F1ZXJ5ICgpIHtcclxuICAgIHJldHVybiBxdWVyeVBvb2wucG9wKCkgfHwgZXh0ZW5zaW9ucy5leHRfZGlzam9pbnRfdGltZXJfcXVlcnkuY3JlYXRlUXVlcnlFWFQoKVxyXG4gIH1cclxuICBmdW5jdGlvbiBmcmVlUXVlcnkgKHF1ZXJ5KSB7XHJcbiAgICBxdWVyeVBvb2wucHVzaChxdWVyeSk7XHJcbiAgfVxyXG4gIC8vIFFVRVJZIFBPT0wgRU5EXHJcblxyXG4gIHZhciBwZW5kaW5nUXVlcmllcyA9IFtdO1xyXG4gIGZ1bmN0aW9uIGJlZ2luUXVlcnkgKHN0YXRzKSB7XHJcbiAgICB2YXIgcXVlcnkgPSBhbGxvY1F1ZXJ5KCk7XHJcbiAgICBleHRlbnNpb25zLmV4dF9kaXNqb2ludF90aW1lcl9xdWVyeS5iZWdpblF1ZXJ5RVhUKEdMX1RJTUVfRUxBUFNFRF9FWFQsIHF1ZXJ5KTtcclxuICAgIHBlbmRpbmdRdWVyaWVzLnB1c2gocXVlcnkpO1xyXG4gICAgcHVzaFNjb3BlU3RhdHMocGVuZGluZ1F1ZXJpZXMubGVuZ3RoIC0gMSwgcGVuZGluZ1F1ZXJpZXMubGVuZ3RoLCBzdGF0cyk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBlbmRRdWVyeSAoKSB7XHJcbiAgICBleHRlbnNpb25zLmV4dF9kaXNqb2ludF90aW1lcl9xdWVyeS5lbmRRdWVyeUVYVChHTF9USU1FX0VMQVBTRURfRVhUKTtcclxuICB9XHJcblxyXG4gIC8vXHJcbiAgLy8gUGVuZGluZyBzdGF0cyBwb29sLlxyXG4gIC8vXHJcbiAgZnVuY3Rpb24gUGVuZGluZ1N0YXRzICgpIHtcclxuICAgIHRoaXMuc3RhcnRRdWVyeUluZGV4ID0gLTE7XHJcbiAgICB0aGlzLmVuZFF1ZXJ5SW5kZXggPSAtMTtcclxuICAgIHRoaXMuc3VtID0gMDtcclxuICAgIHRoaXMuc3RhdHMgPSBudWxsO1xyXG4gIH1cclxuICB2YXIgcGVuZGluZ1N0YXRzUG9vbCA9IFtdO1xyXG4gIGZ1bmN0aW9uIGFsbG9jUGVuZGluZ1N0YXRzICgpIHtcclxuICAgIHJldHVybiBwZW5kaW5nU3RhdHNQb29sLnBvcCgpIHx8IG5ldyBQZW5kaW5nU3RhdHMoKVxyXG4gIH1cclxuICBmdW5jdGlvbiBmcmVlUGVuZGluZ1N0YXRzIChwZW5kaW5nU3RhdHMpIHtcclxuICAgIHBlbmRpbmdTdGF0c1Bvb2wucHVzaChwZW5kaW5nU3RhdHMpO1xyXG4gIH1cclxuICAvLyBQZW5kaW5nIHN0YXRzIHBvb2wgZW5kXHJcblxyXG4gIHZhciBwZW5kaW5nU3RhdHMgPSBbXTtcclxuICBmdW5jdGlvbiBwdXNoU2NvcGVTdGF0cyAoc3RhcnQsIGVuZCwgc3RhdHMpIHtcclxuICAgIHZhciBwcyA9IGFsbG9jUGVuZGluZ1N0YXRzKCk7XHJcbiAgICBwcy5zdGFydFF1ZXJ5SW5kZXggPSBzdGFydDtcclxuICAgIHBzLmVuZFF1ZXJ5SW5kZXggPSBlbmQ7XHJcbiAgICBwcy5zdW0gPSAwO1xyXG4gICAgcHMuc3RhdHMgPSBzdGF0cztcclxuICAgIHBlbmRpbmdTdGF0cy5wdXNoKHBzKTtcclxuICB9XHJcblxyXG4gIC8vIHdlIHNob3VsZCBjYWxsIHRoaXMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgZnJhbWUsXHJcbiAgLy8gaW4gb3JkZXIgdG8gdXBkYXRlIGdwdVRpbWVcclxuICB2YXIgdGltZVN1bSA9IFtdO1xyXG4gIHZhciBxdWVyeVB0ciA9IFtdO1xyXG4gIGZ1bmN0aW9uIHVwZGF0ZSAoKSB7XHJcbiAgICB2YXIgcHRyLCBpO1xyXG5cclxuICAgIHZhciBuID0gcGVuZGluZ1F1ZXJpZXMubGVuZ3RoO1xyXG4gICAgaWYgKG4gPT09IDApIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmVzZXJ2ZSBzcGFjZVxyXG4gICAgcXVlcnlQdHIubGVuZ3RoID0gTWF0aC5tYXgocXVlcnlQdHIubGVuZ3RoLCBuICsgMSk7XHJcbiAgICB0aW1lU3VtLmxlbmd0aCA9IE1hdGgubWF4KHRpbWVTdW0ubGVuZ3RoLCBuICsgMSk7XHJcbiAgICB0aW1lU3VtWzBdID0gMDtcclxuICAgIHF1ZXJ5UHRyWzBdID0gMDtcclxuXHJcbiAgICAvLyBVcGRhdGUgYWxsIHBlbmRpbmcgdGltZXIgcXVlcmllc1xyXG4gICAgdmFyIHF1ZXJ5VGltZSA9IDA7XHJcbiAgICBwdHIgPSAwO1xyXG4gICAgZm9yIChpID0gMDsgaSA8IHBlbmRpbmdRdWVyaWVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHZhciBxdWVyeSA9IHBlbmRpbmdRdWVyaWVzW2ldO1xyXG4gICAgICBpZiAoZXh0ZW5zaW9ucy5leHRfZGlzam9pbnRfdGltZXJfcXVlcnkuZ2V0UXVlcnlPYmplY3RFWFQocXVlcnksIEdMX1FVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUKSkge1xyXG4gICAgICAgIHF1ZXJ5VGltZSArPSBleHRlbnNpb25zLmV4dF9kaXNqb2ludF90aW1lcl9xdWVyeS5nZXRRdWVyeU9iamVjdEVYVChxdWVyeSwgR0xfUVVFUllfUkVTVUxUX0VYVCk7XHJcbiAgICAgICAgZnJlZVF1ZXJ5KHF1ZXJ5KTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBwZW5kaW5nUXVlcmllc1twdHIrK10gPSBxdWVyeTtcclxuICAgICAgfVxyXG4gICAgICB0aW1lU3VtW2kgKyAxXSA9IHF1ZXJ5VGltZTtcclxuICAgICAgcXVlcnlQdHJbaSArIDFdID0gcHRyO1xyXG4gICAgfVxyXG4gICAgcGVuZGluZ1F1ZXJpZXMubGVuZ3RoID0gcHRyO1xyXG5cclxuICAgIC8vIFVwZGF0ZSBhbGwgcGVuZGluZyBzdGF0IHF1ZXJpZXNcclxuICAgIHB0ciA9IDA7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ1N0YXRzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgIHZhciBzdGF0cyA9IHBlbmRpbmdTdGF0c1tpXTtcclxuICAgICAgdmFyIHN0YXJ0ID0gc3RhdHMuc3RhcnRRdWVyeUluZGV4O1xyXG4gICAgICB2YXIgZW5kID0gc3RhdHMuZW5kUXVlcnlJbmRleDtcclxuICAgICAgc3RhdHMuc3VtICs9IHRpbWVTdW1bZW5kXSAtIHRpbWVTdW1bc3RhcnRdO1xyXG4gICAgICB2YXIgc3RhcnRQdHIgPSBxdWVyeVB0cltzdGFydF07XHJcbiAgICAgIHZhciBlbmRQdHIgPSBxdWVyeVB0cltlbmRdO1xyXG4gICAgICBpZiAoZW5kUHRyID09PSBzdGFydFB0cikge1xyXG4gICAgICAgIHN0YXRzLnN0YXRzLmdwdVRpbWUgKz0gc3RhdHMuc3VtIC8gMWU2O1xyXG4gICAgICAgIGZyZWVQZW5kaW5nU3RhdHMoc3RhdHMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN0YXRzLnN0YXJ0UXVlcnlJbmRleCA9IHN0YXJ0UHRyO1xyXG4gICAgICAgIHN0YXRzLmVuZFF1ZXJ5SW5kZXggPSBlbmRQdHI7XHJcbiAgICAgICAgcGVuZGluZ1N0YXRzW3B0cisrXSA9IHN0YXRzO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwZW5kaW5nU3RhdHMubGVuZ3RoID0gcHRyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGJlZ2luUXVlcnk6IGJlZ2luUXVlcnksXHJcbiAgICBlbmRRdWVyeTogZW5kUXVlcnksXHJcbiAgICBwdXNoU2NvcGVTdGF0czogcHVzaFNjb3BlU3RhdHMsXHJcbiAgICB1cGRhdGU6IHVwZGF0ZSxcclxuICAgIGdldE51bVBlbmRpbmdRdWVyaWVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBwZW5kaW5nUXVlcmllcy5sZW5ndGhcclxuICAgIH0sXHJcbiAgICBjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICBxdWVyeVBvb2wucHVzaC5hcHBseShxdWVyeVBvb2wsIHBlbmRpbmdRdWVyaWVzKTtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWVyeVBvb2wubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBleHRlbnNpb25zLmV4dF9kaXNqb2ludF90aW1lcl9xdWVyeS5kZWxldGVRdWVyeUVYVChxdWVyeVBvb2xbaV0pO1xyXG4gICAgICB9XHJcbiAgICAgIHBlbmRpbmdRdWVyaWVzLmxlbmd0aCA9IDA7XHJcbiAgICAgIHF1ZXJ5UG9vbC5sZW5ndGggPSAwO1xyXG4gICAgfSxcclxuICAgIHJlc3RvcmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcGVuZGluZ1F1ZXJpZXMubGVuZ3RoID0gMDtcclxuICAgICAgcXVlcnlQb29sLmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xuXG52YXIgR0xfQ09MT1JfQlVGRkVSX0JJVCA9IDE2Mzg0O1xyXG52YXIgR0xfREVQVEhfQlVGRkVSX0JJVCA9IDI1NjtcclxudmFyIEdMX1NURU5DSUxfQlVGRkVSX0JJVCA9IDEwMjQ7XHJcblxyXG52YXIgR0xfQVJSQVlfQlVGRkVSID0gMzQ5NjI7XHJcblxyXG52YXIgQ09OVEVYVF9MT1NUX0VWRU5UID0gJ3dlYmdsY29udGV4dGxvc3QnO1xyXG52YXIgQ09OVEVYVF9SRVNUT1JFRF9FVkVOVCA9ICd3ZWJnbGNvbnRleHRyZXN0b3JlZCc7XHJcblxyXG52YXIgRFlOX1BST1AgPSAxO1xyXG52YXIgRFlOX0NPTlRFWFQgPSAyO1xyXG52YXIgRFlOX1NUQVRFID0gMztcclxuXHJcbmZ1bmN0aW9uIGZpbmQgKGhheXN0YWNrLCBuZWVkbGUpIHtcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IGhheXN0YWNrLmxlbmd0aDsgKytpKSB7XHJcbiAgICBpZiAoaGF5c3RhY2tbaV0gPT09IG5lZWRsZSkge1xyXG4gICAgICByZXR1cm4gaVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gLTFcclxufVxyXG5cclxuZnVuY3Rpb24gd3JhcFJFR0wgKGFyZ3MpIHtcclxuICB2YXIgY29uZmlnID0gcGFyc2VBcmdzKGFyZ3MpO1xyXG4gIGlmICghY29uZmlnKSB7XHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuXHJcbiAgdmFyIGdsID0gY29uZmlnLmdsO1xyXG4gIHZhciBnbEF0dHJpYnV0ZXMgPSBnbC5nZXRDb250ZXh0QXR0cmlidXRlcygpO1xyXG4gIHZhciBjb250ZXh0TG9zdCA9IGdsLmlzQ29udGV4dExvc3QoKTtcclxuXHJcbiAgdmFyIGV4dGVuc2lvblN0YXRlID0gY3JlYXRlRXh0ZW5zaW9uQ2FjaGUoZ2wsIGNvbmZpZyk7XHJcbiAgaWYgKCFleHRlbnNpb25TdGF0ZSkge1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIHZhciBzdHJpbmdTdG9yZSA9IGNyZWF0ZVN0cmluZ1N0b3JlKCk7XHJcbiAgdmFyIHN0YXRzJCQxID0gc3RhdHMoKTtcclxuICB2YXIgZXh0ZW5zaW9ucyA9IGV4dGVuc2lvblN0YXRlLmV4dGVuc2lvbnM7XHJcbiAgdmFyIHRpbWVyID0gY3JlYXRlVGltZXIoZ2wsIGV4dGVuc2lvbnMpO1xyXG5cclxuICB2YXIgU1RBUlRfVElNRSA9IGNsb2NrKCk7XHJcbiAgdmFyIFdJRFRIID0gZ2wuZHJhd2luZ0J1ZmZlcldpZHRoO1xyXG4gIHZhciBIRUlHSFQgPSBnbC5kcmF3aW5nQnVmZmVySGVpZ2h0O1xyXG5cclxuICB2YXIgY29udGV4dFN0YXRlID0ge1xyXG4gICAgdGljazogMCxcclxuICAgIHRpbWU6IDAsXHJcbiAgICB2aWV3cG9ydFdpZHRoOiBXSURUSCxcclxuICAgIHZpZXdwb3J0SGVpZ2h0OiBIRUlHSFQsXHJcbiAgICBmcmFtZWJ1ZmZlcldpZHRoOiBXSURUSCxcclxuICAgIGZyYW1lYnVmZmVySGVpZ2h0OiBIRUlHSFQsXHJcbiAgICBkcmF3aW5nQnVmZmVyV2lkdGg6IFdJRFRILFxyXG4gICAgZHJhd2luZ0J1ZmZlckhlaWdodDogSEVJR0hULFxyXG4gICAgcGl4ZWxSYXRpbzogY29uZmlnLnBpeGVsUmF0aW9cclxuICB9O1xyXG4gIHZhciB1bmlmb3JtU3RhdGUgPSB7fTtcclxuICB2YXIgZHJhd1N0YXRlID0ge1xyXG4gICAgZWxlbWVudHM6IG51bGwsXHJcbiAgICBwcmltaXRpdmU6IDQsIC8vIEdMX1RSSUFOR0xFU1xyXG4gICAgY291bnQ6IC0xLFxyXG4gICAgb2Zmc2V0OiAwLFxyXG4gICAgaW5zdGFuY2VzOiAtMVxyXG4gIH07XHJcblxyXG4gIHZhciBsaW1pdHMgPSB3cmFwTGltaXRzKGdsLCBleHRlbnNpb25zKTtcclxuICB2YXIgYXR0cmlidXRlU3RhdGUgPSB3cmFwQXR0cmlidXRlU3RhdGUoXHJcbiAgICBnbCxcclxuICAgIGV4dGVuc2lvbnMsXHJcbiAgICBsaW1pdHMsXHJcbiAgICBzdHJpbmdTdG9yZSk7XHJcbiAgdmFyIGJ1ZmZlclN0YXRlID0gd3JhcEJ1ZmZlclN0YXRlKFxyXG4gICAgZ2wsXHJcbiAgICBzdGF0cyQkMSxcclxuICAgIGNvbmZpZyxcclxuICAgIGF0dHJpYnV0ZVN0YXRlKTtcclxuICB2YXIgZWxlbWVudFN0YXRlID0gd3JhcEVsZW1lbnRzU3RhdGUoZ2wsIGV4dGVuc2lvbnMsIGJ1ZmZlclN0YXRlLCBzdGF0cyQkMSk7XHJcbiAgdmFyIHNoYWRlclN0YXRlID0gd3JhcFNoYWRlclN0YXRlKGdsLCBzdHJpbmdTdG9yZSwgc3RhdHMkJDEsIGNvbmZpZyk7XHJcbiAgdmFyIHRleHR1cmVTdGF0ZSA9IGNyZWF0ZVRleHR1cmVTZXQoXHJcbiAgICBnbCxcclxuICAgIGV4dGVuc2lvbnMsXHJcbiAgICBsaW1pdHMsXHJcbiAgICBmdW5jdGlvbiAoKSB7IGNvcmUucHJvY3MucG9sbCgpOyB9LFxyXG4gICAgY29udGV4dFN0YXRlLFxyXG4gICAgc3RhdHMkJDEsXHJcbiAgICBjb25maWcpO1xyXG4gIHZhciByZW5kZXJidWZmZXJTdGF0ZSA9IHdyYXBSZW5kZXJidWZmZXJzKGdsLCBleHRlbnNpb25zLCBsaW1pdHMsIHN0YXRzJCQxLCBjb25maWcpO1xyXG4gIHZhciBmcmFtZWJ1ZmZlclN0YXRlID0gd3JhcEZCT1N0YXRlKFxyXG4gICAgZ2wsXHJcbiAgICBleHRlbnNpb25zLFxyXG4gICAgbGltaXRzLFxyXG4gICAgdGV4dHVyZVN0YXRlLFxyXG4gICAgcmVuZGVyYnVmZmVyU3RhdGUsXHJcbiAgICBzdGF0cyQkMSk7XHJcbiAgdmFyIGNvcmUgPSByZWdsQ29yZShcclxuICAgIGdsLFxyXG4gICAgc3RyaW5nU3RvcmUsXHJcbiAgICBleHRlbnNpb25zLFxyXG4gICAgbGltaXRzLFxyXG4gICAgYnVmZmVyU3RhdGUsXHJcbiAgICBlbGVtZW50U3RhdGUsXHJcbiAgICB0ZXh0dXJlU3RhdGUsXHJcbiAgICBmcmFtZWJ1ZmZlclN0YXRlLFxyXG4gICAgdW5pZm9ybVN0YXRlLFxyXG4gICAgYXR0cmlidXRlU3RhdGUsXHJcbiAgICBzaGFkZXJTdGF0ZSxcclxuICAgIGRyYXdTdGF0ZSxcclxuICAgIGNvbnRleHRTdGF0ZSxcclxuICAgIHRpbWVyLFxyXG4gICAgY29uZmlnKTtcclxuICB2YXIgcmVhZFBpeGVscyA9IHdyYXBSZWFkUGl4ZWxzKFxyXG4gICAgZ2wsXHJcbiAgICBmcmFtZWJ1ZmZlclN0YXRlLFxyXG4gICAgY29yZS5wcm9jcy5wb2xsLFxyXG4gICAgY29udGV4dFN0YXRlLFxyXG4gICAgZ2xBdHRyaWJ1dGVzLCBleHRlbnNpb25zLCBsaW1pdHMpO1xyXG5cclxuICB2YXIgbmV4dFN0YXRlID0gY29yZS5uZXh0O1xyXG4gIHZhciBjYW52YXMgPSBnbC5jYW52YXM7XHJcblxyXG4gIHZhciByYWZDYWxsYmFja3MgPSBbXTtcclxuICB2YXIgbG9zc0NhbGxiYWNrcyA9IFtdO1xyXG4gIHZhciByZXN0b3JlQ2FsbGJhY2tzID0gW107XHJcbiAgdmFyIGRlc3Ryb3lDYWxsYmFja3MgPSBbY29uZmlnLm9uRGVzdHJveV07XHJcblxyXG4gIHZhciBhY3RpdmVSQUYgPSBudWxsO1xyXG4gIGZ1bmN0aW9uIGhhbmRsZVJBRiAoKSB7XHJcbiAgICBpZiAocmFmQ2FsbGJhY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBpZiAodGltZXIpIHtcclxuICAgICAgICB0aW1lci51cGRhdGUoKTtcclxuICAgICAgfVxyXG4gICAgICBhY3RpdmVSQUYgPSBudWxsO1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICAvLyBzY2hlZHVsZSBuZXh0IGFuaW1hdGlvbiBmcmFtZVxyXG4gICAgYWN0aXZlUkFGID0gcmFmLm5leHQoaGFuZGxlUkFGKTtcclxuXHJcbiAgICAvLyBwb2xsIGZvciBjaGFuZ2VzXHJcbiAgICBwb2xsKCk7XHJcblxyXG4gICAgLy8gZmlyZSBhIGNhbGxiYWNrIGZvciBhbGwgcGVuZGluZyByYWZzXHJcbiAgICBmb3IgKHZhciBpID0gcmFmQ2FsbGJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgIHZhciBjYiA9IHJhZkNhbGxiYWNrc1tpXTtcclxuICAgICAgaWYgKGNiKSB7XHJcbiAgICAgICAgY2IoY29udGV4dFN0YXRlLCBudWxsLCAwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGZsdXNoIGFsbCBwZW5kaW5nIHdlYmdsIGNhbGxzXHJcbiAgICBnbC5mbHVzaCgpO1xyXG5cclxuICAgIC8vIHBvbGwgR1BVIHRpbWVycyAqYWZ0ZXIqIGdsLmZsdXNoIHNvIHdlIGRvbid0IGRlbGF5IGNvbW1hbmQgZGlzcGF0Y2hcclxuICAgIGlmICh0aW1lcikge1xyXG4gICAgICB0aW1lci51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0UkFGICgpIHtcclxuICAgIGlmICghYWN0aXZlUkFGICYmIHJhZkNhbGxiYWNrcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGFjdGl2ZVJBRiA9IHJhZi5uZXh0KGhhbmRsZVJBRik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdG9wUkFGICgpIHtcclxuICAgIGlmIChhY3RpdmVSQUYpIHtcclxuICAgICAgcmFmLmNhbmNlbChoYW5kbGVSQUYpO1xyXG4gICAgICBhY3RpdmVSQUYgPSBudWxsO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlQ29udGV4dExvc3MgKGV2ZW50KSB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgIC8vIHNldCBjb250ZXh0IGxvc3QgZmxhZ1xyXG4gICAgY29udGV4dExvc3QgPSB0cnVlO1xyXG5cclxuICAgIC8vIHBhdXNlIHJlcXVlc3QgYW5pbWF0aW9uIGZyYW1lXHJcbiAgICBzdG9wUkFGKCk7XHJcblxyXG4gICAgLy8gbG9zZSBjb250ZXh0XHJcbiAgICBsb3NzQ2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgIGNiKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUNvbnRleHRSZXN0b3JlZCAoZXZlbnQpIHtcclxuICAgIC8vIGNsZWFyIGVycm9yIGNvZGVcclxuICAgIGdsLmdldEVycm9yKCk7XHJcblxyXG4gICAgLy8gY2xlYXIgY29udGV4dCBsb3N0IGZsYWdcclxuICAgIGNvbnRleHRMb3N0ID0gZmFsc2U7XHJcblxyXG4gICAgLy8gcmVmcmVzaCBzdGF0ZVxyXG4gICAgZXh0ZW5zaW9uU3RhdGUucmVzdG9yZSgpO1xyXG4gICAgc2hhZGVyU3RhdGUucmVzdG9yZSgpO1xyXG4gICAgYnVmZmVyU3RhdGUucmVzdG9yZSgpO1xyXG4gICAgdGV4dHVyZVN0YXRlLnJlc3RvcmUoKTtcclxuICAgIHJlbmRlcmJ1ZmZlclN0YXRlLnJlc3RvcmUoKTtcclxuICAgIGZyYW1lYnVmZmVyU3RhdGUucmVzdG9yZSgpO1xyXG4gICAgaWYgKHRpbWVyKSB7XHJcbiAgICAgIHRpbWVyLnJlc3RvcmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWZyZXNoIHN0YXRlXHJcbiAgICBjb3JlLnByb2NzLnJlZnJlc2goKTtcclxuXHJcbiAgICAvLyByZXN0YXJ0IFJBRlxyXG4gICAgc3RhcnRSQUYoKTtcclxuXHJcbiAgICAvLyByZXN0b3JlIGNvbnRleHRcclxuICAgIHJlc3RvcmVDYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgY2IoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgaWYgKGNhbnZhcykge1xyXG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoQ09OVEVYVF9MT1NUX0VWRU5ULCBoYW5kbGVDb250ZXh0TG9zcywgZmFsc2UpO1xyXG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoQ09OVEVYVF9SRVNUT1JFRF9FVkVOVCwgaGFuZGxlQ29udGV4dFJlc3RvcmVkLCBmYWxzZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBkZXN0cm95ICgpIHtcclxuICAgIHJhZkNhbGxiYWNrcy5sZW5ndGggPSAwO1xyXG4gICAgc3RvcFJBRigpO1xyXG5cclxuICAgIGlmIChjYW52YXMpIHtcclxuICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ09OVEVYVF9MT1NUX0VWRU5ULCBoYW5kbGVDb250ZXh0TG9zcyk7XHJcbiAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKENPTlRFWFRfUkVTVE9SRURfRVZFTlQsIGhhbmRsZUNvbnRleHRSZXN0b3JlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hhZGVyU3RhdGUuY2xlYXIoKTtcclxuICAgIGZyYW1lYnVmZmVyU3RhdGUuY2xlYXIoKTtcclxuICAgIHJlbmRlcmJ1ZmZlclN0YXRlLmNsZWFyKCk7XHJcbiAgICB0ZXh0dXJlU3RhdGUuY2xlYXIoKTtcclxuICAgIGVsZW1lbnRTdGF0ZS5jbGVhcigpO1xyXG4gICAgYnVmZmVyU3RhdGUuY2xlYXIoKTtcclxuXHJcbiAgICBpZiAodGltZXIpIHtcclxuICAgICAgdGltZXIuY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBkZXN0cm95Q2FsbGJhY2tzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgIGNiKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNvbXBpbGVQcm9jZWR1cmUgKG9wdGlvbnMpIHtcclxuICAgIGNoZWNrJDEoISFvcHRpb25zLCAnaW52YWxpZCBhcmdzIHRvIHJlZ2woey4uLn0pJyk7XHJcbiAgICBjaGVjayQxLnR5cGUob3B0aW9ucywgJ29iamVjdCcsICdpbnZhbGlkIGFyZ3MgdG8gcmVnbCh7Li4ufSknKTtcclxuXHJcbiAgICBmdW5jdGlvbiBmbGF0dGVuTmVzdGVkT3B0aW9ucyAob3B0aW9ucykge1xyXG4gICAgICB2YXIgcmVzdWx0ID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcclxuICAgICAgZGVsZXRlIHJlc3VsdC51bmlmb3JtcztcclxuICAgICAgZGVsZXRlIHJlc3VsdC5hdHRyaWJ1dGVzO1xyXG4gICAgICBkZWxldGUgcmVzdWx0LmNvbnRleHQ7XHJcblxyXG4gICAgICBpZiAoJ3N0ZW5jaWwnIGluIHJlc3VsdCAmJiByZXN1bHQuc3RlbmNpbC5vcCkge1xyXG4gICAgICAgIHJlc3VsdC5zdGVuY2lsLm9wQmFjayA9IHJlc3VsdC5zdGVuY2lsLm9wRnJvbnQgPSByZXN1bHQuc3RlbmNpbC5vcDtcclxuICAgICAgICBkZWxldGUgcmVzdWx0LnN0ZW5jaWwub3A7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIG1lcmdlIChuYW1lKSB7XHJcbiAgICAgICAgaWYgKG5hbWUgaW4gcmVzdWx0KSB7XHJcbiAgICAgICAgICB2YXIgY2hpbGQgPSByZXN1bHRbbmFtZV07XHJcbiAgICAgICAgICBkZWxldGUgcmVzdWx0W25hbWVdO1xyXG4gICAgICAgICAgT2JqZWN0LmtleXMoY2hpbGQpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcclxuICAgICAgICAgICAgcmVzdWx0W25hbWUgKyAnLicgKyBwcm9wXSA9IGNoaWxkW3Byb3BdO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIG1lcmdlKCdibGVuZCcpO1xyXG4gICAgICBtZXJnZSgnZGVwdGgnKTtcclxuICAgICAgbWVyZ2UoJ2N1bGwnKTtcclxuICAgICAgbWVyZ2UoJ3N0ZW5jaWwnKTtcclxuICAgICAgbWVyZ2UoJ3BvbHlnb25PZmZzZXQnKTtcclxuICAgICAgbWVyZ2UoJ3NjaXNzb3InKTtcclxuICAgICAgbWVyZ2UoJ3NhbXBsZScpO1xyXG5cclxuICAgICAgcmV0dXJuIHJlc3VsdFxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHNlcGFyYXRlRHluYW1pYyAob2JqZWN0KSB7XHJcbiAgICAgIHZhciBzdGF0aWNJdGVtcyA9IHt9O1xyXG4gICAgICB2YXIgZHluYW1pY0l0ZW1zID0ge307XHJcbiAgICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaChmdW5jdGlvbiAob3B0aW9uKSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0W29wdGlvbl07XHJcbiAgICAgICAgaWYgKGR5bmFtaWMuaXNEeW5hbWljKHZhbHVlKSkge1xyXG4gICAgICAgICAgZHluYW1pY0l0ZW1zW29wdGlvbl0gPSBkeW5hbWljLnVuYm94KHZhbHVlLCBvcHRpb24pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdGF0aWNJdGVtc1tvcHRpb25dID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBkeW5hbWljOiBkeW5hbWljSXRlbXMsXHJcbiAgICAgICAgc3RhdGljOiBzdGF0aWNJdGVtc1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gVHJlYXQgY29udGV4dCB2YXJpYWJsZXMgc2VwYXJhdGUgZnJvbSBvdGhlciBkeW5hbWljIHZhcmlhYmxlc1xyXG4gICAgdmFyIGNvbnRleHQgPSBzZXBhcmF0ZUR5bmFtaWMob3B0aW9ucy5jb250ZXh0IHx8IHt9KTtcclxuICAgIHZhciB1bmlmb3JtcyA9IHNlcGFyYXRlRHluYW1pYyhvcHRpb25zLnVuaWZvcm1zIHx8IHt9KTtcclxuICAgIHZhciBhdHRyaWJ1dGVzID0gc2VwYXJhdGVEeW5hbWljKG9wdGlvbnMuYXR0cmlidXRlcyB8fCB7fSk7XHJcbiAgICB2YXIgb3B0cyA9IHNlcGFyYXRlRHluYW1pYyhmbGF0dGVuTmVzdGVkT3B0aW9ucyhvcHRpb25zKSk7XHJcblxyXG4gICAgdmFyIHN0YXRzJCQxID0ge1xyXG4gICAgICBncHVUaW1lOiAwLjAsXHJcbiAgICAgIGNwdVRpbWU6IDAuMCxcclxuICAgICAgY291bnQ6IDBcclxuICAgIH07XHJcblxyXG4gICAgdmFyIGNvbXBpbGVkID0gY29yZS5jb21waWxlKG9wdHMsIGF0dHJpYnV0ZXMsIHVuaWZvcm1zLCBjb250ZXh0LCBzdGF0cyQkMSk7XHJcblxyXG4gICAgdmFyIGRyYXcgPSBjb21waWxlZC5kcmF3O1xyXG4gICAgdmFyIGJhdGNoID0gY29tcGlsZWQuYmF0Y2g7XHJcbiAgICB2YXIgc2NvcGUgPSBjb21waWxlZC5zY29wZTtcclxuXHJcbiAgICAvLyBGSVhNRTogd2Ugc2hvdWxkIG1vZGlmeSBjb2RlIGdlbmVyYXRpb24gZm9yIGJhdGNoIGNvbW1hbmRzIHNvIHRoaXNcclxuICAgIC8vIGlzbid0IG5lY2Vzc2FyeVxyXG4gICAgdmFyIEVNUFRZX0FSUkFZID0gW107XHJcbiAgICBmdW5jdGlvbiByZXNlcnZlIChjb3VudCkge1xyXG4gICAgICB3aGlsZSAoRU1QVFlfQVJSQVkubGVuZ3RoIDwgY291bnQpIHtcclxuICAgICAgICBFTVBUWV9BUlJBWS5wdXNoKG51bGwpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBFTVBUWV9BUlJBWVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIFJFR0xDb21tYW5kIChhcmdzLCBib2R5KSB7XHJcbiAgICAgIHZhciBpO1xyXG4gICAgICBpZiAoY29udGV4dExvc3QpIHtcclxuICAgICAgICBjaGVjayQxLnJhaXNlKCdjb250ZXh0IGxvc3QnKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAodHlwZW9mIGFyZ3MgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gc2NvcGUuY2FsbCh0aGlzLCBudWxsLCBhcmdzLCAwKVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBhcmdzID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFyZ3M7ICsraSkge1xyXG4gICAgICAgICAgICBzY29wZS5jYWxsKHRoaXMsIG51bGwsIGJvZHksIGkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZ3MpKSB7XHJcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICBzY29wZS5jYWxsKHRoaXMsIGFyZ3NbaV0sIGJvZHksIGkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBzY29wZS5jYWxsKHRoaXMsIGFyZ3MsIGJvZHksIDApXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmdzID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGlmIChhcmdzID4gMCkge1xyXG4gICAgICAgICAgcmV0dXJuIGJhdGNoLmNhbGwodGhpcywgcmVzZXJ2ZShhcmdzIHwgMCksIGFyZ3MgfCAwKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGFyZ3MpKSB7XHJcbiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXR1cm4gYmF0Y2guY2FsbCh0aGlzLCBhcmdzLCBhcmdzLmxlbmd0aClcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGRyYXcuY2FsbCh0aGlzLCBhcmdzKVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV4dGVuZChSRUdMQ29tbWFuZCwge1xyXG4gICAgICBzdGF0czogc3RhdHMkJDFcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICB2YXIgc2V0RkJPID0gZnJhbWVidWZmZXJTdGF0ZS5zZXRGQk8gPSBjb21waWxlUHJvY2VkdXJlKHtcclxuICAgIGZyYW1lYnVmZmVyOiBkeW5hbWljLmRlZmluZS5jYWxsKG51bGwsIERZTl9QUk9QLCAnZnJhbWVidWZmZXInKVxyXG4gIH0pO1xyXG5cclxuICBmdW5jdGlvbiBjbGVhckltcGwgKF8sIG9wdGlvbnMpIHtcclxuICAgIHZhciBjbGVhckZsYWdzID0gMDtcclxuICAgIGNvcmUucHJvY3MucG9sbCgpO1xyXG5cclxuICAgIHZhciBjID0gb3B0aW9ucy5jb2xvcjtcclxuICAgIGlmIChjKSB7XHJcbiAgICAgIGdsLmNsZWFyQ29sb3IoK2NbMF0gfHwgMCwgK2NbMV0gfHwgMCwgK2NbMl0gfHwgMCwgK2NbM10gfHwgMCk7XHJcbiAgICAgIGNsZWFyRmxhZ3MgfD0gR0xfQ09MT1JfQlVGRkVSX0JJVDtcclxuICAgIH1cclxuICAgIGlmICgnZGVwdGgnIGluIG9wdGlvbnMpIHtcclxuICAgICAgZ2wuY2xlYXJEZXB0aCgrb3B0aW9ucy5kZXB0aCk7XHJcbiAgICAgIGNsZWFyRmxhZ3MgfD0gR0xfREVQVEhfQlVGRkVSX0JJVDtcclxuICAgIH1cclxuICAgIGlmICgnc3RlbmNpbCcgaW4gb3B0aW9ucykge1xyXG4gICAgICBnbC5jbGVhclN0ZW5jaWwob3B0aW9ucy5zdGVuY2lsIHwgMCk7XHJcbiAgICAgIGNsZWFyRmxhZ3MgfD0gR0xfU1RFTkNJTF9CVUZGRVJfQklUO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrJDEoISFjbGVhckZsYWdzLCAnY2FsbGVkIHJlZ2wuY2xlYXIgd2l0aCBubyBidWZmZXIgc3BlY2lmaWVkJyk7XHJcbiAgICBnbC5jbGVhcihjbGVhckZsYWdzKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGNsZWFyIChvcHRpb25zKSB7XHJcbiAgICBjaGVjayQxKFxyXG4gICAgICB0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgb3B0aW9ucyxcclxuICAgICAgJ3JlZ2wuY2xlYXIoKSB0YWtlcyBhbiBvYmplY3QgYXMgaW5wdXQnKTtcclxuICAgIGlmICgnZnJhbWVidWZmZXInIGluIG9wdGlvbnMpIHtcclxuICAgICAgaWYgKG9wdGlvbnMuZnJhbWVidWZmZXIgJiZcclxuICAgICAgICAgIG9wdGlvbnMuZnJhbWVidWZmZXJfcmVnbFR5cGUgPT09ICdmcmFtZWJ1ZmZlckN1YmUnKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA2OyArK2kpIHtcclxuICAgICAgICAgIHNldEZCTyhleHRlbmQoe1xyXG4gICAgICAgICAgICBmcmFtZWJ1ZmZlcjogb3B0aW9ucy5mcmFtZWJ1ZmZlci5mYWNlc1tpXVxyXG4gICAgICAgICAgfSwgb3B0aW9ucyksIGNsZWFySW1wbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNldEZCTyhvcHRpb25zLCBjbGVhckltcGwpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjbGVhckltcGwobnVsbCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBmcmFtZSAoY2IpIHtcclxuICAgIGNoZWNrJDEudHlwZShjYiwgJ2Z1bmN0aW9uJywgJ3JlZ2wuZnJhbWUoKSBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgIHJhZkNhbGxiYWNrcy5wdXNoKGNiKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjYW5jZWwgKCkge1xyXG4gICAgICAvLyBGSVhNRTogIHNob3VsZCB3ZSBjaGVjayBzb21ldGhpbmcgb3RoZXIgdGhhbiBlcXVhbHMgY2IgaGVyZT9cclxuICAgICAgLy8gd2hhdCBpZiBhIHVzZXIgY2FsbHMgZnJhbWUgdHdpY2Ugd2l0aCB0aGUgc2FtZSBjYWxsYmFjay4uLlxyXG4gICAgICAvL1xyXG4gICAgICB2YXIgaSA9IGZpbmQocmFmQ2FsbGJhY2tzLCBjYik7XHJcbiAgICAgIGNoZWNrJDEoaSA+PSAwLCAnY2Fubm90IGNhbmNlbCBhIGZyYW1lIHR3aWNlJyk7XHJcbiAgICAgIGZ1bmN0aW9uIHBlbmRpbmdDYW5jZWwgKCkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IGZpbmQocmFmQ2FsbGJhY2tzLCBwZW5kaW5nQ2FuY2VsKTtcclxuICAgICAgICByYWZDYWxsYmFja3NbaW5kZXhdID0gcmFmQ2FsbGJhY2tzW3JhZkNhbGxiYWNrcy5sZW5ndGggLSAxXTtcclxuICAgICAgICByYWZDYWxsYmFja3MubGVuZ3RoIC09IDE7XHJcbiAgICAgICAgaWYgKHJhZkNhbGxiYWNrcy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgc3RvcFJBRigpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByYWZDYWxsYmFja3NbaV0gPSBwZW5kaW5nQ2FuY2VsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0UkFGKCk7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2FuY2VsOiBjYW5jZWxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHBvbGwgdmlld3BvcnRcclxuICBmdW5jdGlvbiBwb2xsVmlld3BvcnQgKCkge1xyXG4gICAgdmFyIHZpZXdwb3J0ID0gbmV4dFN0YXRlLnZpZXdwb3J0O1xyXG4gICAgdmFyIHNjaXNzb3JCb3ggPSBuZXh0U3RhdGUuc2Npc3Nvcl9ib3g7XHJcbiAgICB2aWV3cG9ydFswXSA9IHZpZXdwb3J0WzFdID0gc2Npc3NvckJveFswXSA9IHNjaXNzb3JCb3hbMV0gPSAwO1xyXG4gICAgY29udGV4dFN0YXRlLnZpZXdwb3J0V2lkdGggPVxyXG4gICAgICBjb250ZXh0U3RhdGUuZnJhbWVidWZmZXJXaWR0aCA9XHJcbiAgICAgIGNvbnRleHRTdGF0ZS5kcmF3aW5nQnVmZmVyV2lkdGggPVxyXG4gICAgICB2aWV3cG9ydFsyXSA9XHJcbiAgICAgIHNjaXNzb3JCb3hbMl0gPSBnbC5kcmF3aW5nQnVmZmVyV2lkdGg7XHJcbiAgICBjb250ZXh0U3RhdGUudmlld3BvcnRIZWlnaHQgPVxyXG4gICAgICBjb250ZXh0U3RhdGUuZnJhbWVidWZmZXJIZWlnaHQgPVxyXG4gICAgICBjb250ZXh0U3RhdGUuZHJhd2luZ0J1ZmZlckhlaWdodCA9XHJcbiAgICAgIHZpZXdwb3J0WzNdID1cclxuICAgICAgc2Npc3NvckJveFszXSA9IGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBwb2xsICgpIHtcclxuICAgIGNvbnRleHRTdGF0ZS50aWNrICs9IDE7XHJcbiAgICBjb250ZXh0U3RhdGUudGltZSA9IG5vdygpO1xyXG4gICAgcG9sbFZpZXdwb3J0KCk7XHJcbiAgICBjb3JlLnByb2NzLnBvbGwoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlZnJlc2ggKCkge1xyXG4gICAgcG9sbFZpZXdwb3J0KCk7XHJcbiAgICBjb3JlLnByb2NzLnJlZnJlc2goKTtcclxuICAgIGlmICh0aW1lcikge1xyXG4gICAgICB0aW1lci51cGRhdGUoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG5vdyAoKSB7XHJcbiAgICByZXR1cm4gKGNsb2NrKCkgLSBTVEFSVF9USU1FKSAvIDEwMDAuMFxyXG4gIH1cclxuXHJcbiAgcmVmcmVzaCgpO1xyXG5cclxuICBmdW5jdGlvbiBhZGRMaXN0ZW5lciAoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICBjaGVjayQxLnR5cGUoY2FsbGJhY2ssICdmdW5jdGlvbicsICdsaXN0ZW5lciBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuXHJcbiAgICB2YXIgY2FsbGJhY2tzO1xyXG4gICAgc3dpdGNoIChldmVudCkge1xyXG4gICAgICBjYXNlICdmcmFtZSc6XHJcbiAgICAgICAgcmV0dXJuIGZyYW1lKGNhbGxiYWNrKVxyXG4gICAgICBjYXNlICdsb3N0JzpcclxuICAgICAgICBjYWxsYmFja3MgPSBsb3NzQ2FsbGJhY2tzO1xyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ3Jlc3RvcmUnOlxyXG4gICAgICAgIGNhbGxiYWNrcyA9IHJlc3RvcmVDYWxsYmFja3M7XHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSAnZGVzdHJveSc6XHJcbiAgICAgICAgY2FsbGJhY2tzID0gZGVzdHJveUNhbGxiYWNrcztcclxuICAgICAgICBicmVha1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGNoZWNrJDEucmFpc2UoJ2ludmFsaWQgZXZlbnQsIG11c3QgYmUgb25lIG9mIGZyYW1lLGxvc3QscmVzdG9yZSxkZXN0cm95Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgIGlmIChjYWxsYmFja3NbaV0gPT09IGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrc1tpXSA9IGNhbGxiYWNrc1tjYWxsYmFja3MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wb3AoKTtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB2YXIgcmVnbCA9IGV4dGVuZChjb21waWxlUHJvY2VkdXJlLCB7XHJcbiAgICAvLyBDbGVhciBjdXJyZW50IEZCT1xyXG4gICAgY2xlYXI6IGNsZWFyLFxyXG5cclxuICAgIC8vIFNob3J0IGN1dHMgZm9yIGR5bmFtaWMgdmFyaWFibGVzXHJcbiAgICBwcm9wOiBkeW5hbWljLmRlZmluZS5iaW5kKG51bGwsIERZTl9QUk9QKSxcclxuICAgIGNvbnRleHQ6IGR5bmFtaWMuZGVmaW5lLmJpbmQobnVsbCwgRFlOX0NPTlRFWFQpLFxyXG4gICAgdGhpczogZHluYW1pYy5kZWZpbmUuYmluZChudWxsLCBEWU5fU1RBVEUpLFxyXG5cclxuICAgIC8vIGV4ZWN1dGVzIGFuIGVtcHR5IGRyYXcgY29tbWFuZFxyXG4gICAgZHJhdzogY29tcGlsZVByb2NlZHVyZSh7fSksXHJcblxyXG4gICAgLy8gUmVzb3VyY2VzXHJcbiAgICBidWZmZXI6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgIHJldHVybiBidWZmZXJTdGF0ZS5jcmVhdGUob3B0aW9ucywgR0xfQVJSQVlfQlVGRkVSLCBmYWxzZSwgZmFsc2UpXHJcbiAgICB9LFxyXG4gICAgZWxlbWVudHM6IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgIHJldHVybiBlbGVtZW50U3RhdGUuY3JlYXRlKG9wdGlvbnMsIGZhbHNlKVxyXG4gICAgfSxcclxuICAgIHRleHR1cmU6IHRleHR1cmVTdGF0ZS5jcmVhdGUyRCxcclxuICAgIGN1YmU6IHRleHR1cmVTdGF0ZS5jcmVhdGVDdWJlLFxyXG4gICAgcmVuZGVyYnVmZmVyOiByZW5kZXJidWZmZXJTdGF0ZS5jcmVhdGUsXHJcbiAgICBmcmFtZWJ1ZmZlcjogZnJhbWVidWZmZXJTdGF0ZS5jcmVhdGUsXHJcbiAgICBmcmFtZWJ1ZmZlckN1YmU6IGZyYW1lYnVmZmVyU3RhdGUuY3JlYXRlQ3ViZSxcclxuXHJcbiAgICAvLyBFeHBvc2UgY29udGV4dCBhdHRyaWJ1dGVzXHJcbiAgICBhdHRyaWJ1dGVzOiBnbEF0dHJpYnV0ZXMsXHJcblxyXG4gICAgLy8gRnJhbWUgcmVuZGVyaW5nXHJcbiAgICBmcmFtZTogZnJhbWUsXHJcbiAgICBvbjogYWRkTGlzdGVuZXIsXHJcblxyXG4gICAgLy8gU3lzdGVtIGxpbWl0c1xyXG4gICAgbGltaXRzOiBsaW1pdHMsXHJcbiAgICBoYXNFeHRlbnNpb246IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICAgIHJldHVybiBsaW1pdHMuZXh0ZW5zaW9ucy5pbmRleE9mKG5hbWUudG9Mb3dlckNhc2UoKSkgPj0gMFxyXG4gICAgfSxcclxuXHJcbiAgICAvLyBSZWFkIHBpeGVsc1xyXG4gICAgcmVhZDogcmVhZFBpeGVscyxcclxuXHJcbiAgICAvLyBEZXN0cm95IHJlZ2wgYW5kIGFsbCBhc3NvY2lhdGVkIHJlc291cmNlc1xyXG4gICAgZGVzdHJveTogZGVzdHJveSxcclxuXHJcbiAgICAvLyBEaXJlY3QgR0wgc3RhdGUgbWFuaXB1bGF0aW9uXHJcbiAgICBfZ2w6IGdsLFxyXG4gICAgX3JlZnJlc2g6IHJlZnJlc2gsXHJcblxyXG4gICAgcG9sbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICBwb2xsKCk7XHJcbiAgICAgIGlmICh0aW1lcikge1xyXG4gICAgICAgIHRpbWVyLnVwZGF0ZSgpO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEN1cnJlbnQgdGltZVxyXG4gICAgbm93OiBub3csXHJcblxyXG4gICAgLy8gcmVnbCBTdGF0aXN0aWNzIEluZm9ybWF0aW9uXHJcbiAgICBzdGF0czogc3RhdHMkJDFcclxuICB9KTtcclxuXHJcbiAgY29uZmlnLm9uRG9uZShudWxsLCByZWdsKTtcclxuXHJcbiAgcmV0dXJuIHJlZ2xcclxufVxuXG5yZXR1cm4gd3JhcFJFR0w7XG5cbn0pKSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWdsLmpzLm1hcFxuIiwiLyoqXHJcbiAqIENvbW1vbiB1dGlsaXRpZXNcclxuICogQG1vZHVsZSBnbE1hdHJpeFxyXG4gKi9cclxuXHJcbi8vIENvbmZpZ3VyYXRpb24gQ29uc3RhbnRzXHJcbmV4cG9ydCB2YXIgRVBTSUxPTiA9IDAuMDAwMDAxO1xyXG5leHBvcnQgdmFyIEFSUkFZX1RZUEUgPSB0eXBlb2YgRmxvYXQzMkFycmF5ICE9PSAndW5kZWZpbmVkJyA/IEZsb2F0MzJBcnJheSA6IEFycmF5O1xyXG5leHBvcnQgdmFyIFJBTkRPTSA9IE1hdGgucmFuZG9tO1xyXG5cclxuLyoqXHJcbiAqIFNldHMgdGhlIHR5cGUgb2YgYXJyYXkgdXNlZCB3aGVuIGNyZWF0aW5nIG5ldyB2ZWN0b3JzIGFuZCBtYXRyaWNlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge1R5cGV9IHR5cGUgQXJyYXkgdHlwZSwgc3VjaCBhcyBGbG9hdDMyQXJyYXkgb3IgQXJyYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRNYXRyaXhBcnJheVR5cGUodHlwZSkge1xyXG4gIEFSUkFZX1RZUEUgPSB0eXBlO1xyXG59XHJcblxyXG52YXIgZGVncmVlID0gTWF0aC5QSSAvIDE4MDtcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IERlZ3JlZSBUbyBSYWRpYW5cclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQW5nbGUgaW4gRGVncmVlc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRvUmFkaWFuKGEpIHtcclxuICByZXR1cm4gYSAqIGRlZ3JlZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRlc3RzIHdoZXRoZXIgb3Igbm90IHRoZSBhcmd1bWVudHMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIHZhbHVlLCB3aXRoaW4gYW4gYWJzb2x1dGVcclxuICogb3IgcmVsYXRpdmUgdG9sZXJhbmNlIG9mIGdsTWF0cml4LkVQU0lMT04gKGFuIGFic29sdXRlIHRvbGVyYW5jZSBpcyB1c2VkIGZvciB2YWx1ZXMgbGVzc1xyXG4gKiB0aGFuIG9yIGVxdWFsIHRvIDEuMCwgYW5kIGEgcmVsYXRpdmUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIGxhcmdlciB2YWx1ZXMpXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhIFRoZSBmaXJzdCBudW1iZXIgdG8gdGVzdC5cclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgVGhlIHNlY29uZCBudW1iZXIgdG8gdGVzdC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG51bWJlcnMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYSksIE1hdGguYWJzKGIpKTtcclxufSIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIDN4MyBNYXRyaXhcclxuICogQG1vZHVsZSBtYXQzXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0M1xyXG4gKlxyXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcclxuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XHJcbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNV0gPSAwO1xyXG4gICAgb3V0WzZdID0gMDtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgfVxyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzRdID0gMTtcclxuICBvdXRbOF0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3BpZXMgdGhlIHVwcGVyLWxlZnQgM3gzIHZhbHVlcyBpbnRvIHRoZSBnaXZlbiBtYXQzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIDN4MyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQ0fSBhICAgdGhlIHNvdXJjZSA0eDQgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzRdO1xyXG4gIG91dFs0XSA9IGFbNV07XHJcbiAgb3V0WzVdID0gYVs2XTtcclxuICBvdXRbNl0gPSBhWzhdO1xyXG4gIG91dFs3XSA9IGFbOV07XHJcbiAgb3V0WzhdID0gYVsxMF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IGEgbWF0cml4IHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHttYXQzfSBhIG5ldyAzeDMgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIG91dFs0XSA9IGFbNF07XHJcbiAgb3V0WzVdID0gYVs1XTtcclxuICBvdXRbNl0gPSBhWzZdO1xyXG4gIG91dFs3XSA9IGFbN107XHJcbiAgb3V0WzhdID0gYVs4XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDMgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICBvdXRbNF0gPSBhWzRdO1xyXG4gIG91dFs1XSA9IGFbNV07XHJcbiAgb3V0WzZdID0gYVs2XTtcclxuICBvdXRbN10gPSBhWzddO1xyXG4gIG91dFs4XSA9IGFbOF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQzIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDYpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gKiBAcmV0dXJucyB7bWF0M30gQSBuZXcgbWF0M1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg5KTtcclxuICBvdXRbMF0gPSBtMDA7XHJcbiAgb3V0WzFdID0gbTAxO1xyXG4gIG91dFsyXSA9IG0wMjtcclxuICBvdXRbM10gPSBtMTA7XHJcbiAgb3V0WzRdID0gbTExO1xyXG4gIG91dFs1XSA9IG0xMjtcclxuICBvdXRbNl0gPSBtMjA7XHJcbiAgb3V0WzddID0gbTIxO1xyXG4gIG91dFs4XSA9IG0yMjtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MyB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDUpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDgpXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMTAsIG0xMSwgbTEyLCBtMjAsIG0yMSwgbTIyKSB7XHJcbiAgb3V0WzBdID0gbTAwO1xyXG4gIG91dFsxXSA9IG0wMTtcclxuICBvdXRbMl0gPSBtMDI7XHJcbiAgb3V0WzNdID0gbTEwO1xyXG4gIG91dFs0XSA9IG0xMTtcclxuICBvdXRbNV0gPSBtMTI7XHJcbiAgb3V0WzZdID0gbTIwO1xyXG4gIG91dFs3XSA9IG0yMTtcclxuICBvdXRbOF0gPSBtMjI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBhIG1hdDMgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XHJcbiAgb3V0WzBdID0gMTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSAxO1xyXG4gIG91dFs1XSA9IDA7XHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcclxuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXHJcbiAgaWYgKG91dCA9PT0gYSkge1xyXG4gICAgdmFyIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgICBhMTIgPSBhWzVdO1xyXG4gICAgb3V0WzFdID0gYVszXTtcclxuICAgIG91dFsyXSA9IGFbNl07XHJcbiAgICBvdXRbM10gPSBhMDE7XHJcbiAgICBvdXRbNV0gPSBhWzddO1xyXG4gICAgb3V0WzZdID0gYTAyO1xyXG4gICAgb3V0WzddID0gYTEyO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgb3V0WzFdID0gYVszXTtcclxuICAgIG91dFsyXSA9IGFbNl07XHJcbiAgICBvdXRbM10gPSBhWzFdO1xyXG4gICAgb3V0WzRdID0gYVs0XTtcclxuICAgIG91dFs1XSA9IGFbN107XHJcbiAgICBvdXRbNl0gPSBhWzJdO1xyXG4gICAgb3V0WzddID0gYVs1XTtcclxuICAgIG91dFs4XSA9IGFbOF07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl07XHJcbiAgdmFyIGExMCA9IGFbM10sXHJcbiAgICAgIGExMSA9IGFbNF0sXHJcbiAgICAgIGExMiA9IGFbNV07XHJcbiAgdmFyIGEyMCA9IGFbNl0sXHJcbiAgICAgIGEyMSA9IGFbN10sXHJcbiAgICAgIGEyMiA9IGFbOF07XHJcblxyXG4gIHZhciBiMDEgPSBhMjIgKiBhMTEgLSBhMTIgKiBhMjE7XHJcbiAgdmFyIGIxMSA9IC1hMjIgKiBhMTAgKyBhMTIgKiBhMjA7XHJcbiAgdmFyIGIyMSA9IGEyMSAqIGExMCAtIGExMSAqIGEyMDtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxyXG4gIHZhciBkZXQgPSBhMDAgKiBiMDEgKyBhMDEgKiBiMTEgKyBhMDIgKiBiMjE7XHJcblxyXG4gIGlmICghZGV0KSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgZGV0ID0gMS4wIC8gZGV0O1xyXG5cclxuICBvdXRbMF0gPSBiMDEgKiBkZXQ7XHJcbiAgb3V0WzFdID0gKC1hMjIgKiBhMDEgKyBhMDIgKiBhMjEpICogZGV0O1xyXG4gIG91dFsyXSA9IChhMTIgKiBhMDEgLSBhMDIgKiBhMTEpICogZGV0O1xyXG4gIG91dFszXSA9IGIxMSAqIGRldDtcclxuICBvdXRbNF0gPSAoYTIyICogYTAwIC0gYTAyICogYTIwKSAqIGRldDtcclxuICBvdXRbNV0gPSAoLWExMiAqIGEwMCArIGEwMiAqIGExMCkgKiBkZXQ7XHJcbiAgb3V0WzZdID0gYjIxICogZGV0O1xyXG4gIG91dFs3XSA9ICgtYTIxICogYTAwICsgYTAxICogYTIwKSAqIGRldDtcclxuICBvdXRbOF0gPSAoYTExICogYTAwIC0gYTAxICogYTEwKSAqIGRldDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXTtcclxuICB2YXIgYTEwID0gYVszXSxcclxuICAgICAgYTExID0gYVs0XSxcclxuICAgICAgYTEyID0gYVs1XTtcclxuICB2YXIgYTIwID0gYVs2XSxcclxuICAgICAgYTIxID0gYVs3XSxcclxuICAgICAgYTIyID0gYVs4XTtcclxuXHJcbiAgb3V0WzBdID0gYTExICogYTIyIC0gYTEyICogYTIxO1xyXG4gIG91dFsxXSA9IGEwMiAqIGEyMSAtIGEwMSAqIGEyMjtcclxuICBvdXRbMl0gPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgb3V0WzNdID0gYTEyICogYTIwIC0gYTEwICogYTIyO1xyXG4gIG91dFs0XSA9IGEwMCAqIGEyMiAtIGEwMiAqIGEyMDtcclxuICBvdXRbNV0gPSBhMDIgKiBhMTAgLSBhMDAgKiBhMTI7XHJcbiAgb3V0WzZdID0gYTEwICogYTIxIC0gYTExICogYTIwO1xyXG4gIG91dFs3XSA9IGEwMSAqIGEyMCAtIGEwMCAqIGEyMTtcclxuICBvdXRbOF0gPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge051bWJlcn0gZGV0ZXJtaW5hbnQgb2YgYVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluYW50KGEpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXTtcclxuICB2YXIgYTEwID0gYVszXSxcclxuICAgICAgYTExID0gYVs0XSxcclxuICAgICAgYTEyID0gYVs1XTtcclxuICB2YXIgYTIwID0gYVs2XSxcclxuICAgICAgYTIxID0gYVs3XSxcclxuICAgICAgYTIyID0gYVs4XTtcclxuXHJcbiAgcmV0dXJuIGEwMCAqIChhMjIgKiBhMTEgLSBhMTIgKiBhMjEpICsgYTAxICogKC1hMjIgKiBhMTAgKyBhMTIgKiBhMjApICsgYTAyICogKGEyMSAqIGExMCAtIGExMSAqIGEyMCk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQzJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICBhMDIgPSBhWzJdO1xyXG4gIHZhciBhMTAgPSBhWzNdLFxyXG4gICAgICBhMTEgPSBhWzRdLFxyXG4gICAgICBhMTIgPSBhWzVdO1xyXG4gIHZhciBhMjAgPSBhWzZdLFxyXG4gICAgICBhMjEgPSBhWzddLFxyXG4gICAgICBhMjIgPSBhWzhdO1xyXG5cclxuICB2YXIgYjAwID0gYlswXSxcclxuICAgICAgYjAxID0gYlsxXSxcclxuICAgICAgYjAyID0gYlsyXTtcclxuICB2YXIgYjEwID0gYlszXSxcclxuICAgICAgYjExID0gYls0XSxcclxuICAgICAgYjEyID0gYls1XTtcclxuICB2YXIgYjIwID0gYls2XSxcclxuICAgICAgYjIxID0gYls3XSxcclxuICAgICAgYjIyID0gYls4XTtcclxuXHJcbiAgb3V0WzBdID0gYjAwICogYTAwICsgYjAxICogYTEwICsgYjAyICogYTIwO1xyXG4gIG91dFsxXSA9IGIwMCAqIGEwMSArIGIwMSAqIGExMSArIGIwMiAqIGEyMTtcclxuICBvdXRbMl0gPSBiMDAgKiBhMDIgKyBiMDEgKiBhMTIgKyBiMDIgKiBhMjI7XHJcblxyXG4gIG91dFszXSA9IGIxMCAqIGEwMCArIGIxMSAqIGExMCArIGIxMiAqIGEyMDtcclxuICBvdXRbNF0gPSBiMTAgKiBhMDEgKyBiMTEgKiBhMTEgKyBiMTIgKiBhMjE7XHJcbiAgb3V0WzVdID0gYjEwICogYTAyICsgYjExICogYTEyICsgYjEyICogYTIyO1xyXG5cclxuICBvdXRbNl0gPSBiMjAgKiBhMDAgKyBiMjEgKiBhMTAgKyBiMjIgKiBhMjA7XHJcbiAgb3V0WzddID0gYjIwICogYTAxICsgYjIxICogYTExICsgYjIyICogYTIxO1xyXG4gIG91dFs4XSA9IGIyMCAqIGEwMiArIGIyMSAqIGExMiArIGIyMiAqIGEyMjtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNsYXRlIGEgbWF0MyBieSB0aGUgZ2l2ZW4gdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxyXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xyXG4gIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICBhMTAgPSBhWzNdLFxyXG4gICAgICBhMTEgPSBhWzRdLFxyXG4gICAgICBhMTIgPSBhWzVdLFxyXG4gICAgICBhMjAgPSBhWzZdLFxyXG4gICAgICBhMjEgPSBhWzddLFxyXG4gICAgICBhMjIgPSBhWzhdLFxyXG4gICAgICB4ID0gdlswXSxcclxuICAgICAgeSA9IHZbMV07XHJcblxyXG4gIG91dFswXSA9IGEwMDtcclxuICBvdXRbMV0gPSBhMDE7XHJcbiAgb3V0WzJdID0gYTAyO1xyXG5cclxuICBvdXRbM10gPSBhMTA7XHJcbiAgb3V0WzRdID0gYTExO1xyXG4gIG91dFs1XSA9IGExMjtcclxuXHJcbiAgb3V0WzZdID0geCAqIGEwMCArIHkgKiBhMTAgKyBhMjA7XHJcbiAgb3V0WzddID0geCAqIGEwMSArIHkgKiBhMTEgKyBhMjE7XHJcbiAgb3V0WzhdID0geCAqIGEwMiArIHkgKiBhMTIgKyBhMjI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXQzIGJ5IHRoZSBnaXZlbiBhbmdsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xyXG4gIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICBhMTAgPSBhWzNdLFxyXG4gICAgICBhMTEgPSBhWzRdLFxyXG4gICAgICBhMTIgPSBhWzVdLFxyXG4gICAgICBhMjAgPSBhWzZdLFxyXG4gICAgICBhMjEgPSBhWzddLFxyXG4gICAgICBhMjIgPSBhWzhdLFxyXG4gICAgICBzID0gTWF0aC5zaW4ocmFkKSxcclxuICAgICAgYyA9IE1hdGguY29zKHJhZCk7XHJcblxyXG4gIG91dFswXSA9IGMgKiBhMDAgKyBzICogYTEwO1xyXG4gIG91dFsxXSA9IGMgKiBhMDEgKyBzICogYTExO1xyXG4gIG91dFsyXSA9IGMgKiBhMDIgKyBzICogYTEyO1xyXG5cclxuICBvdXRbM10gPSBjICogYTEwIC0gcyAqIGEwMDtcclxuICBvdXRbNF0gPSBjICogYTExIC0gcyAqIGEwMTtcclxuICBvdXRbNV0gPSBjICogYTEyIC0gcyAqIGEwMjtcclxuXHJcbiAgb3V0WzZdID0gYTIwO1xyXG4gIG91dFs3XSA9IGEyMTtcclxuICBvdXRbOF0gPSBhMjI7XHJcbiAgcmV0dXJuIG91dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBTY2FsZXMgdGhlIG1hdDMgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XHJcbiAgdmFyIHggPSB2WzBdLFxyXG4gICAgICB5ID0gdlsxXTtcclxuXHJcbiAgb3V0WzBdID0geCAqIGFbMF07XHJcbiAgb3V0WzFdID0geCAqIGFbMV07XHJcbiAgb3V0WzJdID0geCAqIGFbMl07XHJcblxyXG4gIG91dFszXSA9IHkgKiBhWzNdO1xyXG4gIG91dFs0XSA9IHkgKiBhWzRdO1xyXG4gIG91dFs1XSA9IHkgKiBhWzVdO1xyXG5cclxuICBvdXRbNl0gPSBhWzZdO1xyXG4gIG91dFs3XSA9IGFbN107XHJcbiAgb3V0WzhdID0gYVs4XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDMudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHt2ZWMyfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMTtcclxuICBvdXRbNV0gPSAwO1xyXG4gIG91dFs2XSA9IHZbMF07XHJcbiAgb3V0WzddID0gdlsxXTtcclxuICBvdXRbOF0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZVxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDMuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQzLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICBvdXRbMF0gPSBjO1xyXG4gIG91dFsxXSA9IHM7XHJcbiAgb3V0WzJdID0gMDtcclxuXHJcbiAgb3V0WzNdID0gLXM7XHJcbiAgb3V0WzRdID0gYztcclxuICBvdXRbNV0gPSAwO1xyXG5cclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0My5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7dmVjMn0gdiBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XHJcbiAgb3V0WzBdID0gdlswXTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcblxyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gdlsxXTtcclxuICBvdXRbNV0gPSAwO1xyXG5cclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ29waWVzIHRoZSB2YWx1ZXMgZnJvbSBhIG1hdDJkIGludG8gYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjb3B5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDJkKG91dCwgYSkge1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICBvdXRbMl0gPSAwO1xyXG5cclxuICBvdXRbM10gPSBhWzJdO1xyXG4gIG91dFs0XSA9IGFbM107XHJcbiAgb3V0WzVdID0gMDtcclxuXHJcbiAgb3V0WzZdID0gYVs0XTtcclxuICBvdXRbN10gPSBhWzVdO1xyXG4gIG91dFs4XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiogQ2FsY3VsYXRlcyBhIDN4MyBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4qXHJcbiogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4qIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxyXG4qXHJcbiogQHJldHVybnMge21hdDN9IG91dFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XHJcbiAgdmFyIHggPSBxWzBdLFxyXG4gICAgICB5ID0gcVsxXSxcclxuICAgICAgeiA9IHFbMl0sXHJcbiAgICAgIHcgPSBxWzNdO1xyXG4gIHZhciB4MiA9IHggKyB4O1xyXG4gIHZhciB5MiA9IHkgKyB5O1xyXG4gIHZhciB6MiA9IHogKyB6O1xyXG5cclxuICB2YXIgeHggPSB4ICogeDI7XHJcbiAgdmFyIHl4ID0geSAqIHgyO1xyXG4gIHZhciB5eSA9IHkgKiB5MjtcclxuICB2YXIgenggPSB6ICogeDI7XHJcbiAgdmFyIHp5ID0geiAqIHkyO1xyXG4gIHZhciB6eiA9IHogKiB6MjtcclxuICB2YXIgd3ggPSB3ICogeDI7XHJcbiAgdmFyIHd5ID0gdyAqIHkyO1xyXG4gIHZhciB3eiA9IHcgKiB6MjtcclxuXHJcbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XHJcbiAgb3V0WzNdID0geXggLSB3ejtcclxuICBvdXRbNl0gPSB6eCArIHd5O1xyXG5cclxuICBvdXRbMV0gPSB5eCArIHd6O1xyXG4gIG91dFs0XSA9IDEgLSB4eCAtIHp6O1xyXG4gIG91dFs3XSA9IHp5IC0gd3g7XHJcblxyXG4gIG91dFsyXSA9IHp4IC0gd3k7XHJcbiAgb3V0WzVdID0genkgKyB3eDtcclxuICBvdXRbOF0gPSAxIC0geHggLSB5eTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiogQ2FsY3VsYXRlcyBhIDN4MyBub3JtYWwgbWF0cml4ICh0cmFuc3Bvc2UgaW52ZXJzZSkgZnJvbSB0aGUgNHg0IG1hdHJpeFxyXG4qXHJcbiogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4qIEBwYXJhbSB7bWF0NH0gYSBNYXQ0IHRvIGRlcml2ZSB0aGUgbm9ybWFsIG1hdHJpeCBmcm9tXHJcbipcclxuKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiovXHJcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxGcm9tTWF0NChvdXQsIGEpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgYTAzID0gYVszXTtcclxuICB2YXIgYTEwID0gYVs0XSxcclxuICAgICAgYTExID0gYVs1XSxcclxuICAgICAgYTEyID0gYVs2XSxcclxuICAgICAgYTEzID0gYVs3XTtcclxuICB2YXIgYTIwID0gYVs4XSxcclxuICAgICAgYTIxID0gYVs5XSxcclxuICAgICAgYTIyID0gYVsxMF0sXHJcbiAgICAgIGEyMyA9IGFbMTFdO1xyXG4gIHZhciBhMzAgPSBhWzEyXSxcclxuICAgICAgYTMxID0gYVsxM10sXHJcbiAgICAgIGEzMiA9IGFbMTRdLFxyXG4gICAgICBhMzMgPSBhWzE1XTtcclxuXHJcbiAgdmFyIGIwMCA9IGEwMCAqIGExMSAtIGEwMSAqIGExMDtcclxuICB2YXIgYjAxID0gYTAwICogYTEyIC0gYTAyICogYTEwO1xyXG4gIHZhciBiMDIgPSBhMDAgKiBhMTMgLSBhMDMgKiBhMTA7XHJcbiAgdmFyIGIwMyA9IGEwMSAqIGExMiAtIGEwMiAqIGExMTtcclxuICB2YXIgYjA0ID0gYTAxICogYTEzIC0gYTAzICogYTExO1xyXG4gIHZhciBiMDUgPSBhMDIgKiBhMTMgLSBhMDMgKiBhMTI7XHJcbiAgdmFyIGIwNiA9IGEyMCAqIGEzMSAtIGEyMSAqIGEzMDtcclxuICB2YXIgYjA3ID0gYTIwICogYTMyIC0gYTIyICogYTMwO1xyXG4gIHZhciBiMDggPSBhMjAgKiBhMzMgLSBhMjMgKiBhMzA7XHJcbiAgdmFyIGIwOSA9IGEyMSAqIGEzMiAtIGEyMiAqIGEzMTtcclxuICB2YXIgYjEwID0gYTIxICogYTMzIC0gYTIzICogYTMxO1xyXG4gIHZhciBiMTEgPSBhMjIgKiBhMzMgLSBhMjMgKiBhMzI7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcclxuICB2YXIgZGV0ID0gYjAwICogYjExIC0gYjAxICogYjEwICsgYjAyICogYjA5ICsgYjAzICogYjA4IC0gYjA0ICogYjA3ICsgYjA1ICogYjA2O1xyXG5cclxuICBpZiAoIWRldCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIGRldCA9IDEuMCAvIGRldDtcclxuXHJcbiAgb3V0WzBdID0gKGExMSAqIGIxMSAtIGExMiAqIGIxMCArIGExMyAqIGIwOSkgKiBkZXQ7XHJcbiAgb3V0WzFdID0gKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQ7XHJcbiAgb3V0WzJdID0gKGExMCAqIGIxMCAtIGExMSAqIGIwOCArIGExMyAqIGIwNikgKiBkZXQ7XHJcblxyXG4gIG91dFszXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xyXG4gIG91dFs0XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xyXG4gIG91dFs1XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xyXG5cclxuICBvdXRbNl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcclxuICBvdXRbN10gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcclxuICBvdXRbOF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIDJEIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCBXaWR0aCBvZiB5b3VyIGdsIGNvbnRleHRcclxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCBIZWlnaHQgb2YgZ2wgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbihvdXQsIHdpZHRoLCBoZWlnaHQpIHtcclxuICBvdXRbMF0gPSAyIC8gd2lkdGg7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gLTIgLyBoZWlnaHQ7XHJcbiAgb3V0WzVdID0gMDtcclxuICBvdXRbNl0gPSAtMTtcclxuICBvdXRbN10gPSAxO1xyXG4gIG91dFs4XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcclxuICByZXR1cm4gJ21hdDMoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnLCAnICsgYVs0XSArICcsICcgKyBhWzVdICsgJywgJyArIGFbNl0gKyAnLCAnICsgYVs3XSArICcsICcgKyBhWzhdICsgJyknO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gY2FsY3VsYXRlIEZyb2Jlbml1cyBub3JtIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IEZyb2Jlbml1cyBub3JtXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvYihhKSB7XHJcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhhWzBdLCAyKSArIE1hdGgucG93KGFbMV0sIDIpICsgTWF0aC5wb3coYVsyXSwgMikgKyBNYXRoLnBvdyhhWzNdLCAyKSArIE1hdGgucG93KGFbNF0sIDIpICsgTWF0aC5wb3coYVs1XSwgMikgKyBNYXRoLnBvdyhhWzZdLCAyKSArIE1hdGgucG93KGFbN10sIDIpICsgTWF0aC5wb3coYVs4XSwgMikpO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gbWF0MydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSArIGJbM107XHJcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XHJcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XHJcbiAgb3V0WzZdID0gYVs2XSArIGJbNl07XHJcbiAgb3V0WzddID0gYVs3XSArIGJbN107XHJcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcclxuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcclxuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcclxuICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcclxuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcclxuICBvdXRbN10gPSBhWzddIC0gYls3XTtcclxuICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gIG91dFszXSA9IGFbM10gKiBiO1xyXG4gIG91dFs0XSA9IGFbNF0gKiBiO1xyXG4gIG91dFs1XSA9IGFbNV0gKiBiO1xyXG4gIG91dFs2XSA9IGFbNl0gKiBiO1xyXG4gIG91dFs3XSA9IGFbN10gKiBiO1xyXG4gIG91dFs4XSA9IGFbOF0gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQzJ3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7bWF0M30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xyXG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XHJcbiAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcclxuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xyXG4gIG91dFs3XSA9IGFbN10gKyBiWzddICogc2NhbGU7XHJcbiAgb3V0WzhdID0gYVs4XSArIGJbOF0gKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHttYXQzfSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7bWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXSxcclxuICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICBhNSA9IGFbNV0sXHJcbiAgICAgIGE2ID0gYVs2XSxcclxuICAgICAgYTcgPSBhWzddLFxyXG4gICAgICBhOCA9IGFbOF07XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICBiMiA9IGJbMl0sXHJcbiAgICAgIGIzID0gYlszXSxcclxuICAgICAgYjQgPSBiWzRdLFxyXG4gICAgICBiNSA9IGJbNV0sXHJcbiAgICAgIGI2ID0gYls2XSxcclxuICAgICAgYjcgPSBiWzddLFxyXG4gICAgICBiOCA9IGJbOF07XHJcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpICYmIE1hdGguYWJzKGE2IC0gYjYpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE2KSwgTWF0aC5hYnMoYjYpKSAmJiBNYXRoLmFicyhhNyAtIGI3KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNyksIE1hdGguYWJzKGI3KSkgJiYgTWF0aC5hYnMoYTggLSBiOCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTgpLCBNYXRoLmFicyhiOCkpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQzLnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XHJcblxyXG4vKipcclxuICogNHg0IE1hdHJpeDxicj5Gb3JtYXQ6IGNvbHVtbi1tYWpvciwgd2hlbiB0eXBlZCBvdXQgaXQgbG9va3MgbGlrZSByb3ctbWFqb3I8YnI+VGhlIG1hdHJpY2VzIGFyZSBiZWluZyBwb3N0IG11bHRpcGxpZWQuXHJcbiAqIEBtb2R1bGUgbWF0NFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDRcclxuICpcclxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcclxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICAgIG91dFs0XSA9IDA7XHJcbiAgICBvdXRbNl0gPSAwO1xyXG4gICAgb3V0WzddID0gMDtcclxuICAgIG91dFs4XSA9IDA7XHJcbiAgICBvdXRbOV0gPSAwO1xyXG4gICAgb3V0WzExXSA9IDA7XHJcbiAgICBvdXRbMTJdID0gMDtcclxuICAgIG91dFsxM10gPSAwO1xyXG4gICAgb3V0WzE0XSA9IDA7XHJcbiAgfVxyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzVdID0gMTtcclxuICBvdXRbMTBdID0gMTtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgbWF0cml4XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSBtYXRyaXggdG8gY2xvbmVcclxuICogQHJldHVybnMge21hdDR9IGEgbmV3IDR4NCBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIG91dFs0XSA9IGFbNF07XHJcbiAgb3V0WzVdID0gYVs1XTtcclxuICBvdXRbNl0gPSBhWzZdO1xyXG4gIG91dFs3XSA9IGFbN107XHJcbiAgb3V0WzhdID0gYVs4XTtcclxuICBvdXRbOV0gPSBhWzldO1xyXG4gIG91dFsxMF0gPSBhWzEwXTtcclxuICBvdXRbMTFdID0gYVsxMV07XHJcbiAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gIG91dFsxM10gPSBhWzEzXTtcclxuICBvdXRbMTRdID0gYVsxNF07XHJcbiAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0NCB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIG91dFs0XSA9IGFbNF07XHJcbiAgb3V0WzVdID0gYVs1XTtcclxuICBvdXRbNl0gPSBhWzZdO1xyXG4gIG91dFs3XSA9IGFbN107XHJcbiAgb3V0WzhdID0gYVs4XTtcclxuICBvdXRbOV0gPSBhWzldO1xyXG4gIG91dFsxMF0gPSBhWzEwXTtcclxuICBvdXRbMTFdID0gYVsxMV07XHJcbiAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gIG91dFsxM10gPSBhWzEzXTtcclxuICBvdXRbMTRdID0gYVsxNF07XHJcbiAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBuZXcgbWF0NCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEzIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDMgcG9zaXRpb24gKGluZGV4IDcpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDEwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMxIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDEgcG9zaXRpb24gKGluZGV4IDEzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gQSBuZXcgbWF0NFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDE2KTtcclxuICBvdXRbMF0gPSBtMDA7XHJcbiAgb3V0WzFdID0gbTAxO1xyXG4gIG91dFsyXSA9IG0wMjtcclxuICBvdXRbM10gPSBtMDM7XHJcbiAgb3V0WzRdID0gbTEwO1xyXG4gIG91dFs1XSA9IG0xMTtcclxuICBvdXRbNl0gPSBtMTI7XHJcbiAgb3V0WzddID0gbTEzO1xyXG4gIG91dFs4XSA9IG0yMDtcclxuICBvdXRbOV0gPSBtMjE7XHJcbiAgb3V0WzEwXSA9IG0yMjtcclxuICBvdXRbMTFdID0gbTIzO1xyXG4gIG91dFsxMl0gPSBtMzA7XHJcbiAgb3V0WzEzXSA9IG0zMTtcclxuICBvdXRbMTRdID0gbTMyO1xyXG4gIG91dFsxNV0gPSBtMzM7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAzIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDMgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTAgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMSBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEyIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDIgcG9zaXRpb24gKGluZGV4IDYpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTMgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggNylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDkpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjMgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzAgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMTIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzEgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMTMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzIgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMTQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMzMgQ29tcG9uZW50IGluIGNvbHVtbiAzLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMTUpXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBtMDAsIG0wMSwgbTAyLCBtMDMsIG0xMCwgbTExLCBtMTIsIG0xMywgbTIwLCBtMjEsIG0yMiwgbTIzLCBtMzAsIG0zMSwgbTMyLCBtMzMpIHtcclxuICBvdXRbMF0gPSBtMDA7XHJcbiAgb3V0WzFdID0gbTAxO1xyXG4gIG91dFsyXSA9IG0wMjtcclxuICBvdXRbM10gPSBtMDM7XHJcbiAgb3V0WzRdID0gbTEwO1xyXG4gIG91dFs1XSA9IG0xMTtcclxuICBvdXRbNl0gPSBtMTI7XHJcbiAgb3V0WzddID0gbTEzO1xyXG4gIG91dFs4XSA9IG0yMDtcclxuICBvdXRbOV0gPSBtMjE7XHJcbiAgb3V0WzEwXSA9IG0yMjtcclxuICBvdXRbMTFdID0gbTIzO1xyXG4gIG91dFsxMl0gPSBtMzA7XHJcbiAgb3V0WzEzXSA9IG0zMTtcclxuICBvdXRbMTRdID0gbTMyO1xyXG4gIG91dFsxNV0gPSBtMzM7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBhIG1hdDQgdG8gdGhlIGlkZW50aXR5IG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XHJcbiAgb3V0WzBdID0gMTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSAwO1xyXG4gIG91dFs1XSA9IDE7XHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDA7XHJcbiAgb3V0WzldID0gMDtcclxuICBvdXRbMTBdID0gMTtcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gMDtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xyXG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGUgc29tZSB2YWx1ZXNcclxuICBpZiAob3V0ID09PSBhKSB7XHJcbiAgICB2YXIgYTAxID0gYVsxXSxcclxuICAgICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICAgIGEwMyA9IGFbM107XHJcbiAgICB2YXIgYTEyID0gYVs2XSxcclxuICAgICAgICBhMTMgPSBhWzddO1xyXG4gICAgdmFyIGEyMyA9IGFbMTFdO1xyXG5cclxuICAgIG91dFsxXSA9IGFbNF07XHJcbiAgICBvdXRbMl0gPSBhWzhdO1xyXG4gICAgb3V0WzNdID0gYVsxMl07XHJcbiAgICBvdXRbNF0gPSBhMDE7XHJcbiAgICBvdXRbNl0gPSBhWzldO1xyXG4gICAgb3V0WzddID0gYVsxM107XHJcbiAgICBvdXRbOF0gPSBhMDI7XHJcbiAgICBvdXRbOV0gPSBhMTI7XHJcbiAgICBvdXRbMTFdID0gYVsxNF07XHJcbiAgICBvdXRbMTJdID0gYTAzO1xyXG4gICAgb3V0WzEzXSA9IGExMztcclxuICAgIG91dFsxNF0gPSBhMjM7XHJcbiAgfSBlbHNlIHtcclxuICAgIG91dFswXSA9IGFbMF07XHJcbiAgICBvdXRbMV0gPSBhWzRdO1xyXG4gICAgb3V0WzJdID0gYVs4XTtcclxuICAgIG91dFszXSA9IGFbMTJdO1xyXG4gICAgb3V0WzRdID0gYVsxXTtcclxuICAgIG91dFs1XSA9IGFbNV07XHJcbiAgICBvdXRbNl0gPSBhWzldO1xyXG4gICAgb3V0WzddID0gYVsxM107XHJcbiAgICBvdXRbOF0gPSBhWzJdO1xyXG4gICAgb3V0WzldID0gYVs2XTtcclxuICAgIG91dFsxMF0gPSBhWzEwXTtcclxuICAgIG91dFsxMV0gPSBhWzE0XTtcclxuICAgIG91dFsxMl0gPSBhWzNdO1xyXG4gICAgb3V0WzEzXSA9IGFbN107XHJcbiAgICBvdXRbMTRdID0gYVsxMV07XHJcbiAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgdmFyIGExMCA9IGFbNF0sXHJcbiAgICAgIGExMSA9IGFbNV0sXHJcbiAgICAgIGExMiA9IGFbNl0sXHJcbiAgICAgIGExMyA9IGFbN107XHJcbiAgdmFyIGEyMCA9IGFbOF0sXHJcbiAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICBhMjMgPSBhWzExXTtcclxuICB2YXIgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcclxuICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xyXG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcclxuICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xyXG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XHJcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcclxuICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xyXG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XHJcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcclxuICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xyXG5cclxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcbiAgdmFyIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcclxuXHJcbiAgaWYgKCFkZXQpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBkZXQgPSAxLjAgLyBkZXQ7XHJcblxyXG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xyXG4gIG91dFsxXSA9IChhMDIgKiBiMTAgLSBhMDEgKiBiMTEgLSBhMDMgKiBiMDkpICogZGV0O1xyXG4gIG91dFsyXSA9IChhMzEgKiBiMDUgLSBhMzIgKiBiMDQgKyBhMzMgKiBiMDMpICogZGV0O1xyXG4gIG91dFszXSA9IChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0O1xyXG4gIG91dFs0XSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xyXG4gIG91dFs1XSA9IChhMDAgKiBiMTEgLSBhMDIgKiBiMDggKyBhMDMgKiBiMDcpICogZGV0O1xyXG4gIG91dFs2XSA9IChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0O1xyXG4gIG91dFs3XSA9IChhMjAgKiBiMDUgLSBhMjIgKiBiMDIgKyBhMjMgKiBiMDEpICogZGV0O1xyXG4gIG91dFs4XSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xyXG4gIG91dFs5XSA9IChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0O1xyXG4gIG91dFsxMF0gPSAoYTMwICogYjA0IC0gYTMxICogYjAyICsgYTMzICogYjAwKSAqIGRldDtcclxuICBvdXRbMTFdID0gKGEyMSAqIGIwMiAtIGEyMCAqIGIwNCAtIGEyMyAqIGIwMCkgKiBkZXQ7XHJcbiAgb3V0WzEyXSA9IChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0O1xyXG4gIG91dFsxM10gPSAoYTAwICogYjA5IC0gYTAxICogYjA3ICsgYTAyICogYjA2KSAqIGRldDtcclxuICBvdXRbMTRdID0gKGEzMSAqIGIwMSAtIGEzMCAqIGIwMyAtIGEzMiAqIGIwMCkgKiBkZXQ7XHJcbiAgb3V0WzE1XSA9IChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0O1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRqb2ludChvdXQsIGEpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgYTAzID0gYVszXTtcclxuICB2YXIgYTEwID0gYVs0XSxcclxuICAgICAgYTExID0gYVs1XSxcclxuICAgICAgYTEyID0gYVs2XSxcclxuICAgICAgYTEzID0gYVs3XTtcclxuICB2YXIgYTIwID0gYVs4XSxcclxuICAgICAgYTIxID0gYVs5XSxcclxuICAgICAgYTIyID0gYVsxMF0sXHJcbiAgICAgIGEyMyA9IGFbMTFdO1xyXG4gIHZhciBhMzAgPSBhWzEyXSxcclxuICAgICAgYTMxID0gYVsxM10sXHJcbiAgICAgIGEzMiA9IGFbMTRdLFxyXG4gICAgICBhMzMgPSBhWzE1XTtcclxuXHJcbiAgb3V0WzBdID0gYTExICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSArIGEzMSAqIChhMTIgKiBhMjMgLSBhMTMgKiBhMjIpO1xyXG4gIG91dFsxXSA9IC0oYTAxICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjEgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMSAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpKTtcclxuICBvdXRbMl0gPSBhMDEgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMSAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XHJcbiAgb3V0WzNdID0gLShhMDEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMSAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIxICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xyXG4gIG91dFs0XSA9IC0oYTEwICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjAgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSArIGEzMCAqIChhMTIgKiBhMjMgLSBhMTMgKiBhMjIpKTtcclxuICBvdXRbNV0gPSBhMDAgKiAoYTIyICogYTMzIC0gYTIzICogYTMyKSAtIGEyMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMik7XHJcbiAgb3V0WzZdID0gLShhMDAgKiAoYTEyICogYTMzIC0gYTEzICogYTMyKSAtIGExMCAqIChhMDIgKiBhMzMgLSBhMDMgKiBhMzIpICsgYTMwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMikpO1xyXG4gIG91dFs3XSA9IGEwMCAqIChhMTIgKiBhMjMgLSBhMTMgKiBhMjIpIC0gYTEwICogKGEwMiAqIGEyMyAtIGEwMyAqIGEyMikgKyBhMjAgKiAoYTAyICogYTEzIC0gYTAzICogYTEyKTtcclxuICBvdXRbOF0gPSBhMTAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzMgLSBhMTMgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSk7XHJcbiAgb3V0WzldID0gLShhMDAgKiAoYTIxICogYTMzIC0gYTIzICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkpO1xyXG4gIG91dFsxMF0gPSBhMDAgKiAoYTExICogYTMzIC0gYTEzICogYTMxKSAtIGExMCAqIChhMDEgKiBhMzMgLSBhMDMgKiBhMzEpICsgYTMwICogKGEwMSAqIGExMyAtIGEwMyAqIGExMSk7XHJcbiAgb3V0WzExXSA9IC0oYTAwICogKGExMSAqIGEyMyAtIGExMyAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIzIC0gYTAzICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpKTtcclxuICBvdXRbMTJdID0gLShhMTAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpICsgYTMwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkpO1xyXG4gIG91dFsxM10gPSBhMDAgKiAoYTIxICogYTMyIC0gYTIyICogYTMxKSAtIGEyMCAqIChhMDEgKiBhMzIgLSBhMDIgKiBhMzEpICsgYTMwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSk7XHJcbiAgb3V0WzE0XSA9IC0oYTAwICogKGExMSAqIGEzMiAtIGExMiAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpKTtcclxuICBvdXRbMTVdID0gYTAwICogKGExMSAqIGEyMiAtIGExMiAqIGEyMSkgLSBhMTAgKiAoYTAxICogYTIyIC0gYTAyICogYTIxKSArIGEyMCAqIChhMDEgKiBhMTIgLSBhMDIgKiBhMTEpO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgdmFyIGExMCA9IGFbNF0sXHJcbiAgICAgIGExMSA9IGFbNV0sXHJcbiAgICAgIGExMiA9IGFbNl0sXHJcbiAgICAgIGExMyA9IGFbN107XHJcbiAgdmFyIGEyMCA9IGFbOF0sXHJcbiAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICBhMjMgPSBhWzExXTtcclxuICB2YXIgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcclxuICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xyXG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcclxuICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xyXG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XHJcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcclxuICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xyXG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XHJcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcclxuICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xyXG5cclxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcbiAgcmV0dXJuIGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcclxufVxyXG5cclxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIG1hdDRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgYTAzID0gYVszXTtcclxuICB2YXIgYTEwID0gYVs0XSxcclxuICAgICAgYTExID0gYVs1XSxcclxuICAgICAgYTEyID0gYVs2XSxcclxuICAgICAgYTEzID0gYVs3XTtcclxuICB2YXIgYTIwID0gYVs4XSxcclxuICAgICAgYTIxID0gYVs5XSxcclxuICAgICAgYTIyID0gYVsxMF0sXHJcbiAgICAgIGEyMyA9IGFbMTFdO1xyXG4gIHZhciBhMzAgPSBhWzEyXSxcclxuICAgICAgYTMxID0gYVsxM10sXHJcbiAgICAgIGEzMiA9IGFbMTRdLFxyXG4gICAgICBhMzMgPSBhWzE1XTtcclxuXHJcbiAgLy8gQ2FjaGUgb25seSB0aGUgY3VycmVudCBsaW5lIG9mIHRoZSBzZWNvbmQgbWF0cml4XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICBiMiA9IGJbMl0sXHJcbiAgICAgIGIzID0gYlszXTtcclxuICBvdXRbMF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICBvdXRbMV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICBvdXRbMl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcclxuICBvdXRbM10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuXHJcbiAgYjAgPSBiWzRdO2IxID0gYls1XTtiMiA9IGJbNl07YjMgPSBiWzddO1xyXG4gIG91dFs0XSA9IGIwICogYTAwICsgYjEgKiBhMTAgKyBiMiAqIGEyMCArIGIzICogYTMwO1xyXG4gIG91dFs1XSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gIG91dFs2XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gIG91dFs3XSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xyXG5cclxuICBiMCA9IGJbOF07YjEgPSBiWzldO2IyID0gYlsxMF07YjMgPSBiWzExXTtcclxuICBvdXRbOF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICBvdXRbOV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICBvdXRbMTBdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgb3V0WzExXSA9IGIwICogYTAzICsgYjEgKiBhMTMgKyBiMiAqIGEyMyArIGIzICogYTMzO1xyXG5cclxuICBiMCA9IGJbMTJdO2IxID0gYlsxM107YjIgPSBiWzE0XTtiMyA9IGJbMTVdO1xyXG4gIG91dFsxMl0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICBvdXRbMTNdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgb3V0WzE0XSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gIG91dFsxNV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNsYXRlIGEgbWF0NCBieSB0aGUgZ2l2ZW4gdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHRyYW5zbGF0ZVxyXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdmVjdG9yIHRvIHRyYW5zbGF0ZSBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsYXRlKG91dCwgYSwgdikge1xyXG4gIHZhciB4ID0gdlswXSxcclxuICAgICAgeSA9IHZbMV0sXHJcbiAgICAgIHogPSB2WzJdO1xyXG4gIHZhciBhMDAgPSB2b2lkIDAsXHJcbiAgICAgIGEwMSA9IHZvaWQgMCxcclxuICAgICAgYTAyID0gdm9pZCAwLFxyXG4gICAgICBhMDMgPSB2b2lkIDA7XHJcbiAgdmFyIGExMCA9IHZvaWQgMCxcclxuICAgICAgYTExID0gdm9pZCAwLFxyXG4gICAgICBhMTIgPSB2b2lkIDAsXHJcbiAgICAgIGExMyA9IHZvaWQgMDtcclxuICB2YXIgYTIwID0gdm9pZCAwLFxyXG4gICAgICBhMjEgPSB2b2lkIDAsXHJcbiAgICAgIGEyMiA9IHZvaWQgMCxcclxuICAgICAgYTIzID0gdm9pZCAwO1xyXG5cclxuICBpZiAoYSA9PT0gb3V0KSB7XHJcbiAgICBvdXRbMTJdID0gYVswXSAqIHggKyBhWzRdICogeSArIGFbOF0gKiB6ICsgYVsxMl07XHJcbiAgICBvdXRbMTNdID0gYVsxXSAqIHggKyBhWzVdICogeSArIGFbOV0gKiB6ICsgYVsxM107XHJcbiAgICBvdXRbMTRdID0gYVsyXSAqIHggKyBhWzZdICogeSArIGFbMTBdICogeiArIGFbMTRdO1xyXG4gICAgb3V0WzE1XSA9IGFbM10gKiB4ICsgYVs3XSAqIHkgKyBhWzExXSAqIHogKyBhWzE1XTtcclxuICB9IGVsc2Uge1xyXG4gICAgYTAwID0gYVswXTthMDEgPSBhWzFdO2EwMiA9IGFbMl07YTAzID0gYVszXTtcclxuICAgIGExMCA9IGFbNF07YTExID0gYVs1XTthMTIgPSBhWzZdO2ExMyA9IGFbN107XHJcbiAgICBhMjAgPSBhWzhdO2EyMSA9IGFbOV07YTIyID0gYVsxMF07YTIzID0gYVsxMV07XHJcblxyXG4gICAgb3V0WzBdID0gYTAwO291dFsxXSA9IGEwMTtvdXRbMl0gPSBhMDI7b3V0WzNdID0gYTAzO1xyXG4gICAgb3V0WzRdID0gYTEwO291dFs1XSA9IGExMTtvdXRbNl0gPSBhMTI7b3V0WzddID0gYTEzO1xyXG4gICAgb3V0WzhdID0gYTIwO291dFs5XSA9IGEyMTtvdXRbMTBdID0gYTIyO291dFsxMV0gPSBhMjM7XHJcblxyXG4gICAgb3V0WzEyXSA9IGEwMCAqIHggKyBhMTAgKiB5ICsgYTIwICogeiArIGFbMTJdO1xyXG4gICAgb3V0WzEzXSA9IGEwMSAqIHggKyBhMTEgKiB5ICsgYTIxICogeiArIGFbMTNdO1xyXG4gICAgb3V0WzE0XSA9IGEwMiAqIHggKyBhMTIgKiB5ICsgYTIyICogeiArIGFbMTRdO1xyXG4gICAgb3V0WzE1XSA9IGEwMyAqIHggKyBhMTMgKiB5ICsgYTIzICogeiArIGFbMTVdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNjYWxlcyB0aGUgbWF0NCBieSB0aGUgZGltZW5zaW9ucyBpbiB0aGUgZ2l2ZW4gdmVjMyBub3QgdXNpbmcgdmVjdG9yaXphdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge3ZlYzN9IHYgdGhlIHZlYzMgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xyXG4gIHZhciB4ID0gdlswXSxcclxuICAgICAgeSA9IHZbMV0sXHJcbiAgICAgIHogPSB2WzJdO1xyXG5cclxuICBvdXRbMF0gPSBhWzBdICogeDtcclxuICBvdXRbMV0gPSBhWzFdICogeDtcclxuICBvdXRbMl0gPSBhWzJdICogeDtcclxuICBvdXRbM10gPSBhWzNdICogeDtcclxuICBvdXRbNF0gPSBhWzRdICogeTtcclxuICBvdXRbNV0gPSBhWzVdICogeTtcclxuICBvdXRbNl0gPSBhWzZdICogeTtcclxuICBvdXRbN10gPSBhWzddICogeTtcclxuICBvdXRbOF0gPSBhWzhdICogejtcclxuICBvdXRbOV0gPSBhWzldICogejtcclxuICBvdXRbMTBdID0gYVsxMF0gKiB6O1xyXG4gIG91dFsxMV0gPSBhWzExXSAqIHo7XHJcbiAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gIG91dFsxM10gPSBhWzEzXTtcclxuICBvdXRbMTRdID0gYVsxNF07XHJcbiAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0NCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBnaXZlbiBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkLCBheGlzKSB7XHJcbiAgdmFyIHggPSBheGlzWzBdLFxyXG4gICAgICB5ID0gYXhpc1sxXSxcclxuICAgICAgeiA9IGF4aXNbMl07XHJcbiAgdmFyIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG4gIHZhciBzID0gdm9pZCAwLFxyXG4gICAgICBjID0gdm9pZCAwLFxyXG4gICAgICB0ID0gdm9pZCAwO1xyXG4gIHZhciBhMDAgPSB2b2lkIDAsXHJcbiAgICAgIGEwMSA9IHZvaWQgMCxcclxuICAgICAgYTAyID0gdm9pZCAwLFxyXG4gICAgICBhMDMgPSB2b2lkIDA7XHJcbiAgdmFyIGExMCA9IHZvaWQgMCxcclxuICAgICAgYTExID0gdm9pZCAwLFxyXG4gICAgICBhMTIgPSB2b2lkIDAsXHJcbiAgICAgIGExMyA9IHZvaWQgMDtcclxuICB2YXIgYTIwID0gdm9pZCAwLFxyXG4gICAgICBhMjEgPSB2b2lkIDAsXHJcbiAgICAgIGEyMiA9IHZvaWQgMCxcclxuICAgICAgYTIzID0gdm9pZCAwO1xyXG4gIHZhciBiMDAgPSB2b2lkIDAsXHJcbiAgICAgIGIwMSA9IHZvaWQgMCxcclxuICAgICAgYjAyID0gdm9pZCAwO1xyXG4gIHZhciBiMTAgPSB2b2lkIDAsXHJcbiAgICAgIGIxMSA9IHZvaWQgMCxcclxuICAgICAgYjEyID0gdm9pZCAwO1xyXG4gIHZhciBiMjAgPSB2b2lkIDAsXHJcbiAgICAgIGIyMSA9IHZvaWQgMCxcclxuICAgICAgYjIyID0gdm9pZCAwO1xyXG5cclxuICBpZiAobGVuIDwgZ2xNYXRyaXguRVBTSUxPTikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBsZW4gPSAxIC8gbGVuO1xyXG4gIHggKj0gbGVuO1xyXG4gIHkgKj0gbGVuO1xyXG4gIHogKj0gbGVuO1xyXG5cclxuICBzID0gTWF0aC5zaW4ocmFkKTtcclxuICBjID0gTWF0aC5jb3MocmFkKTtcclxuICB0ID0gMSAtIGM7XHJcblxyXG4gIGEwMCA9IGFbMF07YTAxID0gYVsxXTthMDIgPSBhWzJdO2EwMyA9IGFbM107XHJcbiAgYTEwID0gYVs0XTthMTEgPSBhWzVdO2ExMiA9IGFbNl07YTEzID0gYVs3XTtcclxuICBhMjAgPSBhWzhdO2EyMSA9IGFbOV07YTIyID0gYVsxMF07YTIzID0gYVsxMV07XHJcblxyXG4gIC8vIENvbnN0cnVjdCB0aGUgZWxlbWVudHMgb2YgdGhlIHJvdGF0aW9uIG1hdHJpeFxyXG4gIGIwMCA9IHggKiB4ICogdCArIGM7YjAxID0geSAqIHggKiB0ICsgeiAqIHM7YjAyID0geiAqIHggKiB0IC0geSAqIHM7XHJcbiAgYjEwID0geCAqIHkgKiB0IC0geiAqIHM7YjExID0geSAqIHkgKiB0ICsgYztiMTIgPSB6ICogeSAqIHQgKyB4ICogcztcclxuICBiMjAgPSB4ICogeiAqIHQgKyB5ICogcztiMjEgPSB5ICogeiAqIHQgLSB4ICogcztiMjIgPSB6ICogeiAqIHQgKyBjO1xyXG5cclxuICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG4gIG91dFswXSA9IGEwMCAqIGIwMCArIGExMCAqIGIwMSArIGEyMCAqIGIwMjtcclxuICBvdXRbMV0gPSBhMDEgKiBiMDAgKyBhMTEgKiBiMDEgKyBhMjEgKiBiMDI7XHJcbiAgb3V0WzJdID0gYTAyICogYjAwICsgYTEyICogYjAxICsgYTIyICogYjAyO1xyXG4gIG91dFszXSA9IGEwMyAqIGIwMCArIGExMyAqIGIwMSArIGEyMyAqIGIwMjtcclxuICBvdXRbNF0gPSBhMDAgKiBiMTAgKyBhMTAgKiBiMTEgKyBhMjAgKiBiMTI7XHJcbiAgb3V0WzVdID0gYTAxICogYjEwICsgYTExICogYjExICsgYTIxICogYjEyO1xyXG4gIG91dFs2XSA9IGEwMiAqIGIxMCArIGExMiAqIGIxMSArIGEyMiAqIGIxMjtcclxuICBvdXRbN10gPSBhMDMgKiBiMTAgKyBhMTMgKiBiMTEgKyBhMjMgKiBiMTI7XHJcbiAgb3V0WzhdID0gYTAwICogYjIwICsgYTEwICogYjIxICsgYTIwICogYjIyO1xyXG4gIG91dFs5XSA9IGEwMSAqIGIyMCArIGExMSAqIGIyMSArIGEyMSAqIGIyMjtcclxuICBvdXRbMTBdID0gYTAyICogYjIwICsgYTEyICogYjIxICsgYTIyICogYjIyO1xyXG4gIG91dFsxMV0gPSBhMDMgKiBiMjAgKyBhMTMgKiBiMjEgKyBhMjMgKiBiMjI7XHJcblxyXG4gIGlmIChhICE9PSBvdXQpIHtcclxuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XHJcbiAgICBvdXRbMTJdID0gYVsxMl07XHJcbiAgICBvdXRbMTNdID0gYVsxM107XHJcbiAgICBvdXRbMTRdID0gYVsxNF07XHJcbiAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gIHZhciBhMTAgPSBhWzRdO1xyXG4gIHZhciBhMTEgPSBhWzVdO1xyXG4gIHZhciBhMTIgPSBhWzZdO1xyXG4gIHZhciBhMTMgPSBhWzddO1xyXG4gIHZhciBhMjAgPSBhWzhdO1xyXG4gIHZhciBhMjEgPSBhWzldO1xyXG4gIHZhciBhMjIgPSBhWzEwXTtcclxuICB2YXIgYTIzID0gYVsxMV07XHJcblxyXG4gIGlmIChhICE9PSBvdXQpIHtcclxuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIHJvd3NcclxuICAgIG91dFswXSA9IGFbMF07XHJcbiAgICBvdXRbMV0gPSBhWzFdO1xyXG4gICAgb3V0WzJdID0gYVsyXTtcclxuICAgIG91dFszXSA9IGFbM107XHJcbiAgICBvdXRbMTJdID0gYVsxMl07XHJcbiAgICBvdXRbMTNdID0gYVsxM107XHJcbiAgICBvdXRbMTRdID0gYVsxNF07XHJcbiAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgfVxyXG5cclxuICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgb3V0WzRdID0gYTEwICogYyArIGEyMCAqIHM7XHJcbiAgb3V0WzVdID0gYTExICogYyArIGEyMSAqIHM7XHJcbiAgb3V0WzZdID0gYTEyICogYyArIGEyMiAqIHM7XHJcbiAgb3V0WzddID0gYTEzICogYyArIGEyMyAqIHM7XHJcbiAgb3V0WzhdID0gYTIwICogYyAtIGExMCAqIHM7XHJcbiAgb3V0WzldID0gYTIxICogYyAtIGExMSAqIHM7XHJcbiAgb3V0WzEwXSA9IGEyMiAqIGMgLSBhMTIgKiBzO1xyXG4gIG91dFsxMV0gPSBhMjMgKiBjIC0gYTEzICogcztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcclxuICB2YXIgYTAwID0gYVswXTtcclxuICB2YXIgYTAxID0gYVsxXTtcclxuICB2YXIgYTAyID0gYVsyXTtcclxuICB2YXIgYTAzID0gYVszXTtcclxuICB2YXIgYTIwID0gYVs4XTtcclxuICB2YXIgYTIxID0gYVs5XTtcclxuICB2YXIgYTIyID0gYVsxMF07XHJcbiAgdmFyIGEyMyA9IGFbMTFdO1xyXG5cclxuICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXHJcbiAgICBvdXRbNF0gPSBhWzRdO1xyXG4gICAgb3V0WzVdID0gYVs1XTtcclxuICAgIG91dFs2XSA9IGFbNl07XHJcbiAgICBvdXRbN10gPSBhWzddO1xyXG4gICAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gICAgb3V0WzEzXSA9IGFbMTNdO1xyXG4gICAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIH1cclxuXHJcbiAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG4gIG91dFswXSA9IGEwMCAqIGMgLSBhMjAgKiBzO1xyXG4gIG91dFsxXSA9IGEwMSAqIGMgLSBhMjEgKiBzO1xyXG4gIG91dFsyXSA9IGEwMiAqIGMgLSBhMjIgKiBzO1xyXG4gIG91dFszXSA9IGEwMyAqIGMgLSBhMjMgKiBzO1xyXG4gIG91dFs4XSA9IGEwMCAqIHMgKyBhMjAgKiBjO1xyXG4gIG91dFs5XSA9IGEwMSAqIHMgKyBhMjEgKiBjO1xyXG4gIG91dFsxMF0gPSBhMDIgKiBzICsgYTIyICogYztcclxuICBvdXRbMTFdID0gYTAzICogcyArIGEyMyAqIGM7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWiBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgdmFyIGEwMCA9IGFbMF07XHJcbiAgdmFyIGEwMSA9IGFbMV07XHJcbiAgdmFyIGEwMiA9IGFbMl07XHJcbiAgdmFyIGEwMyA9IGFbM107XHJcbiAgdmFyIGExMCA9IGFbNF07XHJcbiAgdmFyIGExMSA9IGFbNV07XHJcbiAgdmFyIGExMiA9IGFbNl07XHJcbiAgdmFyIGExMyA9IGFbN107XHJcblxyXG4gIGlmIChhICE9PSBvdXQpIHtcclxuICAgIC8vIElmIHRoZSBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIGRpZmZlciwgY29weSB0aGUgdW5jaGFuZ2VkIGxhc3Qgcm93XHJcbiAgICBvdXRbOF0gPSBhWzhdO1xyXG4gICAgb3V0WzldID0gYVs5XTtcclxuICAgIG91dFsxMF0gPSBhWzEwXTtcclxuICAgIG91dFsxMV0gPSBhWzExXTtcclxuICAgIG91dFsxMl0gPSBhWzEyXTtcclxuICAgIG91dFsxM10gPSBhWzEzXTtcclxuICAgIG91dFsxNF0gPSBhWzE0XTtcclxuICAgIG91dFsxNV0gPSBhWzE1XTtcclxuICB9XHJcblxyXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuICBvdXRbMF0gPSBhMDAgKiBjICsgYTEwICogcztcclxuICBvdXRbMV0gPSBhMDEgKiBjICsgYTExICogcztcclxuICBvdXRbMl0gPSBhMDIgKiBjICsgYTEyICogcztcclxuICBvdXRbM10gPSBhMDMgKiBjICsgYTEzICogcztcclxuICBvdXRbNF0gPSBhMTAgKiBjIC0gYTAwICogcztcclxuICBvdXRbNV0gPSBhMTEgKiBjIC0gYTAxICogcztcclxuICBvdXRbNl0gPSBhMTIgKiBjIC0gYTAyICogcztcclxuICBvdXRbN10gPSBhMTMgKiBjIC0gYTAzICogcztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVRyYW5zbGF0aW9uKG91dCwgdikge1xyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSAxO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAwO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzEwXSA9IDE7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IHZbMF07XHJcbiAgb3V0WzEzXSA9IHZbMV07XHJcbiAgb3V0WzE0XSA9IHZbMl07XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3ZlYzN9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xyXG4gIG91dFswXSA9IHZbMF07XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSB2WzFdO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAwO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzEwXSA9IHZbMl07XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IDA7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlIGFyb3VuZCBhIGdpdmVuIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkLCBheGlzKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgdG8gcm90YXRlIGFyb3VuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkLCBheGlzKSB7XHJcbiAgdmFyIHggPSBheGlzWzBdLFxyXG4gICAgICB5ID0gYXhpc1sxXSxcclxuICAgICAgeiA9IGF4aXNbMl07XHJcbiAgdmFyIGxlbiA9IE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG4gIHZhciBzID0gdm9pZCAwLFxyXG4gICAgICBjID0gdm9pZCAwLFxyXG4gICAgICB0ID0gdm9pZCAwO1xyXG5cclxuICBpZiAobGVuIDwgZ2xNYXRyaXguRVBTSUxPTikge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICBsZW4gPSAxIC8gbGVuO1xyXG4gIHggKj0gbGVuO1xyXG4gIHkgKj0gbGVuO1xyXG4gIHogKj0gbGVuO1xyXG5cclxuICBzID0gTWF0aC5zaW4ocmFkKTtcclxuICBjID0gTWF0aC5jb3MocmFkKTtcclxuICB0ID0gMSAtIGM7XHJcblxyXG4gIC8vIFBlcmZvcm0gcm90YXRpb24tc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgb3V0WzBdID0geCAqIHggKiB0ICsgYztcclxuICBvdXRbMV0gPSB5ICogeCAqIHQgKyB6ICogcztcclxuICBvdXRbMl0gPSB6ICogeCAqIHQgLSB5ICogcztcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IHggKiB5ICogdCAtIHogKiBzO1xyXG4gIG91dFs1XSA9IHkgKiB5ICogdCArIGM7XHJcbiAgb3V0WzZdID0geiAqIHkgKiB0ICsgeCAqIHM7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSB4ICogeiAqIHQgKyB5ICogcztcclxuICBvdXRbOV0gPSB5ICogeiAqIHQgLSB4ICogcztcclxuICBvdXRbMTBdID0geiAqIHogKiB0ICsgYztcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gMDtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFggYXhpc1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnJvdGF0ZVgoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVhSb3RhdGlvbihvdXQsIHJhZCkge1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcblxyXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuICBvdXRbMF0gPSAxO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gYztcclxuICBvdXRbNl0gPSBzO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gMDtcclxuICBvdXRbOV0gPSAtcztcclxuICBvdXRbMTBdID0gYztcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gMDtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFkgYXhpc1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnJvdGF0ZVkoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVlSb3RhdGlvbihvdXQsIHJhZCkge1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcblxyXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuICBvdXRbMF0gPSBjO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gLXM7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSAwO1xyXG4gIG91dFs1XSA9IDE7XHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IHM7XHJcbiAgb3V0WzldID0gMDtcclxuICBvdXRbMTBdID0gYztcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gMDtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnJvdGF0ZVooZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVpSb3RhdGlvbihvdXQsIHJhZCkge1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcblxyXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuICBvdXRbMF0gPSBjO1xyXG4gIG91dFsxXSA9IHM7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IC1zO1xyXG4gIG91dFs1XSA9IGM7XHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDA7XHJcbiAgb3V0WzldID0gMDtcclxuICBvdXRbMTBdID0gMTtcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gMDtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiBhbmQgdmVjdG9yIHRyYW5zbGF0aW9uXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XHJcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvbihvdXQsIHEsIHYpIHtcclxuICAvLyBRdWF0ZXJuaW9uIG1hdGhcclxuICB2YXIgeCA9IHFbMF0sXHJcbiAgICAgIHkgPSBxWzFdLFxyXG4gICAgICB6ID0gcVsyXSxcclxuICAgICAgdyA9IHFbM107XHJcbiAgdmFyIHgyID0geCArIHg7XHJcbiAgdmFyIHkyID0geSArIHk7XHJcbiAgdmFyIHoyID0geiArIHo7XHJcblxyXG4gIHZhciB4eCA9IHggKiB4MjtcclxuICB2YXIgeHkgPSB4ICogeTI7XHJcbiAgdmFyIHh6ID0geCAqIHoyO1xyXG4gIHZhciB5eSA9IHkgKiB5MjtcclxuICB2YXIgeXogPSB5ICogejI7XHJcbiAgdmFyIHp6ID0geiAqIHoyO1xyXG4gIHZhciB3eCA9IHcgKiB4MjtcclxuICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgdmFyIHd6ID0gdyAqIHoyO1xyXG5cclxuICBvdXRbMF0gPSAxIC0gKHl5ICsgenopO1xyXG4gIG91dFsxXSA9IHh5ICsgd3o7XHJcbiAgb3V0WzJdID0geHogLSB3eTtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IHh5IC0gd3o7XHJcbiAgb3V0WzVdID0gMSAtICh4eCArIHp6KTtcclxuICBvdXRbNl0gPSB5eiArIHd4O1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0geHogKyB3eTtcclxuICBvdXRbOV0gPSB5eiAtIHd4O1xyXG4gIG91dFsxMF0gPSAxIC0gKHh4ICsgeXkpO1xyXG4gIG91dFsxMV0gPSAwO1xyXG4gIG91dFsxMl0gPSB2WzBdO1xyXG4gIG91dFsxM10gPSB2WzFdO1xyXG4gIG91dFsxNF0gPSB2WzJdO1xyXG4gIG91dFsxNV0gPSAxO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtYXQ0IGZyb20gYSBkdWFsIHF1YXQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IE1hdHJpeFxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIER1YWwgUXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7bWF0NH0gbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0MihvdXQsIGEpIHtcclxuICB2YXIgdHJhbnNsYXRpb24gPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcclxuICB2YXIgYnggPSAtYVswXSxcclxuICAgICAgYnkgPSAtYVsxXSxcclxuICAgICAgYnogPSAtYVsyXSxcclxuICAgICAgYncgPSBhWzNdLFxyXG4gICAgICBheCA9IGFbNF0sXHJcbiAgICAgIGF5ID0gYVs1XSxcclxuICAgICAgYXogPSBhWzZdLFxyXG4gICAgICBhdyA9IGFbN107XHJcblxyXG4gIHZhciBtYWduaXR1ZGUgPSBieCAqIGJ4ICsgYnkgKiBieSArIGJ6ICogYnogKyBidyAqIGJ3O1xyXG4gIC8vT25seSBzY2FsZSBpZiBpdCBtYWtlcyBzZW5zZVxyXG4gIGlmIChtYWduaXR1ZGUgPiAwKSB7XHJcbiAgICB0cmFuc2xhdGlvblswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDIgLyBtYWduaXR1ZGU7XHJcbiAgICB0cmFuc2xhdGlvblsxXSA9IChheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6KSAqIDIgLyBtYWduaXR1ZGU7XHJcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDIgLyBtYWduaXR1ZGU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRyYW5zbGF0aW9uWzBdID0gKGF4ICogYncgKyBhdyAqIGJ4ICsgYXkgKiBieiAtIGF6ICogYnkpICogMjtcclxuICAgIHRyYW5zbGF0aW9uWzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcclxuICAgIHRyYW5zbGF0aW9uWzJdID0gKGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYngpICogMjtcclxuICB9XHJcbiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBhLCB0cmFuc2xhdGlvbik7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHRyYW5zbGF0aW9uIHZlY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxyXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLFxyXG4gKiAgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlIHRoZSBzYW1lIGFzIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3JcclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSB0cmFuc2xhdGlvbiBjb21wb25lbnRcclxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcclxuICogQHJldHVybiB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBtYXQpIHtcclxuICBvdXRbMF0gPSBtYXRbMTJdO1xyXG4gIG91dFsxXSA9IG1hdFsxM107XHJcbiAgb3V0WzJdID0gbWF0WzE0XTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHNjYWxpbmcgZmFjdG9yIGNvbXBvbmVudCBvZiBhIHRyYW5zZm9ybWF0aW9uXHJcbiAqICBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGggZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZVxyXG4gKiAgd2l0aCBhIG5vcm1hbGl6ZWQgUXVhdGVybmlvbiBwYXJhbXRlciwgdGhlIHJldHVybmVkIHZlY3RvciB3aWxsIGJlXHJcbiAqICB0aGUgc2FtZSBhcyB0aGUgc2NhbGluZyB2ZWN0b3JcclxuICogIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAqIEBwYXJhbSAge3ZlYzN9IG91dCBWZWN0b3IgdG8gcmVjZWl2ZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnRcclxuICogQHBhcmFtICB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcclxuICogQHJldHVybiB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NhbGluZyhvdXQsIG1hdCkge1xyXG4gIHZhciBtMTEgPSBtYXRbMF07XHJcbiAgdmFyIG0xMiA9IG1hdFsxXTtcclxuICB2YXIgbTEzID0gbWF0WzJdO1xyXG4gIHZhciBtMjEgPSBtYXRbNF07XHJcbiAgdmFyIG0yMiA9IG1hdFs1XTtcclxuICB2YXIgbTIzID0gbWF0WzZdO1xyXG4gIHZhciBtMzEgPSBtYXRbOF07XHJcbiAgdmFyIG0zMiA9IG1hdFs5XTtcclxuICB2YXIgbTMzID0gbWF0WzEwXTtcclxuXHJcbiAgb3V0WzBdID0gTWF0aC5zcXJ0KG0xMSAqIG0xMSArIG0xMiAqIG0xMiArIG0xMyAqIG0xMyk7XHJcbiAgb3V0WzFdID0gTWF0aC5zcXJ0KG0yMSAqIG0yMSArIG0yMiAqIG0yMiArIG0yMyAqIG0yMyk7XHJcbiAgb3V0WzJdID0gTWF0aC5zcXJ0KG0zMSAqIG0zMSArIG0zMiAqIG0zMiArIG0zMyAqIG0zMyk7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJvdGF0aW9uYWwgY29tcG9uZW50XHJcbiAqICBvZiBhIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aFxyXG4gKiAgZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24sIHRoZSByZXR1cm5lZCBxdWF0ZXJuaW9uIHdpbGwgYmUgdGhlXHJcbiAqICBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIG9yaWdpbmFsbHkgc3VwcGxpZWQuXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IFF1YXRlcm5pb24gdG8gcmVjZWl2ZSB0aGUgcm90YXRpb24gY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7bWF0NH0gbWF0IE1hdHJpeCB0byBiZSBkZWNvbXBvc2VkIChpbnB1dClcclxuICogQHJldHVybiB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Um90YXRpb24ob3V0LCBtYXQpIHtcclxuICAvLyBBbGdvcml0aG0gdGFrZW4gZnJvbSBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxyXG4gIHZhciB0cmFjZSA9IG1hdFswXSArIG1hdFs1XSArIG1hdFsxMF07XHJcbiAgdmFyIFMgPSAwO1xyXG5cclxuICBpZiAodHJhY2UgPiAwKSB7XHJcbiAgICBTID0gTWF0aC5zcXJ0KHRyYWNlICsgMS4wKSAqIDI7XHJcbiAgICBvdXRbM10gPSAwLjI1ICogUztcclxuICAgIG91dFswXSA9IChtYXRbNl0gLSBtYXRbOV0pIC8gUztcclxuICAgIG91dFsxXSA9IChtYXRbOF0gLSBtYXRbMl0pIC8gUztcclxuICAgIG91dFsyXSA9IChtYXRbMV0gLSBtYXRbNF0pIC8gUztcclxuICB9IGVsc2UgaWYgKG1hdFswXSA+IG1hdFs1XSAmJiBtYXRbMF0gPiBtYXRbMTBdKSB7XHJcbiAgICBTID0gTWF0aC5zcXJ0KDEuMCArIG1hdFswXSAtIG1hdFs1XSAtIG1hdFsxMF0pICogMjtcclxuICAgIG91dFszXSA9IChtYXRbNl0gLSBtYXRbOV0pIC8gUztcclxuICAgIG91dFswXSA9IDAuMjUgKiBTO1xyXG4gICAgb3V0WzFdID0gKG1hdFsxXSArIG1hdFs0XSkgLyBTO1xyXG4gICAgb3V0WzJdID0gKG1hdFs4XSArIG1hdFsyXSkgLyBTO1xyXG4gIH0gZWxzZSBpZiAobWF0WzVdID4gbWF0WzEwXSkge1xyXG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbNV0gLSBtYXRbMF0gLSBtYXRbMTBdKSAqIDI7XHJcbiAgICBvdXRbM10gPSAobWF0WzhdIC0gbWF0WzJdKSAvIFM7XHJcbiAgICBvdXRbMF0gPSAobWF0WzFdICsgbWF0WzRdKSAvIFM7XHJcbiAgICBvdXRbMV0gPSAwLjI1ICogUztcclxuICAgIG91dFsyXSA9IChtYXRbNl0gKyBtYXRbOV0pIC8gUztcclxuICB9IGVsc2Uge1xyXG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbMTBdIC0gbWF0WzBdIC0gbWF0WzVdKSAqIDI7XHJcbiAgICBvdXRbM10gPSAobWF0WzFdIC0gbWF0WzRdKSAvIFM7XHJcbiAgICBvdXRbMF0gPSAobWF0WzhdICsgbWF0WzJdKSAvIFM7XHJcbiAgICBvdXRbMV0gPSAobWF0WzZdICsgbWF0WzldKSAvIFM7XHJcbiAgICBvdXRbMl0gPSAwLjI1ICogUztcclxuICB9XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZVxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xyXG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcclxuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlKG91dCwgcSwgdiwgcykge1xyXG4gIC8vIFF1YXRlcm5pb24gbWF0aFxyXG4gIHZhciB4ID0gcVswXSxcclxuICAgICAgeSA9IHFbMV0sXHJcbiAgICAgIHogPSBxWzJdLFxyXG4gICAgICB3ID0gcVszXTtcclxuICB2YXIgeDIgPSB4ICsgeDtcclxuICB2YXIgeTIgPSB5ICsgeTtcclxuICB2YXIgejIgPSB6ICsgejtcclxuXHJcbiAgdmFyIHh4ID0geCAqIHgyO1xyXG4gIHZhciB4eSA9IHggKiB5MjtcclxuICB2YXIgeHogPSB4ICogejI7XHJcbiAgdmFyIHl5ID0geSAqIHkyO1xyXG4gIHZhciB5eiA9IHkgKiB6MjtcclxuICB2YXIgenogPSB6ICogejI7XHJcbiAgdmFyIHd4ID0gdyAqIHgyO1xyXG4gIHZhciB3eSA9IHcgKiB5MjtcclxuICB2YXIgd3ogPSB3ICogejI7XHJcbiAgdmFyIHN4ID0gc1swXTtcclxuICB2YXIgc3kgPSBzWzFdO1xyXG4gIHZhciBzeiA9IHNbMl07XHJcblxyXG4gIG91dFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4O1xyXG4gIG91dFsxXSA9ICh4eSArIHd6KSAqIHN4O1xyXG4gIG91dFsyXSA9ICh4eiAtIHd5KSAqIHN4O1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gKHh5IC0gd3opICogc3k7XHJcbiAgb3V0WzVdID0gKDEgLSAoeHggKyB6eikpICogc3k7XHJcbiAgb3V0WzZdID0gKHl6ICsgd3gpICogc3k7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAoeHogKyB3eSkgKiBzejtcclxuICBvdXRbOV0gPSAoeXogLSB3eCkgKiBzejtcclxuICBvdXRbMTBdID0gKDEgLSAoeHggKyB5eSkpICogc3o7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IHZbMF07XHJcbiAgb3V0WzEzXSA9IHZbMV07XHJcbiAgb3V0WzE0XSA9IHZbMl07XHJcbiAgb3V0WzE1XSA9IDE7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBxdWF0ZXJuaW9uIHJvdGF0aW9uLCB2ZWN0b3IgdHJhbnNsYXRpb24gYW5kIHZlY3RvciBzY2FsZSwgcm90YXRpbmcgYW5kIHNjYWxpbmcgYXJvdW5kIHRoZSBnaXZlbiBvcmlnaW5cclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG9yaWdpbik7XHJcbiAqICAgICBsZXQgcXVhdE1hdCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAqICAgICBxdWF0NC50b01hdDQocXVhdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0Lm11bHRpcGx5KGRlc3QsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5zY2FsZShkZXN0LCBzY2FsZSlcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIG5lZ2F0aXZlT3JpZ2luKTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IHMgU2NhbGluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBvIFRoZSBvcmlnaW4gdmVjdG9yIGFyb3VuZCB3aGljaCB0byBzY2FsZSBhbmQgcm90YXRlXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luKG91dCwgcSwgdiwgcywgbykge1xyXG4gIC8vIFF1YXRlcm5pb24gbWF0aFxyXG4gIHZhciB4ID0gcVswXSxcclxuICAgICAgeSA9IHFbMV0sXHJcbiAgICAgIHogPSBxWzJdLFxyXG4gICAgICB3ID0gcVszXTtcclxuICB2YXIgeDIgPSB4ICsgeDtcclxuICB2YXIgeTIgPSB5ICsgeTtcclxuICB2YXIgejIgPSB6ICsgejtcclxuXHJcbiAgdmFyIHh4ID0geCAqIHgyO1xyXG4gIHZhciB4eSA9IHggKiB5MjtcclxuICB2YXIgeHogPSB4ICogejI7XHJcbiAgdmFyIHl5ID0geSAqIHkyO1xyXG4gIHZhciB5eiA9IHkgKiB6MjtcclxuICB2YXIgenogPSB6ICogejI7XHJcbiAgdmFyIHd4ID0gdyAqIHgyO1xyXG4gIHZhciB3eSA9IHcgKiB5MjtcclxuICB2YXIgd3ogPSB3ICogejI7XHJcblxyXG4gIHZhciBzeCA9IHNbMF07XHJcbiAgdmFyIHN5ID0gc1sxXTtcclxuICB2YXIgc3ogPSBzWzJdO1xyXG5cclxuICB2YXIgb3ggPSBvWzBdO1xyXG4gIHZhciBveSA9IG9bMV07XHJcbiAgdmFyIG96ID0gb1syXTtcclxuXHJcbiAgdmFyIG91dDAgPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcclxuICB2YXIgb3V0MSA9ICh4eSArIHd6KSAqIHN4O1xyXG4gIHZhciBvdXQyID0gKHh6IC0gd3kpICogc3g7XHJcbiAgdmFyIG91dDQgPSAoeHkgLSB3eikgKiBzeTtcclxuICB2YXIgb3V0NSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xyXG4gIHZhciBvdXQ2ID0gKHl6ICsgd3gpICogc3k7XHJcbiAgdmFyIG91dDggPSAoeHogKyB3eSkgKiBzejtcclxuICB2YXIgb3V0OSA9ICh5eiAtIHd4KSAqIHN6O1xyXG4gIHZhciBvdXQxMCA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xyXG5cclxuICBvdXRbMF0gPSBvdXQwO1xyXG4gIG91dFsxXSA9IG91dDE7XHJcbiAgb3V0WzJdID0gb3V0MjtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IG91dDQ7XHJcbiAgb3V0WzVdID0gb3V0NTtcclxuICBvdXRbNl0gPSBvdXQ2O1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gb3V0ODtcclxuICBvdXRbOV0gPSBvdXQ5O1xyXG4gIG91dFsxMF0gPSBvdXQxMDtcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gdlswXSArIG94IC0gKG91dDAgKiBveCArIG91dDQgKiBveSArIG91dDggKiBveik7XHJcbiAgb3V0WzEzXSA9IHZbMV0gKyBveSAtIChvdXQxICogb3ggKyBvdXQ1ICogb3kgKyBvdXQ5ICogb3opO1xyXG4gIG91dFsxNF0gPSB2WzJdICsgb3ogLSAob3V0MiAqIG94ICsgb3V0NiAqIG95ICsgb3V0MTAgKiBveik7XHJcbiAgb3V0WzE1XSA9IDE7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGEgNHg0IG1hdHJpeCBmcm9tIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtxdWF0fSBxIFF1YXRlcm5pb24gdG8gY3JlYXRlIG1hdHJpeCBmcm9tXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdChvdXQsIHEpIHtcclxuICB2YXIgeCA9IHFbMF0sXHJcbiAgICAgIHkgPSBxWzFdLFxyXG4gICAgICB6ID0gcVsyXSxcclxuICAgICAgdyA9IHFbM107XHJcbiAgdmFyIHgyID0geCArIHg7XHJcbiAgdmFyIHkyID0geSArIHk7XHJcbiAgdmFyIHoyID0geiArIHo7XHJcblxyXG4gIHZhciB4eCA9IHggKiB4MjtcclxuICB2YXIgeXggPSB5ICogeDI7XHJcbiAgdmFyIHl5ID0geSAqIHkyO1xyXG4gIHZhciB6eCA9IHogKiB4MjtcclxuICB2YXIgenkgPSB6ICogeTI7XHJcbiAgdmFyIHp6ID0geiAqIHoyO1xyXG4gIHZhciB3eCA9IHcgKiB4MjtcclxuICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgdmFyIHd6ID0gdyAqIHoyO1xyXG5cclxuICBvdXRbMF0gPSAxIC0geXkgLSB6ejtcclxuICBvdXRbMV0gPSB5eCArIHd6O1xyXG4gIG91dFsyXSA9IHp4IC0gd3k7XHJcbiAgb3V0WzNdID0gMDtcclxuXHJcbiAgb3V0WzRdID0geXggLSB3ejtcclxuICBvdXRbNV0gPSAxIC0geHggLSB6ejtcclxuICBvdXRbNl0gPSB6eSArIHd4O1xyXG4gIG91dFs3XSA9IDA7XHJcblxyXG4gIG91dFs4XSA9IHp4ICsgd3k7XHJcbiAgb3V0WzldID0genkgLSB3eDtcclxuICBvdXRbMTBdID0gMSAtIHh4IC0geXk7XHJcbiAgb3V0WzExXSA9IDA7XHJcblxyXG4gIG91dFsxMl0gPSAwO1xyXG4gIG91dFsxM10gPSAwO1xyXG4gIG91dFsxNF0gPSAwO1xyXG4gIG91dFsxNV0gPSAxO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgZnJ1c3R1bSBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtOdW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge051bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJ1c3R1bShvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XHJcbiAgdmFyIHJsID0gMSAvIChyaWdodCAtIGxlZnQpO1xyXG4gIHZhciB0YiA9IDEgLyAodG9wIC0gYm90dG9tKTtcclxuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xyXG4gIG91dFswXSA9IG5lYXIgKiAyICogcmw7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSBuZWFyICogMiAqIHRiO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAocmlnaHQgKyBsZWZ0KSAqIHJsO1xyXG4gIG91dFs5XSA9ICh0b3AgKyBib3R0b20pICogdGI7XHJcbiAgb3V0WzEwXSA9IChmYXIgKyBuZWFyKSAqIG5mO1xyXG4gIG91dFsxMV0gPSAtMTtcclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gZmFyICogbmVhciAqIDIgKiBuZjtcclxuICBvdXRbMTVdID0gMDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLlxyXG4gKiBQYXNzaW5nIG51bGwvdW5kZWZpbmVkL25vIHZhbHVlIGZvciBmYXIgd2lsbCBnZW5lcmF0ZSBpbmZpbml0ZSBwcm9qZWN0aW9uIG1hdHJpeC5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge251bWJlcn0gZm92eSBWZXJ0aWNhbCBmaWVsZCBvZiB2aWV3IGluIHJhZGlhbnNcclxuICogQHBhcmFtIHtudW1iZXJ9IGFzcGVjdCBBc3BlY3QgcmF0aW8uIHR5cGljYWxseSB2aWV3cG9ydCB3aWR0aC9oZWlnaHRcclxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bSwgY2FuIGJlIG51bGwgb3IgSW5maW5pdHlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlKG91dCwgZm92eSwgYXNwZWN0LCBuZWFyLCBmYXIpIHtcclxuICB2YXIgZiA9IDEuMCAvIE1hdGgudGFuKGZvdnkgLyAyKSxcclxuICAgICAgbmYgPSB2b2lkIDA7XHJcbiAgb3V0WzBdID0gZiAvIGFzcGVjdDtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSAwO1xyXG4gIG91dFs1XSA9IGY7XHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDA7XHJcbiAgb3V0WzldID0gMDtcclxuICBvdXRbMTFdID0gLTE7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE1XSA9IDA7XHJcbiAgaWYgKGZhciAhPSBudWxsICYmIGZhciAhPT0gSW5maW5pdHkpIHtcclxuICAgIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcclxuICAgIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcclxuICAgIG91dFsxNF0gPSAyICogZmFyICogbmVhciAqIG5mO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvdXRbMTBdID0gLTE7XHJcbiAgICBvdXRbMTRdID0gLTIgKiBuZWFyO1xyXG4gIH1cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcGVyc3BlY3RpdmUgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gZmllbGQgb2Ygdmlldy5cclxuICogVGhpcyBpcyBwcmltYXJpbHkgdXNlZnVsIGZvciBnZW5lcmF0aW5nIHByb2plY3Rpb24gbWF0cmljZXMgdG8gYmUgdXNlZFxyXG4gKiB3aXRoIHRoZSBzdGlsbCBleHBlcmllbWVudGFsIFdlYlZSIEFQSS5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge09iamVjdH0gZm92IE9iamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiB1cERlZ3JlZXMsIGRvd25EZWdyZWVzLCBsZWZ0RGVncmVlcywgcmlnaHREZWdyZWVzXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBlcnNwZWN0aXZlRnJvbUZpZWxkT2ZWaWV3KG91dCwgZm92LCBuZWFyLCBmYXIpIHtcclxuICB2YXIgdXBUYW4gPSBNYXRoLnRhbihmb3YudXBEZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcclxuICB2YXIgZG93blRhbiA9IE1hdGgudGFuKGZvdi5kb3duRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XHJcbiAgdmFyIGxlZnRUYW4gPSBNYXRoLnRhbihmb3YubGVmdERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xyXG4gIHZhciByaWdodFRhbiA9IE1hdGgudGFuKGZvdi5yaWdodERlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xyXG4gIHZhciB4U2NhbGUgPSAyLjAgLyAobGVmdFRhbiArIHJpZ2h0VGFuKTtcclxuICB2YXIgeVNjYWxlID0gMi4wIC8gKHVwVGFuICsgZG93blRhbik7XHJcblxyXG4gIG91dFswXSA9IHhTY2FsZTtcclxuICBvdXRbMV0gPSAwLjA7XHJcbiAgb3V0WzJdID0gMC4wO1xyXG4gIG91dFszXSA9IDAuMDtcclxuICBvdXRbNF0gPSAwLjA7XHJcbiAgb3V0WzVdID0geVNjYWxlO1xyXG4gIG91dFs2XSA9IDAuMDtcclxuICBvdXRbN10gPSAwLjA7XHJcbiAgb3V0WzhdID0gLSgobGVmdFRhbiAtIHJpZ2h0VGFuKSAqIHhTY2FsZSAqIDAuNSk7XHJcbiAgb3V0WzldID0gKHVwVGFuIC0gZG93blRhbikgKiB5U2NhbGUgKiAwLjU7XHJcbiAgb3V0WzEwXSA9IGZhciAvIChuZWFyIC0gZmFyKTtcclxuICBvdXRbMTFdID0gLTEuMDtcclxuICBvdXRbMTJdID0gMC4wO1xyXG4gIG91dFsxM10gPSAwLjA7XHJcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgLyAobmVhciAtIGZhcik7XHJcbiAgb3V0WzE1XSA9IDAuMDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgb3J0aG9nb25hbCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVmdCBMZWZ0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByaWdodCBSaWdodCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gYm90dG9tIEJvdHRvbSBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gdG9wIFRvcCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBvcnRobyhvdXQsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHRvcCwgbmVhciwgZmFyKSB7XHJcbiAgdmFyIGxyID0gMSAvIChsZWZ0IC0gcmlnaHQpO1xyXG4gIHZhciBidCA9IDEgLyAoYm90dG9tIC0gdG9wKTtcclxuICB2YXIgbmYgPSAxIC8gKG5lYXIgLSBmYXIpO1xyXG4gIG91dFswXSA9IC0yICogbHI7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSAtMiAqIGJ0O1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAwO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzEwXSA9IDIgKiBuZjtcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gKGxlZnQgKyByaWdodCkgKiBscjtcclxuICBvdXRbMTNdID0gKHRvcCArIGJvdHRvbSkgKiBidDtcclxuICBvdXRbMTRdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIGxvb2stYXQgbWF0cml4IHdpdGggdGhlIGdpdmVuIGV5ZSBwb3NpdGlvbiwgZm9jYWwgcG9pbnQsIGFuZCB1cCBheGlzLlxyXG4gKiBJZiB5b3Ugd2FudCBhIG1hdHJpeCB0aGF0IGFjdHVhbGx5IG1ha2VzIGFuIG9iamVjdCBsb29rIGF0IGFub3RoZXIgb2JqZWN0LCB5b3Ugc2hvdWxkIHVzZSB0YXJnZXRUbyBpbnN0ZWFkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7dmVjM30gZXllIFBvc2l0aW9uIG9mIHRoZSB2aWV3ZXJcclxuICogQHBhcmFtIHt2ZWMzfSBjZW50ZXIgUG9pbnQgdGhlIHZpZXdlciBpcyBsb29raW5nIGF0XHJcbiAqIEBwYXJhbSB7dmVjM30gdXAgdmVjMyBwb2ludGluZyB1cFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbG9va0F0KG91dCwgZXllLCBjZW50ZXIsIHVwKSB7XHJcbiAgdmFyIHgwID0gdm9pZCAwLFxyXG4gICAgICB4MSA9IHZvaWQgMCxcclxuICAgICAgeDIgPSB2b2lkIDAsXHJcbiAgICAgIHkwID0gdm9pZCAwLFxyXG4gICAgICB5MSA9IHZvaWQgMCxcclxuICAgICAgeTIgPSB2b2lkIDAsXHJcbiAgICAgIHowID0gdm9pZCAwLFxyXG4gICAgICB6MSA9IHZvaWQgMCxcclxuICAgICAgejIgPSB2b2lkIDAsXHJcbiAgICAgIGxlbiA9IHZvaWQgMDtcclxuICB2YXIgZXlleCA9IGV5ZVswXTtcclxuICB2YXIgZXlleSA9IGV5ZVsxXTtcclxuICB2YXIgZXlleiA9IGV5ZVsyXTtcclxuICB2YXIgdXB4ID0gdXBbMF07XHJcbiAgdmFyIHVweSA9IHVwWzFdO1xyXG4gIHZhciB1cHogPSB1cFsyXTtcclxuICB2YXIgY2VudGVyeCA9IGNlbnRlclswXTtcclxuICB2YXIgY2VudGVyeSA9IGNlbnRlclsxXTtcclxuICB2YXIgY2VudGVyeiA9IGNlbnRlclsyXTtcclxuXHJcbiAgaWYgKE1hdGguYWJzKGV5ZXggLSBjZW50ZXJ4KSA8IGdsTWF0cml4LkVQU0lMT04gJiYgTWF0aC5hYnMoZXlleSAtIGNlbnRlcnkpIDwgZ2xNYXRyaXguRVBTSUxPTiAmJiBNYXRoLmFicyhleWV6IC0gY2VudGVyeikgPCBnbE1hdHJpeC5FUFNJTE9OKSB7XHJcbiAgICByZXR1cm4gaWRlbnRpdHkob3V0KTtcclxuICB9XHJcblxyXG4gIHowID0gZXlleCAtIGNlbnRlcng7XHJcbiAgejEgPSBleWV5IC0gY2VudGVyeTtcclxuICB6MiA9IGV5ZXogLSBjZW50ZXJ6O1xyXG5cclxuICBsZW4gPSAxIC8gTWF0aC5zcXJ0KHowICogejAgKyB6MSAqIHoxICsgejIgKiB6Mik7XHJcbiAgejAgKj0gbGVuO1xyXG4gIHoxICo9IGxlbjtcclxuICB6MiAqPSBsZW47XHJcblxyXG4gIHgwID0gdXB5ICogejIgLSB1cHogKiB6MTtcclxuICB4MSA9IHVweiAqIHowIC0gdXB4ICogejI7XHJcbiAgeDIgPSB1cHggKiB6MSAtIHVweSAqIHowO1xyXG4gIGxlbiA9IE1hdGguc3FydCh4MCAqIHgwICsgeDEgKiB4MSArIHgyICogeDIpO1xyXG4gIGlmICghbGVuKSB7XHJcbiAgICB4MCA9IDA7XHJcbiAgICB4MSA9IDA7XHJcbiAgICB4MiA9IDA7XHJcbiAgfSBlbHNlIHtcclxuICAgIGxlbiA9IDEgLyBsZW47XHJcbiAgICB4MCAqPSBsZW47XHJcbiAgICB4MSAqPSBsZW47XHJcbiAgICB4MiAqPSBsZW47XHJcbiAgfVxyXG5cclxuICB5MCA9IHoxICogeDIgLSB6MiAqIHgxO1xyXG4gIHkxID0gejIgKiB4MCAtIHowICogeDI7XHJcbiAgeTIgPSB6MCAqIHgxIC0gejEgKiB4MDtcclxuXHJcbiAgbGVuID0gTWF0aC5zcXJ0KHkwICogeTAgKyB5MSAqIHkxICsgeTIgKiB5Mik7XHJcbiAgaWYgKCFsZW4pIHtcclxuICAgIHkwID0gMDtcclxuICAgIHkxID0gMDtcclxuICAgIHkyID0gMDtcclxuICB9IGVsc2Uge1xyXG4gICAgbGVuID0gMSAvIGxlbjtcclxuICAgIHkwICo9IGxlbjtcclxuICAgIHkxICo9IGxlbjtcclxuICAgIHkyICo9IGxlbjtcclxuICB9XHJcblxyXG4gIG91dFswXSA9IHgwO1xyXG4gIG91dFsxXSA9IHkwO1xyXG4gIG91dFsyXSA9IHowO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0geDE7XHJcbiAgb3V0WzVdID0geTE7XHJcbiAgb3V0WzZdID0gejE7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSB4MjtcclxuICBvdXRbOV0gPSB5MjtcclxuICBvdXRbMTBdID0gejI7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IC0oeDAgKiBleWV4ICsgeDEgKiBleWV5ICsgeDIgKiBleWV6KTtcclxuICBvdXRbMTNdID0gLSh5MCAqIGV5ZXggKyB5MSAqIGV5ZXkgKyB5MiAqIGV5ZXopO1xyXG4gIG91dFsxNF0gPSAtKHowICogZXlleCArIHoxICogZXlleSArIHoyICogZXlleik7XHJcbiAgb3V0WzE1XSA9IDE7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBtYXRyaXggdGhhdCBtYWtlcyBzb21ldGhpbmcgbG9vayBhdCBzb21ldGhpbmcgZWxzZS5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge3ZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXHJcbiAqIEBwYXJhbSB7dmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxyXG4gKiBAcGFyYW0ge3ZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRhcmdldFRvKG91dCwgZXllLCB0YXJnZXQsIHVwKSB7XHJcbiAgdmFyIGV5ZXggPSBleWVbMF0sXHJcbiAgICAgIGV5ZXkgPSBleWVbMV0sXHJcbiAgICAgIGV5ZXogPSBleWVbMl0sXHJcbiAgICAgIHVweCA9IHVwWzBdLFxyXG4gICAgICB1cHkgPSB1cFsxXSxcclxuICAgICAgdXB6ID0gdXBbMl07XHJcblxyXG4gIHZhciB6MCA9IGV5ZXggLSB0YXJnZXRbMF0sXHJcbiAgICAgIHoxID0gZXlleSAtIHRhcmdldFsxXSxcclxuICAgICAgejIgPSBleWV6IC0gdGFyZ2V0WzJdO1xyXG5cclxuICB2YXIgbGVuID0gejAgKiB6MCArIHoxICogejEgKyB6MiAqIHoyO1xyXG4gIGlmIChsZW4gPiAwKSB7XHJcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICB6MCAqPSBsZW47XHJcbiAgICB6MSAqPSBsZW47XHJcbiAgICB6MiAqPSBsZW47XHJcbiAgfVxyXG5cclxuICB2YXIgeDAgPSB1cHkgKiB6MiAtIHVweiAqIHoxLFxyXG4gICAgICB4MSA9IHVweiAqIHowIC0gdXB4ICogejIsXHJcbiAgICAgIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcclxuXHJcbiAgbGVuID0geDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyO1xyXG4gIGlmIChsZW4gPiAwKSB7XHJcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICB4MCAqPSBsZW47XHJcbiAgICB4MSAqPSBsZW47XHJcbiAgICB4MiAqPSBsZW47XHJcbiAgfVxyXG5cclxuICBvdXRbMF0gPSB4MDtcclxuICBvdXRbMV0gPSB4MTtcclxuICBvdXRbMl0gPSB4MjtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IHoxICogeDIgLSB6MiAqIHgxO1xyXG4gIG91dFs1XSA9IHoyICogeDAgLSB6MCAqIHgyO1xyXG4gIG91dFs2XSA9IHowICogeDEgLSB6MSAqIHgwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gejA7XHJcbiAgb3V0WzldID0gejE7XHJcbiAgb3V0WzEwXSA9IHoyO1xyXG4gIG91dFsxMV0gPSAwO1xyXG4gIG91dFsxMl0gPSBleWV4O1xyXG4gIG91dFsxM10gPSBleWV5O1xyXG4gIG91dFsxNF0gPSBleWV6O1xyXG4gIG91dFsxNV0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDRcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xyXG4gIHJldHVybiAnbWF0NCgnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgYVszXSArICcsICcgKyBhWzRdICsgJywgJyArIGFbNV0gKyAnLCAnICsgYVs2XSArICcsICcgKyBhWzddICsgJywgJyArIGFbOF0gKyAnLCAnICsgYVs5XSArICcsICcgKyBhWzEwXSArICcsICcgKyBhWzExXSArICcsICcgKyBhWzEyXSArICcsICcgKyBhWzEzXSArICcsICcgKyBhWzE0XSArICcsICcgKyBhWzE1XSArICcpJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xyXG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coYVswXSwgMikgKyBNYXRoLnBvdyhhWzFdLCAyKSArIE1hdGgucG93KGFbMl0sIDIpICsgTWF0aC5wb3coYVszXSwgMikgKyBNYXRoLnBvdyhhWzRdLCAyKSArIE1hdGgucG93KGFbNV0sIDIpICsgTWF0aC5wb3coYVs2XSwgMikgKyBNYXRoLnBvdyhhWzddLCAyKSArIE1hdGgucG93KGFbOF0sIDIpICsgTWF0aC5wb3coYVs5XSwgMikgKyBNYXRoLnBvdyhhWzEwXSwgMikgKyBNYXRoLnBvdyhhWzExXSwgMikgKyBNYXRoLnBvdyhhWzEyXSwgMikgKyBNYXRoLnBvdyhhWzEzXSwgMikgKyBNYXRoLnBvdyhhWzE0XSwgMikgKyBNYXRoLnBvdyhhWzE1XSwgMikpO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gbWF0NCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGQob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSArIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSArIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSArIGJbM107XHJcbiAgb3V0WzRdID0gYVs0XSArIGJbNF07XHJcbiAgb3V0WzVdID0gYVs1XSArIGJbNV07XHJcbiAgb3V0WzZdID0gYVs2XSArIGJbNl07XHJcbiAgb3V0WzddID0gYVs3XSArIGJbN107XHJcbiAgb3V0WzhdID0gYVs4XSArIGJbOF07XHJcbiAgb3V0WzldID0gYVs5XSArIGJbOV07XHJcbiAgb3V0WzEwXSA9IGFbMTBdICsgYlsxMF07XHJcbiAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV07XHJcbiAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl07XHJcbiAgb3V0WzEzXSA9IGFbMTNdICsgYlsxM107XHJcbiAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF07XHJcbiAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFN1YnRyYWN0cyBtYXRyaXggYiBmcm9tIG1hdHJpeCBhXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcclxuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcclxuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcclxuICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcclxuICBvdXRbNl0gPSBhWzZdIC0gYls2XTtcclxuICBvdXRbN10gPSBhWzddIC0gYls3XTtcclxuICBvdXRbOF0gPSBhWzhdIC0gYls4XTtcclxuICBvdXRbOV0gPSBhWzldIC0gYls5XTtcclxuICBvdXRbMTBdID0gYVsxMF0gLSBiWzEwXTtcclxuICBvdXRbMTFdID0gYVsxMV0gLSBiWzExXTtcclxuICBvdXRbMTJdID0gYVsxMl0gLSBiWzEyXTtcclxuICBvdXRbMTNdID0gYVsxM10gLSBiWzEzXTtcclxuICBvdXRbMTRdID0gYVsxNF0gLSBiWzE0XTtcclxuICBvdXRbMTVdID0gYVsxNV0gLSBiWzE1XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgbWF0cml4J3MgZWxlbWVudHMgYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gIG91dFszXSA9IGFbM10gKiBiO1xyXG4gIG91dFs0XSA9IGFbNF0gKiBiO1xyXG4gIG91dFs1XSA9IGFbNV0gKiBiO1xyXG4gIG91dFs2XSA9IGFbNl0gKiBiO1xyXG4gIG91dFs3XSA9IGFbN10gKiBiO1xyXG4gIG91dFs4XSA9IGFbOF0gKiBiO1xyXG4gIG91dFs5XSA9IGFbOV0gKiBiO1xyXG4gIG91dFsxMF0gPSBhWzEwXSAqIGI7XHJcbiAgb3V0WzExXSA9IGFbMTFdICogYjtcclxuICBvdXRbMTJdID0gYVsxMl0gKiBiO1xyXG4gIG91dFsxM10gPSBhWzEzXSAqIGI7XHJcbiAgb3V0WzE0XSA9IGFbMTRdICogYjtcclxuICBvdXRbMTVdID0gYVsxNV0gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQ0J3MgYWZ0ZXIgbXVsdGlwbHlpbmcgZWFjaCBlbGVtZW50IG9mIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7bWF0NH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYidzIGVsZW1lbnRzIGJ5IGJlZm9yZSBhZGRpbmdcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICBvdXRbM10gPSBhWzNdICsgYlszXSAqIHNjYWxlO1xyXG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdICogc2NhbGU7XHJcbiAgb3V0WzVdID0gYVs1XSArIGJbNV0gKiBzY2FsZTtcclxuICBvdXRbNl0gPSBhWzZdICsgYls2XSAqIHNjYWxlO1xyXG4gIG91dFs3XSA9IGFbN10gKyBiWzddICogc2NhbGU7XHJcbiAgb3V0WzhdID0gYVs4XSArIGJbOF0gKiBzY2FsZTtcclxuICBvdXRbOV0gPSBhWzldICsgYls5XSAqIHNjYWxlO1xyXG4gIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdICogc2NhbGU7XHJcbiAgb3V0WzExXSA9IGFbMTFdICsgYlsxMV0gKiBzY2FsZTtcclxuICBvdXRbMTJdID0gYVsxMl0gKyBiWzEyXSAqIHNjYWxlO1xyXG4gIG91dFsxM10gPSBhWzEzXSArIGJbMTNdICogc2NhbGU7XHJcbiAgb3V0WzE0XSA9IGFbMTRdICsgYlsxNF0gKiBzY2FsZTtcclxuICBvdXRbMTVdID0gYVsxNV0gKyBiWzE1XSAqIHNjYWxlO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge21hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XHJcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XSAmJiBhWzhdID09PSBiWzhdICYmIGFbOV0gPT09IGJbOV0gJiYgYVsxMF0gPT09IGJbMTBdICYmIGFbMTFdID09PSBiWzExXSAmJiBhWzEyXSA9PT0gYlsxMl0gJiYgYVsxM10gPT09IGJbMTNdICYmIGFbMTRdID09PSBiWzE0XSAmJiBhWzE1XSA9PT0gYlsxNV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge21hdDR9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM107XHJcbiAgdmFyIGE0ID0gYVs0XSxcclxuICAgICAgYTUgPSBhWzVdLFxyXG4gICAgICBhNiA9IGFbNl0sXHJcbiAgICAgIGE3ID0gYVs3XTtcclxuICB2YXIgYTggPSBhWzhdLFxyXG4gICAgICBhOSA9IGFbOV0sXHJcbiAgICAgIGExMCA9IGFbMTBdLFxyXG4gICAgICBhMTEgPSBhWzExXTtcclxuICB2YXIgYTEyID0gYVsxMl0sXHJcbiAgICAgIGExMyA9IGFbMTNdLFxyXG4gICAgICBhMTQgPSBhWzE0XSxcclxuICAgICAgYTE1ID0gYVsxNV07XHJcblxyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM107XHJcbiAgdmFyIGI0ID0gYls0XSxcclxuICAgICAgYjUgPSBiWzVdLFxyXG4gICAgICBiNiA9IGJbNl0sXHJcbiAgICAgIGI3ID0gYls3XTtcclxuICB2YXIgYjggPSBiWzhdLFxyXG4gICAgICBiOSA9IGJbOV0sXHJcbiAgICAgIGIxMCA9IGJbMTBdLFxyXG4gICAgICBiMTEgPSBiWzExXTtcclxuICB2YXIgYjEyID0gYlsxMl0sXHJcbiAgICAgIGIxMyA9IGJbMTNdLFxyXG4gICAgICBiMTQgPSBiWzE0XSxcclxuICAgICAgYjE1ID0gYlsxNV07XHJcblxyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKSAmJiBNYXRoLmFicyhhOSAtIGI5KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOSksIE1hdGguYWJzKGI5KSkgJiYgTWF0aC5hYnMoYTEwIC0gYjEwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTApLCBNYXRoLmFicyhiMTApKSAmJiBNYXRoLmFicyhhMTEgLSBiMTEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMSksIE1hdGguYWJzKGIxMSkpICYmIE1hdGguYWJzKGExMiAtIGIxMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEyKSwgTWF0aC5hYnMoYjEyKSkgJiYgTWF0aC5hYnMoYTEzIC0gYjEzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTMpLCBNYXRoLmFicyhiMTMpKSAmJiBNYXRoLmFicyhhMTQgLSBiMTQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNCksIE1hdGguYWJzKGIxNCkpICYmIE1hdGguYWJzKGExNSAtIGIxNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTE1KSwgTWF0aC5hYnMoYjE1KSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIG1hdDQuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcclxuXHJcbi8qKlxyXG4gKiAzIERpbWVuc2lvbmFsIFZlY3RvclxyXG4gKiBAbW9kdWxlIHZlYzNcclxuICovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldywgZW1wdHkgdmVjM1xyXG4gKlxyXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcclxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgIG91dFswXSA9IDA7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBhIG5ldyAzRCB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICBvdXRbMl0gPSBhWzJdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XHJcbiAgdmFyIHggPSBhWzBdO1xyXG4gIHZhciB5ID0gYVsxXTtcclxuICB2YXIgeiA9IGFbMl07XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6KSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDMpO1xyXG4gIG91dFswXSA9IHg7XHJcbiAgb3V0WzFdID0geTtcclxuICBvdXRbMl0gPSB6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjMyB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgc291cmNlIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMyB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XHJcbiAgb3V0WzBdID0geDtcclxuICBvdXRbMV0gPSB5O1xyXG4gIG91dFsyXSA9IHo7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpdmlkZXMgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2VpbFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBmbG9vclxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWluKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGgubWluKGFbMl0sIGJbMl0pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byByb3VuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICogYjtcclxuICBvdXRbMV0gPSBhWzFdICogYjtcclxuICBvdXRbMl0gPSBhWzJdICogYjtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gdmVjMydzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XHJcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcclxuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xyXG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XHJcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcclxuICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeik7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xyXG4gIHZhciB4ID0gYlswXSAtIGFbMF07XHJcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcclxuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xyXG4gIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGxlbmd0aCBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBsZW5ndGggb2YgYVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWRMZW5ndGgoYSkge1xyXG4gIHZhciB4ID0gYVswXTtcclxuICB2YXIgeSA9IGFbMV07XHJcbiAgdmFyIHogPSBhWzJdO1xyXG4gIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHo7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBOZWdhdGVzIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5lZ2F0ZVxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xyXG4gIG91dFswXSA9IC1hWzBdO1xyXG4gIG91dFsxXSA9IC1hWzFdO1xyXG4gIG91dFsyXSA9IC1hWzJdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnZlcnNlIG9mIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGludmVydFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSAxLjAgLyBhWzBdO1xyXG4gIG91dFsxXSA9IDEuMCAvIGFbMV07XHJcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xyXG4gIHZhciB4ID0gYVswXTtcclxuICB2YXIgeSA9IGFbMV07XHJcbiAgdmFyIHogPSBhWzJdO1xyXG4gIHZhciBsZW4gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XHJcbiAgaWYgKGxlbiA+IDApIHtcclxuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XHJcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xyXG4gICAgb3V0WzFdID0gYVsxXSAqIGxlbjtcclxuICAgIG91dFsyXSA9IGFbMl0gKiBsZW47XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xyXG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcm9zcyhvdXQsIGEsIGIpIHtcclxuICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICBheSA9IGFbMV0sXHJcbiAgICAgIGF6ID0gYVsyXTtcclxuICB2YXIgYnggPSBiWzBdLFxyXG4gICAgICBieSA9IGJbMV0sXHJcbiAgICAgIGJ6ID0gYlsyXTtcclxuXHJcbiAgb3V0WzBdID0gYXkgKiBieiAtIGF6ICogYnk7XHJcbiAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XHJcbiAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XHJcbiAgdmFyIGF4ID0gYVswXTtcclxuICB2YXIgYXkgPSBhWzFdO1xyXG4gIHZhciBheiA9IGFbMl07XHJcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XHJcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XHJcbiAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgaGVybWl0ZSBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYyB0aGUgdGhpcmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhlcm1pdGUob3V0LCBhLCBiLCBjLCBkLCB0KSB7XHJcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xyXG4gIHZhciBmYWN0b3IxID0gZmFjdG9yVGltZXMyICogKDIgKiB0IC0gMykgKyAxO1xyXG4gIHZhciBmYWN0b3IyID0gZmFjdG9yVGltZXMyICogKHQgLSAyKSArIHQ7XHJcbiAgdmFyIGZhY3RvcjMgPSBmYWN0b3JUaW1lczIgKiAodCAtIDEpO1xyXG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogKDMgLSAyICogdCk7XHJcblxyXG4gIG91dFswXSA9IGFbMF0gKiBmYWN0b3IxICsgYlswXSAqIGZhY3RvcjIgKyBjWzBdICogZmFjdG9yMyArIGRbMF0gKiBmYWN0b3I0O1xyXG4gIG91dFsxXSA9IGFbMV0gKiBmYWN0b3IxICsgYlsxXSAqIGZhY3RvcjIgKyBjWzFdICogZmFjdG9yMyArIGRbMV0gKiBmYWN0b3I0O1xyXG4gIG91dFsyXSA9IGFbMl0gKiBmYWN0b3IxICsgYlsyXSAqIGZhY3RvcjIgKyBjWzJdICogZmFjdG9yMyArIGRbMl0gKiBmYWN0b3I0O1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgYSBiZXppZXIgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBiZXppZXIob3V0LCBhLCBiLCBjLCBkLCB0KSB7XHJcbiAgdmFyIGludmVyc2VGYWN0b3IgPSAxIC0gdDtcclxuICB2YXIgaW52ZXJzZUZhY3RvclRpbWVzVHdvID0gaW52ZXJzZUZhY3RvciAqIGludmVyc2VGYWN0b3I7XHJcbiAgdmFyIGZhY3RvclRpbWVzMiA9IHQgKiB0O1xyXG4gIHZhciBmYWN0b3IxID0gaW52ZXJzZUZhY3RvclRpbWVzVHdvICogaW52ZXJzZUZhY3RvcjtcclxuICB2YXIgZmFjdG9yMiA9IDMgKiB0ICogaW52ZXJzZUZhY3RvclRpbWVzVHdvO1xyXG4gIHZhciBmYWN0b3IzID0gMyAqIGZhY3RvclRpbWVzMiAqIGludmVyc2VGYWN0b3I7XHJcbiAgdmFyIGZhY3RvcjQgPSBmYWN0b3JUaW1lczIgKiB0O1xyXG5cclxuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcclxuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcclxuICBvdXRbMl0gPSBhWzJdICogZmFjdG9yMSArIGJbMl0gKiBmYWN0b3IyICsgY1syXSAqIGZhY3RvcjMgKyBkWzJdICogZmFjdG9yNDtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xyXG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xyXG5cclxuICB2YXIgciA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wICogTWF0aC5QSTtcclxuICB2YXIgeiA9IGdsTWF0cml4LlJBTkRPTSgpICogMi4wIC0gMS4wO1xyXG4gIHZhciB6U2NhbGUgPSBNYXRoLnNxcnQoMS4wIC0geiAqIHopICogc2NhbGU7XHJcblxyXG4gIG91dFswXSA9IE1hdGguY29zKHIpICogelNjYWxlO1xyXG4gIG91dFsxXSA9IE1hdGguc2luKHIpICogelNjYWxlO1xyXG4gIG91dFsyXSA9IHogKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0NC5cclxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXSxcclxuICAgICAgeiA9IGFbMl07XHJcbiAgdmFyIHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XHJcbiAgdyA9IHcgfHwgMS4wO1xyXG4gIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xyXG4gIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xyXG4gIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0pIC8gdztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgbWF0My5cclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0M30gbSB0aGUgM3gzIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MyhvdXQsIGEsIG0pIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdLFxyXG4gICAgICB6ID0gYVsyXTtcclxuICBvdXRbMF0gPSB4ICogbVswXSArIHkgKiBtWzNdICsgeiAqIG1bNl07XHJcbiAgb3V0WzFdID0geCAqIG1bMV0gKyB5ICogbVs0XSArIHogKiBtWzddO1xyXG4gIG91dFsyXSA9IHggKiBtWzJdICsgeSAqIG1bNV0gKyB6ICogbVs4XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMyB3aXRoIGEgcXVhdFxyXG4gKiBDYW4gYWxzbyBiZSB1c2VkIGZvciBkdWFsIHF1YXRlcm5pb25zLiAoTXVsdGlwbHkgaXQgd2l0aCB0aGUgcmVhbCBwYXJ0KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVF1YXQob3V0LCBhLCBxKSB7XHJcbiAgLy8gYmVuY2htYXJrczogaHR0cHM6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tdHJhbnNmb3JtLXZlYzMtaW1wbGVtZW50YXRpb25zLWZpeGVkXHJcbiAgdmFyIHF4ID0gcVswXSxcclxuICAgICAgcXkgPSBxWzFdLFxyXG4gICAgICBxeiA9IHFbMl0sXHJcbiAgICAgIHF3ID0gcVszXTtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdLFxyXG4gICAgICB6ID0gYVsyXTtcclxuICAvLyB2YXIgcXZlYyA9IFtxeCwgcXksIHF6XTtcclxuICAvLyB2YXIgdXYgPSB2ZWMzLmNyb3NzKFtdLCBxdmVjLCBhKTtcclxuICB2YXIgdXZ4ID0gcXkgKiB6IC0gcXogKiB5LFxyXG4gICAgICB1dnkgPSBxeiAqIHggLSBxeCAqIHosXHJcbiAgICAgIHV2eiA9IHF4ICogeSAtIHF5ICogeDtcclxuICAvLyB2YXIgdXV2ID0gdmVjMy5jcm9zcyhbXSwgcXZlYywgdXYpO1xyXG4gIHZhciB1dXZ4ID0gcXkgKiB1dnogLSBxeiAqIHV2eSxcclxuICAgICAgdXV2eSA9IHF6ICogdXZ4IC0gcXggKiB1dnosXHJcbiAgICAgIHV1dnogPSBxeCAqIHV2eSAtIHF5ICogdXZ4O1xyXG4gIC8vIHZlYzMuc2NhbGUodXYsIHV2LCAyICogdyk7XHJcbiAgdmFyIHcyID0gcXcgKiAyO1xyXG4gIHV2eCAqPSB3MjtcclxuICB1dnkgKj0gdzI7XHJcbiAgdXZ6ICo9IHcyO1xyXG4gIC8vIHZlYzMuc2NhbGUodXV2LCB1dXYsIDIpO1xyXG4gIHV1dnggKj0gMjtcclxuICB1dXZ5ICo9IDI7XHJcbiAgdXV2eiAqPSAyO1xyXG4gIC8vIHJldHVybiB2ZWMzLmFkZChvdXQsIGEsIHZlYzMuYWRkKG91dCwgdXYsIHV1dikpO1xyXG4gIG91dFswXSA9IHggKyB1dnggKyB1dXZ4O1xyXG4gIG91dFsxXSA9IHkgKyB1dnkgKyB1dXZ5O1xyXG4gIG91dFsyXSA9IHogKyB1dnogKyB1dXZ6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB4LWF4aXNcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXHJcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIGIsIGMpIHtcclxuICB2YXIgcCA9IFtdLFxyXG4gICAgICByID0gW107XHJcbiAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxyXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcclxuICBwWzFdID0gYVsxXSAtIGJbMV07XHJcbiAgcFsyXSA9IGFbMl0gLSBiWzJdO1xyXG5cclxuICAvL3BlcmZvcm0gcm90YXRpb25cclxuICByWzBdID0gcFswXTtcclxuICByWzFdID0gcFsxXSAqIE1hdGguY29zKGMpIC0gcFsyXSAqIE1hdGguc2luKGMpO1xyXG4gIHJbMl0gPSBwWzFdICogTWF0aC5zaW4oYykgKyBwWzJdICogTWF0aC5jb3MoYyk7XHJcblxyXG4gIC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHktYXhpc1xyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcclxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgYiwgYykge1xyXG4gIHZhciBwID0gW10sXHJcbiAgICAgIHIgPSBbXTtcclxuICAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXHJcbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcclxuICBwWzJdID0gYVsyXSAtIGJbMl07XHJcblxyXG4gIC8vcGVyZm9ybSByb3RhdGlvblxyXG4gIHJbMF0gPSBwWzJdICogTWF0aC5zaW4oYykgKyBwWzBdICogTWF0aC5jb3MoYyk7XHJcbiAgclsxXSA9IHBbMV07XHJcbiAgclsyXSA9IHBbMl0gKiBNYXRoLmNvcyhjKSAtIHBbMF0gKiBNYXRoLnNpbihjKTtcclxuXHJcbiAgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxyXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgei1heGlzXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxyXG4gKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCBiLCBjKSB7XHJcbiAgdmFyIHAgPSBbXSxcclxuICAgICAgciA9IFtdO1xyXG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cclxuICBwWzBdID0gYVswXSAtIGJbMF07XHJcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gIHBbMl0gPSBhWzJdIC0gYlsyXTtcclxuXHJcbiAgLy9wZXJmb3JtIHJvdGF0aW9uXHJcbiAgclswXSA9IHBbMF0gKiBNYXRoLmNvcyhjKSAtIHBbMV0gKiBNYXRoLnNpbihjKTtcclxuICByWzFdID0gcFswXSAqIE1hdGguc2luKGMpICsgcFsxXSAqIE1hdGguY29zKGMpO1xyXG4gIHJbMl0gPSBwWzJdO1xyXG5cclxuICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXHJcbiAgb3V0WzBdID0gclswXSArIGJbMF07XHJcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XHJcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDNEIHZlY3RvcnNcclxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmdsZShhLCBiKSB7XHJcbiAgdmFyIHRlbXBBID0gZnJvbVZhbHVlcyhhWzBdLCBhWzFdLCBhWzJdKTtcclxuICB2YXIgdGVtcEIgPSBmcm9tVmFsdWVzKGJbMF0sIGJbMV0sIGJbMl0pO1xyXG5cclxuICBub3JtYWxpemUodGVtcEEsIHRlbXBBKTtcclxuICBub3JtYWxpemUodGVtcEIsIHRlbXBCKTtcclxuXHJcbiAgdmFyIGNvc2luZSA9IGRvdCh0ZW1wQSwgdGVtcEIpO1xyXG5cclxuICBpZiAoY29zaW5lID4gMS4wKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9IGVsc2UgaWYgKGNvc2luZSA8IC0xLjApIHtcclxuICAgIHJldHVybiBNYXRoLlBJO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XHJcbiAgcmV0dXJuICd2ZWMzKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcpJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XHJcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl07XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICBiMiA9IGJbMl07XHJcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpdmlkZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRpdiA9IGRpdmlkZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuZGlzdGFuY2V9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBkaXN0ID0gZGlzdGFuY2U7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWREaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzMuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzNzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzMuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjM3MgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgdmVjID0gY3JlYXRlKCk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XHJcbiAgICB2YXIgaSA9IHZvaWQgMCxcclxuICAgICAgICBsID0gdm9pZCAwO1xyXG4gICAgaWYgKCFzdHJpZGUpIHtcclxuICAgICAgc3RyaWRlID0gMztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICBvZmZzZXQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3VudCkge1xyXG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGwgPSBhLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xyXG4gICAgICB2ZWNbMF0gPSBhW2ldO3ZlY1sxXSA9IGFbaSArIDFdO3ZlY1syXSA9IGFbaSArIDJdO1xyXG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcclxuICAgICAgYVtpXSA9IHZlY1swXTthW2kgKyAxXSA9IHZlY1sxXTthW2kgKyAyXSA9IHZlY1syXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYTtcclxuICB9O1xyXG59KCk7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XHJcblxyXG4vKipcclxuICogNCBEaW1lbnNpb25hbCBWZWN0b3JcclxuICogQG1vZHVsZSB2ZWM0XHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzRcclxuICpcclxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcclxuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XHJcbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICBvdXRbMF0gPSAwO1xyXG4gICAgb3V0WzFdID0gMDtcclxuICAgIG91dFsyXSA9IDA7XHJcbiAgICBvdXRbM10gPSAwO1xyXG4gIH1cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2xvbmVcclxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcclxuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoNCk7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyB2ZWM0IGluaXRpYWxpemVkIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gYSBuZXcgNEQgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVZhbHVlcyh4LCB5LCB6LCB3KSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xyXG4gIG91dFswXSA9IHg7XHJcbiAgb3V0WzFdID0geTtcclxuICBvdXRbMl0gPSB6O1xyXG4gIG91dFszXSA9IHc7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWM0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICBvdXRbMl0gPSBhWzJdO1xyXG4gIG91dFszXSA9IGFbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdyBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeiwgdykge1xyXG4gIG91dFswXSA9IHg7XHJcbiAgb3V0WzFdID0geTtcclxuICBvdXRbMl0gPSB6O1xyXG4gIG91dFszXSA9IHc7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdWJ0cmFjdHMgdmVjdG9yIGIgZnJvbSB2ZWN0b3IgYVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAqIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAqIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAqIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSAqIGJbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIERpdmlkZXMgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGl2aWRlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gLyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gLyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gLyBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gLyBiWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2VpbFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2VpbChvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5jZWlsKGFbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGguY2VpbChhWzJdKTtcclxuICBvdXRbM10gPSBNYXRoLmNlaWwoYVszXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gZmxvb3JcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xyXG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xyXG4gIG91dFszXSA9IE1hdGguZmxvb3IoYVszXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIG1pbmltdW0gb2YgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWluKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IE1hdGgubWluKGFbMF0sIGJbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGgubWluKGFbMV0sIGJbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGgubWluKGFbMl0sIGJbMl0pO1xyXG4gIG91dFszXSA9IE1hdGgubWluKGFbM10sIGJbM10pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcclxuICBvdXRbM10gPSBNYXRoLm1heChhWzNdLCBiWzNdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byByb3VuZFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm91bmQob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLnJvdW5kKGFbMV0pO1xyXG4gIG91dFsyXSA9IE1hdGgucm91bmQoYVsyXSk7XHJcbiAgb3V0WzNdID0gTWF0aC5yb3VuZChhWzNdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2NhbGVzIGEgdmVjNCBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gIG91dFszXSA9IGFbM10gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWM0J3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XHJcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XHJcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcclxuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xyXG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XHJcbiAgdmFyIHcgPSBiWzNdIC0gYVszXTtcclxuICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XHJcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcclxuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xyXG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XHJcbiAgdmFyIHcgPSBiWzNdIC0gYVszXTtcclxuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aChhKSB7XHJcbiAgdmFyIHggPSBhWzBdO1xyXG4gIHZhciB5ID0gYVsxXTtcclxuICB2YXIgeiA9IGFbMl07XHJcbiAgdmFyIHcgPSBhWzNdO1xyXG4gIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHcpO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcclxuICB2YXIgeCA9IGFbMF07XHJcbiAgdmFyIHkgPSBhWzFdO1xyXG4gIHZhciB6ID0gYVsyXTtcclxuICB2YXIgdyA9IGFbM107XHJcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xyXG59XHJcblxyXG4vKipcclxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBuZWdhdGVcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSAtYVswXTtcclxuICBvdXRbMV0gPSAtYVsxXTtcclxuICBvdXRbMl0gPSAtYVsyXTtcclxuICBvdXRbM10gPSAtYVszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBpbnZlcnRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcclxuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xyXG4gIG91dFsyXSA9IDEuMCAvIGFbMl07XHJcbiAgb3V0WzNdID0gMS4wIC8gYVszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xyXG4gIHZhciB4ID0gYVswXTtcclxuICB2YXIgeSA9IGFbMV07XHJcbiAgdmFyIHogPSBhWzJdO1xyXG4gIHZhciB3ID0gYVszXTtcclxuICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6ICsgdyAqIHc7XHJcbiAgaWYgKGxlbiA+IDApIHtcclxuICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKTtcclxuICAgIG91dFswXSA9IHggKiBsZW47XHJcbiAgICBvdXRbMV0gPSB5ICogbGVuO1xyXG4gICAgb3V0WzJdID0geiAqIGxlbjtcclxuICAgIG91dFszXSA9IHcgKiBsZW47XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkb3QoYSwgYikge1xyXG4gIHJldHVybiBhWzBdICogYlswXSArIGFbMV0gKiBiWzFdICsgYVsyXSAqIGJbMl0gKyBhWzNdICogYlszXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAob3V0LCBhLCBiLCB0KSB7XHJcbiAgdmFyIGF4ID0gYVswXTtcclxuICB2YXIgYXkgPSBhWzFdO1xyXG4gIHZhciBheiA9IGFbMl07XHJcbiAgdmFyIGF3ID0gYVszXTtcclxuICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcclxuICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcclxuICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcclxuICBvdXRbM10gPSBhdyArIHQgKiAoYlszXSAtIGF3KTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHZlY3RvciB3aXRoIHRoZSBnaXZlbiBzY2FsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0gW3NjYWxlXSBMZW5ndGggb2YgdGhlIHJlc3VsdGluZyB2ZWN0b3IuIElmIG9tbWl0dGVkLCBhIHVuaXQgdmVjdG9yIHdpbGwgYmUgcmV0dXJuZWRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbShvdXQsIHNjYWxlKSB7XHJcbiAgc2NhbGUgPSBzY2FsZSB8fCAxLjA7XHJcblxyXG4gIC8vIE1hcnNhZ2xpYSwgR2VvcmdlLiBDaG9vc2luZyBhIFBvaW50IGZyb20gdGhlIFN1cmZhY2Ugb2YgYVxyXG4gIC8vIFNwaGVyZS4gQW5uLiBNYXRoLiBTdGF0aXN0LiA0MyAoMTk3MiksIG5vLiAyLCA2NDUtLTY0Ni5cclxuICAvLyBodHRwOi8vcHJvamVjdGV1Y2xpZC5vcmcvZXVjbGlkLmFvbXMvMTE3NzY5MjY0NDtcclxuICB2YXIgdjEsIHYyLCB2MywgdjQ7XHJcbiAgdmFyIHMxLCBzMjtcclxuICBkbyB7XHJcbiAgICB2MSA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XHJcbiAgICB2MiA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XHJcbiAgICBzMSA9IHYxICogdjEgKyB2MiAqIHYyO1xyXG4gIH0gd2hpbGUgKHMxID49IDEpO1xyXG4gIGRvIHtcclxuICAgIHYzID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcclxuICAgIHY0ID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyIC0gMTtcclxuICAgIHMyID0gdjMgKiB2MyArIHY0ICogdjQ7XHJcbiAgfSB3aGlsZSAoczIgPj0gMSk7XHJcblxyXG4gIHZhciBkID0gTWF0aC5zcXJ0KCgxIC0gczEpIC8gczIpO1xyXG4gIG91dFswXSA9IHNjYWxlICogdjE7XHJcbiAgb3V0WzFdID0gc2NhbGUgKiB2MjtcclxuICBvdXRbMl0gPSBzY2FsZSAqIHYzICogZDtcclxuICBvdXRbM10gPSBzY2FsZSAqIHY0ICogZDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgbWF0NC5cclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXSxcclxuICAgICAgeiA9IGFbMl0sXHJcbiAgICAgIHcgPSBhWzNdO1xyXG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVs0XSAqIHkgKyBtWzhdICogeiArIG1bMTJdICogdztcclxuICBvdXRbMV0gPSBtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSAqIHc7XHJcbiAgb3V0WzJdID0gbVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdICogdztcclxuICBvdXRbM10gPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV0gKiB3O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWM0IHdpdGggYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvbiB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdLFxyXG4gICAgICB6ID0gYVsyXTtcclxuICB2YXIgcXggPSBxWzBdLFxyXG4gICAgICBxeSA9IHFbMV0sXHJcbiAgICAgIHF6ID0gcVsyXSxcclxuICAgICAgcXcgPSBxWzNdO1xyXG5cclxuICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xyXG4gIHZhciBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeTtcclxuICB2YXIgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHo7XHJcbiAgdmFyIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4O1xyXG4gIHZhciBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XHJcblxyXG4gIC8vIGNhbGN1bGF0ZSByZXN1bHQgKiBpbnZlcnNlIHF1YXRcclxuICBvdXRbMF0gPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5O1xyXG4gIG91dFsxXSA9IGl5ICogcXcgKyBpdyAqIC1xeSArIGl6ICogLXF4IC0gaXggKiAtcXo7XHJcbiAgb3V0WzJdID0gaXogKiBxdyArIGl3ICogLXF6ICsgaXggKiAtcXkgLSBpeSAqIC1xeDtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgdmVjdG9yXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcclxuICByZXR1cm4gJ3ZlYzQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXTtcclxuICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICBiMSA9IGJbMV0sXHJcbiAgICAgIGIyID0gYlsyXSxcclxuICAgICAgYjMgPSBiWzNdO1xyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGl2aWRlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5kaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZERpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjNC5zcXVhcmVkTGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjNHMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7QXJyYXl9IGEgdGhlIGFycmF5IG9mIHZlY3RvcnMgdG8gaXRlcmF0ZSBvdmVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjNC4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXQgTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgYXJyYXlcclxuICogQHBhcmFtIHtOdW1iZXJ9IGNvdW50IE51bWJlciBvZiB2ZWM0cyB0byBpdGVyYXRlIG92ZXIuIElmIDAgaXRlcmF0ZXMgb3ZlciBlbnRpcmUgYXJyYXlcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbYXJnXSBhZGRpdGlvbmFsIGFyZ3VtZW50IHRvIHBhc3MgdG8gZm5cclxuICogQHJldHVybnMge0FycmF5fSBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBmb3JFYWNoID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB2ZWMgPSBjcmVhdGUoKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBzdHJpZGUsIG9mZnNldCwgY291bnQsIGZuLCBhcmcpIHtcclxuICAgIHZhciBpID0gdm9pZCAwLFxyXG4gICAgICAgIGwgPSB2b2lkIDA7XHJcbiAgICBpZiAoIXN0cmlkZSkge1xyXG4gICAgICBzdHJpZGUgPSA0O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghb2Zmc2V0KSB7XHJcbiAgICAgIG9mZnNldCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNvdW50KSB7XHJcbiAgICAgIGwgPSBNYXRoLm1pbihjb3VudCAqIHN0cmlkZSArIG9mZnNldCwgYS5sZW5ndGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbCA9IGEubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAoaSA9IG9mZnNldDsgaSA8IGw7IGkgKz0gc3RyaWRlKSB7XHJcbiAgICAgIHZlY1swXSA9IGFbaV07dmVjWzFdID0gYVtpICsgMV07dmVjWzJdID0gYVtpICsgMl07dmVjWzNdID0gYVtpICsgM107XHJcbiAgICAgIGZuKHZlYywgdmVjLCBhcmcpO1xyXG4gICAgICBhW2ldID0gdmVjWzBdO2FbaSArIDFdID0gdmVjWzFdO2FbaSArIDJdID0gdmVjWzJdO2FbaSArIDNdID0gdmVjWzNdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhO1xyXG4gIH07XHJcbn0oKTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcclxuaW1wb3J0ICogYXMgbWF0MyBmcm9tIFwiLi9tYXQzLmpzXCI7XHJcbmltcG9ydCAqIGFzIHZlYzMgZnJvbSBcIi4vdmVjMy5qc1wiO1xyXG5pbXBvcnQgKiBhcyB2ZWM0IGZyb20gXCIuL3ZlYzQuanNcIjtcclxuXHJcbi8qKlxyXG4gKiBRdWF0ZXJuaW9uXHJcbiAqIEBtb2R1bGUgcXVhdFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IHF1YXRcclxuICpcclxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgb3V0WzBdID0gMDtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gIH1cclxuICBvdXRbM10gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgYSBxdWF0IHRvIHRoZSBpZGVudGl0eSBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XHJcbiAgb3V0WzBdID0gMDtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0cyBhIHF1YXQgZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYW5kIHJvdGF0aW9uIGF4aXMsXHJcbiAqIHRoZW4gcmV0dXJucyBpdC5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7dmVjM30gYXhpcyB0aGUgYXhpcyBhcm91bmQgd2hpY2ggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRBeGlzQW5nbGUob3V0LCBheGlzLCByYWQpIHtcclxuICByYWQgPSByYWQgKiAwLjU7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gIG91dFswXSA9IHMgKiBheGlzWzBdO1xyXG4gIG91dFsxXSA9IHMgKiBheGlzWzFdO1xyXG4gIG91dFsyXSA9IHMgKiBheGlzWzJdO1xyXG4gIG91dFszXSA9IE1hdGguY29zKHJhZCk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHJvdGF0aW9uIGF4aXMgYW5kIGFuZ2xlIGZvciBhIGdpdmVuXHJcbiAqICBxdWF0ZXJuaW9uLiBJZiBhIHF1YXRlcm5pb24gaXMgY3JlYXRlZCB3aXRoXHJcbiAqICBzZXRBeGlzQW5nbGUsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIHRoZSBzYW1lXHJcbiAqICB2YWx1ZXMgYXMgcHJvdmlkaWVkIGluIHRoZSBvcmlnaW5hbCBwYXJhbWV0ZXIgbGlzdFxyXG4gKiAgT1IgZnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdmFsdWVzLlxyXG4gKiBFeGFtcGxlOiBUaGUgcXVhdGVybmlvbiBmb3JtZWQgYnkgYXhpcyBbMCwgMCwgMV0gYW5kXHJcbiAqICBhbmdsZSAtOTAgaXMgdGhlIHNhbWUgYXMgdGhlIHF1YXRlcm5pb24gZm9ybWVkIGJ5XHJcbiAqICBbMCwgMCwgMV0gYW5kIDI3MC4gVGhpcyBtZXRob2QgZmF2b3JzIHRoZSBsYXR0ZXIuXHJcbiAqIEBwYXJhbSAge3ZlYzN9IG91dF9heGlzICBWZWN0b3IgcmVjZWl2aW5nIHRoZSBheGlzIG9mIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSAge3F1YXR9IHEgICAgIFF1YXRlcm5pb24gdG8gYmUgZGVjb21wb3NlZFxyXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICBBbmdsZSwgaW4gcmFkaWFucywgb2YgdGhlIHJvdGF0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXhpc0FuZ2xlKG91dF9heGlzLCBxKSB7XHJcbiAgdmFyIHJhZCA9IE1hdGguYWNvcyhxWzNdKSAqIDIuMDtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCAvIDIuMCk7XHJcbiAgaWYgKHMgPiBnbE1hdHJpeC5FUFNJTE9OKSB7XHJcbiAgICBvdXRfYXhpc1swXSA9IHFbMF0gLyBzO1xyXG4gICAgb3V0X2F4aXNbMV0gPSBxWzFdIC8gcztcclxuICAgIG91dF9heGlzWzJdID0gcVsyXSAvIHM7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIElmIHMgaXMgemVybywgcmV0dXJuIGFueSBheGlzIChubyByb3RhdGlvbiAtIGF4aXMgZG9lcyBub3QgbWF0dGVyKVxyXG4gICAgb3V0X2F4aXNbMF0gPSAxO1xyXG4gICAgb3V0X2F4aXNbMV0gPSAwO1xyXG4gICAgb3V0X2F4aXNbMl0gPSAwO1xyXG4gIH1cclxuICByZXR1cm4gcmFkO1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbGllcyB0d28gcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XHJcbiAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl0sXHJcbiAgICAgIGF3ID0gYVszXTtcclxuICB2YXIgYnggPSBiWzBdLFxyXG4gICAgICBieSA9IGJbMV0sXHJcbiAgICAgIGJ6ID0gYlsyXSxcclxuICAgICAgYncgPSBiWzNdO1xyXG5cclxuICBvdXRbMF0gPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5O1xyXG4gIG91dFsxXSA9IGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYno7XHJcbiAgb3V0WzJdID0gYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieDtcclxuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFggYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCByYWQpIHtcclxuICByYWQgKj0gMC41O1xyXG5cclxuICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICBheSA9IGFbMV0sXHJcbiAgICAgIGF6ID0gYVsyXSxcclxuICAgICAgYXcgPSBhWzNdO1xyXG4gIHZhciBieCA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcclxuXHJcbiAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYng7XHJcbiAgb3V0WzFdID0gYXkgKiBidyArIGF6ICogYng7XHJcbiAgb3V0WzJdID0gYXogKiBidyAtIGF5ICogYng7XHJcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYng7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWSBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xyXG4gIHJhZCAqPSAwLjU7XHJcblxyXG4gIHZhciBheCA9IGFbMF0sXHJcbiAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgYXogPSBhWzJdLFxyXG4gICAgICBhdyA9IGFbM107XHJcbiAgdmFyIGJ5ID0gTWF0aC5zaW4ocmFkKSxcclxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICBvdXRbMF0gPSBheCAqIGJ3IC0gYXogKiBieTtcclxuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieTtcclxuICBvdXRbMl0gPSBheiAqIGJ3ICsgYXggKiBieTtcclxuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXkgKiBieTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBaIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XHJcbiAgcmFkICo9IDAuNTtcclxuXHJcbiAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl0sXHJcbiAgICAgIGF3ID0gYVszXTtcclxuICB2YXIgYnogPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XHJcblxyXG4gIG91dFswXSA9IGF4ICogYncgKyBheSAqIGJ6O1xyXG4gIG91dFsxXSA9IGF5ICogYncgLSBheCAqIGJ6O1xyXG4gIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6O1xyXG4gIG91dFszXSA9IGF3ICogYncgLSBheiAqIGJ6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBXIGNvbXBvbmVudCBvZiBhIHF1YXQgZnJvbSB0aGUgWCwgWSwgYW5kIFogY29tcG9uZW50cy5cclxuICogQXNzdW1lcyB0aGF0IHF1YXRlcm5pb24gaXMgMSB1bml0IGluIGxlbmd0aC5cclxuICogQW55IGV4aXN0aW5nIFcgY29tcG9uZW50IHdpbGwgYmUgaWdub3JlZC5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBXIGNvbXBvbmVudCBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlVyhvdXQsIGEpIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdLFxyXG4gICAgICB6ID0gYVsyXTtcclxuXHJcbiAgb3V0WzBdID0geDtcclxuICBvdXRbMV0gPSB5O1xyXG4gIG91dFsyXSA9IHo7XHJcbiAgb3V0WzNdID0gTWF0aC5zcXJ0KE1hdGguYWJzKDEuMCAtIHggKiB4IC0geSAqIHkgLSB6ICogeikpO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIHNwaGVyaWNhbCBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzbGVycChvdXQsIGEsIGIsIHQpIHtcclxuICAvLyBiZW5jaG1hcmtzOlxyXG4gIC8vICAgIGh0dHA6Ly9qc3BlcmYuY29tL3F1YXRlcm5pb24tc2xlcnAtaW1wbGVtZW50YXRpb25zXHJcbiAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl0sXHJcbiAgICAgIGF3ID0gYVszXTtcclxuICB2YXIgYnggPSBiWzBdLFxyXG4gICAgICBieSA9IGJbMV0sXHJcbiAgICAgIGJ6ID0gYlsyXSxcclxuICAgICAgYncgPSBiWzNdO1xyXG5cclxuICB2YXIgb21lZ2EgPSB2b2lkIDAsXHJcbiAgICAgIGNvc29tID0gdm9pZCAwLFxyXG4gICAgICBzaW5vbSA9IHZvaWQgMCxcclxuICAgICAgc2NhbGUwID0gdm9pZCAwLFxyXG4gICAgICBzY2FsZTEgPSB2b2lkIDA7XHJcblxyXG4gIC8vIGNhbGMgY29zaW5lXHJcbiAgY29zb20gPSBheCAqIGJ4ICsgYXkgKiBieSArIGF6ICogYnogKyBhdyAqIGJ3O1xyXG4gIC8vIGFkanVzdCBzaWducyAoaWYgbmVjZXNzYXJ5KVxyXG4gIGlmIChjb3NvbSA8IDAuMCkge1xyXG4gICAgY29zb20gPSAtY29zb207XHJcbiAgICBieCA9IC1ieDtcclxuICAgIGJ5ID0gLWJ5O1xyXG4gICAgYnogPSAtYno7XHJcbiAgICBidyA9IC1idztcclxuICB9XHJcbiAgLy8gY2FsY3VsYXRlIGNvZWZmaWNpZW50c1xyXG4gIGlmICgxLjAgLSBjb3NvbSA+IGdsTWF0cml4LkVQU0lMT04pIHtcclxuICAgIC8vIHN0YW5kYXJkIGNhc2UgKHNsZXJwKVxyXG4gICAgb21lZ2EgPSBNYXRoLmFjb3MoY29zb20pO1xyXG4gICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XHJcbiAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcclxuICAgIHNjYWxlMSA9IE1hdGguc2luKHQgKiBvbWVnYSkgLyBzaW5vbTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gXCJmcm9tXCIgYW5kIFwidG9cIiBxdWF0ZXJuaW9ucyBhcmUgdmVyeSBjbG9zZVxyXG4gICAgLy8gIC4uLiBzbyB3ZSBjYW4gZG8gYSBsaW5lYXIgaW50ZXJwb2xhdGlvblxyXG4gICAgc2NhbGUwID0gMS4wIC0gdDtcclxuICAgIHNjYWxlMSA9IHQ7XHJcbiAgfVxyXG4gIC8vIGNhbGN1bGF0ZSBmaW5hbCB2YWx1ZXNcclxuICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xyXG4gIG91dFsxXSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XHJcbiAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcclxuICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgcmFuZG9tIHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0KSB7XHJcbiAgLy8gSW1wbGVtZW50YXRpb24gb2YgaHR0cDovL3BsYW5uaW5nLmNzLnVpdWMuZWR1L25vZGUxOTguaHRtbFxyXG4gIC8vIFRPRE86IENhbGxpbmcgcmFuZG9tIDMgdGltZXMgaXMgcHJvYmFibHkgbm90IHRoZSBmYXN0ZXN0IHNvbHV0aW9uXHJcbiAgdmFyIHUxID0gZ2xNYXRyaXguUkFORE9NKCk7XHJcbiAgdmFyIHUyID0gZ2xNYXRyaXguUkFORE9NKCk7XHJcbiAgdmFyIHUzID0gZ2xNYXRyaXguUkFORE9NKCk7XHJcblxyXG4gIHZhciBzcXJ0MU1pbnVzVTEgPSBNYXRoLnNxcnQoMSAtIHUxKTtcclxuICB2YXIgc3FydFUxID0gTWF0aC5zcXJ0KHUxKTtcclxuXHJcbiAgb3V0WzBdID0gc3FydDFNaW51c1UxICogTWF0aC5zaW4oMi4wICogTWF0aC5QSSAqIHUyKTtcclxuICBvdXRbMV0gPSBzcXJ0MU1pbnVzVTEgKiBNYXRoLmNvcygyLjAgKiBNYXRoLlBJICogdTIpO1xyXG4gIG91dFsyXSA9IHNxcnRVMSAqIE1hdGguc2luKDIuMCAqIE1hdGguUEkgKiB1Myk7XHJcbiAgb3V0WzNdID0gc3FydFUxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUzKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgaW52ZXJzZSBvZiBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBpbnZlcnNlIG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXTtcclxuICB2YXIgZG90ID0gYTAgKiBhMCArIGExICogYTEgKyBhMiAqIGEyICsgYTMgKiBhMztcclxuICB2YXIgaW52RG90ID0gZG90ID8gMS4wIC8gZG90IDogMDtcclxuXHJcbiAgLy8gVE9ETzogV291bGQgYmUgZmFzdGVyIHRvIHJldHVybiBbMCwwLDAsMF0gaW1tZWRpYXRlbHkgaWYgZG90ID09IDBcclxuXHJcbiAgb3V0WzBdID0gLWEwICogaW52RG90O1xyXG4gIG91dFsxXSA9IC1hMSAqIGludkRvdDtcclxuICBvdXRbMl0gPSAtYTIgKiBpbnZEb3Q7XHJcbiAgb3V0WzNdID0gYTMgKiBpbnZEb3Q7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIHF1YXRcclxuICogSWYgdGhlIHF1YXRlcm5pb24gaXMgbm9ybWFsaXplZCwgdGhpcyBmdW5jdGlvbiBpcyBmYXN0ZXIgdGhhbiBxdWF0LmludmVyc2UgYW5kIHByb2R1Y2VzIHRoZSBzYW1lIHJlc3VsdC5cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIGNhbGN1bGF0ZSBjb25qdWdhdGUgb2ZcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbmp1Z2F0ZShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSAtYVswXTtcclxuICBvdXRbMV0gPSAtYVsxXTtcclxuICBvdXRbMl0gPSAtYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiAzeDMgcm90YXRpb24gbWF0cml4LlxyXG4gKlxyXG4gKiBOT1RFOiBUaGUgcmVzdWx0YW50IHF1YXRlcm5pb24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIHlvdSBzaG91bGQgYmUgc3VyZVxyXG4gKiB0byByZW5vcm1hbGl6ZSB0aGUgcXVhdGVybmlvbiB5b3Vyc2VsZiB3aGVyZSBuZWNlc3NhcnkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge21hdDN9IG0gcm90YXRpb24gbWF0cml4XHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDMob3V0LCBtKSB7XHJcbiAgLy8gQWxnb3JpdGhtIGluIEtlbiBTaG9lbWFrZSdzIGFydGljbGUgaW4gMTk4NyBTSUdHUkFQSCBjb3Vyc2Ugbm90ZXNcclxuICAvLyBhcnRpY2xlIFwiUXVhdGVybmlvbiBDYWxjdWx1cyBhbmQgRmFzdCBBbmltYXRpb25cIi5cclxuICB2YXIgZlRyYWNlID0gbVswXSArIG1bNF0gKyBtWzhdO1xyXG4gIHZhciBmUm9vdCA9IHZvaWQgMDtcclxuXHJcbiAgaWYgKGZUcmFjZSA+IDAuMCkge1xyXG4gICAgLy8gfHd8ID4gMS8yLCBtYXkgYXMgd2VsbCBjaG9vc2UgdyA+IDEvMlxyXG4gICAgZlJvb3QgPSBNYXRoLnNxcnQoZlRyYWNlICsgMS4wKTsgLy8gMndcclxuICAgIG91dFszXSA9IDAuNSAqIGZSb290O1xyXG4gICAgZlJvb3QgPSAwLjUgLyBmUm9vdDsgLy8gMS8oNHcpXHJcbiAgICBvdXRbMF0gPSAobVs1XSAtIG1bN10pICogZlJvb3Q7XHJcbiAgICBvdXRbMV0gPSAobVs2XSAtIG1bMl0pICogZlJvb3Q7XHJcbiAgICBvdXRbMl0gPSAobVsxXSAtIG1bM10pICogZlJvb3Q7XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIHx3fCA8PSAxLzJcclxuICAgIHZhciBpID0gMDtcclxuICAgIGlmIChtWzRdID4gbVswXSkgaSA9IDE7XHJcbiAgICBpZiAobVs4XSA+IG1baSAqIDMgKyBpXSkgaSA9IDI7XHJcbiAgICB2YXIgaiA9IChpICsgMSkgJSAzO1xyXG4gICAgdmFyIGsgPSAoaSArIDIpICUgMztcclxuXHJcbiAgICBmUm9vdCA9IE1hdGguc3FydChtW2kgKiAzICsgaV0gLSBtW2ogKiAzICsgal0gLSBtW2sgKiAzICsga10gKyAxLjApO1xyXG4gICAgb3V0W2ldID0gMC41ICogZlJvb3Q7XHJcbiAgICBmUm9vdCA9IDAuNSAvIGZSb290O1xyXG4gICAgb3V0WzNdID0gKG1baiAqIDMgKyBrXSAtIG1bayAqIDMgKyBqXSkgKiBmUm9vdDtcclxuICAgIG91dFtqXSA9IChtW2ogKiAzICsgaV0gKyBtW2kgKiAzICsgal0pICogZlJvb3Q7XHJcbiAgICBvdXRba10gPSAobVtrICogMyArIGldICsgbVtpICogMyArIGtdKSAqIGZSb290O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBxdWF0ZXJuaW9uIGZyb20gdGhlIGdpdmVuIGV1bGVyIGFuZ2xlIHgsIHksIHouXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3h9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWCBheGlzIGluIGRlZ3JlZXMuXHJcbiAqIEBwYXJhbSB7eX0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBZIGF4aXMgaW4gZGVncmVlcy5cclxuICogQHBhcmFtIHt6fSBBbmdsZSB0byByb3RhdGUgYXJvdW5kIFogYXhpcyBpbiBkZWdyZWVzLlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdWxlcihvdXQsIHgsIHksIHopIHtcclxuICB2YXIgaGFsZlRvUmFkID0gMC41ICogTWF0aC5QSSAvIDE4MC4wO1xyXG4gIHggKj0gaGFsZlRvUmFkO1xyXG4gIHkgKj0gaGFsZlRvUmFkO1xyXG4gIHogKj0gaGFsZlRvUmFkO1xyXG5cclxuICB2YXIgc3ggPSBNYXRoLnNpbih4KTtcclxuICB2YXIgY3ggPSBNYXRoLmNvcyh4KTtcclxuICB2YXIgc3kgPSBNYXRoLnNpbih5KTtcclxuICB2YXIgY3kgPSBNYXRoLmNvcyh5KTtcclxuICB2YXIgc3ogPSBNYXRoLnNpbih6KTtcclxuICB2YXIgY3ogPSBNYXRoLmNvcyh6KTtcclxuXHJcbiAgb3V0WzBdID0gc3ggKiBjeSAqIGN6IC0gY3ggKiBzeSAqIHN6O1xyXG4gIG91dFsxXSA9IGN4ICogc3kgKiBjeiArIHN4ICogY3kgKiBzejtcclxuICBvdXRbMl0gPSBjeCAqIGN5ICogc3ogLSBzeCAqIHN5ICogY3o7XHJcbiAgb3V0WzNdID0gY3ggKiBjeSAqIGN6ICsgc3ggKiBzeSAqIHN6O1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHF1YXRlbmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XHJcbiAgcmV0dXJuICdxdWF0KCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJyknO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdGVybmlvbiB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gYSBuZXcgcXVhdGVybmlvblxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgY2xvbmUgPSB2ZWM0LmNsb25lO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGZyb21WYWx1ZXMgPSB2ZWM0LmZyb21WYWx1ZXM7XHJcblxyXG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHF1YXQgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBzb3VyY2UgcXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBjb3B5ID0gdmVjNC5jb3B5O1xyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHF1YXQgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc2V0ID0gdmVjNC5zZXQ7XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBhZGQgPSB2ZWM0LmFkZDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcclxuXHJcbi8qKlxyXG4gKiBTY2FsZXMgYSBxdWF0IGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzY2FsZSA9IHZlYzQuc2NhbGU7XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBkb3QgPSB2ZWM0LmRvdDtcclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBsZXJwID0gdmVjNC5sZXJwO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byBjYWxjdWxhdGUgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbmd0aCA9IHZlYzQubGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5sZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxdWFyZWRMZW5ndGggPSB2ZWM0LnNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0LnNxdWFyZWRMZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHF1YXRcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0ZXJuaW9uIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBub3JtYWxpemUgPSB2ZWM0Lm5vcm1hbGl6ZTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBUaGUgZmlyc3QgcXVhdGVybmlvbi5cclxuICogQHBhcmFtIHtxdWF0fSBiIFRoZSBzZWNvbmQgcXVhdGVybmlvbi5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgdmFyIGV4YWN0RXF1YWxzID0gdmVjNC5leGFjdEVxdWFscztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBxdWF0ZXJuaW9ucyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge3F1YXR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IHZhciBlcXVhbHMgPSB2ZWM0LmVxdWFscztcclxuXHJcbi8qKlxyXG4gKiBTZXRzIGEgcXVhdGVybmlvbiB0byByZXByZXNlbnQgdGhlIHNob3J0ZXN0IHJvdGF0aW9uIGZyb20gb25lXHJcbiAqIHZlY3RvciB0byBhbm90aGVyLlxyXG4gKlxyXG4gKiBCb3RoIHZlY3RvcnMgYXJlIGFzc3VtZWQgdG8gYmUgdW5pdCBsZW5ndGguXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvbi5cclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBpbml0aWFsIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIGRlc3RpbmF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgdmFyIHJvdGF0aW9uVG8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRtcHZlYzMgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gIHZhciB4VW5pdFZlYzMgPSB2ZWMzLmZyb21WYWx1ZXMoMSwgMCwgMCk7XHJcbiAgdmFyIHlVbml0VmVjMyA9IHZlYzMuZnJvbVZhbHVlcygwLCAxLCAwKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIGEsIGIpIHtcclxuICAgIHZhciBkb3QgPSB2ZWMzLmRvdChhLCBiKTtcclxuICAgIGlmIChkb3QgPCAtMC45OTk5OTkpIHtcclxuICAgICAgdmVjMy5jcm9zcyh0bXB2ZWMzLCB4VW5pdFZlYzMsIGEpO1xyXG4gICAgICBpZiAodmVjMy5sZW4odG1wdmVjMykgPCAwLjAwMDAwMSkgdmVjMy5jcm9zcyh0bXB2ZWMzLCB5VW5pdFZlYzMsIGEpO1xyXG4gICAgICB2ZWMzLm5vcm1hbGl6ZSh0bXB2ZWMzLCB0bXB2ZWMzKTtcclxuICAgICAgc2V0QXhpc0FuZ2xlKG91dCwgdG1wdmVjMywgTWF0aC5QSSk7XHJcbiAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9IGVsc2UgaWYgKGRvdCA+IDAuOTk5OTk5KSB7XHJcbiAgICAgIG91dFswXSA9IDA7XHJcbiAgICAgIG91dFsxXSA9IDA7XHJcbiAgICAgIG91dFsyXSA9IDA7XHJcbiAgICAgIG91dFszXSA9IDE7XHJcbiAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2ZWMzLmNyb3NzKHRtcHZlYzMsIGEsIGIpO1xyXG4gICAgICBvdXRbMF0gPSB0bXB2ZWMzWzBdO1xyXG4gICAgICBvdXRbMV0gPSB0bXB2ZWMzWzFdO1xyXG4gICAgICBvdXRbMl0gPSB0bXB2ZWMzWzJdO1xyXG4gICAgICBvdXRbM10gPSAxICsgZG90O1xyXG4gICAgICByZXR1cm4gbm9ybWFsaXplKG91dCwgb3V0KTtcclxuICAgIH1cclxuICB9O1xyXG59KCk7XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdH0gYyB0aGUgdGhpcmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXR9IGQgdGhlIGZvdXJ0aCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IHZhciBzcWxlcnAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRlbXAxID0gY3JlYXRlKCk7XHJcbiAgdmFyIHRlbXAyID0gY3JlYXRlKCk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiLCBjLCBkLCB0KSB7XHJcbiAgICBzbGVycCh0ZW1wMSwgYSwgZCwgdCk7XHJcbiAgICBzbGVycCh0ZW1wMiwgYiwgYywgdCk7XHJcbiAgICBzbGVycChvdXQsIHRlbXAxLCB0ZW1wMiwgMiAqIHQgKiAoMSAtIHQpKTtcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH07XHJcbn0oKTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSBzcGVjaWZpZWQgcXVhdGVybmlvbiB3aXRoIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlblxyXG4gKiBheGVzLiBFYWNoIGF4aXMgaXMgYSB2ZWMzIGFuZCBpcyBleHBlY3RlZCB0byBiZSB1bml0IGxlbmd0aCBhbmRcclxuICogcGVycGVuZGljdWxhciB0byBhbGwgb3RoZXIgc3BlY2lmaWVkIGF4ZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gdmlldyAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIHZpZXdpbmcgZGlyZWN0aW9uXHJcbiAqIEBwYXJhbSB7dmVjM30gcmlnaHQgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwicmlnaHRcIiBkaXJlY3Rpb25cclxuICogQHBhcmFtIHt2ZWMzfSB1cCAgICB0aGUgdmVjdG9yIHJlcHJlc2VudGluZyB0aGUgbG9jYWwgXCJ1cFwiIGRpcmVjdGlvblxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgdmFyIHNldEF4ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIG1hdHIgPSBtYXQzLmNyZWF0ZSgpO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKG91dCwgdmlldywgcmlnaHQsIHVwKSB7XHJcbiAgICBtYXRyWzBdID0gcmlnaHRbMF07XHJcbiAgICBtYXRyWzNdID0gcmlnaHRbMV07XHJcbiAgICBtYXRyWzZdID0gcmlnaHRbMl07XHJcblxyXG4gICAgbWF0clsxXSA9IHVwWzBdO1xyXG4gICAgbWF0cls0XSA9IHVwWzFdO1xyXG4gICAgbWF0cls3XSA9IHVwWzJdO1xyXG5cclxuICAgIG1hdHJbMl0gPSAtdmlld1swXTtcclxuICAgIG1hdHJbNV0gPSAtdmlld1sxXTtcclxuICAgIG1hdHJbOF0gPSAtdmlld1syXTtcclxuXHJcbiAgICByZXR1cm4gbm9ybWFsaXplKG91dCwgZnJvbU1hdDMob3V0LCBtYXRyKSk7XHJcbiAgfTtcclxufSgpOyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIDIgRGltZW5zaW9uYWwgVmVjdG9yXHJcbiAqIEBtb2R1bGUgdmVjMlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMyXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgb3V0WzBdID0gMDtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzIgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcclxuICBvdXRbMF0gPSB4O1xyXG4gIG91dFsxXSA9IHk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMyIHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMiB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5KSB7XHJcbiAgb3V0WzBdID0geDtcclxuICBvdXRbMV0gPSB5O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXZpZGVzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNlaWxcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBmbG9vclxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gcm91bmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xyXG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2NhbGVzIGEgdmVjMiBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcclxuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxyXG4gICAgICB5ID0gYlsxXSAtIGFbMV07XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XHJcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcclxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xyXG4gIHJldHVybiB4ICogeCArIHkgKiB5O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV07XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXTtcclxuICByZXR1cm4geCAqIHggKyB5ICogeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gLWFbMF07XHJcbiAgb3V0WzFdID0gLWFbMV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gaW52ZXJ0XHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xyXG4gIG91dFswXSA9IDEuMCAvIGFbMF07XHJcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV07XHJcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHk7XHJcbiAgaWYgKGxlbiA+IDApIHtcclxuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XHJcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xyXG4gICAgb3V0WzFdID0gYVsxXSAqIGxlbjtcclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XHJcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXHJcbiAqIE5vdGUgdGhhdCB0aGUgY3Jvc3MgcHJvZHVjdCBtdXN0IGJ5IGRlZmluaXRpb24gcHJvZHVjZSBhIDNEIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XHJcbiAgdmFyIHogPSBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdO1xyXG4gIG91dFswXSA9IG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcclxuICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICBheSA9IGFbMV07XHJcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XHJcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xyXG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xyXG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xyXG4gIG91dFswXSA9IE1hdGguY29zKHIpICogc2NhbGU7XHJcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHttYXQyfSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MihvdXQsIGEsIG0pIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdO1xyXG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHk7XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MmRcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQyZChvdXQsIGEsIG0pIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdO1xyXG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHkgKyBtWzRdO1xyXG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXHJcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge21hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV07XHJcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzNdICogeSArIG1bNl07XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzRdICogeSArIG1bN107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDRcclxuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMCdcclxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XHJcbiAgdmFyIHggPSBhWzBdO1xyXG4gIHZhciB5ID0gYVsxXTtcclxuICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bMTNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGUgYSAyRCB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMyXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSBUaGUgdmVjMiBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHt2ZWMyfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgYiwgYykge1xyXG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cclxuICB2YXIgcDAgPSBhWzBdIC0gYlswXSxcclxuICAgICAgcDEgPSBhWzFdIC0gYlsxXSxcclxuICAgICAgc2luQyA9IE1hdGguc2luKGMpLFxyXG4gICAgICBjb3NDID0gTWF0aC5jb3MoYyk7XHJcblxyXG4gIC8vcGVyZm9ybSByb3RhdGlvbiBhbmQgdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICBvdXRbMF0gPSBwMCAqIGNvc0MgLSBwMSAqIHNpbkMgKyBiWzBdO1xyXG4gIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDJEIHZlY3RvcnNcclxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmdsZShhLCBiKSB7XHJcbiAgdmFyIHgxID0gYVswXSxcclxuICAgICAgeTEgPSBhWzFdLFxyXG4gICAgICB4MiA9IGJbMF0sXHJcbiAgICAgIHkyID0gYlsxXTtcclxuXHJcbiAgdmFyIGxlbjEgPSB4MSAqIHgxICsgeTEgKiB5MTtcclxuICBpZiAobGVuMSA+IDApIHtcclxuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XHJcbiAgICBsZW4xID0gMSAvIE1hdGguc3FydChsZW4xKTtcclxuICB9XHJcblxyXG4gIHZhciBsZW4yID0geDIgKiB4MiArIHkyICogeTI7XHJcbiAgaWYgKGxlbjIgPiAwKSB7XHJcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xyXG4gICAgbGVuMiA9IDEgLyBNYXRoLnNxcnQobGVuMik7XHJcbiAgfVxyXG5cclxuICB2YXIgY29zaW5lID0gKHgxICogeDIgKyB5MSAqIHkyKSAqIGxlbjEgKiBsZW4yO1xyXG5cclxuICBpZiAoY29zaW5lID4gMS4wKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9IGVsc2UgaWYgKGNvc2luZSA8IC0xLjApIHtcclxuICAgIHJldHVybiBNYXRoLlBJO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XHJcbiAgcmV0dXJuICd2ZWMyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGV4YWN0bHkgaGF2ZSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcclxuICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICBhMSA9IGFbMV07XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdO1xyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZERpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjMnMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgdmVjID0gY3JlYXRlKCk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XHJcbiAgICB2YXIgaSA9IHZvaWQgMCxcclxuICAgICAgICBsID0gdm9pZCAwO1xyXG4gICAgaWYgKCFzdHJpZGUpIHtcclxuICAgICAgc3RyaWRlID0gMjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICBvZmZzZXQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3VudCkge1xyXG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGwgPSBhLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xyXG4gICAgICB2ZWNbMF0gPSBhW2ldO3ZlY1sxXSA9IGFbaSArIDFdO1xyXG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcclxuICAgICAgYVtpXSA9IHZlY1swXTthW2kgKyAxXSA9IHZlY1sxXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYTtcclxuICB9O1xyXG59KCk7IiwiLyohXG4gKiBAbWFwdGFsa3MvcmVzaGFkZXIuZ2wgdjAuMi40XG4gKiBMSUNFTlNFIDogVU5MSUNFTlNFRFxuICogKGMpIDIwMTYtMjAxOSBtYXB0YWxrcy5vcmdcbiAqL1xuaW1wb3J0IHsgdmVjMywgcXVhdCwgdmVjNCwgbWF0NCwgbWF0MyB9IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbi8qKlxyXG4gKiBDaGVjayB3aGV0aGVyIHRoZSBvYmplY3QgaXMgYSBzdHJpbmdcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gKi9cclxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XHJcbiAgICBpZiAoaXNOaWwob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJyB8fCAob2JqLmNvbnN0cnVjdG9yICE9PSBudWxsICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3RyaW5nKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFdoZXRoZXIgdGhlIG9iamVjdCBpcyBudWxsIG9yIHVuZGVmaW5lZC5cclxuICogQHBhcmFtICB7T2JqZWN0fSAgb2JqIC0gb2JqZWN0XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqL1xyXG5mdW5jdGlvbiBpc05pbChvYmopIHtcclxuICAgIHJldHVybiBvYmogPT0gbnVsbDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENoZWNrIHdoZXRoZXIgdGhlIG9iamVjdCBpcyBhIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICovXHJcbmZ1bmN0aW9uIGlzRnVuY3Rpb24ob2JqKSB7XHJcbiAgICBpZiAoaXNOaWwob2JqKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nIHx8IChvYmouY29uc3RydWN0b3IgIT09IG51bGwgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBGdW5jdGlvbik7XHJcbn1cclxuXHJcbmNvbnN0IHN1cHBvcnRBc3NpZ24gPSB0eXBlb2YgT2JqZWN0LmFzc2lnbiA9PT0gJ2Z1bmN0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBNZXJnZXMgdGhlIHByb3BlcnRpZXMgb2Ygc291cmNlcyBpbnRvIGRlc3RpbmF0aW9uIG9iamVjdC5cclxuICogQHBhcmFtICB7T2JqZWN0fSBkZXN0ICAgLSBvYmplY3QgdG8gZXh0ZW5kXHJcbiAqIEBwYXJhbSAgey4uLk9iamVjdH0gc3JjIC0gc291cmNlc1xyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqL1xyXG5mdW5jdGlvbiBleHRlbmQoZGVzdCkge1xyXG4gICAgaWYgKHN1cHBvcnRBc3NpZ24pIHtcclxuICAgICAgICBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgYXJndW1lbnRzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3Qgc3JjID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKSB7XHJcbiAgICAgICAgICAgICAgICBkZXN0W2tdID0gc3JjW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlc3Q7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGV4dGVuZDIoZGVzdCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCBzcmMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgZm9yIChjb25zdCBrIGluIHNyYykge1xyXG4gICAgICAgICAgICBpZiAoZGVzdFtrXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkZXN0W2tdID0gc3JjW2tdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRlc3Q7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBXaGV0aGVyIHZhbCBpcyBhIG51bWJlciBhbmQgbm90IGEgTmFOLlxyXG4gKiBAcGFyYW0gIHtPYmplY3R9ICB2YWwgLSB2YWxcclxuICogQHJldHVybiB7Qm9vbGVhbn1cclxuICogQG1lbWJlck9mIFV0aWxcclxuICovXHJcbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykgJiYgIWlzTmFOKHZhbCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvZzIoeCkge1xyXG4gICAgaWYgKE1hdGgubG9nMikge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmxvZzIoeCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2ID0gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzJFO1xyXG4gICAgY29uc3Qgcm91bmRlZCA9IE1hdGgucm91bmQodik7XHJcbiAgICBpZiAoTWF0aC5hYnMocm91bmRlZCAtIHYpIDwgMUUtMTQpIHtcclxuICAgICAgICByZXR1cm4gcm91bmRlZDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGFycikge1xyXG4gICAgbGV0IHN1bSA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBzdW0gKz0gYXJyW2ldO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBhcnIubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgb3V0W2ldID0gYXJyW2ldIC8gc3VtO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLypcclxuICogSW50ZXJwb2xhdGUgYmV0d2VlbiB0d28gbnVtYmVyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gZnJvbVxyXG4gKiBAcGFyYW0ge051bWJlcn0gdG9cclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBmYWN0b3IgYmV0d2VlbiAwIGFuZCAxXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGludGVycG9sYXRlZCBjb2xvclxyXG4gKi9cclxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoYSwgYiwgdCkge1xyXG4gICAgcmV0dXJuIChhICogKDEgLSB0KSkgKyAoYiAqIHQpO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gaXNBcnJheShhcnIpIHtcclxuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGFycikgfHxcclxuICAgICAgICAoYXJyIGluc3RhbmNlb2YgVWludDhBcnJheSkgfHxcclxuICAgICAgICAoYXJyIGluc3RhbmNlb2YgSW50OEFycmF5KSB8fFxyXG4gICAgICAgIChhcnIgaW5zdGFuY2VvZiBVaW50MTZBcnJheSkgfHxcclxuICAgICAgICAoYXJyIGluc3RhbmNlb2YgSW50MTZBcnJheSkgfHxcclxuICAgICAgICAoYXJyIGluc3RhbmNlb2YgVWludDMyQXJyYXkpIHx8XHJcbiAgICAgICAgKGFyciBpbnN0YW5jZW9mIEludDMyQXJyYXkpIHx8XHJcbiAgICAgICAgKGFyciBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5KSB8fFxyXG4gICAgICAgIChhcnIgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkpIHx8XHJcbiAgICAgICAgKGFyciBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSk7XHJcbn1cblxudmFyIFV0aWwgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gICAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICAgIGlzTmlsOiBpc05pbCxcbiAgICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIGV4dGVuZDI6IGV4dGVuZDIsXG4gICAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICAgIGxvZzI6IGxvZzIsXG4gICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgaW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuICAgIGlzQXJyYXk6IGlzQXJyYXlcbn0pO1xuXG5jb25zdCBFdmVudGFibGUgPSBCYXNlID0+XHJcblxyXG4gICAgY2xhc3MgZXh0ZW5kcyBCYXNlIHtcclxuICAgICAgICBvbih0eXBlLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6IFtoYW5kbGVyXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0gPSB0aGlzLl9ldmVudHNbdHlwZV0gfHwgW107XHJcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5wdXNoKGhhbmRsZXIpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgb25jZSh0eXBlLCBoYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9uKHR5cGUsIHRoaXMuX3dyYXBPbmNlKHR5cGUsIGhhbmRsZXIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgb2ZmKHR5cGUsIGhhbmRsZXIpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ldmVudHMgfHwgIXRoaXMuX2V2ZW50c1t0eXBlXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdLnNwbGljZSh0aGlzLl9ldmVudHNbdHlwZV0uaW5kZXhPZihoYW5kbGVyKSwgMSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmaXJlKHR5cGUsIHBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fZXZlbnRzIHx8ICF0aGlzLl9ldmVudHNbdHlwZV0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghcGFyYW1zLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLnRhcmdldCA9IHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcXVldWUgPSB0aGlzLl9ldmVudHNbdHlwZV0uc2xpY2UoMCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBvZiBxdWV1ZSkge1xyXG4gICAgICAgICAgICAgICAgcChwYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfd3JhcE9uY2UodHlwZSwgaGFuZGxlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgbGV0IGNhbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBmbiA9IGZ1bmN0aW9uIG9uY2VIYW5kbGVyKHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICBzZWxmLm9mZih0eXBlLCBvbmNlSGFuZGxlcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBmbjtcclxuICAgICAgICB9XHJcbiAgICB9O1xuXG4vKipcclxuICogQWJzdHJhY3QgVGV4dHVyZVxyXG4gKiBDb21tb24gbWV0aG9kcyBmb3IgVGV4dHVyZTJEIGFuZCBUZXh0dXJlQ3ViZVxyXG4gKiBAYWJzdHJhY3RcclxuICovXHJcbmNsYXNzIEFic3RyYWN0VGV4dHVyZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnLCByZXNMb2FkZXIpIHtcclxuICAgICAgICAvL1RPRE8gYWRkIHZpZGVvIHN1cHBvcnRcclxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb25maWcpKSB7XHJcbiAgICAgICAgICAgIC8vYW4gb3V0LW9mLWJveCByZWdsIHRleHR1cmVcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IGNvbmZpZztcclxuICAgICAgICAgICAgY29uZmlnID0gdGhpcy5jb25maWcgPSB7fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIGluIHRoaXMuX3RleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0dXJlLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wYXJzZSB0ZXh0dXJlIGNvbmZpZyB2YWx1ZXMgZnJvbSByZWdsIHRleHR1cmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzRnVuY3Rpb24odGhpcy5fdGV4dHVyZVtwXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnW3BdID0gdGhpcy5fdGV4dHVyZVtwXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcclxuICAgICAgICAgICAgdGhpcy5yZXNMb2FkZXIgPSByZXNMb2FkZXI7XHJcbiAgICAgICAgICAgIGlmICgoY29uZmlnLnVybCB8fCBjb25maWcucHJvbWlzZSkgJiYgIWNvbmZpZy5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgbGV0IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29uZmlnLnByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9taXNlID0gY29uZmlnLnByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsb2FkRm47XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpZy5hcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkRm4gPSByZXNMb2FkZXIuZ2V0QXJyYXlCdWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEZuID0gcmVzTG9hZGVyLmdldDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZSA9IGxvYWRGbi5jYWxsKHJlc0xvYWRlciwgY29uZmlnLnVybCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25maWcuZGF0YSA9IHJlc0xvYWRlci5nZXREZWZhdWx0VGV4dHVyZShjb25maWcudXJsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZGF0YSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChkYXRhLmRhdGEgaW5zdGFuY2VvZiBJbWFnZSkgJiYgdGhpcy5fbmVlZFBvd2VyT2YyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kYXRhID0gcmVzaXplKGRhdGEuZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5jb25maWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kaXNwb3NlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vbkxvYWQoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBbZGF0YV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZmlyZSgnY29tcGxldGUnLCB7IHRhcmdldDogdGhpcywgcmVzb3VyY2VzOiBkYXRhIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdlcnJvciB3aGVuIGxvYWRpbmcgdGV4dHVyZSBpbWFnZS4nLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlzUmVhZHkoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLl9sb2FkaW5nO1xyXG4gICAgfVxyXG5cclxuICAgIHNldChrLCB2KSB7XHJcbiAgICAgICAgdGhpcy5jb25maWdba10gPSB2O1xyXG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldChrKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uZmlnW2tdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJFR0xUZXh0dXJlKHJlZ2wpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3RleHR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHRoaXMuY3JlYXRlUkVHTFRleHR1cmUocmVnbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmRpcnR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJFR0woKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgX3VwZGF0ZVJFR0woKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3RleHR1cmUpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSh0aGlzLmNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy51cmwpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNMb2FkZXIuZGlzcG9zZVJlcyh0aGlzLmNvbmZpZy51cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fdGV4dHVyZSAmJiAhdGhpcy5fdGV4dHVyZVsnX19kZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZVsnX19kZXN0cm95ZWQnXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlc0xvYWRlcjtcclxuICAgICAgICB0aGlzLmZpcmUoJ2Rpc3Bvc2VkJywgeyB0YXJnZXQ6IHRoaXMsIHVybDogdGhpcy5jb25maWcudXJsIH0pO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLmNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBfbmVlZFBvd2VyT2YyKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xyXG4gICAgICAgIGNvbnN0IGlzUmVwZWF0ID0gY29uZmlnLndyYXAgJiYgY29uZmlnLndyYXAgIT09ICdjbGFtcCcgfHwgY29uZmlnLndyYXBTICYmIGNvbmZpZy53cmFwUyAhPT0gJ2NsYW1wJyB8fFxyXG4gICAgICAgICAgICBjb25maWcud3JhcFQgJiYgY29uZmlnLndyYXBUICE9PSAnY2xhbXAnO1xyXG4gICAgICAgIHJldHVybiBpc1JlcGVhdCB8fCBjb25maWcubWluICYmIGNvbmZpZy5taW4gIT09ICduZWFyZXN0JyAmJiBjb25maWcubWluICE9PSAnbGluZWFyJztcclxuICAgIH1cclxufVxyXG5cclxudmFyIFRleHR1cmUgPSBFdmVudGFibGUoQWJzdHJhY3RUZXh0dXJlKTtcclxuXHJcbmZ1bmN0aW9uIHJlc2l6ZShpbWFnZSkge1xyXG4gICAgaWYgKGlzUG93ZXJPZlR3byhpbWFnZS53aWR0aCkgJiYgaXNQb3dlck9mVHdvKGltYWdlLmhlaWdodCkpIHtcclxuICAgICAgICByZXR1cm4gaW1hZ2U7XHJcbiAgICB9XHJcbiAgICBsZXQgd2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgIGxldCBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICBpZiAoIWlzUG93ZXJPZlR3byh3aWR0aCkpIHtcclxuICAgICAgICB3aWR0aCA9IGZsb29yUG93ZXJPZlR3byh3aWR0aCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzUG93ZXJPZlR3byhoZWlnaHQpKSB7XHJcbiAgICAgICAgaGVpZ2h0ID0gZmxvb3JQb3dlck9mVHdvKGhlaWdodCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBjb25zdCB1cmwgPSBpbWFnZS5zcmM7XHJcbiAgICBjb25zdCBpZHggPSB1cmwubGFzdEluZGV4T2YoJy8nKSArIDE7XHJcbiAgICBjb25zdCBmaWxlbmFtZSA9IHVybC5zdWJzdHJpbmcoaWR4KTtcclxuICAgIGNvbnNvbGUud2FybihgVGV4dHVyZSgke2ZpbGVuYW1lfSkncyBzaXplIGlzIG5vdCBwb3dlciBvZiB0d28sIHJlc2l6ZSBmcm9tICgke2ltYWdlLndpZHRofSwgJHtpbWFnZS5oZWlnaHR9KSB0byAoJHt3aWR0aH0sICR7aGVpZ2h0fSlgKTtcclxuICAgIHJldHVybiBjYW52YXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzUG93ZXJPZlR3byh2YWx1ZSkge1xyXG4gICAgcmV0dXJuICh2YWx1ZSAmICh2YWx1ZSAtIDEpKSA9PT0gMCAmJiB2YWx1ZSAhPT0gMDtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGZsb29yUG93ZXJPZlR3byh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIE1hdGgucG93KDIsIE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpKTtcclxufVxyXG5cclxuLy8gZnVuY3Rpb24gY2VpbFBvd2VyT2ZUd28odmFsdWUpIHtcclxuLy8gICAgIHJldHVybiBNYXRoLnBvdygyLCBNYXRoLmNlaWwoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpKTtcclxuLy8gfVxuXG4vKipcclxuICogQSBiYXNpYyByZW5kZXJlciB0byByZW5kZXIgbWVzaGVzIGluIGZhc2hpb24gb2YgZm9yd2FyZCByZW5kZXJpbmdcclxuICovXHJcbmNsYXNzIFJlbmRlcmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKHJlZ2wpIHtcclxuICAgICAgICB0aGlzLnJlZ2wgPSByZWdsO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcihzaGFkZXIsIHVuaWZvcm1zLCBzY2VuZSwgZnJhbWVidWZmZXIpIHtcclxuICAgICAgICAvL3JlbmRlcmluZyBvZiBsYXJnZSBudW1iZXIgb2YgbGlnaHRzIGNhbiBiZSBhY2NlbGFyYXRlZCBieSBjbGlwLXNwYWNlIHF1YWR0cmVlXHJcbiAgICAgICAgLy9odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMDU5NDUxMS93ZWJnbC1mcmFnbWVudC1zaGFkZXItZm9yLW11bHRpcGxlLWxpZ2h0LXNvdXJjZXNcclxuXHJcbiAgICAgICAgc2hhZGVyLnNldFVuaWZvcm1zKHVuaWZvcm1zIHx8IHt9KTtcclxuICAgICAgICBzaGFkZXIuc2V0RnJhbWVidWZmZXIoZnJhbWVidWZmZXIpO1xyXG4gICAgICAgIGlmIChzY2VuZSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IG9wYXF1ZXMsIHRyYW5zcGFyZW50cyB9ID0gc2NlbmUuZ2V0U29ydGVkTWVzaGVzKCk7XHJcbiAgICAgICAgICAgIHNoYWRlci5kcmF3KHRoaXMucmVnbCwgb3BhcXVlcyk7XHJcbiAgICAgICAgICAgIHNoYWRlci5kcmF3KHRoaXMucmVnbCwgdHJhbnNwYXJlbnRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzaGFkZXIuZHJhdyh0aGlzLnJlZ2wpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcihvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5yZWdsLmNsZWFyKG9wdGlvbnMpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBBIHJlbmRlcmVyIGJhc2VkIG9uIE1UUiwgd2hpY2ggbmVlZHMgc29tZSBleHRlbnNpb25zIHVuc3VwcG9ydGVkIGJ5IElFMTEgYW5kIEVER0VcclxuICovXHJcbmNsYXNzIERlZmVycmVkUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XHJcblxyXG59XG5cbi8qIVxuICogQ29udGFpbnMgY29kZSBmcm9tIGdvb2dsZSBmaWxhbWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9maWxhbWVudC9cbiAqIExpY2Vuc2UgQXBhY2hlLTIuMFxuICovXG5cbmNvbnN0IENIQVJfQklUID0gODtcblxuY29uc3QgTUFUMCA9IFtdO1xuY29uc3QgVE1QMCA9IFtdO1xuY29uc3QgVE1QMSA9IFtdO1xuY29uc3QgVE1QMiA9IFtdO1xuXG5mdW5jdGlvbiBwYWNrVGFuZ2VudEZyYW1lKHEsIC8qIHZlYzMgKi9uLCAvKiB2ZWM0ICovdCkge1xuICAgIGNvbnN0IGMgPSB2ZWMzLmNyb3NzKFRNUDAsIG4sIHQpO1xuICAgIGNvbnN0IG1hdCA9IHRvTWF0MyhNQVQwLCB0WzBdLCB0WzFdLCB0WzJdLCAuLi5jLCAuLi5uKTtcbiAgICBxID0gcXVhdC5mcm9tTWF0MyhxLCBtYXQpO1xuICAgIHEgPSBxdWF0Lm5vcm1hbGl6ZShxLCBxKTtcbiAgICBxID0gcG9zaXRpdmUocSk7XG5cbiAgICBjb25zdCBzdG9yYWdlU2l6ZSA9IDI7IC8vc2l6ZW9mKGludDE2X3QpXG4gICAgLy8gRW5zdXJlIHcgaXMgbmV2ZXIgMC4wXG4gICAgLy8gQmlhcyBpcyAyXihuYl9iaXRzIC0gMSkgLSAxXG4gICAgY29uc3QgYmlhcyA9IDEgLyAoKDEgPDwgKHN0b3JhZ2VTaXplICogQ0hBUl9CSVQgLSAxKSkgLSAxKTtcbiAgICBpZiAocVszXSA8IGJpYXMpIHtcbiAgICAgICAgcVszXSA9IGJpYXM7XG4gICAgICAgIGNvbnN0IGZhY3RvciA9IE1hdGguc3FydCgxLjAgLSBiaWFzICogYmlhcyk7XG4gICAgICAgIHFbMF0gKj0gZmFjdG9yO1xuICAgICAgICBxWzFdICo9IGZhY3RvcjtcbiAgICAgICAgcVsyXSAqPSBmYWN0b3I7XG4gICAgfVxuXG4gICAgY29uc3QgYiA9IHRbM10gPiAwID8gdmVjMy5jcm9zcyhUTVAxLCB0LCBuKSA6IHZlYzMuY3Jvc3MoVE1QMSwgbiwgdCk7XG4gICAgXG4gICAgLy8gSWYgdGhlcmUncyBhIHJlZmxlY3Rpb24gKChuIHggdCkgLiBiIDw9IDApLCBtYWtlIHN1cmUgdyBpcyBuZWdhdGl2ZVxuICAgIGNvbnN0IGNjID0gdmVjMy5jcm9zcyhUTVAyLCB0LCBuKTtcbiAgICBpZiAodmVjMy5kb3QoY2MsIGIpIDwgMCkge1xuICAgICAgICBxdWF0LnNjYWxlKHEsIHEsIC0xKTtcbiAgICB9XG4gICAgcmV0dXJuIHE7XG59XG5cbmZ1bmN0aW9uIHRvTWF0MyhvdXQsIGMwMCwgYzAxLCBjMDIsIGMxMCwgYzExLCBjMTIsIGMyMCwgYzIxLCBjMjIpIHtcbiAgICBvdXRbMF0gPSBjMDA7XG4gICAgb3V0WzFdID0gYzAxO1xuICAgIG91dFsyXSA9IGMwMjtcblxuICAgIG91dFszXSA9IGMxMDtcbiAgICBvdXRbNF0gPSBjMTE7XG4gICAgb3V0WzVdID0gYzEyO1xuXG4gICAgb3V0WzZdID0gYzIwO1xuICAgIG91dFs3XSA9IGMyMTtcbiAgICBvdXRbOF0gPSBjMjI7XG5cbiAgICByZXR1cm4gb3V0O1xufVxuXG5cbmZ1bmN0aW9uIHBvc2l0aXZlKHEpIHtcbiAgICBpZiAocVszXSA8IDApIHtcbiAgICAgICAgcmV0dXJuIHF1YXQuc2NhbGUocSwgcSwgLTEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBxO1xuICAgIH1cbn1cblxuLyohXG4gKiBDb250YWlucyBjb2RlIGZyb20gVEhSRUUuSlNcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvXG4gKiBMaWNlbnNlIE1JVFxuICogXG4gKiBHZW5lcmF0ZSB0YW5nZW50cyBwZXIgdmVydGV4LlxuICovXG5mdW5jdGlvbiBidWlsZFRhbmdlbnRzKHBvc2l0aW9ucywgbm9ybWFscywgdXZzLCBpbmRpY2VzKSB7XG4gICAgY29uc3QgblZlcnRpY2VzID0gcG9zaXRpb25zLmxlbmd0aCAvIDM7XG5cbiAgICBjb25zdCB0YW5nZW50cyA9IG5ldyBBcnJheSg0ICogblZlcnRpY2VzKTtcblxuICAgIGNvbnN0IHRhbjEgPSBbXSwgdGFuMiA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuVmVydGljZXM7IGkrKykge1xuXG4gICAgICAgIHRhbjFbIGkgXSA9IFswLCAwLCAwXTtcbiAgICAgICAgdGFuMlsgaSBdID0gWzAsIDAsIDBdO1xuXG4gICAgfVxuXG4gICAgY29uc3QgdkEgPSBbMCwgMCwgMF0sXG4gICAgICAgIHZCID0gWzAsIDAsIDBdLFxuICAgICAgICB2QyA9IFswLCAwLCAwXSxcblxuICAgICAgICB1dkEgPSBbMCwgMF0sXG4gICAgICAgIHV2QiA9IFswLCAwXSxcbiAgICAgICAgdXZDID0gWzAsIDBdLFxuXG4gICAgICAgIHNkaXIgPSBbMCwgMCwgMF0sXG4gICAgICAgIHRkaXIgPSBbMCwgMCwgMF07XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVUcmlhbmdsZShhLCBiLCBjKSB7XG5cbiAgICAgICAgZnJvbUFycmF5Myh2QSwgcG9zaXRpb25zLCBhICogMyk7XG4gICAgICAgIGZyb21BcnJheTModkIsIHBvc2l0aW9ucywgYiAqIDMpO1xuICAgICAgICBmcm9tQXJyYXkzKHZDLCBwb3NpdGlvbnMsIGMgKiAzKTtcblxuICAgICAgICBmcm9tQXJyYXkyKHV2QSwgdXZzLCBhICogMik7XG4gICAgICAgIGZyb21BcnJheTIodXZCLCB1dnMsIGIgKiAyKTtcbiAgICAgICAgZnJvbUFycmF5Mih1dkMsIHV2cywgYyAqIDIpO1xuXG4gICAgICAgIGNvbnN0IHgxID0gdkJbMF0gLSB2QVswXTtcbiAgICAgICAgY29uc3QgeDIgPSB2Q1swXSAtIHZBWzBdO1xuXG4gICAgICAgIGNvbnN0IHkxID0gdkJbMV0gLSB2QVsxXTtcbiAgICAgICAgY29uc3QgeTIgPSB2Q1sxXSAtIHZBWzFdO1xuXG4gICAgICAgIGNvbnN0IHoxID0gdkJbMl0gLSB2QVsyXTtcbiAgICAgICAgY29uc3QgejIgPSB2Q1syXSAtIHZBWzJdO1xuXG4gICAgICAgIGNvbnN0IHMxID0gdXZCWzBdIC0gdXZBWzBdO1xuICAgICAgICBjb25zdCBzMiA9IHV2Q1swXSAtIHV2QVswXTtcblxuICAgICAgICBjb25zdCB0MSA9IHV2QlsxXSAtIHV2QVsxXTtcbiAgICAgICAgY29uc3QgdDIgPSB1dkNbMV0gLSB1dkFbMV07XG5cbiAgICAgICAgY29uc3QgciA9IDEuMCAvIChzMSAqIHQyIC0gczIgKiB0MSk7XG5cbiAgICAgICAgdmVjMy5zZXQoXG4gICAgICAgICAgICBzZGlyLFxuICAgICAgICAgICAgKHQyICogeDEgLSB0MSAqIHgyKSAqIHIsXG4gICAgICAgICAgICAodDIgKiB5MSAtIHQxICogeTIpICogcixcbiAgICAgICAgICAgICh0MiAqIHoxIC0gdDEgKiB6MikgKiByXG4gICAgICAgICk7XG5cbiAgICAgICAgdmVjMy5zZXQoXG4gICAgICAgICAgICB0ZGlyLFxuICAgICAgICAgICAgKHMxICogeDIgLSBzMiAqIHgxKSAqIHIsXG4gICAgICAgICAgICAoczEgKiB5MiAtIHMyICogeTEpICogcixcbiAgICAgICAgICAgIChzMSAqIHoyIC0gczIgKiB6MSkgKiByXG4gICAgICAgICk7XG5cbiAgICAgICAgdmVjMy5hZGQodGFuMVsgYSBdLCB0YW4xWyBhIF0sIHNkaXIpO1xuICAgICAgICB2ZWMzLmFkZCh0YW4xWyBiIF0sIHRhbjFbIGIgXSwgc2Rpcik7XG4gICAgICAgIHZlYzMuYWRkKHRhbjFbIGMgXSwgdGFuMVsgYyBdLCBzZGlyKTtcblxuICAgICAgICB2ZWMzLmFkZCh0YW4yWyBhIF0sIHRhbjJbIGEgXSwgdGRpcik7XG4gICAgICAgIHZlYzMuYWRkKHRhbjJbIGIgXSwgdGFuMlsgYiBdLCB0ZGlyKTtcbiAgICAgICAgdmVjMy5hZGQodGFuMlsgYyBdLCB0YW4yWyBjIF0sIHRkaXIpO1xuXG4gICAgfVxuXG4gICAgZm9yIChsZXQgaiA9IDAsIGpsID0gaW5kaWNlcy5sZW5ndGg7IGogPCBqbDsgaiArPSAzKSB7XG5cbiAgICAgICAgaGFuZGxlVHJpYW5nbGUoXG4gICAgICAgICAgICBpbmRpY2VzWyBqICsgMCBdLFxuICAgICAgICAgICAgaW5kaWNlc1sgaiArIDEgXSxcbiAgICAgICAgICAgIGluZGljZXNbIGogKyAyIF1cbiAgICAgICAgKTtcblxuICAgIH1cblxuICAgIGNvbnN0IHRtcCA9IFtdLCB0bXAyID0gW107XG4gICAgY29uc3QgbiA9IFtdLCBuMiA9IFtdO1xuICAgIGxldCB3LCB0LCB0ZXN0O1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlVmVydGV4KHYpIHtcblxuICAgICAgICBmcm9tQXJyYXkzKG4sIG5vcm1hbHMsIHYgKiAzKTtcbiAgICAgICAgdmVjMy5jb3B5KG4yLCBuKTtcbiAgICAgICAgLy8gbjIuY29weShuKTtcblxuICAgICAgICB0ID0gdGFuMVsgdiBdO1xuXG4gICAgICAgIC8vIEdyYW0tU2NobWlkdCBvcnRob2dvbmFsaXplXG5cbiAgICAgICAgdmVjMy5jb3B5KHRtcCwgdCk7XG4gICAgICAgIHZlYzMuc3ViKHRtcCwgdG1wLCB2ZWMzLnNjYWxlKG4sIG4sIHZlYzMuZG90KG4sIHQpKSk7XG4gICAgICAgIHZlYzMubm9ybWFsaXplKHRtcCwgdG1wKTtcbiAgICAgICAgLy8gdG1wLnN1YihuLm11bHRpcGx5U2NhbGFyKG4uZG90KHQpKSkubm9ybWFsaXplKCk7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIGhhbmRlZG5lc3NcblxuICAgICAgICB2ZWMzLmNyb3NzKHRtcDIsIG4yLCB0KTtcbiAgICAgICAgdGVzdCA9IHZlYzMuZG90KHRtcDIsIHRhbjJbIHYgXSk7XG4gICAgICAgIC8vIHRtcDIuY3Jvc3NWZWN0b3JzKG4yLCB0KTtcbiAgICAgICAgLy8gdGVzdCA9IHRtcDIuZG90KHRhbjJbIHYgXSk7XG4gICAgICAgIHcgPSAodGVzdCA8IDAuMCkgPyAtMS4wIDogMS4wO1xuXG4gICAgICAgIHRhbmdlbnRzWyB2ICogNCBdID0gdG1wWzBdO1xuICAgICAgICB0YW5nZW50c1sgdiAqIDQgKyAxIF0gPSB0bXBbMV07XG4gICAgICAgIHRhbmdlbnRzWyB2ICogNCArIDIgXSA9IHRtcFsyXTtcbiAgICAgICAgdGFuZ2VudHNbIHYgKiA0ICsgMyBdID0gdztcblxuICAgIH1cblxuICAgIGZvciAobGV0IGogPSAwLCBqbCA9IGluZGljZXMubGVuZ3RoOyBqIDwgamw7IGogKz0gMykge1xuXG4gICAgICAgIGhhbmRsZVZlcnRleChpbmRpY2VzWyBqICsgMCBdKTtcbiAgICAgICAgaGFuZGxlVmVydGV4KGluZGljZXNbIGogKyAxIF0pO1xuICAgICAgICBoYW5kbGVWZXJ0ZXgoaW5kaWNlc1sgaiArIDIgXSk7XG5cbiAgICB9XG5cbiAgICByZXR1cm4gdGFuZ2VudHM7XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheTMob3V0LCBhcnJheSwgb2Zmc2V0KSB7XG4gICAgb3V0WzBdID0gYXJyYXlbb2Zmc2V0XTtcbiAgICBvdXRbMV0gPSBhcnJheVtvZmZzZXQgKyAxXTtcbiAgICBvdXRbMl0gPSBhcnJheVtvZmZzZXQgKyAyXTtcbiAgICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkyKG91dCwgYXJyYXksIG9mZnNldCkge1xuICAgIG91dFswXSA9IGFycmF5W29mZnNldF07XG4gICAgb3V0WzFdID0gYXJyYXlbb2Zmc2V0ICsgMV07XG4gICAgcmV0dXJuIG91dDtcbn1cblxuY2xhc3MgQm91bmRpbmdCb3gge1xyXG4gICAgY29uc3RydWN0b3IobWluLCBtYXgpIHtcclxuICAgICAgICB0aGlzLm1pbiA9IG1pbiB8fCBbSW5maW5pdHksIEluZmluaXR5LCBJbmZpbml0eV07XHJcbiAgICAgICAgdGhpcy5tYXggPSBtYXggfHwgWy1JbmZpbml0eSwgLUluZmluaXR5LCAtSW5maW5pdHldO1xyXG4gICAgfVxyXG5cclxuICAgIGRpcnR5KCkge1xyXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBjZW50ZXIgb2YgdGhlIGJvdW5kaW5nIGJveFxyXG4gICAgICogQHJldHVybnMge051bWJlcltdfSBjZW50ZXJcclxuICAgICAqL1xyXG4gICAgZ2V0Q2VudGVyKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jZW50ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jZW50ZXIgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fZGlydHkgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fZGlydHkpIHtcclxuICAgICAgICAgICAgdmVjMy5hZGQodGhpcy5jZW50ZXIsIHRoaXMubWluLCB0aGlzLm1heCk7XHJcbiAgICAgICAgICAgIHZlYzMuc2NhbGUodGhpcy5jZW50ZXIsIHRoaXMuY2VudGVyLCAwLjUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNlbnRlcjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIElmIGNvbnRhaW4gcG9pbnQgZW50aXJlbHlcclxuICAgICAqIEBwYXJhbSAge051bWJlcltdfSBwb2ludFxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgY29udGFpblBvaW50KHApIHtcclxuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm1pbjtcclxuICAgICAgICBjb25zdCBtYXggPSB0aGlzLm1heDtcclxuXHJcbiAgICAgICAgcmV0dXJuIG1pblswXSA8PSBwWzBdICYmIG1pblsxXSA8PSBwWzFdICYmIG1pblsyXSA8PSBwWzJdICYmXHJcbiAgICAgICAgICAgIG1heFswXSA+PSBwWzBdICYmIG1heFsxXSA+PSBwWzFdICYmIG1heFsyXSA+PSBwWzJdO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSWYgYm91bmRpbmcgYm94IGlzIGZpbml0ZVxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgaXNGaW5pdGUoKSB7XHJcbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5taW47XHJcbiAgICAgICAgY29uc3QgbWF4ID0gdGhpcy5tYXg7XHJcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG1pblswXSkgJiYgaXNGaW5pdGUobWluWzFdKSAmJiBpc0Zpbml0ZShtaW5bMl0pICYmXHJcbiAgICAgICAgICAgIGlzRmluaXRlKG1heFswXSkgJiYgaXNGaW5pdGUobWF4WzFdKSAmJiBpc0Zpbml0ZShtYXhbMl0pO1xyXG4gICAgfVxyXG59XG5cbmNvbnN0IERFRkFVTFRfREVTQyA9IHtcclxuICAgICdwb3NpdGlvblNpemUnOiAzLFxyXG4gICAgJ3ByaW1pdGl2ZSc6ICd0cmlhbmdsZXMnLFxyXG4gICAgLy9uYW1lIG9mIHBvc2l0aW9uIGF0dHJpYnV0ZVxyXG4gICAgJ3Bvc2l0aW9uQXR0cmlidXRlJzogJ2FQb3NpdGlvbicsXHJcbiAgICAnbm9ybWFsQXR0cmlidXRlJzogJ2FOb3JtYWwnLFxyXG4gICAgJ3V2MEF0dHJpYnV0ZSc6ICdhVGV4Q29vcmQnXHJcbn07XHJcblxyXG5jbGFzcyBHZW9tZXRyeSB7XHJcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBlbGVtZW50cywgY291bnQsIGRlc2MpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcclxuICAgICAgICB0aGlzLmRlc2MgPSBleHRlbmQoe30sIERFRkFVTFRfREVTQywgZGVzYyk7XHJcbiAgICAgICAgY29uc3QgcG9zID0gZGF0YVt0aGlzLmRlc2MucG9zaXRpb25BdHRyaWJ1dGVdO1xyXG4gICAgICAgIGlmICghY291bnQpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCA9IGdldEVsZW1lbnRMZW5ndGgoZWxlbWVudHMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvcyAmJiBwb3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCA9IHBvcy5sZW5ndGggLyB0aGlzLmRlc2MucG9zaXRpb25TaXplO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcclxuICAgICAgICBpZiAoIXRoaXMuZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cyA9IGNvdW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9idWZmZXJzID0ge307XHJcbiAgICAgICAgdGhpcy51cGRhdGVCb3VuZGluZ0JveCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQnVmZmVycyhyZWdsKSB7XHJcbiAgICAgICAgLy9nZW5lcmF0ZSByZWdsIGJ1ZmZlcnMgYmVmb3JlaGFuZCB0byBhdm9pZCByZXBlYXRlZCBidWZmZXJEYXRhXHJcbiAgICAgICAgLy/mj5DliY3lpITnkIZhZGRCdWZmZXLmj5LlhaXnmoRhcnJheWJ1ZmZlclxyXG4gICAgICAgIGNvbnN0IGFsbG9jYXRlZEJ1ZmZlcnMgPSB0aGlzLl9idWZmZXJzO1xyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiBhbGxvY2F0ZWRCdWZmZXJzKSB7XHJcbiAgICAgICAgICAgIGlmICghYWxsb2NhdGVkQnVmZmVyc1twXS5idWZmZXIpIHtcclxuICAgICAgICAgICAgICAgIGFsbG9jYXRlZEJ1ZmZlcnNbcF0uYnVmZmVyID0gcmVnbC5idWZmZXIoYWxsb2NhdGVkQnVmZmVyc1twXS5kYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxldGUgYWxsb2NhdGVkQnVmZmVyc1twXS5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICghZGF0YVtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL+WmguaenOiwg+eUqOi/h2FkZEJ1ZmZlcu+8jGJ1ZmZlcuacieWPr+iDveaYr0FycmF5QnVmZmVyXHJcbiAgICAgICAgICAgIGlmIChkYXRhW2tleV0uYnVmZmVyICE9PSB1bmRlZmluZWQgJiYgIShkYXRhW2tleV0uYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVtrZXldLmJ1ZmZlci5kZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyc1trZXldID0gZGF0YVtrZXldO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbGxvY2F0ZWRCdWZmZXJzW2RhdGFba2V5XS5idWZmZXJdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy/lpJrkuKrlsZ7mgKflhbHnlKjlkIzkuIDkuKpBcnJheUJ1ZmZlcihpbnRlcmxlYXZlZClcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJzW2tleV0gPSBleHRlbmQoe30sIGRhdGFba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyc1trZXldLmJ1ZmZlciA9IGFsbG9jYXRlZEJ1ZmZlcnNbZGF0YVtrZXldLmJ1ZmZlcl0uYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyc1trZXldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA6IHJlZ2wuYnVmZmVyKGRhdGFba2V5XSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhID0gYnVmZmVycztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMgJiYgIWlzTnVtYmVyKHRoaXMuZWxlbWVudHMpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzLmRlc3Ryb3kgPyB0aGlzLmVsZW1lbnRzIDogcmVnbC5lbGVtZW50cyh7XHJcbiAgICAgICAgICAgICAgICBwcmltaXRpdmU6IHRoaXMuZ2V0UHJpbWl0aXZlKCksXHJcbiAgICAgICAgICAgICAgICBkYXRhOiB0aGlzLmVsZW1lbnRzLFxyXG4gICAgICAgICAgICAgICAgLy90eXBlIDogJ3VpbnQxNicgLy8gdHlwZSBpcyBpbmZlcnJlZCBmcm9tIGRhdGFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omL5Yqo6K6+572uZ2VvbWV0cnnnmoRidWZmZXLvvIznlKjkuo7lpJrkuKrlsZ7mgKflhbHnlKjkuIDkuKpBcnJheUJ1ZmZlcihpbnRlcmxlYXZlZClcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBrZXkgLSDlsZ7mgKdcclxuICAgICAqIEBwYXJhbSB7QXJyYXlCdWZmZXJ8UkVHTEJ1ZmZlcn0gZGF0YSAtIOaVsOaNrlxyXG4gICAgICovXHJcbiAgICBhZGRCdWZmZXIoa2V5LCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5fYnVmZmVyc1trZXldID0ge1xyXG4gICAgICAgICAgICBkYXRhXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVCdWZmZXIoa2V5LCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9idWZmZXJzW2tleV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGJ1ZmZlciAke2tleX0gaW4gZ2VvbWV0cnlgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gdGhpcy5fYnVmZmVyc1trZXldLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIGlmICh0aGlzLl9idWZmZXJzW2tleV0uYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnNba2V5XS5idWZmZXIuc3ViZGF0YShkYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXJzW2tleV0uZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVwbGFjZSBkYXRhIG9yIHJlZmlsbCBhdHRyaWJ1dGUgZGF0YSBidWZmZXJcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gZGF0YSdzIG5hbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyW10gfCBPYmplY3R9IGRhdGEgLSBkYXRhIHRvIHVwZGF0ZVxyXG4gICAgICogQHJldHVybnMgdGhpc1xyXG4gICAgICovXHJcbiAgICB1cGRhdGVEYXRhKG5hbWUsIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBidWYgPSB0aGlzLmRhdGFbbmFtZV07XHJcbiAgICAgICAgaWYgKCFidWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBidWZmZXI7XHJcbiAgICAgICAgdGhpcy5kYXRhW25hbWVdID0gZGF0YTtcclxuICAgICAgICBpZiAoYnVmLmJ1ZmZlciAmJiBidWYuYnVmZmVyLmRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgYnVmZmVyID0gYnVmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobmFtZSA9PT0gdGhpcy5kZXNjLnBvc2l0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQm91bmRpbmdCb3goKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICBidWZmZXIuYnVmZmVyLnN1YmRhdGEoZGF0YSk7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVtuYW1lXSA9IGJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UHJpbWl0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlc2MucHJpbWl0aXZlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWxlbWVudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RWxlbWVudHMoZWxlbWVudHMsIGNvdW50KSB7XHJcbiAgICAgICAgaWYgKCFlbGVtZW50cykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2VsZW1lbnRzIGRhdGEgaXMgaW52YWxpZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlID0gdGhpcy5lbGVtZW50cztcclxuICAgICAgICB0aGlzLmNvdW50ID0gY291bnQgPT09IHVuZGVmaW5lZCA/IGdldEVsZW1lbnRMZW5ndGgoZWxlbWVudHMpIDogY291bnQ7XHJcblxyXG4gICAgICAgIGlmIChlLmRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgdGhpcy5lbGVtZW50cyA9IGUoZWxlbWVudHMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RHJhd0NvdW50KGNvdW50KSB7XHJcbiAgICAgICAgdGhpcy5jb3VudDEgPSBjb3VudDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBnZXREcmF3Q291bnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY291bnQxIHx8IHRoaXMuY291bnQ7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RHJhd09mZnNldChvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBnZXREcmF3T2Zmc2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldCB8fCAwO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5fZm9yRWFjaEJ1ZmZlcihidWZmZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWJ1ZmZlclsnX19yZXNoYWRlcl9kaXNwb3NlZCddKSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJbJ19fcmVzaGFkZXJfZGlzcG9zZWQnXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5kYXRhID0ge307XHJcbiAgICAgICAgdGhpcy5fYnVmZmVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMuY291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcclxuICAgICAgICB0aGlzLl9kaXNwb3NlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEaXNwb3NlZCgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLl9kaXNwb3NlZDtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSBib3VuZGluZ0JveCBvZiBHZW9tZXRyeVxyXG4gICAgICovXHJcbiAgICB1cGRhdGVCb3VuZGluZ0JveCgpIHtcclxuICAgICAgICBsZXQgYmJveCA9IHRoaXMuYm91bmRpbmdCb3g7XHJcbiAgICAgICAgaWYgKCFiYm94KSB7XHJcbiAgICAgICAgICAgIGJib3ggPSB0aGlzLmJvdW5kaW5nQm94ID0gbmV3IEJvdW5kaW5nQm94KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBvc0F0dHIgPSB0aGlzLmRlc2MucG9zaXRpb25BdHRyaWJ1dGU7XHJcbiAgICAgICAgbGV0IHBvc0FyciA9IHRoaXMuZGF0YVtwb3NBdHRyXTtcclxuICAgICAgICBpZiAoIWlzQXJyYXkocG9zQXJyKSkge1xyXG4gICAgICAgICAgICAvLyBmb3JtIG9mIG9iamVjdDogeyB1c2FnZSA6ICdzdGF0aWMnLCBkYXRhIDogWy4uLl0gfVxyXG4gICAgICAgICAgICBwb3NBcnIgPSBwb3NBcnIuZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBvc0FyciAmJiBwb3NBcnIubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vVE9ETyBvbmx5IHN1cHBvcnQgc2l6ZSBvZiAzIG5vd1xyXG4gICAgICAgICAgICBjb25zdCBtaW4gPSBiYm94Lm1pbjtcclxuICAgICAgICAgICAgY29uc3QgbWF4ID0gYmJveC5tYXg7XHJcbiAgICAgICAgICAgIHZlYzMuc2V0KG1pbiwgcG9zQXJyWzBdLCBwb3NBcnJbMV0sIHBvc0FyclsyXSk7XHJcbiAgICAgICAgICAgIHZlYzMuc2V0KG1heCwgcG9zQXJyWzBdLCBwb3NBcnJbMV0sIHBvc0FyclsyXSk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAzOyBpIDwgcG9zQXJyLmxlbmd0aDspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSBwb3NBcnJbaSsrXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBwb3NBcnJbaSsrXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHogPSBwb3NBcnJbaSsrXTtcclxuICAgICAgICAgICAgICAgIGlmICh4IDwgbWluWzBdKSB7IG1pblswXSA9IHg7IH1cclxuICAgICAgICAgICAgICAgIGlmICh5IDwgbWluWzFdKSB7IG1pblsxXSA9IHk7IH1cclxuICAgICAgICAgICAgICAgIGlmICh6IDwgbWluWzJdKSB7IG1pblsyXSA9IHo7IH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoeCA+IG1heFswXSkgeyBtYXhbMF0gPSB4OyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoeSA+IG1heFsxXSkgeyBtYXhbMV0gPSB5OyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoeiA+IG1heFsyXSkgeyBtYXhbMl0gPSB6OyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYmJveC5kaXJ0eSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVUYW5nZW50KG5hbWUgPSAnYVRhbmdlbnQnKSB7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFscyA9IHRoaXMuZGF0YVt0aGlzLmRlc2Mubm9ybWFsQXR0cmlidXRlXTtcclxuICAgICAgICBjb25zdCB0YW5nZW50cyA9IGJ1aWxkVGFuZ2VudHMoXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YVt0aGlzLmRlc2MucG9zaXRpb25BdHRyaWJ1dGVdLFxyXG4gICAgICAgICAgICBub3JtYWxzLFxyXG4gICAgICAgICAgICB0aGlzLmRhdGFbdGhpcy5kZXNjLnV2MEF0dHJpYnV0ZV0sXHJcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHNcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnN0IGFUYW5nZW50ID0gdGhpcy5kYXRhW25hbWVdID0gbmV3IEZsb2F0MzJBcnJheSh0YW5nZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IHQgPSBbXSwgbiA9IFtdLCBxID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YW5nZW50cy5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgICAgICBjb25zdCBuaSA9IGkgLyA0ICogMztcclxuICAgICAgICAgICAgdmVjMy5zZXQobiwgbm9ybWFsc1tuaV0sIG5vcm1hbHNbbmkgKyAxXSwgbm9ybWFsc1tuaSArIDJdKTtcclxuICAgICAgICAgICAgdmVjNC5zZXQodCwgdGFuZ2VudHNbaV0sIHRhbmdlbnRzW2kgKyAxXSwgdGFuZ2VudHNbaSArIDJdLCB0YW5nZW50c1tpICsgM10pO1xyXG4gICAgICAgICAgICBwYWNrVGFuZ2VudEZyYW1lKHEsIG4sIHQpO1xyXG4gICAgICAgICAgICB2ZWM0LmNvcHkoYVRhbmdlbnQuc3ViYXJyYXkoaSwgaSArIDQpLCBxKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYmFyeWNlbnRyaWMgYXR0cmlidXRlIGRhdGFcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIC0gYXR0cmlidXRlIG5hbWUgZm9yIGJhcnljZW50cmljIGF0dHJpYnV0ZVxyXG4gICAgICovXHJcbiAgICBjcmVhdGVCYXJ5Y2VudHJpYyhuYW1lID0gJ2FCYXJ5Y2VudHJpYycpIHtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuZGF0YVt0aGlzLmRlc2MucG9zaXRpb25BdHRyaWJ1dGVdO1xyXG4gICAgICAgIGlmICghaXNBcnJheShwb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3NpdGlvbiBkYXRhIG11c3QgYmUgYW4gYXJyYXkgdG8gY3JlYXRlIGJhcnkgY2VudHJpYyBkYXRhJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRlc2MucHJpbWl0aXZlICE9PSAndHJpYW5nbGVzJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ByaW1pdGl2ZSBtdXN0IGJlIHRyaWFuZ2xlcyB0byBjcmVhdGUgYmFyeSBjZW50cmljIGRhdGEnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYmFyeSA9IG5ldyBVaW50OEFycmF5KHBvc2l0aW9uLmxlbmd0aCAvIHRoaXMuZGVzYy5wb3NpdGlvblNpemUgKiAzKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuZWxlbWVudHMubGVuZ3RoOyBpIDwgbDspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCAzOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlpID0gdGhpcy5lbGVtZW50c1tpKytdO1xyXG4gICAgICAgICAgICAgICAgYmFyeVtpaSAqIDMgKyBqXSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kYXRhW25hbWVdID0gYmFyeTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ1aWxkIHVuaXF1ZSB2ZXJ0ZXggZGF0YSBmb3IgZWFjaCBhdHRyaWJ1dGVcclxuICAgICAqL1xyXG4gICAgYnVpbGRVbmlxdWVWZXJ0ZXgoKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YTtcclxuICAgICAgICBjb25zdCBpbmRpY2VzID0gdGhpcy5lbGVtZW50cztcclxuICAgICAgICBpZiAoIWlzQXJyYXkoaW5kaWNlcykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdlbGVtZW50cyBtdXN0IGJlIGFycmF5IHRvIGJ1aWxkIHVuaXF1ZSB2ZXJ0ZXguJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICAgICAgY29uc3Qgb2xkRGF0YSA9IHt9O1xyXG5cclxuICAgICAgICBjb25zdCBwb3MgPSBkYXRhW3RoaXMuZGVzYy5wb3NpdGlvbkF0dHJpYnV0ZV07XHJcbiAgICAgICAgaWYgKCFpc0FycmF5KHBvcykpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRoaXMuZGVzYy5wb3NpdGlvbkF0dHJpYnV0ZSArICcgbXVzdCBiZSBhcnJheSB0byBidWlsZCB1bmlxdWUgdmVydGV4LicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2ZXJ0ZXhDb3VudCA9IHBvcy5sZW5ndGggLyB0aGlzLmRlc2MucG9zaXRpb25TaXplO1xyXG5cclxuICAgICAgICBjb25zdCBsID0gaW5kaWNlcy5sZW5ndGg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBrZXlzW2ldO1xyXG4gICAgICAgICAgICBjb25zdCBzaXplID0gZGF0YVtuYW1lXS5sZW5ndGggLyB2ZXJ0ZXhDb3VudDtcclxuICAgICAgICAgICAgaWYgKCFpc0FycmF5KGRhdGFbbmFtZV0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobmFtZSArICcgbXVzdCBiZSBhcnJheSB0byBidWlsZCB1bmlxdWUgdmVydGV4LicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9sZERhdGFbbmFtZV0gPSBkYXRhW25hbWVdO1xyXG4gICAgICAgICAgICBvbGREYXRhW25hbWVdLnNpemUgPSBzaXplO1xyXG4gICAgICAgICAgICBkYXRhW25hbWVdID0gbmV3IGRhdGFbbmFtZV0uY29uc3RydWN0b3IobCAqIHNpemUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IGN1cnNvciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgaWR4ID0gaW5kaWNlc1tpXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGtleXMubGVuZ3RoOyBpaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0ga2V5c1tpaV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheSA9IGRhdGFbbmFtZV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplID0gb2xkRGF0YVtuYW1lXS5zaXplO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgc2l6ZTsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJyYXlbY3Vyc29yICogc2l6ZSArIGtdID0gb2xkRGF0YVtuYW1lXVtpZHggKiBzaXplICsga107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5kaWNlc1tpXSA9IGN1cnNvcisrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXRNZW1vcnlTaXplKCkge1xyXG4gICAgICAgIGxldCBzaXplID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IHAgaW4gdGhpcy5kYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEuaGFzT3duUHJvcGVydHkocCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMuZGF0YVtwXTtcclxuICAgICAgICAgICAgICAgIGlmIChidWZmZXIuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUgKz0gYnVmZmVyLmRhdGEubGVuZ3RoICogYnVmZmVyLmRhdGEuQllURVNfUEVSX0VMRU1FTlQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpemUgKz0gYnVmZmVyLmxlbmd0aCAqIGJ1ZmZlci5CWVRFU19QRVJfRUxFTUVOVDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc2l6ZTtcclxuICAgIH1cclxuXHJcbiAgICBfZm9yRWFjaEJ1ZmZlcihmbikge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzICYmIHRoaXMuZWxlbWVudHMuZGVzdHJveSkgIHtcclxuICAgICAgICAgICAgZm4odGhpcy5lbGVtZW50cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiB0aGlzLmRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YVtwXSAmJiB0aGlzLmRhdGFbcF0uYnVmZmVyICYmIHRoaXMuZGF0YVtwXS5idWZmZXIuZGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuKHRoaXMuZGF0YVtwXS5idWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHAgaW4gdGhpcy5fYnVmZmVycykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYnVmZmVycy5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2J1ZmZlcnNbcF0gJiYgdGhpcy5fYnVmZmVyc1twXS5idWZmZXIgJiYgdGhpcy5fYnVmZmVyc1twXS5idWZmZXIuZGVzdHJveSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuKHRoaXMuX2J1ZmZlcnNbcF0uYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0RWxlbWVudExlbmd0aChlbGVtZW50cykge1xyXG4gICAgaWYgKGlzTnVtYmVyKGVsZW1lbnRzKSkge1xyXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcclxuICAgIH0gZWxzZSBpZiAoZWxlbWVudHMubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICByZXR1cm4gZWxlbWVudHMubGVuZ3RoO1xyXG4gICAgfSBlbHNlIGlmIChlbGVtZW50cy5kYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzLmRhdGEubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGVsZW1lbnRzIGxlbmd0aCcpO1xyXG59XG5cbmNsYXNzIE1hdGVyaWFsIHtcclxuICAgIGNvbnN0cnVjdG9yKHVuaWZvcm1zID0ge30sIGRlZmF1bHRVbmlmb3Jtcykge1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBleHRlbmQoe30sIGRlZmF1bHRVbmlmb3JtcyB8fCB7fSwgdW5pZm9ybXMpO1xyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiB1bmlmb3Jtcykge1xyXG4gICAgICAgICAgICBjb25zdCBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHVuaWZvcm1zLCBwKS5nZXQ7XHJcbiAgICAgICAgICAgIGlmIChnZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnVuaWZvcm1zLCBwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXR0ZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX2RpcnR5VW5pZm9ybXMgPSAndGV4dHVyZSc7XHJcbiAgICAgICAgdGhpcy5kaXJ0eURlZmluZXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3JlZ2xVbmlmb3JtcyA9IHt9O1xyXG4gICAgICAgIHRoaXMucmVmQ291bnQgPSAwO1xyXG4gICAgICAgIHRoaXMuX2JpbmRlZE9uVGV4dHVyZUNvbXBsZXRlID0gdGhpcy5fb25UZXh0dXJlQ29tcGxldGUuYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLl9jaGVja1RleHR1cmVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNSZWFkeSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZGluZ0NvdW50IDw9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0KGssIHYpIHtcclxuICAgICAgICB0aGlzLnVuaWZvcm1zW2tdID0gdjtcclxuICAgICAgICB0aGlzLl9kaXJ0eVVuaWZvcm1zID0gdGhpcy5pc1RleHR1cmUoaykgPyAndGV4dHVyZScgOiAncHJpbWl0aXZlJztcclxuICAgICAgICBpZiAodGhpcy5fZGlydHlVbmlmb3JtcyA9PT0gJ3RleHR1cmUnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrVGV4dHVyZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0KGspIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtc1trXTtcclxuICAgIH1cclxuXHJcbiAgICBpc0RpcnR5KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kaXJ0eVVuaWZvcm1zIHx8IHRoaXMuZGlydHlEZWZpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHNoYWRlciBkZWZpbmVzXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIGdldERlZmluZXMoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRpcnR5RGVmaW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5lcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY3JlYXRlRGVmaW5lcykge1xyXG4gICAgICAgICAgICB0aGlzLl9kZWZpbmVzID0gdGhpcy5jcmVhdGVEZWZpbmVzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVmaW5lcyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRpcnR5RGVmaW5lcyA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVuaWZvcm1zKHJlZ2wpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2RpcnR5VW5pZm9ybXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlZ2xVbmlmb3JtcztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSB0aGlzLnVuaWZvcm1zO1xyXG4gICAgICAgIGNvbnN0IHJlYWxVbmlmb3JtcyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiB1bmlmb3Jtcykge1xyXG4gICAgICAgICAgICBjb25zdCB2ID0gdGhpcy51bmlmb3Jtc1twXTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNUZXh0dXJlKHApKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlydHlVbmlmb3JtcyA9PT0gJ3ByaW1pdGl2ZScgJiYgdGhpcy5fcmVnbFVuaWZvcm1zW3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVhbFVuaWZvcm1zW3BdID0gdGhpcy5fcmVnbFVuaWZvcm1zW3BdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVnbFVuaWZvcm1zW3BdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2xVbmlmb3Jtc1twXS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJlYWxVbmlmb3Jtc1twXSA9IHYuZ2V0UkVHTFRleHR1cmUocmVnbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVhbFVuaWZvcm1zLCBwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlmb3JtcyAmJiB1bmlmb3Jtc1twXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yZWdsVW5pZm9ybXMgPSByZWFsVW5pZm9ybXM7XHJcbiAgICAgICAgdGhpcy5fZGlydHlVbmlmb3JtcyA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiByZWFsVW5pZm9ybXM7XHJcbiAgICB9XHJcblxyXG4gICAgaXNUZXh0dXJlKGspIHtcclxuICAgICAgICBjb25zdCB2ID0gdGhpcy51bmlmb3Jtc1trXTtcclxuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIFRleHR1cmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiB0aGlzLnVuaWZvcm1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHUgPSB0aGlzLnVuaWZvcm1zW3BdO1xyXG4gICAgICAgICAgICBpZiAodSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHUuZGlzcG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHUuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1LmRlc3Ryb3kgJiYgIXVbJ19fZGVzdHJveWVkJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2Egbm9ybWFsIHJlZ2wgdGV4dHVyZVxyXG4gICAgICAgICAgICAgICAgICAgIHUuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVbJ19fZGVzdHJveWVkJ10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnVuaWZvcm1zO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9yZWdsVW5pZm9ybXM7XHJcbiAgICAgICAgdGhpcy5fZGlzcG9zZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRGlzcG9zZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZGlzcG9zZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrVGV4dHVyZXMoKSB7XHJcbiAgICAgICAgdGhpcy5fbG9hZGluZ0NvdW50ID0gMDtcclxuICAgICAgICBmb3IgKGNvbnN0IHAgaW4gdGhpcy51bmlmb3Jtcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1RleHR1cmUocCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleHR1cmUgPSB0aGlzLnVuaWZvcm1zW3BdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0ZXh0dXJlLmlzUmVhZHkoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRpbmdDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHR1cmUub24oJ2NvbXBsZXRlJywgdGhpcy5fYmluZGVkT25UZXh0dXJlQ29tcGxldGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9vblRleHR1cmVDb21wbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLl9sb2FkaW5nQ291bnQtLTtcclxuICAgICAgICBpZiAodGhpcy5fbG9hZGluZ0NvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5maXJlKCdjb21wbGV0ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxudmFyIE1hdGVyaWFsJDEgPSBFdmVudGFibGUoTWF0ZXJpYWwpO1xuXG5jb25zdCBkZWZhdWx0VW5pZm9ybXMgPSB7XHJcbiAgICAndGltZSc6IDAsXHJcbiAgICAnc2VlVGhyb3VnaCc6IHRydWUsXHJcbiAgICAndGhpY2tuZXNzJzogMC4wMyxcclxuICAgICdmaWxsJzogWzEuMCwgMC41MTM3MjU0OTAyLCAwLjk4LCAxLjBdLFxyXG4gICAgJ3N0cm9rZSc6IFswLjcwMTk2MDc4NDMsIDAuOTMzMzMzMzMzMywgMC4yMjc0NTA5ODA0LCAxLjBdLFxyXG4gICAgJ2Rhc2hFbmFibGVkJzogZmFsc2UsXHJcbiAgICAnZGFzaEFuaW1hdGUnOiBmYWxzZSxcclxuICAgICdkYXNoUmVwZWF0cyc6IDEsXHJcbiAgICAnZGFzaExlbmd0aCc6IDAuOCxcclxuICAgICdkYXNoT3ZlcmxhcCc6IHRydWUsXHJcbiAgICAnaW5zaWRlQWx0Q29sb3InOiBmYWxzZSxcclxuICAgICdzcXVlZXplJzogZmFsc2UsXHJcbiAgICAnc3F1ZWV6ZU1pbic6IDAuNSxcclxuICAgICdzcXVlZXplTWF4JzogMSxcclxuICAgICdkdWFsU3Ryb2tlJzogZmFsc2UsXHJcbiAgICAnc2Vjb25kVGhpY2tuZXNzJzogMC4wNSxcclxuICAgICdvcGFjaXR5JyA6IDEuMFxyXG59O1xyXG5cclxuY2xhc3MgV2lyZUZyYW1lTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCQxIHtcclxuICAgIGNvbnN0cnVjdG9yKHVuaWZvcm1zKSB7XHJcbiAgICAgICAgc3VwZXIodW5pZm9ybXMsIGRlZmF1bHRVbmlmb3Jtcyk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgZGVmYXVsdFVuaWZvcm1zJDEgPSB7XHJcbiAgICAnbGlnaHRQb3NpdGlvbicgOiBbMC4wLCAwLjAsIDUwLjBdLFxyXG4gICAgJ2xpZ2h0QW1iaWVudCcgOiBbMC41LCAwLjUsIDAuNSwgMS4wXSxcclxuICAgICdsaWdodERpZmZ1c2UnIDogWzAuOCwgMC44LCAwLjgsIDEuMF0sXHJcbiAgICAnbGlnaHRTcGVjdWxhcicgOiBbMS4wLCAxLjAsIDEuMCwgMS4wXSxcclxuICAgICdtYXRlcmlhbFNoaW5pbmVzcycgOiAzMi4wLFxyXG4gICAgJ2FtYmllbnRTdHJlbmd0aCcgOiAwLjUsXHJcbiAgICAnc3BlY3VsYXJTdHJlbmd0aCcgOiAwLjgsXHJcbiAgICAnb3BhY2l0eScgOiAxLjBcclxufTtcclxuXHJcbmNsYXNzIFBob25nTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCQxIHtcclxuICAgIGNvbnN0cnVjdG9yKHVuaWZvcm1zKSB7XHJcbiAgICAgICAgc3VwZXIodW5pZm9ybXMsIGRlZmF1bHRVbmlmb3JtcyQxKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQ29uZmlnOlxyXG4gKiAgdHJhbnNwYXJlbnQsIGNhc3RTaGFkb3dcclxuICovXHJcbmNsYXNzIE1lc2gge1xyXG4gICAgY29uc3RydWN0b3IoZ2VvbWV0cnksIG1hdGVyaWFsLCBjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHRoaXMuZ2VvbWV0cnkgPSBnZW9tZXRyeTtcclxuICAgICAgICB0aGlzLm1hdGVyaWFsID0gbWF0ZXJpYWw7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBjb25maWc7XHJcbiAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9ICEhY29uZmlnLnRyYW5zcGFyZW50O1xyXG4gICAgICAgIHRoaXMuY2FzdFNoYWRvdyA9IGlzTmlsKGNvbmZpZy5jYXN0U2hhZG93KSB8fCBjb25maWcuY2FzdFNoYWRvdztcclxuICAgICAgICB0aGlzLnBpY2tpbmcgPSAhIWNvbmZpZy5waWNraW5nO1xyXG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSB7fTtcclxuICAgICAgICB0aGlzLmxvY2FsVHJhbnNmb3JtID0gbWF0NC5pZGVudGl0eShuZXcgQXJyYXkoMTYpKTtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICB0aGlzLl9kaXJ0eVVuaWZvcm1zID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQYXJlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0TG9jYWxUcmFuc2Zvcm0odHJhbnNmb3JtKSB7XHJcbiAgICAgICAgdGhpcy5sb2NhbFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzZXRVbmlmb3JtKGssIHYpIHtcclxuICAgICAgICBpZiAodGhpcy51bmlmb3Jtc1trXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5VW5pZm9ybXMgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVuaWZvcm1zW2tdID0gdjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRVbmlmb3JtKGspIHtcclxuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtc1trXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXREZWZpbmVzKCkge1xyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSB7fTtcclxuICAgICAgICBpZiAodGhpcy5kZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIGV4dGVuZChkZWZpbmVzLCB0aGlzLmRlZmluZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5tYXRlcmlhbCkge1xyXG4gICAgICAgICAgICBjb25zdCBtRGVmaW5lcyA9IHRoaXMubWF0ZXJpYWwuZ2V0RGVmaW5lcygpO1xyXG4gICAgICAgICAgICBpZiAobURlZmluZXMpIHtcclxuICAgICAgICAgICAgICAgIGV4dGVuZChkZWZpbmVzLCBtRGVmaW5lcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlZmluZXM7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGVmaW5lcyhkZWZpbmVzKSB7XHJcbiAgICAgICAgdGhpcy5kZWZpbmVzID0gZGVmaW5lcztcclxuICAgICAgICB0aGlzLmRpcnR5RGVmaW5lcyA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGVmaW5lc0tleSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVmaW5lc0tleSAhPT0gdW5kZWZpbmVkICYmICF0aGlzLmRpcnR5RGVmaW5lcyAmJiAoIXRoaXMubWF0ZXJpYWwgfHwgIXRoaXMubWF0ZXJpYWwuZGlydHlEZWZpbmVzKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5lc0tleTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9yZWZyZXNoIGRlZmluZXNcclxuICAgICAgICB0aGlzLl9kZWZpbmVzS2V5ID0gdGhpcy5fY3JlYXRlRGVmaW5lc0tleSh0aGlzLmdldERlZmluZXMoKSk7XHJcbiAgICAgICAgdGhpcy5kaXJ0eURlZmluZXMgPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5lc0tleTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBnZXRVbmlmb3JtcyhyZWdsKSB7XHJcbiAgICAvLyAgICAgY29uc3QgdW5pZm9ybXMgPSB7XHJcbiAgICAvLyAgICAgICAgICdtb2RlbE1hdHJpeCc6IHRoaXMubG9jYWxUcmFuc2Zvcm1cclxuICAgIC8vICAgICB9O1xyXG4gICAgLy8gICAgIGlmICh0aGlzLm1hdGVyaWFsKSB7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IG1hdGVyaWFsVW5pZm9ybXMgPSB0aGlzLm1hdGVyaWFsLmdldFVuaWZvcm1zKHJlZ2wpO1xyXG4gICAgLy8gICAgICAgICBleHRlbmQodW5pZm9ybXMsIG1hdGVyaWFsVW5pZm9ybXMpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICBleHRlbmQodW5pZm9ybXMsIHRoaXMudW5pZm9ybXMpO1xyXG4gICAgLy8gICAgIHJldHVybiB1bmlmb3JtcztcclxuICAgIC8vIH1cclxuXHJcbiAgICBnZXRVbmlmb3JtcyhyZWdsKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5VW5pZm9ybXMgfHwgdGhpcy5tYXRlcmlhbCAmJiB0aGlzLm1hdGVyaWFsLmlzRGlydHkoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yZWFsVW5pZm9ybXMgPSB7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1zID0gdGhpcy51bmlmb3JtcztcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIGluIHRoaXMudW5pZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVuaWZvcm1zLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuX3JlYWxVbmlmb3JtcywgcCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuaWZvcm1zICYmIHVuaWZvcm1zW3BdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsVW5pZm9ybXMgPSB0aGlzLm1hdGVyaWFsLmdldFVuaWZvcm1zKHJlZ2wpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwIGluIG1hdGVyaWFsVW5pZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0ZXJpYWxVbmlmb3Jtcy5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5fcmVhbFVuaWZvcm1zLCBwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGVyaWFsVW5pZm9ybXMgJiYgbWF0ZXJpYWxVbmlmb3Jtc1twXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcnR5VW5pZm9ybXMgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcmVhbFVuaWZvcm1zWydtb2RlbE1hdHJpeCddID0gdGhpcy5sb2NhbFRyYW5zZm9ybTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVhbFVuaWZvcm1zO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRNYXRlcmlhbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5tYXRlcmlhbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdlb21ldHJ5LmdldEF0dHJpYnV0ZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbGVtZW50cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZW9tZXRyeS5nZXRFbGVtZW50cygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJFR0xQcm9wcyhyZWdsKSB7XHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLmdldFVuaWZvcm1zKHJlZ2wpO1xyXG4gICAgICAgIGV4dGVuZChwcm9wcywgdGhpcy5nZW9tZXRyeS5kYXRhKTtcclxuICAgICAgICBwcm9wcy5lbGVtZW50cyA9IHRoaXMuZ2VvbWV0cnkuZ2V0RWxlbWVudHMoKTtcclxuICAgICAgICBwcm9wcy5jb3VudCA9IHRoaXMuZ2VvbWV0cnkuZ2V0RHJhd0NvdW50KCk7XHJcbiAgICAgICAgcHJvcHMub2Zmc2V0ID0gdGhpcy5nZW9tZXRyeS5nZXREcmF3T2Zmc2V0KCk7XHJcbiAgICAgICAgLy8gY29tbWFuZCBwcmltaXRpdmUgOiB0cmlhbmdsZSwgdHJpYW5nbGUgc3RyaXAsIGV0Y1xyXG4gICAgICAgIHByb3BzLnByaW1pdGl2ZSA9IHRoaXMuZ2VvbWV0cnkuZ2V0UHJpbWl0aXZlKCk7XHJcbiAgICAgICAgcmV0dXJuIHByb3BzO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuZ2VvbWV0cnk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMubWF0ZXJpYWw7XHJcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IHt9O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGlzVmFsaWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VvbWV0cnkgJiYgIXRoaXMuZ2VvbWV0cnkuaXNEaXNwb3NlZCgpICYmICghdGhpcy5tYXRlcmlhbCB8fCAhdGhpcy5tYXRlcmlhbC5pc0Rpc3Bvc2VkKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jcmVhdGVEZWZpbmVzS2V5KGRlZmluZXMpIHtcclxuICAgICAgICBjb25zdCB2ID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBwIGluIGRlZmluZXMpIHtcclxuICAgICAgICAgICAgdi5wdXNoKHAsIGRlZmluZXNbcF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdi5qb2luKCcsJyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbk1lc2gucHJvdG90eXBlLmdldFdvcmxkVHJhbnNmb3JtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3Qgd29ybGRUcmFuc2Zvcm0gPSBbXTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0NC5tdWx0aXBseSh3b3JsZFRyYW5zZm9ybSwgcGFyZW50LmdldFdvcmxkVHJhbnNmb3JtKCksIHRoaXMubG9jYWxUcmFuc2Zvcm0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFRyYW5zZm9ybTtcclxuICAgIH07XHJcbn0oKTtcblxuY2xhc3MgSW5zdGFuY2VkTWVzaCBleHRlbmRzIE1lc2gge1xyXG4gICAgY29uc3RydWN0b3IoaW5zdGFuY2VkRGF0YSwgaW5zdGFuY2VDb3VudCwgZ2VvbWV0cnksIG1hdGVyaWFsLCBjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGdlb21ldHJ5LCBtYXRlcmlhbCwgY29uZmlnKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlQ291bnQgPSBpbnN0YW5jZUNvdW50O1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VkRGF0YSA9IGluc3RhbmNlZERhdGEgfHwge307XHJcbiAgICAgICAgdGhpcy5fY2hlY2tJbnN0YW5jZWRQcm9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgX2NoZWNrSW5zdGFuY2VkUHJvcCgpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHAgaW4gdGhpcy5pbnN0YW5jZWREYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdlb21ldHJ5LmRhdGFbcF0pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGF0dHJpYnV0ZSAke3B9IGRlZmluZWQgaW4gZ2VvbWV0cnkgYW5kIGluc3RhbmNlZCBkYXRhYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXR0cmlidXRlcygpIHtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gc3VwZXIuZ2V0QXR0cmlidXRlcygpO1xyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiB0aGlzLmluc3RhbmNlZERhdGEpIHtcclxuICAgICAgICAgICAgYXR0cmlidXRlcy5wdXNoKHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVJbnN0YW5jZWREYXRhKG5hbWUsIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBidWYgPSB0aGlzLmluc3RhbmNlZERhdGFbbmFtZV07XHJcbiAgICAgICAgaWYgKCFidWYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBidWZmZXI7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZWREYXRhW25hbWVdID0gZGF0YTtcclxuICAgICAgICBpZiAoYnVmLmJ1ZmZlciAmJiBidWYuYnVmZmVyLmRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgYnVmZmVyID0gYnVmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzUGVyRWxlbWVudCA9IHRoaXMuX2dldEJ5dGVzUGVyRWxlbWVudChidWZmZXIuYnVmZmVyLl9idWZmZXIuZHR5cGUpO1xyXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBidWZmZXIuYnVmZmVyLl9idWZmZXIuYnl0ZUxlbmd0aCAvIGJ5dGVzUGVyRWxlbWVudDtcclxuICAgICAgICAgICAgaWYgKGxlbiA+PSBkYXRhLmxlbmd0aCAmJiBieXRlc1BlckVsZW1lbnQgPj0gKGRhdGEuQllURVNfUEVSX0VMRU1FTlQgfHwgMCkpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5idWZmZXIuc3ViZGF0YShkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5idWZmZXIoZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZWREYXRhW25hbWVdID0gYnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUluc3RhbmNlZEJ1ZmZlcnMocmVnbCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmluc3RhbmNlZERhdGE7XHJcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRhW2tleV0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYXRhW2tleV0uYnVmZmVyICE9PSB1bmRlZmluZWQgJiYgZGF0YVtrZXldLmJ1ZmZlci5kZXN0cm95KSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJzW2tleV0gPSBkYXRhW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyc1trZXldLmRpdmlzb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXJzW2tleV0uZGl2aXNvciA9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXJzW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyIDogcmVnbC5idWZmZXIoZGF0YVtrZXldKSxcclxuICAgICAgICAgICAgICAgICAgICBkaXZpc29yOiAxXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VkRGF0YSA9IGJ1ZmZlcnM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UkVHTFByb3BzKHJlZ2wpIHtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IHN1cGVyLmdldFJFR0xQcm9wcyhyZWdsKTtcclxuICAgICAgICBleHRlbmQocHJvcHMsIHRoaXMuaW5zdGFuY2VkRGF0YSk7XHJcbiAgICAgICAgcHJvcHMuaW5zdGFuY2VzID0gdGhpcy5pbnN0YW5jZUNvdW50O1xyXG4gICAgICAgIHJldHVybiBwcm9wcztcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0Qnl0ZXNQZXJFbGVtZW50KGR0eXBlKSB7XHJcbiAgICAgICAgc3dpdGNoIChkdHlwZSkge1xyXG4gICAgICAgIGNhc2UgMHgxNDAwOlxyXG4gICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICBjYXNlIDB4MTQwMTpcclxuICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgY2FzZSAweDE0MDI6XHJcbiAgICAgICAgICAgIHJldHVybiAyO1xyXG4gICAgICAgIGNhc2UgMHgxNDAzOlxyXG4gICAgICAgICAgICByZXR1cm4gMjtcclxuICAgICAgICBjYXNlIDB4MTQwNDpcclxuICAgICAgICAgICAgcmV0dXJuIDQ7XHJcbiAgICAgICAgY2FzZSAweDE0MDU6XHJcbiAgICAgICAgICAgIHJldHVybiA0O1xyXG4gICAgICAgIGNhc2UgMHgxNDA2OlxyXG4gICAgICAgICAgICByZXR1cm4gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBkYXRhIHR5cGU6ICcgKyBkdHlwZSk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgQWpheCA9ICB7XHJcbiAgICBnZXRBcnJheUJ1ZmZlcih1cmwsIGNiKSB7XHJcbiAgICAgICAgcmV0dXJuIEFqYXguZ2V0KHVybCwge1xyXG4gICAgICAgICAgICByZXNwb25zZVR5cGUgOiAnYXJyYXlidWZmZXInXHJcbiAgICAgICAgfSwgY2IpO1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXQ6IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMsIGNiKSB7XHJcbiAgICAgICAgY29uc3QgY2xpZW50ID0gQWpheC5fZ2V0Q2xpZW50KGNiKTtcclxuICAgICAgICBjbGllbnQub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGsgaW4gb3B0aW9ucy5oZWFkZXJzKSB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnQuc2V0UmVxdWVzdEhlYWRlcihrLCBvcHRpb25zLmhlYWRlcnNba10pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNsaWVudC53aXRoQ3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZSc7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zWydyZXNwb25zZVR5cGUnXSkge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50LnJlc3BvbnNlVHlwZSA9IG9wdGlvbnNbJ3Jlc3BvbnNlVHlwZSddO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsaWVudC5zZW5kKG51bGwpO1xyXG4gICAgICAgIHJldHVybiBjbGllbnQ7XHJcbiAgICB9LFxyXG5cclxuICAgIF93cmFwQ2FsbGJhY2s6IGZ1bmN0aW9uIChjbGllbnQsIGNiKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKGNsaWVudC5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xpZW50LnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsaWVudC5yZXNwb25zZVR5cGUgPT09ICdhcnJheWJ1ZmZlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBjbGllbnQucmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5ieXRlTGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYihuZXcgRXJyb3IoJ2h0dHAgc3RhdHVzIDIwMCByZXR1cm5lZCB3aXRob3V0IGNvbnRlbnQuJykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IobnVsbCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IGNsaWVudC5yZXNwb25zZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUNvbnRyb2w6IGNsaWVudC5nZXRSZXNwb25zZUhlYWRlcignQ2FjaGUtQ29udHJvbCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGlyZXM6IGNsaWVudC5nZXRSZXNwb25zZUhlYWRlcignRXhwaXJlcycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlIDogY2xpZW50LmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYihudWxsLCBjbGllbnQucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNiKG5ldyBFcnJvcihjbGllbnQuc3RhdHVzVGV4dCArICcsJyArIGNsaWVudC5zdGF0dXMpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9LFxyXG5cclxuICAgIF9nZXRDbGllbnQ6IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgIC8qZXNsaW50LWRpc2FibGUgbm8tZW1wdHksIG5vLXVuZGVmKi9cclxuICAgICAgICBsZXQgY2xpZW50O1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNsaWVudCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdHJ5IHsgY2xpZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ01zeG1sMi5YTUxIVFRQJyk7IH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7IGNsaWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOyB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNsaWVudC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBBamF4Ll93cmFwQ2FsbGJhY2soY2xpZW50LCBjYik7XHJcbiAgICAgICAgcmV0dXJuIGNsaWVudDtcclxuICAgICAgICAvKmVzbGludC1lbmFibGUgbm8tZW1wdHksIG5vLXVuZGVmKi9cclxuICAgIH0sXHJcbn07XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5mdW5jdGlvbiBjcmVhdGVDb21tb25qc01vZHVsZShmbiwgbW9kdWxlKSB7XG5cdHJldHVybiBtb2R1bGUgPSB7IGV4cG9ydHM6IHt9IH0sIGZuKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMpLCBtb2R1bGUuZXhwb3J0cztcbn1cblxudmFyIHpvdXNhbk1pbiA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbiFmdW5jdGlvbihpKXt2YXIgYyxzLHU9XCJmdWxmaWxsZWRcIixmPVwidW5kZWZpbmVkXCIsYT1mdW5jdGlvbigpe3ZhciBlPVtdLG49MDtmdW5jdGlvbiBvKCl7Zm9yKDtlLmxlbmd0aC1uOyl7dHJ5e2Vbbl0oKTt9Y2F0Y2godCl7aS5jb25zb2xlJiZpLmNvbnNvbGUuZXJyb3IodCk7fWVbbisrXT1zLDEwMjQ9PW4mJihlLnNwbGljZSgwLDEwMjQpLG49MCk7fX12YXIgcj1mdW5jdGlvbigpe2lmKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyPT09ZilyZXR1cm4gdHlwZW9mIHByb2Nlc3MhPT1mJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBwcm9jZXNzLm5leHRUaWNrP2Z1bmN0aW9uKCl7cHJvY2Vzcy5uZXh0VGljayhvKTt9OnR5cGVvZiBzZXRJbW1lZGlhdGUhPT1mP2Z1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKG8pO306ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KG8sMCk7fTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3JldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcihvKS5vYnNlcnZlKHQse2F0dHJpYnV0ZXM6ITB9KSxmdW5jdGlvbigpe3Quc2V0QXR0cmlidXRlKFwiYVwiLDApO319KCk7cmV0dXJuIGZ1bmN0aW9uKHQpe2UucHVzaCh0KSxlLmxlbmd0aC1uPT0xJiZyKCk7fX0oKTtmdW5jdGlvbiBsKHQpe2lmKCEodGhpcyBpbnN0YW5jZW9mIGwpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJab3VzYW4gbXVzdCBiZSBjcmVhdGVkIHdpdGggdGhlIG5ldyBrZXl3b3JkXCIpO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpe3ZhciBlPXRoaXM7dHJ5e3QoZnVuY3Rpb24odCl7ZS5yZXNvbHZlKHQpO30sZnVuY3Rpb24odCl7ZS5yZWplY3QodCk7fSk7fWNhdGNoKHQpe2UucmVqZWN0KHQpO319ZWxzZSBpZigwPGFyZ3VtZW50cy5sZW5ndGgpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlpvdXNhbiByZXNvbHZlciBcIit0K1wiIGlzIG5vdCBhIGZ1bmN0aW9uXCIpfWZ1bmN0aW9uIGgoZSx0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLnkpdHJ5e3ZhciBuPWUueS5jYWxsKHMsdCk7ZS5wLnJlc29sdmUobik7fWNhdGNoKHQpe2UucC5yZWplY3QodCk7fWVsc2UgZS5wLnJlc29sdmUodCk7fWZ1bmN0aW9uIHYoZSx0KXtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLm4pdHJ5e3ZhciBuPWUubi5jYWxsKHMsdCk7ZS5wLnJlc29sdmUobik7fWNhdGNoKHQpe2UucC5yZWplY3QodCk7fWVsc2UgZS5wLnJlamVjdCh0KTt9bC5wcm90b3R5cGU9e3Jlc29sdmU6ZnVuY3Rpb24obil7aWYodGhpcy5zdGF0ZT09PWMpe2lmKG49PT10aGlzKXJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKFwiQXR0ZW1wdCB0byByZXNvbHZlIHByb21pc2Ugd2l0aCBzZWxmXCIpKTt2YXIgbz10aGlzO2lmKG4mJihcImZ1bmN0aW9uXCI9PXR5cGVvZiBufHxcIm9iamVjdFwiPT10eXBlb2YgbikpdHJ5e3ZhciBlPSEwLHQ9bi50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHQpcmV0dXJuIHZvaWQgdC5jYWxsKG4sZnVuY3Rpb24odCl7ZSYmKGU9ITEsby5yZXNvbHZlKHQpKTt9LGZ1bmN0aW9uKHQpe2UmJihlPSExLG8ucmVqZWN0KHQpKTt9KX1jYXRjaCh0KXtyZXR1cm4gdm9pZChlJiZ0aGlzLnJlamVjdCh0KSl9dGhpcy5zdGF0ZT11LHRoaXMudj1uLG8uYyYmYShmdW5jdGlvbigpe2Zvcih2YXIgdD0wLGU9by5jLmxlbmd0aDt0PGU7dCsrKWgoby5jW3RdLG4pO30pO319LHJlamVjdDpmdW5jdGlvbihuKXtpZih0aGlzLnN0YXRlPT09Yyl7dmFyIHQ9dGhpczt0aGlzLnN0YXRlPVwicmVqZWN0ZWRcIix0aGlzLnY9bjt2YXIgbz10aGlzLmM7YShvP2Z1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT1vLmxlbmd0aDt0PGU7dCsrKXYob1t0XSxuKTt9OmZ1bmN0aW9uKCl7dC5oYW5kbGVkfHwhbC5zdXBwcmVzc1VuY2F1Z2h0UmVqZWN0aW9uRXJyb3ImJmkuY29uc29sZSYmbC53YXJuKFwiWW91IHVwc2V0IFpvdXNhbi4gUGxlYXNlIGNhdGNoIHJlamVjdGlvbnM6IFwiLG4sbj9uLnN0YWNrOm51bGwpO30pO319LHRoZW46ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgbCxvPXt5OnQsbjplLHA6bn07aWYodGhpcy5zdGF0ZT09PWMpdGhpcy5jP3RoaXMuYy5wdXNoKG8pOnRoaXMuYz1bb107ZWxzZXt2YXIgcj10aGlzLnN0YXRlLGk9dGhpcy52O3RoaXMuaGFuZGxlZD0hMCxhKGZ1bmN0aW9uKCl7cj09PXU/aChvLGkpOnYobyxpKTt9KTt9cmV0dXJuIG59LGNhdGNoOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRoZW4obnVsbCx0KX0sZmluYWxseTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aGVuKHQsdCl9LHRpbWVvdXQ6ZnVuY3Rpb24odCxvKXtvPW98fFwiVGltZW91dFwiO3ZhciByPXRoaXM7cmV0dXJuIG5ldyBsKGZ1bmN0aW9uKGUsbil7c2V0VGltZW91dChmdW5jdGlvbigpe24oRXJyb3IobykpO30sdCksci50aGVuKGZ1bmN0aW9uKHQpe2UodCk7fSxmdW5jdGlvbih0KXtuKHQpO30pO30pfX0sbC5yZXNvbHZlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBsO3JldHVybiBlLnJlc29sdmUodCksZX0sbC5yZWplY3Q9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGw7cmV0dXJuIGUuYz1bXSxlLnJlamVjdCh0KSxlfSxsLmFsbD1mdW5jdGlvbihuKXt2YXIgbz1bXSxyPTAsaT1uZXcgbDtmdW5jdGlvbiB0KHQsZSl7dCYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC50aGVufHwodD1sLnJlc29sdmUodCkpLHQudGhlbihmdW5jdGlvbih0KXtvW2VdPXQsKytyPT1uLmxlbmd0aCYmaS5yZXNvbHZlKG8pO30sZnVuY3Rpb24odCl7aS5yZWplY3QodCk7fSk7fWZvcih2YXIgZT0wO2U8bi5sZW5ndGg7ZSsrKXQobltlXSxlKTtyZXR1cm4gbi5sZW5ndGh8fGkucmVzb2x2ZShvKSxpfSxsLndhcm49Y29uc29sZS53YXJuLG1vZHVsZS5leHBvcnRzJiYobW9kdWxlLmV4cG9ydHM9bCksaS5kZWZpbmUmJmkuZGVmaW5lLmFtZCYmaS5kZWZpbmUoW10sZnVuY3Rpb24oKXtyZXR1cm4gbH0pLChpLlpvdXNhbj1sKS5zb29uPWE7fShcInVuZGVmaW5lZFwiIT10eXBlb2YgY29tbW9uanNHbG9iYWw/Y29tbW9uanNHbG9iYWw6Y29tbW9uanNHbG9iYWwpO1xufSk7XG5cbmxldCBwcm9taXNlO1xyXG5cclxuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgLy8gYnVpbHQtaW4gUHJvbWlzZVxyXG4gICAgcHJvbWlzZSA9IFByb21pc2U7XHJcbn0gZWxzZSB7XHJcbiAgICBwcm9taXNlID0gem91c2FuTWluO1xyXG59XHJcblxyXG52YXIgUHJvbWlzZSQxID0gcHJvbWlzZTtcblxuY2xhc3MgUmVzb3VyY2VMb2FkZXIge1xyXG4gICAgY29uc3RydWN0b3IoREVGQVVMVF9URVhUVVJFKSB7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0VGV4dHVyZSA9IERFRkFVTFRfVEVYVFVSRTtcclxuICAgICAgICB0aGlzLmRlZmF1bHRDdWJlVGV4dHVyZSA9IG5ldyBBcnJheSg2KTtcclxuXHJcbiAgICAgICAgLy9UT0RPIOaKinRoaXMucmVzb3VyY2Vz5o2i5oiQTFJV6Zif5YiX77yM5o6n5Yi257yT5a2Y55qE6LWE5rqQ5pWw6YePXHJcbiAgICAgICAgdGhpcy5yZXNvdXJjZXMgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQodXJsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodXJsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbG9hZEltYWdlcyh1cmwpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9sb2FkSW1hZ2UodXJsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJyYXlCdWZmZXIodXJsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodXJsKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9taXNlcyA9IHVybC5tYXAodSA9PiB0aGlzLmdldEFycmF5QnVmZmVyKHUpKTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UkMS5hbGwocHJvbWlzZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSQxKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIEFqYXguZ2V0QXJyYXlCdWZmZXIodXJsLCAoZXJyLCBidWZmZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoeyB1cmwsIGRhdGE6IGJ1ZmZlciB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2VSZXModXJsKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodXJsKSkge1xyXG4gICAgICAgICAgICB1cmwuZm9yRWFjaCh1ID0+IHRoaXMuX2Rpc3Bvc2VPbmUodSkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2Rpc3Bvc2VPbmUodXJsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgaXNMb2FkaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb3VudCAmJiB0aGlzLl9jb3VudCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGVmYXVsdFRleHR1cmUodXJsKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHVybCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdFRleHR1cmU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEJsYW5rVGV4dHVyZXModXJsLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9kaXNwb3NlT25lKHVybCkge1xyXG4gICAgICAgIGNvbnN0IHJlc291cmNlcyA9IHRoaXMucmVzb3VyY2VzO1xyXG4gICAgICAgIGlmICghcmVzb3VyY2VzW3VybF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXNvdXJjZXNbdXJsXS5jb3VudC0tO1xyXG4gICAgICAgIGlmIChyZXNvdXJjZXNbdXJsLmNvdW50XSA8PSAwKSB7XHJcbiAgICAgICAgICAgIGRlbGV0ZSByZXNvdXJjZXNbdXJsXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2xvYWRJbWFnZSh1cmwpIHtcclxuICAgICAgICBjb25zdCByZXNvdXJjZXMgPSB0aGlzLnJlc291cmNlcztcclxuICAgICAgICBpZiAocmVzb3VyY2VzW3VybF0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UkMS5yZXNvbHZlKHsgdXJsLCBkYXRhOiByZXNvdXJjZXNbdXJsXS5pbWFnZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlJDEoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gJ2Fub255bW91cyc7XHJcbiAgICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXNvdXJjZXNbdXJsXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZSA6IGltZyxcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCA6IDFcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHsgdXJsLCBkYXRhOiBpbWcgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGltZy5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGltZy5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGBpbWFnZSgke3VybH0pIGxvYWRpbmcgYWJvcnRlZC5gKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1nLnNyYyA9IHVybDtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBfbG9hZEltYWdlcyh1cmxzKSB7XHJcbiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSB1cmxzLm1hcCh1cmwgPT4gdGhpcy5fbG9hZEltYWdlKHVybCwgdHJ1ZSkpO1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBQcm9taXNlJDEuYWxsKHByb21pc2VzKTtcclxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0QmxhbmtUZXh0dXJlcyhjb3VudCkge1xyXG4gICAgICAgIGNvbnN0IHQgPSBuZXcgQXJyYXkoY291bnQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHQucHVzaCh0aGlzLmRlZmF1bHRUZXh0dXJlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbn1cclxuXHJcbnZhciBSZXNvdXJjZUxvYWRlciQxID0gRXZlbnRhYmxlKFJlc291cmNlTG9hZGVyKTtcblxuY29uc3QgUDAgPSBbXSwgUDEgPSBbXTtcclxubGV0IHVpZCA9IDA7XHJcblxyXG5jbGFzcyBTY2VuZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNoZXMpIHtcclxuICAgICAgICB0aGlzLl9pZCA9IHVpZCsrO1xyXG4gICAgICAgIHRoaXMuc29ydGVkTWVzaGVzID0ge307XHJcbiAgICAgICAgdGhpcy5zZXRNZXNoZXMobWVzaGVzKTtcclxuICAgICAgICB0aGlzLl9jb21wYXJlQmluZGVkID0gdGhpcy5fY29tcGFyZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuZGlydHkoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRNZXNoZXMobWVzaGVzKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgIGlmICghbWVzaGVzIHx8IChBcnJheS5pc0FycmF5KG1lc2hlcykgJiYgIW1lc2hlcy5sZW5ndGgpIHx8IG1lc2hlcyA9PT0gdGhpcy5tZXNoZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWVzaGVzID0gQXJyYXkuaXNBcnJheShtZXNoZXMpID8gbWVzaGVzIDogW21lc2hlc107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBtZXNoID0gdGhpcy5tZXNoZXNbaV07XHJcbiAgICAgICAgICAgIG1lc2guX3NjZW5lcyA9IG1lc2guX3NjZW5lcyB8fCB7fTtcclxuICAgICAgICAgICAgbWVzaC5fc2NlbmVzW3RoaXMuX2lkXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGlydHkoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGRNZXNoKG1lc2gpIHtcclxuICAgICAgICBpZiAoIW1lc2ggfHwgKEFycmF5LmlzQXJyYXkobWVzaCkgJiYgIW1lc2gubGVuZ3RoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWVzaCkpIHtcclxuICAgICAgICAgICAgbWVzaC5mb3JFYWNoKG0gPT4ge1xyXG4gICAgICAgICAgICAgICAgbS5fc2NlbmVzID0gbS5fc2NlbmVzIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFtLl9zY2VuZXNbdGhpcy5faWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbS5fc2NlbmVzW3RoaXMuX2lkXSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXNoZXMucHVzaChtKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc2guX3NjZW5lcyA9IG1lc2guX3NjZW5lcyB8fCB7fTtcclxuICAgICAgICAgICAgaWYgKCFtZXNoLl9zY2VuZXNbdGhpcy5faWRdKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNoLl9zY2VuZXNbdGhpcy5faWRdID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWVzaGVzLnB1c2gobWVzaCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlTWVzaChtZXNoKSB7XHJcbiAgICAgICAgaWYgKCFtZXNoIHx8IChBcnJheS5pc0FycmF5KG1lc2gpICYmICFtZXNoLmxlbmd0aCkpIHsgcmV0dXJuIHRoaXM7IH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNoKSkge1xyXG4gICAgICAgICAgICBsZXQgaGl0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWVzaC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lc2hbaV0uX3NjZW5lcyAmJiBtZXNoW2ldLl9zY2VuZXNbdGhpcy5faWRdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGl0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc2hbaV0uX3NjZW5lc1t0aGlzLl9pZF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGhpdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoZXMgPSB0aGlzLm1lc2hlcy5maWx0ZXIoZWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtZXNoLmluZGV4T2YoZWwpIDwgMDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFtZXNoLl9zY2VuZXMgfHwgIW1lc2guX3NjZW5lc1t0aGlzLl9pZF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGlkeCA9IHRoaXMubWVzaGVzLmluZGV4T2YobWVzaCk7XHJcbiAgICAgICAgICAgIGlmIChpZHggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoZXMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGVsZXRlIG1lc2guX3NjZW5lc1t0aGlzLl9pZF07XHJcbiAgICAgICAgICAgIHRoaXMuZGlydHkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWVzaGVzKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm1lc2hlcztcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpIHtcclxuICAgICAgICBpZiAodGhpcy5tZXNoZXMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm1lc2hlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMubWVzaGVzW2ldLl9zY2VuZXNbdGhpcy5faWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubWVzaGVzID0gW107XHJcbiAgICAgICAgdGhpcy5zb3J0ZWRNZXNoZXMub3BhcXVlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc29ydGVkTWVzaGVzLnRyYW5zcGFyZW50cyA9IFtdO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGRpcnR5KCkge1xyXG4gICAgICAgIHRoaXMuX2RpcnR5ID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBzb3J0TWVzaGVzKGNhbWVyYVBvc2l0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgbWVzaGVzID0gdGhpcy5tZXNoZXM7XHJcblxyXG4gICAgICAgIC8vc29ydCBtZXNoZXMgYnkgZGVmaW5lc1xyXG4gICAgICAgIGxldCB0cmFuc3BhcmVudHMgPSB0aGlzLnNvcnRlZE1lc2hlcy50cmFuc3BhcmVudHM7XHJcbiAgICAgICAgaWYgKHRoaXMuX2RpcnR5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9wYXF1ZXMgPSB0aGlzLnNvcnRlZE1lc2hlcy5vcGFxdWVzID0gW107XHJcbiAgICAgICAgICAgIHRyYW5zcGFyZW50cyA9IHRoaXMuc29ydGVkTWVzaGVzLnRyYW5zcGFyZW50cyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IG1lc2hlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChtZXNoZXNbaV0udHJhbnNwYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc3BhcmVudHMucHVzaChtZXNoZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvcGFxdWVzLnB1c2gobWVzaGVzW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5Y2z5L2/5pivb3BhcXVlc++8jOa4suafk+mhuuW6j+S5n+S4jeiDvemaj+S+v+aUueWPmO+8jOWboOS4uuWPr+iDveaciXN0ZW5jaWzmtYvor5XvvIzmiJbogIVkZXB0aE1hc2vnrYnkvJrlm6DmuLLmn5Ppobrluo/lvbHlk43muLLmn5PmlYjmnpznmoTorr7nva5cclxuICAgICAgICAvLyBvcGFxdWVzLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAvLyAgICAgaWYgKGEuZ2V0RGVmaW5lc0tleSgpID09PSBiLmdldERlZmluZXNLZXkoKSkge1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgLy8gICAgIH1cclxuICAgICAgICAvLyAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgLy8gfSk7XHJcbiAgICAgICAgaWYgKGNhbWVyYVBvc2l0aW9uICYmIHRyYW5zcGFyZW50cy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhbWVyYVBvc2l0aW9uID0gY2FtZXJhUG9zaXRpb247XHJcbiAgICAgICAgICAgIHRyYW5zcGFyZW50cy5zb3J0KHRoaXMuX2NvbXBhcmVCaW5kZWQpO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FtZXJhUG9zaXRpb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kaXJ0eSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFNvcnRlZE1lc2hlcygpIHtcclxuICAgICAgICBpZiAodGhpcy5fZGlydHkpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3J0TWVzaGVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLnNvcnRlZE1lc2hlcztcclxuICAgIH1cclxuXHJcbiAgICBfY29tcGFyZShhLCBiKSB7XHJcbiAgICAgICAgdmVjMy50cmFuc2Zvcm1NYXQ0KFAwLCBhLmdlb21ldHJ5LmJvdW5kaW5nQm94LmdldENlbnRlcigpLCBhLmxvY2FsVHJhbnNmb3JtKTtcclxuICAgICAgICB2ZWMzLnRyYW5zZm9ybU1hdDQoUDEsIGIuZ2VvbWV0cnkuYm91bmRpbmdCb3guZ2V0Q2VudGVyKCksIGIubG9jYWxUcmFuc2Zvcm0pO1xyXG4gICAgICAgIHJldHVybiB2ZWMzLmRpc3QoUDEsIHRoaXMuX2NhbWVyYVBvc2l0aW9uKSAtIHZlYzMuZGlzdChQMCwgdGhpcy5fY2FtZXJhUG9zaXRpb24pO1xyXG4gICAgfVxyXG59XG5cbnZhciB0b0NoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xyXG5cclxudmFyIE1JTkVMRU4gPSA4O1xyXG52YXIgTUFYRUxFTiA9IDB4N2ZmZjtcclxuZnVuY3Rpb24gcmdiZTJmbG9hdChyZ2JlLCBidWZmZXIsIG9mZnNldCwgZXhwb3N1cmUpIHtcclxuICAgIGlmIChyZ2JlWzNdID4gMCkge1xyXG4gICAgICAgIHZhciBmID0gTWF0aC5wb3coMi4wLCByZ2JlWzNdIC0gMTI4IC0gOCArIGV4cG9zdXJlKTtcclxuICAgICAgICBidWZmZXJbb2Zmc2V0ICsgMF0gPSByZ2JlWzBdICogZjtcclxuICAgICAgICBidWZmZXJbb2Zmc2V0ICsgMV0gPSByZ2JlWzFdICogZjtcclxuICAgICAgICBidWZmZXJbb2Zmc2V0ICsgMl0gPSByZ2JlWzJdICogZjtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYnVmZmVyW29mZnNldCArIDBdID0gMDtcclxuICAgICAgICBidWZmZXJbb2Zmc2V0ICsgMV0gPSAwO1xyXG4gICAgICAgIGJ1ZmZlcltvZmZzZXQgKyAyXSA9IDA7XHJcbiAgICB9XHJcbiAgICBidWZmZXJbb2Zmc2V0ICsgM10gPSAxLjA7XHJcbiAgICByZXR1cm4gYnVmZmVyO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1aW50ODJzdHJpbmcoYXJyYXksIG9mZnNldCwgc2l6ZSkge1xyXG4gICAgdmFyIHN0ciA9ICcnO1xyXG4gICAgZm9yICh2YXIgaSA9IG9mZnNldDsgaSA8IHNpemU7IGkrKykge1xyXG4gICAgICAgIHN0ciArPSB0b0NoYXIoYXJyYXlbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN0cjtcclxufVxyXG5cclxuZnVuY3Rpb24gY29weXJnYmUocywgdCkge1xyXG4gICAgdFswXSA9IHNbMF07XHJcbiAgICB0WzFdID0gc1sxXTtcclxuICAgIHRbMl0gPSBzWzJdO1xyXG4gICAgdFszXSA9IHNbM107XHJcbn1cclxuXHJcbi8vIFRPRE8gOiBjaGVja1xyXG5mdW5jdGlvbiBvbGRSZWFkQ29sb3JzKHNjYW4sIGJ1ZmZlciwgb2Zmc2V0LCB4bWF4KSB7XHJcbiAgICB2YXIgcnNoaWZ0ID0gMCwgeCA9IDAsIGxlbiA9IHhtYXg7XHJcbiAgICB3aGlsZSAobGVuID4gMCkge1xyXG4gICAgICAgIHNjYW5beF1bMF0gPSBidWZmZXJbb2Zmc2V0KytdO1xyXG4gICAgICAgIHNjYW5beF1bMV0gPSBidWZmZXJbb2Zmc2V0KytdO1xyXG4gICAgICAgIHNjYW5beF1bMl0gPSBidWZmZXJbb2Zmc2V0KytdO1xyXG4gICAgICAgIHNjYW5beF1bM10gPSBidWZmZXJbb2Zmc2V0KytdO1xyXG4gICAgICAgIGlmIChzY2FuW3hdWzBdID09PSAxICYmIHNjYW5beF1bMV0gPT09IDEgJiYgc2Nhblt4XVsyXSA9PT0gMSkge1xyXG4gICAgICAgICAgICAvLyBleHAgaXMgY291bnQgb2YgcmVwZWF0ZWQgcGl4ZWxzXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAoc2Nhblt4XVszXSA8PCByc2hpZnQpID4+PiAwOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBjb3B5cmdiZShzY2FuW3ggLSAxXSwgc2Nhblt4XSk7XHJcbiAgICAgICAgICAgICAgICB4Kys7XHJcbiAgICAgICAgICAgICAgICBsZW4tLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByc2hpZnQgKz0gODtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB4Kys7XHJcbiAgICAgICAgICAgIGxlbi0tO1xyXG4gICAgICAgICAgICByc2hpZnQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvZmZzZXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlYWRDb2xvcnMoc2NhbiwgYnVmZmVyLCBvZmZzZXQsIHhtYXgpIHtcclxuICAgIGlmICgoeG1heCA8IE1JTkVMRU4pIHwgKHhtYXggPiBNQVhFTEVOKSkge1xyXG4gICAgICAgIHJldHVybiBvbGRSZWFkQ29sb3JzKHNjYW4sIGJ1ZmZlciwgb2Zmc2V0LCB4bWF4KTtcclxuICAgIH1cclxuICAgIHZhciBpID0gYnVmZmVyW29mZnNldCsrXTtcclxuICAgIGlmIChpICE9PSAyKSB7XHJcbiAgICAgICAgcmV0dXJuIG9sZFJlYWRDb2xvcnMoc2NhbiwgYnVmZmVyLCBvZmZzZXQgLSAxLCB4bWF4KTtcclxuICAgIH1cclxuICAgIHNjYW5bMF1bMV0gPSBidWZmZXJbb2Zmc2V0KytdO1xyXG4gICAgc2NhblswXVsyXSA9IGJ1ZmZlcltvZmZzZXQrK107XHJcblxyXG4gICAgaSA9IGJ1ZmZlcltvZmZzZXQrK107XHJcbiAgICBpZiAoKCgoc2NhblswXVsyXSA8PCA4KSA+Pj4gMCkgfCBpKSA+Pj4gMCAhPT0geG1heCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHhtYXg7KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2RlID0gYnVmZmVyW29mZnNldCsrXTtcclxuICAgICAgICAgICAgaWYgKGNvZGUgPiAxMjgpIHtcclxuICAgICAgICAgICAgICAgIGNvZGUgPSAoY29kZSAmIDEyNykgPj4+IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gYnVmZmVyW29mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjb2RlLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBzY2FuW3grK11baV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoY29kZS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Nhblt4KytdW2ldID0gYnVmZmVyW29mZnNldCsrXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvZmZzZXQ7XHJcbn1cclxuXHJcblxyXG4vLyBodHRwOi8vd3d3LmdyYXBoaWNzLmNvcm5lbGwuZWR1L35iancvcmdiZS5odG1sXHJcbi8vIEJsZW5kZXIgc291cmNlXHJcbi8vIGh0dHA6Ly9yYWRzaXRlLmxibC5nb3YvcmFkaWFuY2UvcmVmZXIvTm90ZXMvcGljdHVyZV9mb3JtYXQuaHRtbFxyXG5mdW5jdGlvbiBwYXJzZVJHQkUoYXJyYXlCdWZmZXIsIGV4cG9zdXJlKSB7XHJcbiAgICBpZiAoZXhwb3N1cmUgPT0gbnVsbCkge1xyXG4gICAgICAgIGV4cG9zdXJlID0gMDtcclxuICAgIH1cclxuICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlCdWZmZXIpO1xyXG4gICAgdmFyIHNpemUgPSBkYXRhLmxlbmd0aDtcclxuICAgIGlmICh1aW50ODJzdHJpbmcoZGF0YSwgMCwgMikgIT09ICcjPycpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIC8vIGZpbmQgZW1wdHkgbGluZSwgbmV4dCBsaW5lIGlzIHJlc29sdXRpb24gaW5mb1xyXG4gICAgZm9yICh2YXIgaSA9IDI7IGkgPCBzaXplOyBpKyspIHtcclxuICAgICAgICBpZiAodG9DaGFyKGRhdGFbaV0pID09PSAnXFxuJyAmJiB0b0NoYXIoZGF0YVtpICsgMV0pID09PSAnXFxuJykge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoaSA+PSBzaXplKSB7IC8vIG5vdCBmb3VuZFxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgLy8gZmluZCByZXNvbHV0aW9uIGluZm8gbGluZVxyXG4gICAgaSArPSAyO1xyXG4gICAgdmFyIHN0ciA9ICcnO1xyXG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIHtcclxuICAgICAgICB2YXIgX2NoYXIgPSB0b0NoYXIoZGF0YVtpXSk7XHJcbiAgICAgICAgaWYgKF9jaGFyID09PSAnXFxuJykge1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3RyICs9IF9jaGFyO1xyXG4gICAgfVxyXG4gICAgLy8gLVkgTSArWCBOXHJcbiAgICB2YXIgdG1wID0gc3RyLnNwbGl0KCcgJyk7XHJcbiAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQodG1wWzFdKTtcclxuICAgIHZhciB3aWR0aCA9IHBhcnNlSW50KHRtcFszXSk7XHJcbiAgICBpZiAoIXdpZHRoIHx8ICFoZWlnaHQpIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZWFkIGFuZCBkZWNvZGUgYWN0dWFsIGRhdGFcclxuICAgIHZhciBvZmZzZXQgPSBpICsgMTtcclxuICAgIHZhciBzY2FubGluZSA9IFtdO1xyXG4gICAgLy8gbWVtemVyb1xyXG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XHJcbiAgICAgICAgc2NhbmxpbmVbeF0gPSBbXTtcclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDQ7IGorKykge1xyXG4gICAgICAgICAgICBzY2FubGluZVt4XVtqXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdmFyIHBpeGVscyA9IG5ldyBBcnJheSh3aWR0aCAqIGhlaWdodCAqIDQpO1xyXG4gICAgdmFyIG9mZnNldDIgPSAwO1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xyXG4gICAgICAgIG9mZnNldCA9IHJlYWRDb2xvcnMoc2NhbmxpbmUsIGRhdGEsIG9mZnNldCwgd2lkdGgpO1xyXG4gICAgICAgIGlmICghb2Zmc2V0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcclxuICAgICAgICAgICAgcmdiZTJmbG9hdChzY2FubGluZVt4XSwgcGl4ZWxzLCBvZmZzZXQyLCBleHBvc3VyZSk7XHJcbiAgICAgICAgICAgIG9mZnNldDIgKz0gNDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB3aWR0aCA6IHdpZHRoLFxyXG4gICAgICAgIGhlaWdodCA6IGhlaWdodCxcclxuICAgICAgICBwaXhlbHMgOiBwaXhlbHNcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIGNvbmZpZyBwcm9wZXJ0aWVzOlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcmVnbC1wcm9qZWN0L3JlZ2wvYmxvYi9naC1wYWdlcy9BUEkubWQjdGV4dHVyZXNcclxuICovXHJcbmNsYXNzIFRleHR1cmUyRCBleHRlbmRzIFRleHR1cmUge1xyXG5cclxuICAgIG9uTG9hZCh7IGRhdGEgfSkge1xyXG4gICAgICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlnO1xyXG4gICAgICAgIGlmIChjb25maWcuaGRyKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBwYXJzZVJHQkUoZGF0YS5kYXRhKTtcclxuICAgICAgICAgICAgY29uZmlnLmRhdGEgPSBkYXRhLnBpeGVscztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25maWcuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vcmVmcmVzaCB3aWR0aCAvIGhlaWdodFxyXG4gICAgICAgIGNvbmZpZy53aWR0aCA9IGNvbmZpZy53aWR0aCB8fCBkYXRhLndpZHRoO1xyXG4gICAgICAgIGNvbmZpZy5oZWlnaHQgPSBjb25maWcuaGVpZ2h0IHx8IGRhdGEuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZVJFR0woKTtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVSRUdMVGV4dHVyZShyZWdsKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2wudGV4dHVyZSh0aGlzLmNvbmZpZyk7XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgVGV4dHVyZUN1YmUgZXh0ZW5kcyBUZXh0dXJlIHtcclxuICAgIG9uTG9hZChpbWFnZXMpIHtcclxuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcclxuICAgICAgICBjb25zdCBmYWNlcyA9IHRoaXMuX2NyZWF0ZUZhY2VzKGltYWdlcyk7XHJcbiAgICAgICAgY29uZmlnLmZhY2VzID0gZmFjZXMubWFwKGZhY2UgPT4gZmFjZS5kYXRhKTtcclxuICAgICAgICB0aGlzLl91cGRhdGVSRUdMKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlUkVHTFRleHR1cmUocmVnbCkge1xyXG4gICAgICAgIHJldHVybiByZWdsLmN1YmUodGhpcy5jb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIF9jcmVhdGVGYWNlcygvKiBpbWFnZXMgKi8pIHtcclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcbn1cblxuY2xhc3MgUGxhbmUgZXh0ZW5kcyBHZW9tZXRyeSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih6KSB7XHJcbiAgICAgICAgc3VwZXIoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vd2lkdGggYW5kIGhlaWdodCBhcmUgYm90aCAxXHJcbiAgICAgICAgICAgICAgICBhUG9zaXRpb24gOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgLTAuNSwgLTAuNSwgeiB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuNSwgLTAuNSwgeiB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIC0wLjUsIDAuNSwgeiB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIDAuNSwgMC41LCB6IHx8IDAsXHJcbiAgICAgICAgICAgICAgICBdLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIE5vcm1hbFxyXG4gICAgICAgICAgICAgICAgYU5vcm1hbCA6IFtcclxuICAgICAgICAgICAgICAgICAgICAwLCAxLCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIDAsIDEsIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgMCwgMSwgMCxcclxuICAgICAgICAgICAgICAgICAgICAwLCAxLCAwLFxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBbMywgMSwgMCwgMCwgMiwgM11cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XG5cbnZhciB2c21fc2hhZG93X3ZlcnQgPSBcIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyDpmLTlvbHnm7jlhbPnmoTlj5jph4/orqHnrpdcXG5cXG4vL1xcblxcbi8vXFxuXFxuLy8gdW5pZm9ybSBtYXQ0IHZzbV9zaGFkb3dfbGlnaHRQcm9qVmlld01vZGVsTWF0cml4IOacieWQkeWFiea6kOeahHByb2pWaWV355+p6Zi177yMIG9ydGhvIHByb2plY3Rpb24gKiB2aWV3IG1hdHJpeCAqIG1vZGVsIG1hdHJpeFxcblxcbi8vXFxuXFxuLy9cXG5cXG4vLyB2b2lkIHNoYWRvd19jb21wdXRlU2hhZG93UGFycyh2ZWM0IHdvcmxkUG9zKVxcblxcbi8vIOiuoeeul+mYtOW9sWZyYWfpnIDopoHnmoR2YXJ5aW5n5Y+Y6YePXFxuXFxuLy8gICAqIHZlYzQgd29ybGRQb3MgOiDpobbngrnkuJbnlYzlnZDmoIcgbW9kZWwgKiBhUG9zaXRpb25cXG5cXG4vL1xcblxcbi8vIOekuuS+i++8mlxcblxcbi8vIHZlYzQgcG9zaXRpb24gPSB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4vLyBzaGFkb3dfY29tcHV0ZVNoYWRvd1BhcnMod29ybGRQb3MpO1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG51bmlmb3JtIG1hdDQgdnNtX3NoYWRvd19saWdodFByb2pWaWV3TW9kZWxNYXRyaXg7XFxuXFxuXFxuXFxudmFyeWluZyB2ZWM0IHZzbV9zaGFkb3dfdkxpZ2h0U3BhY2VQb3M7XFxuXFxuXFxuXFxudm9pZCBzaGFkb3dfY29tcHV0ZVNoYWRvd1BhcnModmVjNCBwb3NpdGlvbikge1xcblxcbiAgICB2c21fc2hhZG93X3ZMaWdodFNwYWNlUG9zID0gdnNtX3NoYWRvd19saWdodFByb2pWaWV3TW9kZWxNYXRyaXggKiBwb3NpdGlvbjtcXG5cXG59XFxuXFxuXCI7XG5cbnZhciB2c21fc2hhZG93X2ZyYWcgPSBcIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyDpmLTlvbHnnYDoibJcXG5cXG4vL1xcblxcbi8vXFxuXFxuLy8gdW5pZm9ybSBzYW1wbGVyMkQgdnNtX3NoYWRvd19zaGFkb3dNYXAg5rex5bqm57q555CGXFxuXFxuLy8gdW5pZm9ybSBmbG9hdCB2c21fc2hhZG93X29wYWNpdHkg6Zi05b2x6YCP5piO5bqmXFxuXFxuLy9cXG5cXG4vL1xcblxcbi8vIHZvaWQgc2hhZG93X2NvbXB1dGVTaGFkb3coKVxcblxcbi8vIOiuoeeul+afkOS4quacieWQkeWFiea6kOWcqOW9k+WJjeeJh+WFg+eahOmYtOW9seWAvFxcblxcbi8vXFxuXFxuLy8g56S65L6L77yaXFxuXFxuLy8gLy8g6K6h566X5pyJ5ZCR5YWJ5rqQ5Zyo5b2T5YmN54mH5YWD55qE6Zi05b2x5YC8XFxuXFxuLy8gZmxvYXQgc2hhZG93ID0gc2hhZG93X2NvbXB1dGVTaGFkb3coKTtcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdnNtX3NoYWRvd19zaGFkb3dNYXA7XFxuXFxudW5pZm9ybSBmbG9hdCB2c21fc2hhZG93X29wYWNpdHk7XFxuXFxudW5pZm9ybSBmbG9hdCB2c21fc2hhZG93X3RocmVzaG9sZDtcXG5cXG5cXG5cXG52YXJ5aW5nIHZlYzQgdnNtX3NoYWRvd192TGlnaHRTcGFjZVBvcztcXG5cXG5cXG5cXG5mbG9hdCBlc20odmVjMyBwcm9qQ29vcmRzLCB2ZWM0IHNoYWRvd1RleGVsKSB7XFxuXFxuICAgIC8vIHZlYzIgdXYgPSBwcm9qQ29vcmRzLnh5O1xcblxcbiAgICBmbG9hdCBjb21wYXJlID0gcHJvakNvb3Jkcy56O1xcblxcbiAgICBmbG9hdCBjID0gNTAuMDtcXG5cXG4gICAgZmxvYXQgZGVwdGggPSBzaGFkb3dUZXhlbC5yO1xcblxcblxcblxcbiAgICBkZXB0aCA9IGV4cCgtYyAqIG1pbihjb21wYXJlIC0gZGVwdGgsIDAuMDUpKTtcXG5cXG4gICAgLy8gZGVwdGggPSBleHAoYyAqIGRlcHRoKSAqIGV4cCgtYyAqIGNvbXBhcmUpO1xcblxcbiAgICByZXR1cm4gY2xhbXAoZGVwdGgsIHZzbV9zaGFkb3dfdGhyZXNob2xkLCAxLjApO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCB2c21fc2hhZG93X2NoZWJ5c2hldlVwcGVyQm91bmQodmVjMyBwcm9qQ29vcmRzLCB2ZWM0IHNoYWRvd1RleGVsKXtcXG5cXG5cXG5cXG4gICAgdmVjMiBtb21lbnRzID0gc2hhZG93VGV4ZWwucmc7XFxuXFxuICAgIGZsb2F0IGRpc3RhbmNlID0gcHJvakNvb3Jkcy56O1xcblxcbiAgICAvLyBTdXJmYWNlIGlzIGZ1bGx5IGxpdC4gYXMgdGhlIGN1cnJlbnQgZnJhZ21lbnQgaXMgYmVmb3JlIHRoZSBsaWdodCBvY2NsdWRlclxcblxcbiAgICBpZiAoZGlzdGFuY2UgPj0gMS4wIHx8IGRpc3RhbmNlIDw9IG1vbWVudHMueClcXG5cXG4gICAgICAgIHJldHVybiAxLjAgO1xcblxcblxcblxcbiAgICAvLyBUaGUgZnJhZ21lbnQgaXMgZWl0aGVyIGluIHNoYWRvdyBvciBwZW51bWJyYS4gV2Ugbm93IHVzZSBjaGVieXNoZXYncyB1cHBlckJvdW5kIHRvIGNoZWNrXFxuXFxuICAgIC8vIEhvdyBsaWtlbHkgdGhpcyBwaXhlbCBpcyB0byBiZSBsaXQgKHBfbWF4KVxcblxcbiAgICBmbG9hdCB2YXJpYW5jZSA9IG1vbWVudHMueSAtIChtb21lbnRzLnggKiBtb21lbnRzLngpO1xcblxcbiAgICB2YXJpYW5jZSA9IG1heCh2YXJpYW5jZSwgMC4wMDAwMik7XFxuXFxuXFxuXFxuICAgIGZsb2F0IGQgPSBkaXN0YW5jZSAtIG1vbWVudHMueDtcXG5cXG4gICAgZmxvYXQgcF9tYXggPSB2YXJpYW5jZSAvICh2YXJpYW5jZSArIGQgKiBkKTtcXG5cXG4gICAgcmV0dXJuIHBfbWF4O1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBzaGFkb3dfY29tcHV0ZVNoYWRvd19jb2VmZihzYW1wbGVyMkQgc2hhZG93TWFwLCB2ZWMzIHByb2pDb29yZHMpIHtcXG5cXG4gICAgdmVjMiB1diA9IHByb2pDb29yZHMueHk7XFxuXFxuICAgIHZlYzQgc2hhZG93VGV4ZWwgPSB0ZXh0dXJlMkQoc2hhZG93TWFwLCB1dik7XFxuXFxuICAgICNpZiBkZWZpbmVkKFVTRV9FU00pIHx8IGRlZmluZWQoVVNFX1ZTTV9FU00pXFxuXFxuICAgICAgICBmbG9hdCBlc21fY29lZmYgPSBlc20ocHJvakNvb3Jkcywgc2hhZG93VGV4ZWwpO1xcblxcbiAgICAjZW5kaWZcXG5cXG4gICAgLy9UT0RPIHNoYWRvd01hcOaYr+eUqGVzbeeul+azleeUn+aIkOeahO+8jOS9huiyjOS8vOmHh+eUqHZzbeaViOaenOWNtOS4jeeul+W3rlxcblxcbiAgICAjaWYgZGVmaW5lZChVU0VfVlNNKSB8fCBkZWZpbmVkKFVTRV9WU01fRVNNKVxcblxcbiAgICAgICAgZmxvYXQgdnNtX2NvZWZmID0gdnNtX3NoYWRvd19jaGVieXNoZXZVcHBlckJvdW5kKHByb2pDb29yZHMsIHNoYWRvd1RleGVsKTtcXG5cXG4gICAgI2VuZGlmXFxuXFxuICAgICNpZiBkZWZpbmVkKFVTRV9WU01fRVNNKVxcblxcbiAgICAgICBmbG9hdCBjb2VmZiA9IGVzbV9jb2VmZiAqIHZzbV9jb2VmZjtcXG5cXG4gICAgI2VsaWYgZGVmaW5lZChVU0VfRVNNKVxcblxcbiAgICAgICAgZmxvYXQgY29lZmYgPSBlc21fY29lZmY7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgICBmbG9hdCBjb2VmZiA9IHZzbV9jb2VmZjtcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgIHJldHVybiAxLjAgLSAoMS4wIC0gY29lZmYpICogdnNtX3NoYWRvd19vcGFjaXR5O1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBzaGFkb3dfY29tcHV0ZVNoYWRvdygpIHtcXG5cXG4gICAgLy8g5omn6KGM6YCP6KeG6Zmk5rOVXFxuXFxuICAgIHZlYzMgcHJvakNvb3JkcyA9IHZzbV9zaGFkb3dfdkxpZ2h0U3BhY2VQb3MueHl6IC8gdnNtX3NoYWRvd192TGlnaHRTcGFjZVBvcy53O1xcblxcbiAgICAvLyDlj5jmjaLliLBbMCwxXeeahOiMg+WbtFxcblxcbiAgICBwcm9qQ29vcmRzID0gcHJvakNvb3JkcyAqIDAuNSArIDAuNTtcXG5cXG4gICAgaWYocHJvakNvb3Jkcy56ID49IDEuMCB8fCBwcm9qQ29vcmRzLnggPCAwLjAgfHwgcHJvakNvb3Jkcy54ID4gMS4wIHx8IHByb2pDb29yZHMueSA8IDAuMCB8fCBwcm9qQ29vcmRzLnkgPiAxLjApIHJldHVybiAxLjA7XFxuXFxuICAgIHJldHVybiBzaGFkb3dfY29tcHV0ZVNoYWRvd19jb2VmZih2c21fc2hhZG93X3NoYWRvd01hcCwgcHJvakNvb3Jkcyk7XFxuXFxuXFxuXFxufVxcblxcblwiO1xuXG52YXIgZmJvX3BpY2tpbmdfdmVydCA9IFwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIFBpY2tpbmdcXG5cXG4vL1xcblxcbi8vICNkZWZpbmUgRU5BQkxFX1BJQ0tJTkcg5pW05Z6LIOaYr+WQpuW8gOWQr1BJQ0tJTkdcXG5cXG4vL1xcblxcbi8vIHVuaWZvcm0gaW50IGJhdGNoSWQgZ2VvbWV0cnnnmoTmibnmrKFpZFxcblxcbi8vXFxuXFxuLy9cXG5cXG4vLyB2b2lkIGZib19waWNraW5nX3NldERhdGEodmlld1Bvc1opXFxuXFxuLy8gICDorr7nva5waWNraW5n5pWw5o2uLOW/hemhu+WcqOiuvue9rmdsX1Bvc2l0aW9u5ZCO6LCD55SoXFxuXFxuLy9cXG5cXG4vLyDnpLrkvovvvJpcXG5cXG4vLyBmYm9fcGlja2luZ19zZXREYXRhKGdsX1Bvc2l0aW9uLncpO1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG4jaWZkZWYgRU5BQkxFX1BJQ0tJTkdcXG5cXG4vL1VTRV9QSUNLSU5HX0lEID09IDEg5pe26K+75Y+WYXR0cmlidXRlc1xcblxcbiNpZiBVU0VfUElDS0lOR19JRCA9PSAxXFxuXFxuYXR0cmlidXRlIGZsb2F0IGFQaWNraW5nSWQ7XFxuXFxuLy9VU0VfUElDS0lOR19JRCA9PSAyIOaXtuivu+WPlnVuaWZvcm1zXFxuXFxuI2VsaWYgVVNFX1BJQ0tJTkdfSUQgPT0gMlxcblxcbnVuaWZvcm0gZmxvYXQgdVBpY2tpbmdJZDtcXG5cXG4jZW5kaWZcXG5cXG52YXJ5aW5nIGZsb2F0IHZQaWNraW5nSWQ7XFxuXFxudmFyeWluZyBmbG9hdCB2RmJvX3BpY2tpbmdfdmlld1o7XFxuXFxudmFyeWluZyBmbG9hdCB2RmJvX3BpY2tpbmdfdmlzaWJsZTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG52b2lkIGZib19waWNraW5nX3NldERhdGEoZmxvYXQgdmlld1Bvc1osIGJvb2wgdmlzaWJsZSkge1xcblxcbiAgICAjaWZkZWYgRU5BQkxFX1BJQ0tJTkdcXG5cXG4gICAgI2lmIFVTRV9QSUNLSU5HX0lEID09IDFcXG5cXG4gICAgICAgdlBpY2tpbmdJZCA9IGFQaWNraW5nSWQ7XFxuXFxuICAgICNlbGlmIFVTRV9QSUNLSU5HX0lEID09IDJcXG5cXG4gICAgICAgIHZQaWNraW5nSWQgPSB1UGlja2luZ0lkO1xcblxcbiAgICAjZW5kaWZcXG5cXG4gICAgICAgIHZGYm9fcGlja2luZ192aWV3WiA9IHZpZXdQb3NaO1xcblxcbiAgICAjZW5kaWZcXG5cXG4gICAgdkZib19waWNraW5nX3Zpc2libGUgPSB2aXNpYmxlID8gMS4wIDogMC4wO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGludmVydF92ZXJ0ID0gXCJtYXQ0IGludmVydChtYXQ0IG1hdHJpeCkge1xcblxcbiAgICB2ZWM0IHZlY3RvcjEgPSBtYXRyaXhbMF0sIHZlY3RvcjIgPSBtYXRyaXhbMV0sIHZlY3RvcjMgPSBtYXRyaXhbMl0sIHZlY3RvcjQgPSBtYXRyaXhbM107XFxuXFxuICAgIGZsb2F0IGEwMCA9IHZlY3RvcjEueCwgYTAxID0gdmVjdG9yMS55LCBhMDIgPSB2ZWN0b3IxLnosIGEwMyA9IHZlY3RvcjEudztcXG5cXG4gICAgZmxvYXQgYTEwID0gdmVjdG9yMi54LCBhMTEgPSB2ZWN0b3IyLnksIGExMiA9IHZlY3RvcjIueiwgYTEzID0gdmVjdG9yMi53O1xcblxcbiAgICBmbG9hdCBhMjAgPSB2ZWN0b3IzLngsIGEyMSA9IHZlY3RvcjMueSwgYTIyID0gdmVjdG9yMy56LCBhMjMgPSB2ZWN0b3IzLnc7XFxuXFxuICAgIGZsb2F0IGEzMCA9IHZlY3RvcjQueCwgYTMxID0gdmVjdG9yNC55LCBhMzIgPSB2ZWN0b3I0LnosIGEzMyA9IHZlY3RvcjQudztcXG5cXG5cXG5cXG4gICAgZmxvYXQgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xcblxcbiAgICBmbG9hdCBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XFxuXFxuICAgIGZsb2F0IGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcXG5cXG4gICAgZmxvYXQgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xcblxcbiAgICBmbG9hdCBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XFxuXFxuICAgIGZsb2F0IGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcXG5cXG4gICAgZmxvYXQgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xcblxcbiAgICBmbG9hdCBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XFxuXFxuICAgIGZsb2F0IGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcXG5cXG4gICAgZmxvYXQgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xcblxcbiAgICBmbG9hdCBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XFxuXFxuICAgIGZsb2F0IGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcXG5cXG4gICAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxcblxcbiAgICBmbG9hdCBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XFxuXFxuICAgIGRldCA9IDEuMCAvIGRldDtcXG5cXG4gICAgbWF0NCBtID0gbWF0NChcXG5cXG4gICAgICAgIChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0LFxcblxcbiAgICAgICAgKGEwMiAqIGIxMCAtIGEwMSAqIGIxMSAtIGEwMyAqIGIwOSkgKiBkZXQsXFxuXFxuICAgICAgICAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldCxcXG5cXG4gICAgICAgIChhMjIgKiBiMDQgLSBhMjEgKiBiMDUgLSBhMjMgKiBiMDMpICogZGV0LFxcblxcbiAgICAgICAgKGExMiAqIGIwOCAtIGExMCAqIGIxMSAtIGExMyAqIGIwNykgKiBkZXQsXFxuXFxuICAgICAgICAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldCxcXG5cXG4gICAgICAgIChhMzIgKiBiMDIgLSBhMzAgKiBiMDUgLSBhMzMgKiBiMDEpICogZGV0LFxcblxcbiAgICAgICAgKGEyMCAqIGIwNSAtIGEyMiAqIGIwMiArIGEyMyAqIGIwMSkgKiBkZXQsXFxuXFxuICAgICAgICAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldCxcXG5cXG4gICAgICAgIChhMDEgKiBiMDggLSBhMDAgKiBiMTAgLSBhMDMgKiBiMDYpICogZGV0LFxcblxcbiAgICAgICAgKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQsXFxuXFxuICAgICAgICAoYTIxICogYjAyIC0gYTIwICogYjA0IC0gYTIzICogYjAwKSAqIGRldCxcXG5cXG4gICAgICAgIChhMTEgKiBiMDcgLSBhMTAgKiBiMDkgLSBhMTIgKiBiMDYpICogZGV0LFxcblxcbiAgICAgICAgKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQsXFxuXFxuICAgICAgICAoYTMxICogYjAxIC0gYTMwICogYjAzIC0gYTMyICogYjAwKSAqIGRldCxcXG5cXG4gICAgICAgIChhMjAgKiBiMDMgLSBhMjEgKiBiMDEgKyBhMjIgKiBiMDApICogZGV0XFxuXFxuICAgICk7XFxuXFxuICAgIHJldHVybiBtO1xcblxcbn1cXG5cXG5cXG5cXG5tYXQ0IHRyYW5zcG9zZShtYXQ0IG1hdHJpeCkge1xcblxcbiAgICB2ZWM0IHZlY3RvcjEgPSBtYXRyaXhbMF0sIHZlY3RvcjIgPSBtYXRyaXhbMV0sIHZlY3RvcjMgPSBtYXRyaXhbMl0sIHZlY3RvcjQgPSBtYXRyaXhbM107XFxuXFxuICAgIGZsb2F0IGEwMSA9IHZlY3RvcjEueSwgYTAyID0gdmVjdG9yMS56LCBhMDMgPSB2ZWN0b3IxLnc7XFxuXFxuICAgIGZsb2F0IGExMiA9IHZlY3RvcjIueiwgYTEzID0gdmVjdG9yMi53O1xcblxcbiAgICBmbG9hdCBhMjMgPSB2ZWN0b3IzLnc7XFxuXFxuICAgIG1hdDQgbSA9IG1hdDQoXFxuXFxuICAgICAgICB2ZWN0b3IxLngsXFxuXFxuICAgICAgICB2ZWN0b3IyLngsXFxuXFxuICAgICAgICB2ZWN0b3IzLngsXFxuXFxuICAgICAgICB2ZWN0b3I0LngsXFxuXFxuICAgICAgICBhMDEsXFxuXFxuICAgICAgICB2ZWN0b3IyLnksXFxuXFxuICAgICAgICB2ZWN0b3IzLnksXFxuXFxuICAgICAgICB2ZWN0b3I0LnksXFxuXFxuICAgICAgICBhMDIsXFxuXFxuICAgICAgICBhMTIsXFxuXFxuICAgICAgICB2ZWN0b3IzLnosXFxuXFxuICAgICAgICB2ZWN0b3I0LnosXFxuXFxuICAgICAgICBhMDMsXFxuXFxuICAgICAgICBhMTMsXFxuXFxuICAgICAgICBhMjMsXFxuXFxuICAgICAgICB2ZWN0b3I0LndcXG5cXG4gICAgKTtcXG5cXG4gICAgcmV0dXJuIG07XFxuXFxufVwiO1xuXG52YXIgaW5zdGFuY2VfdmVydCA9IFwiYXR0cmlidXRlIHZlYzQgaW5zdGFuY2VfdmVjdG9yQTtcXG5cXG5hdHRyaWJ1dGUgdmVjNCBpbnN0YW5jZV92ZWN0b3JCO1xcblxcbmF0dHJpYnV0ZSB2ZWM0IGluc3RhbmNlX3ZlY3RvckM7XFxuXFxuYXR0cmlidXRlIHZlYzQgaW5zdGFuY2VfdmVjdG9yRDtcXG5cXG5hdHRyaWJ1dGUgdmVjNCBpbnN0YW5jZV9jb2xvcjtcXG5cXG5cXG5cXG5tYXQ0IGluc3RhbmNlX2dldEF0dHJpYnV0ZU1hdHJpeCgpIHtcXG5cXG4gICAgbWF0NCBtYXQgPSBtYXQ0KFxcblxcbiAgICAgICAgaW5zdGFuY2VfdmVjdG9yQS54LCBpbnN0YW5jZV92ZWN0b3JBLnksIGluc3RhbmNlX3ZlY3RvckEueiwgaW5zdGFuY2VfdmVjdG9yQS53LFxcblxcbiAgICAgICAgaW5zdGFuY2VfdmVjdG9yQi54LCBpbnN0YW5jZV92ZWN0b3JCLnksIGluc3RhbmNlX3ZlY3RvckIueiwgaW5zdGFuY2VfdmVjdG9yQi53LFxcblxcbiAgICAgICAgaW5zdGFuY2VfdmVjdG9yQy54LCBpbnN0YW5jZV92ZWN0b3JDLnksIGluc3RhbmNlX3ZlY3RvckMueiwgaW5zdGFuY2VfdmVjdG9yQy53LFxcblxcbiAgICAgICAgaW5zdGFuY2VfdmVjdG9yRC54LCBpbnN0YW5jZV92ZWN0b3JELnksIGluc3RhbmNlX3ZlY3RvckQueiwgaW5zdGFuY2VfdmVjdG9yRC53XFxuXFxuICAgICk7XFxuXFxuICAgIHJldHVybiBtYXQ7XFxuXFxufVxcblxcblxcblxcbnZlYzQgaW5zdGFuY2VfZ2V0SW5zdGFuY2VDb2xvcigpIHtcXG5cXG4gICAgcmV0dXJuIGluc3RhbmNlX2NvbG9yO1xcblxcbn1cIjtcblxudmFyIHNraW5fdmVydCA9IFwiYXR0cmlidXRlIHZlYzQgV0VJR0hUU18wO1xcblxcbmF0dHJpYnV0ZSB2ZWM0IEpPSU5UU18wO1xcblxcblxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIGpvaW50VGV4dHVyZTtcXG5cXG51bmlmb3JtIHZlYzIgam9pbnRUZXh0dXJlU2l6ZTtcXG5cXG51bmlmb3JtIGZsb2F0IG51bUpvaW50cztcXG5cXG5cXG5cXG4vLyB0aGVzZSBvZmZzZXRzIGFzc3VtZSB0aGUgdGV4dHVyZSBpcyA0IHBpeGVscyBhY3Jvc3NcXG5cXG4jZGVmaW5lIFJPVzBfVSAoKDAuNSArIDAuMCkgLyA0LilcXG5cXG4jZGVmaW5lIFJPVzFfVSAoKDAuNSArIDEuMCkgLyA0LilcXG5cXG4jZGVmaW5lIFJPVzJfVSAoKDAuNSArIDIuMCkgLyA0LilcXG5cXG4jZGVmaW5lIFJPVzNfVSAoKDAuNSArIDMuMCkgLyA0LilcXG5cXG5cXG5cXG5tYXQ0IHNraW5fZ2V0Qm9uZU1hdHJpeChmbG9hdCBqb2ludE5keCkge1xcblxcbiAgICBmbG9hdCB2ID0gKGpvaW50TmR4ICsgMC41KSAvIG51bUpvaW50cztcXG5cXG4gICAgcmV0dXJuIG1hdDQoXFxuXFxuICAgICAgICB0ZXh0dXJlMkQoam9pbnRUZXh0dXJlLCB2ZWMyKFJPVzBfVSwgdikpLFxcblxcbiAgICAgICAgdGV4dHVyZTJEKGpvaW50VGV4dHVyZSwgdmVjMihST1cxX1UsIHYpKSxcXG5cXG4gICAgICAgIHRleHR1cmUyRChqb2ludFRleHR1cmUsIHZlYzIoUk9XMl9VLCB2KSksXFxuXFxuICAgICAgICB0ZXh0dXJlMkQoam9pbnRUZXh0dXJlLCB2ZWMyKFJPVzNfVSwgdikpKTtcXG5cXG59XFxuXFxuXFxuXFxubWF0NCBza2luX2dldFNraW5NYXRyaXgoKSB7XFxuXFxuICAgICAgICBtYXQ0IHNraW5NYXRyaXggPSBza2luX2dldEJvbmVNYXRyaXgoSk9JTlRTXzBbMF0pICogV0VJR0hUU18wWzBdICtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBza2luX2dldEJvbmVNYXRyaXgoSk9JTlRTXzBbMV0pICogV0VJR0hUU18wWzFdICtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBza2luX2dldEJvbmVNYXRyaXgoSk9JTlRTXzBbMl0pICogV0VJR0hUU18wWzJdICtcXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBza2luX2dldEJvbmVNYXRyaXgoSk9JTlRTXzBbM10pICogV0VJR0hUU18wWzNdO1xcblxcbiAgICAgICAgcmV0dXJuIHNraW5NYXRyaXg7XFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfY29tbW9uX21hdGhfZ2xzbCA9IFwiLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBDb21tb24gbWF0aFxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuXFxuXFxuI2RlZmluZSBQSSAgICAgICAgICAgICAgICAgMy4xNDE1OTI2NTM1OVxcblxcblxcblxcbiNkZWZpbmUgSEFMRl9QSSAgICAgICAgICAgIDEuNTcwNzk2MzI3XFxuXFxuXFxuXFxuI2RlZmluZSBNRURJVU1QX0ZMVF9NQVggICAgNjU1MDQuMFxcblxcbiNkZWZpbmUgTUVESVVNUF9GTFRfTUlOICAgIDAuMDAwMDYxMDM1MTU2MjVcXG5cXG5cXG5cXG4jaWZkZWYgVEFSR0VUX01PQklMRVxcblxcbiNkZWZpbmUgRkxUX0VQUyAgICAgICAgICAgIE1FRElVTVBfRkxUX01JTlxcblxcbiNkZWZpbmUgc2F0dXJhdGVNZWRpdW1wKHgpIG1pbih4LCBNRURJVU1QX0ZMVF9NQVgpXFxuXFxuI2Vsc2VcXG5cXG4jZGVmaW5lIEZMVF9FUFMgICAgICAgICAgICAxZS01XFxuXFxuI2RlZmluZSBzYXR1cmF0ZU1lZGl1bXAoeCkgeFxcblxcbiNlbmRpZlxcblxcblxcblxcbiNkZWZpbmUgc2F0dXJhdGUoeCkgICAgICAgIGNsYW1wKHgsIDAuMCwgMS4wKVxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gU2NhbGFyIG9wZXJhdGlvbnNcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcblxcblxcblxcbmZsb2F0IHBvdzUoZmxvYXQgeCkge1xcblxcbiAgICBmbG9hdCB4MiA9IHggKiB4O1xcblxcbiAgICByZXR1cm4geDIgKiB4MiAqIHg7XFxuXFxufVxcblxcblxcblxcblxcblxcbmZsb2F0IHNxKGZsb2F0IHgpIHtcXG5cXG4gICAgcmV0dXJuIHggKiB4O1xcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG5mbG9hdCBtYXgzKGNvbnN0IHZlYzMgdikge1xcblxcbiAgICByZXR1cm4gbWF4KHYueCwgbWF4KHYueSwgdi56KSk7XFxuXFxufVxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gTWF0cml4IGFuZCBxdWF0ZXJuaW9uIG9wZXJhdGlvbnNcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcblxcblxcblxcbnZlYzQgbXVsTWF0NHg0RmxvYXQzKGNvbnN0IGhpZ2hwIG1hdDQgbSwgY29uc3QgaGlnaHAgdmVjMyB2KSB7XFxuXFxuICAgIHJldHVybiB2LnggKiBtWzBdICsgKHYueSAqIG1bMV0gKyAodi56ICogbVsyXSArIG1bM10pKTtcXG5cXG59XFxuXFxuXFxuXFxuXFxuXFxudmVjMyBtdWxNYXQzeDNGbG9hdDMoY29uc3QgaGlnaHAgbWF0NCBtLCBjb25zdCBoaWdocCB2ZWMzIHYpIHtcXG5cXG4gICAgcmV0dXJuIHYueCAqIG1bMF0ueHl6ICsgKHYueSAqIG1bMV0ueHl6ICsgKHYueiAqIG1bMl0ueHl6KSk7XFxuXFxufVxcblxcblxcblxcblxcblxcbnZvaWQgdG9UYW5nZW50RnJhbWUoY29uc3QgaGlnaHAgdmVjNCBxLCBvdXQgaGlnaHAgdmVjMyBuKSB7XFxuXFxuICAgIG4gPSB2ZWMzKCAwLjAsICAwLjAsICAxLjApICtcXG5cXG4gICAgICAgIHZlYzMoIDIuMCwgLTIuMCwgLTIuMCkgKiBxLnggKiBxLnp3eCArXFxuXFxuICAgICAgICB2ZWMzKCAyLjAsICAyLjAsIC0yLjApICogcS55ICogcS53enk7XFxuXFxufVxcblxcblxcblxcblxcblxcbnZvaWQgdG9UYW5nZW50RnJhbWUoY29uc3QgaGlnaHAgdmVjNCBxLCBvdXQgaGlnaHAgdmVjMyBuLCBvdXQgaGlnaHAgdmVjMyB0KSB7XFxuXFxuICAgIHRvVGFuZ2VudEZyYW1lKHEsIG4pO1xcblxcbiAgICB0ID0gdmVjMyggMS4wLCAgMC4wLCAgMC4wKSArXFxuXFxuICAgICAgICB2ZWMzKC0yLjAsICAyLjAsIC0yLjApICogcS55ICogcS55eHcgK1xcblxcbiAgICAgICAgdmVjMygtMi4wLCAgMi4wLCAgMi4wKSAqIHEueiAqIHEuend4O1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX3VuaWZvcm1zX2dsc2wgPSBcIlxcblxcblxcblxcbnN0cnVjdCBGcmFtZVVuaWZvcm1zIHtcXG5cXG4gICAgLy8gdHJhbnNmb3Jtc1xcblxcbiAgICAvLyBtYXQ0IHZpZXdGcm9tV29ybGRNYXRyaXgsIC8vdmlld01hdHJpeFxcblxcbiAgICAvLyBtYXQ0IHdvcmxkRnJvbVZpZXdNYXRyaXgsXFxuXFxuICAgIC8vIG1hdDQgY2xpcEZyb21WaWV3TWF0cml4LFxcblxcbiAgICAvLyBtYXQ0IHZpZXdGcm9tQ2xpcE1hdHJpeCxcXG5cXG4gICAgLy8gbWF0NCBjbGlwRnJvbVdvcmxkTWF0cml4LFxcblxcbiAgICAvLyBtYXQ0IHdvcmxkRnJvbUNsaXBNYXRyaXgsXFxuXFxuICAgIC8vIG1hdDQgbGlnaHRGcm9tV29ybGRNYXRyaXgsXFxuXFxuICAgIC8vIHZpZXdcXG5cXG4gICAgaGlnaHAgdmVjNCByZXNvbHV0aW9uOyAvL3ZpZXdwb3J0IHdpZHRoLCBoZWlnaHQsIDEvd2lkdGgsIDEvaGVpZ2h0XFxuXFxuICAgIC8vIGNhbWVyYVxcblxcbiAgICBoaWdocCB2ZWMzIGNhbWVyYVBvc2l0aW9uO1xcblxcbiAgICAvLyB0aW1lXFxuXFxuICAgIGhpZ2hwIGZsb2F0IHRpbWU7Ly8gdGltZSBpbiBzZWNvbmRzLCB3aXRoIGEgMSBzZWNvbmQgcGVyaW9kXFxuXFxuICAgIC8vIGRpcmVjdGlvbmFsIGxpZ2h0XFxuXFxuICAgIG1lZGl1bXAgdmVjNCBsaWdodENvbG9ySW50ZW5zaXR5O1xcblxcbiAgICBtZWRpdW1wIHZlYzQgc3VuOyAvLyBjb3Moc3VuQW5nbGUpLCBzaW4oc3VuQW5nbGUpLCAxLyhzdW5BbmdsZSpIQUxPX1NJWkUtc3VuQW5nbGUpLCBIQUxPX0VYUFxcblxcbiAgICBoaWdocCB2ZWMzIGxpZ2h0RGlyZWN0aW9uO1xcblxcbiAgICAvLyBpbnQgZlBhcmFtc1gsXFxuXFxuICAgIC8vIHNoYWRvd1xcblxcbiAgICBtZWRpdW1wIHZlYzMgc2hhZG93QmlhcztcXG5cXG4gICAgLy8gb25lT3ZlckZyb3hlbERpbWVuc2lvblksXFxuXFxuICAgIC8vIGZyb3hlbHNcXG5cXG4gICAgLy8gelBhcmFtcyxcXG5cXG4gICAgLy8gZlBhcmFtcyxcXG5cXG4gICAgLy8gb3JpZ2luLFxcblxcbiAgICAvLyBmcm94ZWxzIChhZ2FpbiwgZm9yIGFsaWdubWVudCBwdXJwb3NlcylcXG5cXG4gICAgLy8gb25lT3ZlckZyb3hlbERpbWVuc2lvbixcXG5cXG4gICAgLy8gaWJsXFxuXFxuICAgIG1lZGl1bXAgZmxvYXQgaWJsTHVtaW5hbmNlOyAvL1RPRE8g5bmy5Zib55qE77yfXFxuXFxuICAgIC8vIGNhbWVyYVxcblxcbiAgICBtZWRpdW1wIGZsb2F0IGV4cG9zdXJlOyAvL1RPRE9cXG5cXG4gICAgbWVkaXVtcCBmbG9hdCBldjEwMDsgLy9UT0RPXFxuXFxuICAgIC8vIGlibFxcblxcbiAgICBoaWdocCB2ZWMzIGlibFNIWzldO1xcblxcbiAgICBtZWRpdW1wIHZlYzIgaWJsTWF4TWlwTGV2ZWw7XFxuXFxuICAgIC8vIHVzZXIgdGltZVxcblxcbiAgICAvLyB2ZWM0IHVzZXJUaW1lLFxcblxcbn07XFxuXFxuXFxuXFxuRnJhbWVVbmlmb3JtcyBmcmFtZVVuaWZvcm1zO1xcblxcblxcblxcbnVuaWZvcm0gaGlnaHAgdmVjNCByZXNvbHV0aW9uO1xcblxcbnVuaWZvcm0gaGlnaHAgdmVjMyBjYW1lcmFQb3NpdGlvbjtcXG5cXG51bmlmb3JtIGhpZ2hwIGZsb2F0IHRpbWU7XFxuXFxudW5pZm9ybSBtZWRpdW1wIHZlYzQgbGlnaHRDb2xvckludGVuc2l0eTtcXG5cXG51bmlmb3JtIG1lZGl1bXAgdmVjNCBzdW47XFxuXFxudW5pZm9ybSBoaWdocCB2ZWMzIGxpZ2h0RGlyZWN0aW9uO1xcblxcbnVuaWZvcm0gbWVkaXVtcCBmbG9hdCBpYmxMdW1pbmFuY2U7XFxuXFxudW5pZm9ybSBtZWRpdW1wIGZsb2F0IGV4cG9zdXJlO1xcblxcbnVuaWZvcm0gbWVkaXVtcCBmbG9hdCBldjEwMDtcXG5cXG51bmlmb3JtIGhpZ2hwIHZlYzMgaWJsU0hbOV07XFxuXFxudW5pZm9ybSBtZWRpdW1wIHZlYzIgaWJsTWF4TWlwTGV2ZWw7XFxuXFxuXFxuXFxudm9pZCBpbml0RnJhbWVVbmlmb3JtcygpIHtcXG5cXG4gICAgZnJhbWVVbmlmb3Jtcy5pYmxNYXhNaXBMZXZlbCA9IGlibE1heE1pcExldmVsO1xcblxcbiAgICBmcmFtZVVuaWZvcm1zLnJlc29sdXRpb24gPSByZXNvbHV0aW9uO1xcblxcbiAgICBmcmFtZVVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uID0gY2FtZXJhUG9zaXRpb247XFxuXFxuICAgIGZyYW1lVW5pZm9ybXMudGltZSA9IHRpbWU7XFxuXFxuICAgIGZyYW1lVW5pZm9ybXMubGlnaHRDb2xvckludGVuc2l0eSA9IGxpZ2h0Q29sb3JJbnRlbnNpdHkgKiB2ZWM0KDEuMCwgMS4wLCAxLjAsIGV4cG9zdXJlKTtcXG5cXG4gICAgZnJhbWVVbmlmb3Jtcy5zdW4gPSBzdW47XFxuXFxuICAgIGZyYW1lVW5pZm9ybXMubGlnaHREaXJlY3Rpb24gPSBub3JtYWxpemUobGlnaHREaXJlY3Rpb24pO1xcblxcbiAgICBmcmFtZVVuaWZvcm1zLmlibEx1bWluYW5jZSA9IGlibEx1bWluYW5jZSAqIGV4cG9zdXJlO1xcblxcbiAgICBmcmFtZVVuaWZvcm1zLmV4cG9zdXJlID0gZXhwb3N1cmU7XFxuXFxuICAgIGZyYW1lVW5pZm9ybXMuZXYxMDAgPSBldjEwMDtcXG5cXG4gICAgZm9yIChpbnQgaSA9IDA7IGkgPCA5OyBpKyspXFxuXFxuICAgIHtcXG5cXG4gICAgICAgIGZyYW1lVW5pZm9ybXMuaWJsU0hbaV0gPSBpYmxTSFtpXTtcXG5cXG4gICAgfVxcblxcbiAgICAvLyBmcmFtZVVuaWZvcm1zLmlibFNIID0gaWJsU0g7XFxuXFxuICAgIGZyYW1lVW5pZm9ybXMuc2hhZG93QmlhcyA9IHZlYzMoMC4wLCAwLjAsIDAuMCk7XFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfbWF0ZXJpYWxfaW5wdXRzX3ZlcnQgPSBcInN0cnVjdCBNYXRlcmlhbFZlcnRleElucHV0cyB7XFxuXFxuI2lmZGVmIEhBU19BVFRSSUJVVEVfQ09MT1JcXG5cXG4gICAgdmVjNCBjb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgSEFTX0FUVFJJQlVURV9VVjBcXG5cXG4gICAgdmVjMiB1djA7XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIEhBU19BVFRSSUJVVEVfVVYxXFxuXFxuICAgIHZlYzIgdXYxO1xcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBWQVJJQUJMRV9DVVNUT00wXFxuXFxuICAgIHZlYzQgVkFSSUFCTEVfQ1VTVE9NMDtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgVkFSSUFCTEVfQ1VTVE9NMVxcblxcbiAgICB2ZWM0IFZBUklBQkxFX0NVU1RPTTE7XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIFZBUklBQkxFX0NVU1RPTTJcXG5cXG4gICAgdmVjNCBWQVJJQUJMRV9DVVNUT00yO1xcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBWQVJJQUJMRV9DVVNUT00zXFxuXFxuICAgIHZlYzQgVkFSSUFCTEVfQ1VTVE9NMztcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgSEFTX0FUVFJJQlVURV9UQU5HRU5UU1xcblxcbiAgICB2ZWMzIHdvcmxkTm9ybWFsO1xcblxcbiNlbmRpZlxcblxcbiAgICB2ZWM0IHdvcmxkUG9zaXRpb247XFxuXFxufTtcXG5cXG5cXG5cXG4vLyBXb3JrYXJvdW5kIGZvciBhIGRyaXZlciBidWcgb24gQVJNIEJpZnJvc3QgR1BVcy4gQXNzaWduaW5nIGEgc3RydWN0dXJlIG1lbWJlclxcblxcbi8vIChkaXJlY3RseSBvciBpbnNpZGUgYW4gZXhwcmVzc2lvbikgdG8gYW4gaW52YXJpYW50IGNhdXNlcyBhIGRyaXZlciBjcmFzaC5cXG5cXG52ZWM0IGdldFdvcmxkUG9zaXRpb24oY29uc3QgTWF0ZXJpYWxWZXJ0ZXhJbnB1dHMgbWF0ZXJpYWwpIHtcXG5cXG4gICAgcmV0dXJuIG1hdGVyaWFsLndvcmxkUG9zaXRpb247XFxuXFxufVxcblxcblxcblxcbnZvaWQgaW5pdE1hdGVyaWFsVmVydGV4KG91dCBNYXRlcmlhbFZlcnRleElucHV0cyBtYXRlcmlhbCkge1xcblxcbiNpZmRlZiBIQVNfQVRUUklCVVRFX0NPTE9SXFxuXFxuICAgIG1hdGVyaWFsLmNvbG9yID0gbWVzaF9jb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgSEFTX0FUVFJJQlVURV9VVjBcXG5cXG4gICAgI2lmZGVmIEZMSVBfVVZfQVRUUklCVVRFXFxuXFxuICAgIG1hdGVyaWFsLnV2MCA9IHZlYzIobWVzaF91djAueCwgMS4wIC0gbWVzaF91djAueSk7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgIG1hdGVyaWFsLnV2MCA9IG1lc2hfdXYwO1xcblxcbiAgICAjZW5kaWZcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgSEFTX0FUVFJJQlVURV9VVjFcXG5cXG4gICAgI2lmZGVmIEZMSVBfVVZfQVRUUklCVVRFXFxuXFxuICAgIG1hdGVyaWFsLnV2MSA9IHZlYzIobWVzaF91djEueCwgMS4wIC0gbWVzaF91djEueSk7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgIG1hdGVyaWFsLnV2MSA9IG1lc2hfdXYxO1xcblxcbiAgICAjZW5kaWZcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgVkFSSUFCTEVfQ1VTVE9NMFxcblxcbiAgICBtYXRlcmlhbC5WQVJJQUJMRV9DVVNUT00wID0gdmVjNCgwLjApO1xcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBWQVJJQUJMRV9DVVNUT00xXFxuXFxuICAgIG1hdGVyaWFsLlZBUklBQkxFX0NVU1RPTTEgPSB2ZWM0KDAuMCk7XFxuXFxuI2VuZGlmXFxuXFxuI2lmZGVmIFZBUklBQkxFX0NVU1RPTTJcXG5cXG4gICAgbWF0ZXJpYWwuVkFSSUFCTEVfQ1VTVE9NMiA9IHZlYzQoMC4wKTtcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgVkFSSUFCTEVfQ1VTVE9NM1xcblxcbiAgICBtYXRlcmlhbC5WQVJJQUJMRV9DVVNUT00zID0gdmVjNCgwLjApO1xcblxcbiNlbmRpZlxcblxcbiAgICBtYXRlcmlhbC53b3JsZFBvc2l0aW9uID0gY29tcHV0ZVdvcmxkUG9zaXRpb24oKTtcXG5cXG59XFxuXFxuXCI7XG5cbnZhciBmbF9pbnB1dHNfdmVydCA9IFwidmVjNCBtZXNoX3Bvc2l0aW9uO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfVEFOR0VOVFMpXFxuXFxudmVjNCBtZXNoX3RhbmdlbnRzO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfQ09MT1IpXFxuXFxudmVjNCBtZXNoX2NvbG9yO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfVVYwKVxcblxcbnZlYzIgbWVzaF91djA7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9VVjEpXFxuXFxudmVjMiBtZXNoX3V2MTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX0JPTkVfSU5ESUNFUylcXG5cXG52ZWM0IG1lc2hfYm9uZV9pbmRpY2VzO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfQk9ORV9XRUlHSFRTKVxcblxcbnZlYzQgbWVzaF9ib25lX3dlaWdodHM7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxudmFyeWluZyBoaWdocCB2ZWMzIHZlcnRleF93b3JsZFBvc2l0aW9uO1xcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfVEFOR0VOVFMpXFxuXFxudmFyeWluZyBtZWRpdW1wIHZlYzMgdmVydGV4X3dvcmxkTm9ybWFsO1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTklTT1RST1BZKSB8fCBkZWZpbmVkKE1BVEVSSUFMX0hBU19OT1JNQUwpIHx8IGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVRfTk9STUFMKVxcblxcbnZhcnlpbmcgbWVkaXVtcCB2ZWMzIHZlcnRleF93b3JsZFRhbmdlbnQ7XFxuXFxudmFyeWluZyBtZWRpdW1wIHZlYzMgdmVydGV4X3dvcmxkQml0YW5nZW50O1xcblxcbiNlbmRpZlxcblxcbiNpZiBkZWZpbmVkKEdFT01FVFJJQ19TUEVDVUxBUl9BQV9OT1JNQUwpXFxuXFxudmFyeWluZyBjZW50cm9pZCB2ZWMzIHZlcnRleF93b3JsZE5vcm1hbENlbnRyb2lkO1xcblxcbiNlbmRpZlxcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfQ09MT1IpXFxuXFxudmFyeWluZyBtZWRpdW1wIHZlYzQgdmVydGV4X2NvbG9yO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfVVYwKSAmJiAhZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMSlcXG5cXG52YXJ5aW5nIGhpZ2hwIHZlYzIgdmVydGV4X3V2MDE7XFxuXFxuI2VsaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMSlcXG5cXG52YXJ5aW5nIGhpZ2hwIHZlYzQgdmVydGV4X3V2MDE7XFxuXFxuI2VuZGlmXFxuXFxuXCI7XG5cbnZhciBmbF9oZWFkZXJfZnJhZyA9IFwiI2RlZmluZSBTSEFERVJfTkFNRSBzdGFuZGFyZFxcblxcbiAgICAjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZVxcblxcbiNpZiBkZWZpbmVkKEdMX0VYVF9zaGFkZXJfdGV4dHVyZV9sb2QpXFxuXFxuICAgICNleHRlbnNpb24gR0xfRVhUX3NoYWRlcl90ZXh0dXJlX2xvZCA6IGVuYWJsZVxcblxcbiNlbmRpZlxcblxcblxcblxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcblxcblxcbnZlYzQgdGV4dHVyZUxvZChzYW1wbGVyMkQgc2FtcGxlciwgdmVjMiBjb29yZCwgZmxvYXQgbG9kKSB7XFxuXFxuICAgIHJldHVybiB0ZXh0dXJlMkRMb2RFWFQoc2FtcGxlciwgY29vcmQsIGxvZCk7XFxuXFxufVxcblxcblxcblxcbnZlYzQgdGV4dHVyZUxvZChzYW1wbGVyQ3ViZSBzYW1wbGVyLCB2ZWMzIGNvb3JkLCBmbG9hdCBsb2QpIHtcXG5cXG4gICAgcmV0dXJuIHRleHR1cmVDdWJlTG9kRVhUKHNhbXBsZXIsIGNvb3JkLCBsb2QpO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX2NvbW1vbl9ncmFwaGljc19nbHNsID0gXCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIENvbW1vbiBjb2xvciBvcGVyYXRpb25zXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG5cXG5cXG5mbG9hdCBsdW1pbmFuY2UoY29uc3QgdmVjMyBsaW5lYXIpIHtcXG5cXG4gICAgcmV0dXJuIGRvdChsaW5lYXIsIHZlYzMoMC4yMTI2LCAwLjcxNTIsIDAuMDcyMikpO1xcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG5mbG9hdCBjb21wdXRlUHJlRXhwb3NlZEludGVuc2l0eShjb25zdCBoaWdocCBmbG9hdCBpbnRlbnNpdHksIGNvbnN0IGhpZ2hwIGZsb2F0IGV4cG9zdXJlKSB7XFxuXFxuICAgIHJldHVybiBpbnRlbnNpdHkgKiBleHBvc3VyZTtcXG5cXG59XFxuXFxuXFxuXFxudm9pZCB1bnByZW11bHRpcGx5KGlub3V0IHZlYzQgY29sb3IpIHtcXG5cXG4gICAgY29sb3IucmdiIC89IG1heChjb2xvci5hLCBGTFRfRVBTKTtcXG5cXG59XFxuXFxuXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBUb25lIG1hcHBpbmcgb3BlcmF0aW9uc1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuXFxuXFxudmVjMyBJbnZlcnNlX1RvbmVtYXBfVW5yZWFsKGNvbnN0IHZlYzMgeCkge1xcblxcbiAgICByZXR1cm4gKHggKiAtMC4xNTUpIC8gKHggLSAxLjAxOSk7XFxuXFxufVxcblxcblxcblxcblxcblxcbnZlYzMgaW52ZXJzZVRvbmVtYXBTUkdCKHZlYzMgY29sb3IpIHtcXG5cXG4gICAgLy8gc1JHQiBpbnB1dFxcblxcbiAgICBjb2xvciA9IGNsYW1wKGNvbG9yLCAwLjAsIDEuMCk7XFxuXFxuICAgIHJldHVybiBJbnZlcnNlX1RvbmVtYXBfVW5yZWFsKGNvbG9yKTtcXG5cXG59XFxuXFxuXFxuXFxuXFxuXFxudmVjMyBpbnZlcnNlVG9uZW1hcCh2ZWMzIGxpbmVhcikge1xcblxcbiAgICAvLyBMaW5lYXIgaW5wdXRcXG5cXG4gICAgbGluZWFyID0gY2xhbXAobGluZWFyLCAwLjAsIDEuMCk7XFxuXFxuICAgIHJldHVybiBJbnZlcnNlX1RvbmVtYXBfVW5yZWFsKHBvdyhsaW5lYXIsIHZlYzMoMS4wIC8gMi4yKSkpO1xcblxcbn1cXG5cXG5cXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIENvbW1vbiB0ZXh0dXJlIG9wZXJhdGlvbnNcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcblxcblxcblxcbnZlYzMgZGVjb2RlUkdCTSh2ZWM0IGMpIHtcXG5cXG4gICAgYy5yZ2IgKj0gKGMuYSAqIDE2LjApO1xcblxcbiAgICByZXR1cm4gYy5yZ2IgKiBjLnJnYjtcXG5cXG59XFxuXFxuXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBDb21tb24gZGVidWdcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcblxcbnZlYzMgaGVhdG1hcChmbG9hdCB2KSB7XFxuXFxuICAgIHZlYzMgciA9IHYgKiAyLjEgLSB2ZWMzKDEuOCwgMS4xNCwgMC4zKTtcXG5cXG4gICAgcmV0dXJuIDEuMCAtIHIgKiByO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX2lucHV0c19mcmFnID0gXCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIEF0dHJpYnV0ZXMgYW5kIHVuaWZvcm1zXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG4jaWYgIWRlZmluZWQoREVQVEhfUFJFUEFTUylcXG5cXG52YXJ5aW5nIGhpZ2hwIHZlYzMgdmVydGV4X3dvcmxkUG9zaXRpb247XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9UQU5HRU5UUylcXG5cXG52YXJ5aW5nIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhfd29ybGROb3JtYWw7XFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0FOSVNPVFJPUFkpIHx8IGRlZmluZWQoTUFURVJJQUxfSEFTX05PUk1BTCkgfHwgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwpXFxuXFxudmFyeWluZyBtZWRpdW1wIHZlYzMgdmVydGV4X3dvcmxkVGFuZ2VudDtcXG5cXG52YXJ5aW5nIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhfd29ybGRCaXRhbmdlbnQ7XFxuXFxuI2VuZGlmXFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9DT0xPUilcXG5cXG52YXJ5aW5nIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhfY29sb3I7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9VVjApICYmICFkZWZpbmVkKEhBU19BVFRSSUJVVEVfVVYxKVxcblxcbiB2YXJ5aW5nIGhpZ2hwIHZlYzIgdmVydGV4X3V2MDE7XFxuXFxuI2VsaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMSlcXG5cXG4gdmFyeWluZyBoaWdocCB2ZWM0IHZlcnRleF91djAxO1xcblxcbiNlbmRpZlxcblxcblxcblxcblwiO1xuXG52YXIgZmxfYnJkZl9mcmFnID0gXCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIEJSREYgY29uZmlndXJhdGlvblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuLy8gRGlmZnVzZSBCUkRGc1xcblxcbiNkZWZpbmUgRElGRlVTRV9MQU1CRVJUICAgICAgICAgICAgIDBcXG5cXG4jZGVmaW5lIERJRkZVU0VfQlVSTEVZICAgICAgICAgICAgICAxXFxuXFxuXFxuXFxuLy8gU3BlY3VsYXIgQlJERlxcblxcbi8vIE5vcm1hbCBkaXN0cmlidXRpb24gZnVuY3Rpb25zXFxuXFxuI2RlZmluZSBTUEVDVUxBUl9EX0dHWCAgICAgICAgICAgICAgMFxcblxcblxcblxcbi8vIEFuaXNvdHJvcGljIE5ERnNcXG5cXG4jZGVmaW5lIFNQRUNVTEFSX0RfR0dYX0FOSVNPVFJPUElDICAwXFxuXFxuXFxuXFxuLy8gQ2xvdGggTkRGc1xcblxcbiNkZWZpbmUgU1BFQ1VMQVJfRF9DSEFSTElFICAgICAgICAgIDBcXG5cXG5cXG5cXG4vLyBWaXNpYmlsaXR5IGZ1bmN0aW9uc1xcblxcbiNkZWZpbmUgU1BFQ1VMQVJfVl9TTUlUSF9HR1ggICAgICAgIDBcXG5cXG4jZGVmaW5lIFNQRUNVTEFSX1ZfU01JVEhfR0dYX0ZBU1QgICAxXFxuXFxuI2RlZmluZSBTUEVDVUxBUl9WX0dHWF9BTklTT1RST1BJQyAgMlxcblxcbiNkZWZpbmUgU1BFQ1VMQVJfVl9LRUxFTUVOICAgICAgICAgIDNcXG5cXG4jZGVmaW5lIFNQRUNVTEFSX1ZfTkVVQkVMVCAgICAgICAgICA0XFxuXFxuXFxuXFxuLy8gRnJlc25lbCBmdW5jdGlvbnNcXG5cXG4jZGVmaW5lIFNQRUNVTEFSX0ZfU0NITElDSyAgICAgICAgICAwXFxuXFxuXFxuXFxuI2RlZmluZSBCUkRGX0RJRkZVU0UgICAgICAgICAgICAgICAgRElGRlVTRV9MQU1CRVJUXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoVEFSR0VUX01PQklMRSlcXG5cXG4jZGVmaW5lIEJSREZfU1BFQ1VMQVJfRCAgICAgICAgICAgICBTUEVDVUxBUl9EX0dHWFxcblxcbiNkZWZpbmUgQlJERl9TUEVDVUxBUl9WICAgICAgICAgICAgIFNQRUNVTEFSX1ZfU01JVEhfR0dYX0ZBU1RcXG5cXG4jZGVmaW5lIEJSREZfU1BFQ1VMQVJfRiAgICAgICAgICAgICBTUEVDVUxBUl9GX1NDSExJQ0tcXG5cXG4jZWxzZVxcblxcbiNkZWZpbmUgQlJERl9TUEVDVUxBUl9EICAgICAgICAgICAgIFNQRUNVTEFSX0RfR0dYXFxuXFxuI2RlZmluZSBCUkRGX1NQRUNVTEFSX1YgICAgICAgICAgICAgU1BFQ1VMQVJfVl9TTUlUSF9HR1hcXG5cXG4jZGVmaW5lIEJSREZfU1BFQ1VMQVJfRiAgICAgICAgICAgICBTUEVDVUxBUl9GX1NDSExJQ0tcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jZGVmaW5lIEJSREZfQ0xFQVJfQ09BVF9EICAgICAgICAgICBTUEVDVUxBUl9EX0dHWFxcblxcbiNkZWZpbmUgQlJERl9DTEVBUl9DT0FUX1YgICAgICAgICAgIFNQRUNVTEFSX1ZfS0VMRU1FTlxcblxcblxcblxcbiNkZWZpbmUgQlJERl9BTklTT1RST1BJQ19EICAgICAgICAgIFNQRUNVTEFSX0RfR0dYX0FOSVNPVFJPUElDXFxuXFxuI2RlZmluZSBCUkRGX0FOSVNPVFJPUElDX1YgICAgICAgICAgU1BFQ1VMQVJfVl9HR1hfQU5JU09UUk9QSUNcXG5cXG5cXG5cXG4jZGVmaW5lIEJSREZfQ0xPVEhfRCAgICAgICAgICAgICAgICBTUEVDVUxBUl9EX0NIQVJMSUVcXG5cXG4jZGVmaW5lIEJSREZfQ0xPVEhfViAgICAgICAgICAgICAgICBTUEVDVUxBUl9WX05FVUJFTFRcXG5cXG5cXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIFNwZWN1bGFyIEJSREYgaW1wbGVtZW50YXRpb25zXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG5mbG9hdCBEX0dHWChmbG9hdCByb3VnaG5lc3MsIGZsb2F0IE5vSCwgY29uc3QgdmVjMyBoKSB7XFxuXFxuICAgIC8vIFdhbHRlciBldCBhbC4gMjAwNywgXFxcIk1pY3JvZmFjZXQgTW9kZWxzIGZvciBSZWZyYWN0aW9uIHRocm91Z2ggUm91Z2ggU3VyZmFjZXNcXFwiXFxuXFxuXFxuXFxuICAgIC8vIEluIG1lZGl1bXAsIHRoZXJlIGFyZSB0d28gcHJvYmxlbXMgY29tcHV0aW5nIDEuMCAtIE5vSF4yXFxuXFxuICAgIC8vIDEpIDEuMCAtIE5vSF4yIHN1ZmZlcnMgZmxvYXRpbmcgcG9pbnQgY2FuY2VsbGF0aW9uIHdoZW4gTm9IXjIgaXMgY2xvc2UgdG8gMSAoaGlnaGxpZ2h0cylcXG5cXG4gICAgLy8gMikgTm9IIGRvZXNuJ3QgaGF2ZSBlbm91Z2ggcHJlY2lzaW9uIGFyb3VuZCAxLjBcXG5cXG4gICAgLy8gQm90aCBwcm9ibGVtIGNhbiBiZSBmaXhlZCBieSBjb21wdXRpbmcgMS1Ob0heMiBpbiBoaWdocCBhbmQgcHJvdmlkaW5nIE5vSCBpbiBoaWdocCBhcyB3ZWxsXFxuXFxuXFxuXFxuICAgIC8vIEhvd2V2ZXIsIHdlIGNhbiBkbyBiZXR0ZXIgdXNpbmcgTGFncmFuZ2UncyBpZGVudGl0eTpcXG5cXG4gICAgLy8gICAgICB8fGEgeCBifHxeMiA9IHx8YXx8XjIgfHxifHxeMiAtIChhIC4gYileMlxcblxcbiAgICAvLyBzaW5jZSBOIGFuZCBIIGFyZSB1bml0IHZlY3RvcnM6IHx8TiB4IEh8fF4yID0gMS4wIC0gTm9IXjJcXG5cXG4gICAgLy8gVGhpcyBjb21wdXRlcyAxLjAgLSBOb0heMiBkaXJlY3RseSAod2hpY2ggaXMgY2xvc2UgdG8gemVybyBpbiB0aGUgaGlnaGxpZ2h0cyBhbmQgaGFzXFxuXFxuICAgIC8vIGVub3VnaCBwcmVjaXNpb24pLlxcblxcbiAgICAvLyBPdmVyYWxsIHRoaXMgeWllbGRzIGJldHRlciBwZXJmb3JtYW5jZSwga2VlcGluZyBhbGwgY29tcHV0YXRpb25zIGluIG1lZGl1bXBcXG5cXG4jaWYgZGVmaW5lZChUQVJHRVRfTU9CSUxFKVxcblxcbiAgICB2ZWMzIE54SCA9IGNyb3NzKHNoYWRpbmdfbm9ybWFsLCBoKTtcXG5cXG4gICAgZmxvYXQgb25lTWludXNOb0hTcXVhcmVkID0gZG90KE54SCwgTnhIKTtcXG5cXG4jZWxzZVxcblxcbiAgICBmbG9hdCBvbmVNaW51c05vSFNxdWFyZWQgPSAxLjAgLSBOb0ggKiBOb0g7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuICAgIGZsb2F0IGEgPSBOb0ggKiByb3VnaG5lc3M7XFxuXFxuICAgIGZsb2F0IGsgPSByb3VnaG5lc3MgLyAob25lTWludXNOb0hTcXVhcmVkICsgYSAqIGEpO1xcblxcbiAgICBmbG9hdCBkID0gayAqIGsgKiAoMS4wIC8gUEkpO1xcblxcbiAgICByZXR1cm4gc2F0dXJhdGVNZWRpdW1wKGQpO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBEX0dHWF9Bbmlzb3Ryb3BpYyhmbG9hdCBhdCwgZmxvYXQgYWIsIGZsb2F0IFRvSCwgZmxvYXQgQm9ILCBmbG9hdCBOb0gpIHtcXG5cXG4gICAgLy8gQnVybGV5IDIwMTIsIFxcXCJQaHlzaWNhbGx5LUJhc2VkIFNoYWRpbmcgYXQgRGlzbmV5XFxcIlxcblxcblxcblxcbiAgICAvLyBUaGUgdmFsdWVzIGF0IGFuZCBhYiBhcmUgcGVyY2VwdHVhbFJvdWdobmVzc14yLCBhMiBpcyB0aGVyZWZvcmUgcGVyY2VwdHVhbFJvdWdobmVzc140XFxuXFxuICAgIC8vIFRoZSBkb3QgcHJvZHVjdCBiZWxvdyBjb21wdXRlcyBwZXJjZXB0dWFsUm91Z2huZXNzXjguIFdlIGNhbm5vdCBmaXQgaW4gZnAxNiB3aXRob3V0IGNsYW1waW5nXFxuXFxuICAgIC8vIHRoZSByb3VnaG5lc3MgdG8gdG9vIGhpZ2ggdmFsdWVzIHNvIHdlIHBlcmZvcm0gdGhlIGRvdCBwcm9kdWN0IGFuZCB0aGUgZGl2aXNpb24gaW4gZnAzMlxcblxcbiAgICBmbG9hdCBhMiA9IGF0ICogYWI7XFxuXFxuICAgIGhpZ2hwIHZlYzMgZCA9IHZlYzMoYWIgKiBUb0gsIGF0ICogQm9ILCBhMiAqIE5vSCk7XFxuXFxuICAgIGhpZ2hwIGZsb2F0IGQyID0gZG90KGQsIGQpO1xcblxcbiAgICBmbG9hdCBiMiA9IGEyIC8gZDI7XFxuXFxuICAgIHJldHVybiBhMiAqIGIyICogYjIgKiAoMS4wIC8gUEkpO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBEX0NoYXJsaWUoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBOb0gpIHtcXG5cXG4gICAgLy8gRXN0ZXZleiBhbmQgS3VsbGEgMjAxNywgXFxcIlByb2R1Y3Rpb24gRnJpZW5kbHkgTWljcm9mYWNldCBTaGVlbiBCUkRGXFxcIlxcblxcbiAgICBmbG9hdCBpbnZBbHBoYSAgPSAxLjAgLyByb3VnaG5lc3M7XFxuXFxuICAgIGZsb2F0IGNvczJoID0gTm9IICogTm9IO1xcblxcbiAgICBmbG9hdCBzaW4yaCA9IG1heCgxLjAgLSBjb3MyaCwgMC4wMDc4MTI1KTsgLy8gMl4oLTE0LzIpLCBzbyBzaW4yaF4yID4gMCBpbiBmcDE2XFxuXFxuICAgIHJldHVybiAoMi4wICsgaW52QWxwaGEpICogcG93KHNpbjJoLCBpbnZBbHBoYSAqIDAuNSkgLyAoMi4wICogUEkpO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBWX1NtaXRoR0dYQ29ycmVsYXRlZChmbG9hdCByb3VnaG5lc3MsIGZsb2F0IE5vViwgZmxvYXQgTm9MKSB7XFxuXFxuICAgIC8vIEhlaXR6IDIwMTQsIFxcXCJVbmRlcnN0YW5kaW5nIHRoZSBNYXNraW5nLVNoYWRvd2luZyBGdW5jdGlvbiBpbiBNaWNyb2ZhY2V0LUJhc2VkIEJSREZzXFxcIlxcblxcbiAgICBmbG9hdCBhMiA9IHJvdWdobmVzcyAqIHJvdWdobmVzcztcXG5cXG4gICAgLy8gVE9ETzogbGFtYmRhViBjYW4gYmUgcHJlLWNvbXB1dGVkIGZvciBhbGwgdGhlIGxpZ2h0cywgaXQgc2hvdWxkIGJlIG1vdmVkIG91dCBvZiB0aGlzIGZ1bmN0aW9uXFxuXFxuICAgIGZsb2F0IGxhbWJkYVYgPSBOb0wgKiBzcXJ0KChOb1YgLSBhMiAqIE5vVikgKiBOb1YgKyBhMik7XFxuXFxuICAgIGZsb2F0IGxhbWJkYUwgPSBOb1YgKiBzcXJ0KChOb0wgLSBhMiAqIE5vTCkgKiBOb0wgKyBhMik7XFxuXFxuICAgIGZsb2F0IHYgPSAwLjUgLyAobGFtYmRhViArIGxhbWJkYUwpO1xcblxcbiAgICAvLyBhMj0wID0+IHYgPSAxIC8gNCpOb0wqTm9WICAgPT4gbWluPTEvNCwgbWF4PStpbmZcXG5cXG4gICAgLy8gYTI9MSA9PiB2ID0gMSAvIDIqKE5vTCtOb1YpID0+IG1pbj0xLzQsIG1heD0raW5mXFxuXFxuICAgIC8vIGNsYW1wIHRvIHRoZSBtYXhpbXVtIHZhbHVlIHJlcHJlc2VudGFibGUgaW4gbWVkaXVtcFxcblxcbiAgICByZXR1cm4gc2F0dXJhdGVNZWRpdW1wKHYpO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBWX1NtaXRoR0dYQ29ycmVsYXRlZF9GYXN0KGZsb2F0IHJvdWdobmVzcywgZmxvYXQgTm9WLCBmbG9hdCBOb0wpIHtcXG5cXG4gICAgLy8gSGFtbW9uIDIwMTcsIFxcXCJQQlIgRGlmZnVzZSBMaWdodGluZyBmb3IgR0dYK1NtaXRoIE1pY3Jvc3VyZmFjZXNcXFwiXFxuXFxuICAgIGZsb2F0IHYgPSAwLjUgLyBtaXgoMi4wICogTm9MICogTm9WLCBOb0wgKyBOb1YsIHJvdWdobmVzcyk7XFxuXFxuICAgIHJldHVybiBzYXR1cmF0ZU1lZGl1bXAodik7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IFZfU21pdGhHR1hDb3JyZWxhdGVkX0FuaXNvdHJvcGljKGZsb2F0IGF0LCBmbG9hdCBhYiwgZmxvYXQgVG9WLCBmbG9hdCBCb1YsXFxuXFxuICAgICAgICBmbG9hdCBUb0wsIGZsb2F0IEJvTCwgZmxvYXQgTm9WLCBmbG9hdCBOb0wpIHtcXG5cXG4gICAgLy8gSGVpdHogMjAxNCwgXFxcIlVuZGVyc3RhbmRpbmcgdGhlIE1hc2tpbmctU2hhZG93aW5nIEZ1bmN0aW9uIGluIE1pY3JvZmFjZXQtQmFzZWQgQlJERnNcXFwiXFxuXFxuICAgIC8vIFRPRE86IGxhbWJkYVYgY2FuIGJlIHByZS1jb21wdXRlZCBmb3IgYWxsIHRoZSBsaWdodHMsIGl0IHNob3VsZCBiZSBtb3ZlZCBvdXQgb2YgdGhpcyBmdW5jdGlvblxcblxcbiAgICBmbG9hdCBsYW1iZGFWID0gTm9MICogbGVuZ3RoKHZlYzMoYXQgKiBUb1YsIGFiICogQm9WLCBOb1YpKTtcXG5cXG4gICAgZmxvYXQgbGFtYmRhTCA9IE5vViAqIGxlbmd0aCh2ZWMzKGF0ICogVG9MLCBhYiAqIEJvTCwgTm9MKSk7XFxuXFxuICAgIGZsb2F0IHYgPSAwLjUgLyAobGFtYmRhViArIGxhbWJkYUwpO1xcblxcbiAgICByZXR1cm4gc2F0dXJhdGVNZWRpdW1wKHYpO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBWX0tlbGVtZW4oZmxvYXQgTG9IKSB7XFxuXFxuICAgIC8vIEtlbGVtZW4gMjAwMSwgXFxcIkEgTWljcm9mYWNldCBCYXNlZCBDb3VwbGVkIFNwZWN1bGFyLU1hdHRlIEJSREYgTW9kZWwgd2l0aCBJbXBvcnRhbmNlIFNhbXBsaW5nXFxcIlxcblxcbiAgICByZXR1cm4gc2F0dXJhdGVNZWRpdW1wKDAuMjUgLyAoTG9IICogTG9IKSk7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IFZfTmV1YmVsdChmbG9hdCBOb1YsIGZsb2F0IE5vTCkge1xcblxcbiAgICAvLyBOZXViZWx0IGFuZCBQZXR0aW5lbyAyMDEzLCBcXFwiQ3JhZnRpbmcgYSBOZXh0LWdlbiBNYXRlcmlhbCBQaXBlbGluZSBmb3IgVGhlIE9yZGVyOiAxODg2XFxcIlxcblxcbiAgICByZXR1cm4gc2F0dXJhdGVNZWRpdW1wKDEuMCAvICg0LjAgKiAoTm9MICsgTm9WIC0gTm9MICogTm9WKSkpO1xcblxcbn1cXG5cXG5cXG5cXG52ZWMzIEZfU2NobGljayhjb25zdCB2ZWMzIGYwLCBmbG9hdCBmOTAsIGZsb2F0IFZvSCkge1xcblxcbiAgICAvLyBTY2hsaWNrIDE5OTQsIFxcXCJBbiBJbmV4cGVuc2l2ZSBCUkRGIE1vZGVsIGZvciBQaHlzaWNhbGx5LUJhc2VkIFJlbmRlcmluZ1xcXCJcXG5cXG4gICAgcmV0dXJuIGYwICsgKGY5MCAtIGYwKSAqIHBvdzUoMS4wIC0gVm9IKTtcXG5cXG59XFxuXFxuXFxuXFxudmVjMyBGX1NjaGxpY2soY29uc3QgdmVjMyBmMCwgZmxvYXQgVm9IKSB7XFxuXFxuICAgIGZsb2F0IGYgPSBwb3coMS4wIC0gVm9ILCA1LjApO1xcblxcbiAgICByZXR1cm4gZiArIGYwICogKDEuMCAtIGYpO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBGX1NjaGxpY2soZmxvYXQgZjAsIGZsb2F0IGY5MCwgZmxvYXQgVm9IKSB7XFxuXFxuICAgIHJldHVybiBmMCArIChmOTAgLSBmMCkgKiBwb3c1KDEuMCAtIFZvSCk7XFxuXFxufVxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gU3BlY3VsYXIgQlJERiBkaXNwYXRjaFxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuZmxvYXQgZGlzdHJpYnV0aW9uKGZsb2F0IHJvdWdobmVzcywgZmxvYXQgTm9ILCBjb25zdCB2ZWMzIGgpIHtcXG5cXG4jaWYgQlJERl9TUEVDVUxBUl9EID09IFNQRUNVTEFSX0RfR0dYXFxuXFxuICAgIHJldHVybiBEX0dHWChyb3VnaG5lc3MsIE5vSCwgaCk7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcblxcblxcbmZsb2F0IHZpc2liaWxpdHkoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBOb1YsIGZsb2F0IE5vTCwgZmxvYXQgTG9IKSB7XFxuXFxuI2lmIEJSREZfU1BFQ1VMQVJfViA9PSBTUEVDVUxBUl9WX1NNSVRIX0dHWFxcblxcbiAgICByZXR1cm4gVl9TbWl0aEdHWENvcnJlbGF0ZWQocm91Z2huZXNzLCBOb1YsIE5vTCk7XFxuXFxuI2VsaWYgQlJERl9TUEVDVUxBUl9WID09IFNQRUNVTEFSX1ZfU01JVEhfR0dYX0ZBU1RcXG5cXG4gICAgcmV0dXJuIFZfU21pdGhHR1hDb3JyZWxhdGVkX0Zhc3Qocm91Z2huZXNzLCBOb1YsIE5vTCk7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcblxcblxcbnZlYzMgZnJlc25lbChjb25zdCB2ZWMzIGYwLCBmbG9hdCBMb0gpIHtcXG5cXG4jaWYgQlJERl9TUEVDVUxBUl9GID09IFNQRUNVTEFSX0ZfU0NITElDS1xcblxcbiNpZiBkZWZpbmVkKFRBUkdFVF9NT0JJTEUpXFxuXFxuICAgIC8vIGY5MCA9IDEuMFxcblxcbiAgICByZXR1cm4gRl9TY2hsaWNrKGYwLCBMb0gpO1xcblxcbiNlbHNlXFxuXFxuICAgIGZsb2F0IGY5MCA9IHNhdHVyYXRlKGRvdChmMCwgdmVjMyg1MC4wICogMC4zMykpKTtcXG5cXG4gICAgcmV0dXJuIEZfU2NobGljayhmMCwgZjkwLCBMb0gpO1xcblxcbiNlbmRpZlxcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBkaXN0cmlidXRpb25Bbmlzb3Ryb3BpYyhmbG9hdCBhdCwgZmxvYXQgYWIsIGZsb2F0IFRvSCwgZmxvYXQgQm9ILCBmbG9hdCBOb0gpIHtcXG5cXG4jaWYgQlJERl9BTklTT1RST1BJQ19EID09IFNQRUNVTEFSX0RfR0dYX0FOSVNPVFJPUElDXFxuXFxuICAgIHJldHVybiBEX0dHWF9Bbmlzb3Ryb3BpYyhhdCwgYWIsIFRvSCwgQm9ILCBOb0gpO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCB2aXNpYmlsaXR5QW5pc290cm9waWMoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBhdCwgZmxvYXQgYWIsXFxuXFxuICAgICAgICBmbG9hdCBUb1YsIGZsb2F0IEJvViwgZmxvYXQgVG9MLCBmbG9hdCBCb0wsIGZsb2F0IE5vViwgZmxvYXQgTm9MKSB7XFxuXFxuI2lmIEJSREZfQU5JU09UUk9QSUNfViA9PSBTUEVDVUxBUl9WX1NNSVRIX0dHWFxcblxcbiAgICByZXR1cm4gVl9TbWl0aEdHWENvcnJlbGF0ZWQocm91Z2huZXNzLCBOb1YsIE5vTCk7XFxuXFxuI2VsaWYgQlJERl9BTklTT1RST1BJQ19WID09IFNQRUNVTEFSX1ZfR0dYX0FOSVNPVFJPUElDXFxuXFxuICAgIHJldHVybiBWX1NtaXRoR0dYQ29ycmVsYXRlZF9Bbmlzb3Ryb3BpYyhhdCwgYWIsIFRvViwgQm9WLCBUb0wsIEJvTCwgTm9WLCBOb0wpO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBkaXN0cmlidXRpb25DbGVhckNvYXQoZmxvYXQgcm91Z2huZXNzLCBmbG9hdCBOb0gsIGNvbnN0IHZlYzMgaCkge1xcblxcbiNpZiBCUkRGX0NMRUFSX0NPQVRfRCA9PSBTUEVDVUxBUl9EX0dHWFxcblxcbiAgICByZXR1cm4gRF9HR1gocm91Z2huZXNzLCBOb0gsIGgpO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCB2aXNpYmlsaXR5Q2xlYXJDb2F0KGZsb2F0IExvSCkge1xcblxcbiNpZiBCUkRGX0NMRUFSX0NPQVRfViA9PSBTUEVDVUxBUl9WX0tFTEVNRU5cXG5cXG4gICAgcmV0dXJuIFZfS2VsZW1lbihMb0gpO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBkaXN0cmlidXRpb25DbG90aChmbG9hdCByb3VnaG5lc3MsIGZsb2F0IE5vSCkge1xcblxcbiNpZiBCUkRGX0NMT1RIX0QgPT0gU1BFQ1VMQVJfRF9DSEFSTElFXFxuXFxuICAgIHJldHVybiBEX0NoYXJsaWUocm91Z2huZXNzLCBOb0gpO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCB2aXNpYmlsaXR5Q2xvdGgoZmxvYXQgTm9WLCBmbG9hdCBOb0wpIHtcXG5cXG4jaWYgQlJERl9DTE9USF9WID09IFNQRUNVTEFSX1ZfTkVVQkVMVFxcblxcbiAgICByZXR1cm4gVl9OZXViZWx0KE5vViwgTm9MKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBEaWZmdXNlIEJSREYgaW1wbGVtZW50YXRpb25zXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG5mbG9hdCBGZF9MYW1iZXJ0KCkge1xcblxcbiAgICByZXR1cm4gMS4wIC8gUEk7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IEZkX0J1cmxleShmbG9hdCByb3VnaG5lc3MsIGZsb2F0IE5vViwgZmxvYXQgTm9MLCBmbG9hdCBMb0gpIHtcXG5cXG4gICAgLy8gQnVybGV5IDIwMTIsIFxcXCJQaHlzaWNhbGx5LUJhc2VkIFNoYWRpbmcgYXQgRGlzbmV5XFxcIlxcblxcbiAgICBmbG9hdCBmOTAgPSAwLjUgKyAyLjAgKiByb3VnaG5lc3MgKiBMb0ggKiBMb0g7XFxuXFxuICAgIGZsb2F0IGxpZ2h0U2NhdHRlciA9IEZfU2NobGljaygxLjAsIGY5MCwgTm9MKTtcXG5cXG4gICAgZmxvYXQgdmlld1NjYXR0ZXIgID0gRl9TY2hsaWNrKDEuMCwgZjkwLCBOb1YpO1xcblxcbiAgICByZXR1cm4gbGlnaHRTY2F0dGVyICogdmlld1NjYXR0ZXIgKiAoMS4wIC8gUEkpO1xcblxcbn1cXG5cXG5cXG5cXG4vLyBFbmVyZ3kgY29uc2VydmluZyB3cmFwIGRpZmZ1c2UgdGVybSwgZG9lcyAqbm90KiBpbmNsdWRlIHRoZSBkaXZpZGUgYnkgcGlcXG5cXG5mbG9hdCBGZF9XcmFwKGZsb2F0IE5vTCwgZmxvYXQgdykge1xcblxcbiAgICByZXR1cm4gc2F0dXJhdGUoKE5vTCArIHcpIC8gc3EoMS4wICsgdykpO1xcblxcbn1cXG5cXG5cXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIERpZmZ1c2UgQlJERiBkaXNwYXRjaFxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuZmxvYXQgZGlmZnVzZShmbG9hdCByb3VnaG5lc3MsIGZsb2F0IE5vViwgZmxvYXQgTm9MLCBmbG9hdCBMb0gpIHtcXG5cXG4jaWYgQlJERl9ESUZGVVNFID09IERJRkZVU0VfTEFNQkVSVFxcblxcbiAgICByZXR1cm4gRmRfTGFtYmVydCgpO1xcblxcbiNlbGlmIEJSREZfRElGRlVTRSA9PSBESUZGVVNFX0JVUkxFWVxcblxcbiAgICByZXR1cm4gRmRfQnVybGV5KHJvdWdobmVzcywgTm9WLCBOb0wsIExvSCk7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfc2hhZGluZ19wYXJhbXMgPSBcIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gTWF0ZXJpYWwgZXZhbHVhdGlvblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuXFxuXFxudm9pZCBjb21wdXRlU2hhZGluZ1BhcmFtcygpIHtcXG5cXG4jaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1RBTkdFTlRTKVxcblxcbiAgICBoaWdocCB2ZWMzIG4gPSB2ZXJ0ZXhfd29ybGROb3JtYWw7XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0RPVUJMRV9TSURFRF9DQVBBQklMSVRZKVxcblxcbiAgICBpZiAoaXNEb3VibGVTaWRlZCgpKSB7XFxuXFxuICAgICAgICBuID0gZ2xfRnJvbnRGYWNpbmcgPyBuIDogLW47XFxuXFxuICAgIH1cXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU5JU09UUk9QWSkgfHwgZGVmaW5lZChNQVRFUklBTF9IQVNfTk9STUFMKSB8fCBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUl9DT0FUX05PUk1BTClcXG5cXG4gICAgLy8gUmUtbm9ybWFsaXplIHBvc3QtaW50ZXJwb2xhdGlvbiB2YWx1ZXNcXG5cXG4gICAgc2hhZGluZ190YW5nZW50VG9Xb3JsZCA9IG1hdDMoXFxuXFxuICAgICAgICAgICAgbm9ybWFsaXplKHZlcnRleF93b3JsZFRhbmdlbnQpLCBub3JtYWxpemUodmVydGV4X3dvcmxkQml0YW5nZW50KSwgbm9ybWFsaXplKG4pKTtcXG5cXG4jZW5kaWZcXG5cXG4gICAgLy8gTGVhdmUgdGhlIHRhbmdlbnQgYW5kIGJpdGFuZ2VudCB1bmluaXRpYWxpemVkLCB3ZSB3b24ndCB1c2UgdGhlbVxcblxcbiAgICBzaGFkaW5nX3RhbmdlbnRUb1dvcmxkWzJdID0gbm9ybWFsaXplKG4pO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiAgICBzaGFkaW5nX3Bvc2l0aW9uID0gdmVydGV4X3dvcmxkUG9zaXRpb247XFxuXFxuICAgIHNoYWRpbmdfdmlldyA9IG5vcm1hbGl6ZShmcmFtZVVuaWZvcm1zLmNhbWVyYVBvc2l0aW9uIC0gc2hhZGluZ19wb3NpdGlvbik7XFxuXFxufVxcblxcblxcblxcblxcblxcbnZvaWQgcHJlcGFyZU1hdGVyaWFsKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsKSB7XFxuXFxuI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9UQU5HRU5UUylcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfTk9STUFMKVxcblxcbiAgICBzaGFkaW5nX25vcm1hbCA9IG5vcm1hbGl6ZShzaGFkaW5nX3RhbmdlbnRUb1dvcmxkICogbWF0ZXJpYWwubm9ybWFsKTtcXG5cXG4jZWxzZVxcblxcbiAgICBzaGFkaW5nX25vcm1hbCA9IGdldFdvcmxkR2VvbWV0cmljTm9ybWFsVmVjdG9yKCk7XFxuXFxuI2VuZGlmXFxuXFxuICAgIHNoYWRpbmdfTm9WID0gY2xhbXBOb1YoZG90KHNoYWRpbmdfbm9ybWFsLCBzaGFkaW5nX3ZpZXcpKTtcXG5cXG4gICAgc2hhZGluZ19yZWZsZWN0ZWQgPSByZWZsZWN0KC1zaGFkaW5nX3ZpZXcsIHNoYWRpbmdfbm9ybWFsKTtcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVClcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwpXFxuXFxuICAgIHNoYWRpbmdfY2xlYXJDb2F0Tm9ybWFsID0gbm9ybWFsaXplKHNoYWRpbmdfdGFuZ2VudFRvV29ybGQgKiBtYXRlcmlhbC5jbGVhckNvYXROb3JtYWwpO1xcblxcbiNlbHNlXFxuXFxuICAgIHNoYWRpbmdfY2xlYXJDb2F0Tm9ybWFsID0gZ2V0V29ybGRHZW9tZXRyaWNOb3JtYWxWZWN0b3IoKTtcXG5cXG4jZW5kaWZcXG5cXG4jZW5kaWZcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXCI7XG5cbnZhciBmbF9jb21tb25fc2hhZGluZ19mcmFnID0gXCIvLyBUaGVzZSB2YXJpYWJsZXMgc2hvdWxkIGJlIGluIGEgc3RydWN0IGJ1dCBzb21lIEdQVSBkcml2ZXJzIGlnbm9yZSB0aGVcXG5cXG4vLyBwcmVjaXNpb24gcXVhbGlmaWVyIG9uIGluZGl2aWR1YWwgc3RydWN0IG1lbWJlcnNcXG5cXG4gICAgICAvLyBUQk4gbWF0cml4XFxuXFxuaGlnaHAgbWF0MyAgc2hhZGluZ190YW5nZW50VG9Xb3JsZDtcXG5cXG4gICAgICAvLyBwb3NpdGlvbiBvZiB0aGUgZnJhZ21lbnQgaW4gd29ybGQgc3BhY2VcXG5cXG5oaWdocCB2ZWMzICBzaGFkaW5nX3Bvc2l0aW9uO1xcblxcbiAgICAgIC8vIG5vcm1hbGl6ZWQgdmVjdG9yIGZyb20gdGhlIGZyYWdtZW50IHRvIHRoZSBleWVcXG5cXG4gICAgICB2ZWMzICBzaGFkaW5nX3ZpZXc7XFxuXFxuICAgICAgLy8gbm9ybWFsaXplZCBub3JtYWwsIGluIHdvcmxkIHNwYWNlXFxuXFxuICAgICAgdmVjMyAgc2hhZGluZ19ub3JtYWw7XFxuXFxuICAgICAgLy8gcmVmbGVjdGlvbiBvZiB2aWV3IGFib3V0IG5vcm1hbFxcblxcbiAgICAgIHZlYzMgIHNoYWRpbmdfcmVmbGVjdGVkO1xcblxcbiAgICAgIC8vIGRvdChub3JtYWwsIHZpZXcpLCBhbHdheXMgc3RyaWN0bHkgPj0gTUlOX05fRE9UX1ZcXG5cXG4gICAgICBmbG9hdCBzaGFkaW5nX05vVjtcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVClcXG5cXG4gICAgICAvLyBub3JtYWxpemVkIGNsZWFyIGNvYXQgbGF5ZXIgbm9ybWFsLCBpbiB3b3JsZCBzcGFjZVxcblxcbiAgICAgIHZlYzMgIHNoYWRpbmdfY2xlYXJDb2F0Tm9ybWFsO1xcblxcbiNlbmRpZlxcblxcblwiO1xuXG52YXIgZmxfZ2V0dGVyc19mcmFnID0gXCIjaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX0NPTE9SKVxcblxcblxcblxcbnZlYzQgZ2V0Q29sb3IoKSB7XFxuXFxuICAgIHJldHVybiB2ZXJ0ZXhfY29sb3I7XFxuXFxufVxcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfVVYwKVxcblxcblxcblxcbnZlYzIgZ2V0VVYwKCkge1xcblxcbiAgICByZXR1cm4gdmVydGV4X3V2MDEueHk7XFxuXFxufVxcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfVVYxKVxcblxcblxcblxcbnZlYzIgZ2V0VVYxKCkge1xcblxcbiAgICByZXR1cm4gdmVydGV4X3V2MDEuenc7XFxuXFxufVxcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEJMRU5EX01PREVfTUFTS0VEKVxcblxcblxcblxcbmZsb2F0IGdldE1hc2tUaHJlc2hvbGQoKSB7XFxuXFxuICAgIHJldHVybiBtYXRlcmlhbFBhcmFtcy5fbWFza1RocmVzaG9sZDtcXG5cXG59XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuXFxuXFxuaGlnaHAgbWF0MyBnZXRXb3JsZFRhbmdlbnRGcmFtZSgpIHtcXG5cXG4gICAgcmV0dXJuIHNoYWRpbmdfdGFuZ2VudFRvV29ybGQ7XFxuXFxufVxcblxcblxcblxcblxcblxcbmhpZ2hwIHZlYzMgZ2V0V29ybGRQb3NpdGlvbigpIHtcXG5cXG4gICAgcmV0dXJuIHNoYWRpbmdfcG9zaXRpb247XFxuXFxufVxcblxcblxcblxcblxcblxcbnZlYzMgZ2V0V29ybGRWaWV3VmVjdG9yKCkge1xcblxcbiAgICByZXR1cm4gc2hhZGluZ192aWV3O1xcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG52ZWMzIGdldFdvcmxkTm9ybWFsVmVjdG9yKCkge1xcblxcbiAgICByZXR1cm4gc2hhZGluZ19ub3JtYWw7XFxuXFxufVxcblxcblxcblxcblxcblxcbnZlYzMgZ2V0V29ybGRHZW9tZXRyaWNOb3JtYWxWZWN0b3IoKSB7XFxuXFxuICAgIHJldHVybiBzaGFkaW5nX3RhbmdlbnRUb1dvcmxkWzJdO1xcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG52ZWMzIGdldFdvcmxkUmVmbGVjdGVkVmVjdG9yKCkge1xcblxcbiAgICByZXR1cm4gc2hhZGluZ19yZWZsZWN0ZWQ7XFxuXFxufVxcblxcblxcblxcblxcblxcbmZsb2F0IGdldE5kb3RWKCkge1xcblxcbiAgICByZXR1cm4gc2hhZGluZ19Ob1Y7XFxuXFxufVxcblxcblxcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19ET1VCTEVfU0lERURfQ0FQQUJJTElUWSlcXG5cXG5ib29sIGlzRG91YmxlU2lkZWQoKSB7XFxuXFxuICAgIHJldHVybiBtYXRlcmlhbFBhcmFtcy5fZG91YmxlU2lkZWQ7XFxuXFxufVxcblxcbiNlbmRpZlxcblxcblwiO1xuXG52YXIgZmxfbWF0ZXJpYWxfaW5wdXRzX2ZyYWcgPSBcIi8vIERlY2lkZSBpZiB3ZSBjYW4gc2tpcCBsaWdodGluZyB3aGVuIGRvdChuLCBsKSA8PSAwLjBcXG5cXG4jaWYgZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKVxcblxcbiNpZiAhZGVmaW5lZChNQVRFUklBTF9IQVNfU1VCU1VSRkFDRV9DT0xPUilcXG5cXG4gICAgI2RlZmluZSBNQVRFUklBTF9DQU5fU0tJUF9MSUdIVElOR1xcblxcbiNlbmRpZlxcblxcbiNlbGlmIGRlZmluZWQoU0hBRElOR19NT0RFTF9TVUJTVVJGQUNFKVxcblxcbiAgICAvLyBDYW5ub3Qgc2tpcCBsaWdodGluZ1xcblxcbiNlbHNlXFxuXFxuICAgICNkZWZpbmUgTUFURVJJQUxfQ0FOX1NLSVBfTElHSFRJTkdcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG5zdHJ1Y3QgTWF0ZXJpYWxJbnB1dHMge1xcblxcbiAgICB2ZWM0ICBiYXNlQ29sb3I7XFxuXFxuI2lmICFkZWZpbmVkKFNIQURJTkdfTU9ERUxfVU5MSVQpXFxuXFxuI2lmICFkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1BFQ1VMQVJfR0xPU1NJTkVTUylcXG5cXG4gICAgZmxvYXQgcm91Z2huZXNzO1xcblxcbiNlbmRpZlxcblxcbiNpZiAhZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKSAmJiAhZGVmaW5lZChTSEFESU5HX01PREVMX1NQRUNVTEFSX0dMT1NTSU5FU1MpXFxuXFxuICAgIGZsb2F0IG1ldGFsbGljO1xcblxcbiAgICBmbG9hdCByZWZsZWN0YW5jZTtcXG5cXG4jZW5kaWZcXG5cXG4gICAgZmxvYXQgYW1iaWVudE9jY2x1c2lvbjtcXG5cXG4jZW5kaWZcXG5cXG4gICAgdmVjNCAgZW1pc3NpdmU7XFxuXFxuXFxuXFxuICAgIGZsb2F0IGNsZWFyQ29hdDtcXG5cXG4gICAgZmxvYXQgY2xlYXJDb2F0Um91Z2huZXNzO1xcblxcblxcblxcbiAgICBmbG9hdCBhbmlzb3Ryb3B5O1xcblxcbiAgICB2ZWMzICBhbmlzb3Ryb3B5RGlyZWN0aW9uO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1VCU1VSRkFDRSlcXG5cXG4gICAgZmxvYXQgdGhpY2tuZXNzO1xcblxcbiAgICBmbG9hdCBzdWJzdXJmYWNlUG93ZXI7XFxuXFxuICAgIHZlYzMgIHN1YnN1cmZhY2VDb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKVxcblxcbiAgICB2ZWMzICBzaGVlbkNvbG9yO1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19TVUJTVVJGQUNFX0NPTE9SKVxcblxcbiAgICB2ZWMzICBzdWJzdXJmYWNlQ29sb3I7XFxuXFxuI2VuZGlmXFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoU0hBRElOR19NT0RFTF9TUEVDVUxBUl9HTE9TU0lORVNTKVxcblxcbiAgICB2ZWMzICBzcGVjdWxhckNvbG9yO1xcblxcbiAgICBmbG9hdCBnbG9zc2luZXNzO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19OT1JNQUwpXFxuXFxuICAgIHZlYzMgIG5vcm1hbDtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVCkgJiYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwpXFxuXFxuICAgIHZlYzMgIGNsZWFyQ29hdE5vcm1hbDtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfUE9TVF9MSUdIVElOR19DT0xPUilcXG5cXG4gICAgdmVjNCAgcG9zdExpZ2h0aW5nQ29sb3I7XFxuXFxuI2VuZGlmXFxuXFxufTtcXG5cXG5cXG5cXG52b2lkIGluaXRNYXRlcmlhbChvdXQgTWF0ZXJpYWxJbnB1dHMgbWF0ZXJpYWwpIHtcXG5cXG4gICAgbWF0ZXJpYWwuYmFzZUNvbG9yID0gdmVjNCgxLjApO1xcblxcbiNpZiAhZGVmaW5lZChTSEFESU5HX01PREVMX1VOTElUKVxcblxcbiNpZiAhZGVmaW5lZChTSEFESU5HX01PREVMX1NQRUNVTEFSX0dMT1NTSU5FU1MpXFxuXFxuICAgIG1hdGVyaWFsLnJvdWdobmVzcyA9IDEuMDtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9DTE9USCkgJiYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9TUEVDVUxBUl9HTE9TU0lORVNTKVxcblxcbiAgICBtYXRlcmlhbC5tZXRhbGxpYyA9IDAuMDtcXG5cXG4gICAgbWF0ZXJpYWwucmVmbGVjdGFuY2UgPSAwLjU7XFxuXFxuI2VuZGlmXFxuXFxuICAgIG1hdGVyaWFsLmFtYmllbnRPY2NsdXNpb24gPSAxLjA7XFxuXFxuI2VuZGlmXFxuXFxuICAgIG1hdGVyaWFsLmVtaXNzaXZlID0gdmVjNCgwLjApO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUl9DT0FUKVxcblxcbiAgICBtYXRlcmlhbC5jbGVhckNvYXQgPSAxLjA7XFxuXFxuICAgIG1hdGVyaWFsLmNsZWFyQ29hdFJvdWdobmVzcyA9IDAuMDtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU5JU09UUk9QWSlcXG5cXG4gICAgbWF0ZXJpYWwuYW5pc290cm9weSA9IDAuMDtcXG5cXG4gICAgbWF0ZXJpYWwuYW5pc290cm9weURpcmVjdGlvbiA9IHZlYzMoMS4wLCAwLjAsIDAuMCk7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoU0hBRElOR19NT0RFTF9TVUJTVVJGQUNFKVxcblxcbiAgICBtYXRlcmlhbC50aGlja25lc3MgPSAwLjU7XFxuXFxuICAgIG1hdGVyaWFsLnN1YnN1cmZhY2VQb3dlciA9IDEyLjIzNDtcXG5cXG4gICAgbWF0ZXJpYWwuc3Vic3VyZmFjZUNvbG9yID0gdmVjMygxLjApO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfQ0xPVEgpXFxuXFxuICAgIG1hdGVyaWFsLnNoZWVuQ29sb3IgPSBzcXJ0KG1hdGVyaWFsLmJhc2VDb2xvci5yZ2IpO1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19TVUJTVVJGQUNFX0NPTE9SKVxcblxcbiAgICBtYXRlcmlhbC5zdWJzdXJmYWNlQ29sb3IgPSB2ZWMzKDAuMCk7XFxuXFxuI2VuZGlmXFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoU0hBRElOR19NT0RFTF9TUEVDVUxBUl9HTE9TU0lORVNTKVxcblxcbiAgICBtYXRlcmlhbC5nbG9zc2luZXNzID0gMC4wO1xcblxcbiAgICBtYXRlcmlhbC5zcGVjdWxhckNvbG9yID0gdmVjMygwLjApO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19OT1JNQUwpXFxuXFxuICAgIG1hdGVyaWFsLm5vcm1hbCA9IHZlYzMoMC4wLCAwLjAsIDEuMCk7XFxuXFxuI2VuZGlmXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVQpICYmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVRfTk9STUFMKVxcblxcbiAgICBtYXRlcmlhbC5jbGVhckNvYXROb3JtYWwgPSB2ZWMzKDAuMCwgMC4wLCAxLjApO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19QT1NUX0xJR0hUSU5HX0NPTE9SKVxcblxcbiAgICBtYXRlcmlhbC5wb3N0TGlnaHRpbmdDb2xvciA9IHZlYzQoMC4wKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXCI7XG5cbnZhciBmbF9jb21tb25fbWF0ZXJpYWxfZnJhZyA9IFwiI2lmIGRlZmluZWQoVEFSR0VUX01PQklMRSlcXG5cXG4gICAgLy8gbWluIHJvdWdobmVzcyBzdWNoIHRoYXQgKE1JTl9QRVJDRVBUVUFMX1JPVUdITkVTU140KSA+IDAgaW4gZnAxNiAoaS5lLiAyXigtMTQvNCksIHJvdW5kZWQgdXApXFxuXFxuICAgICNkZWZpbmUgTUlOX1BFUkNFUFRVQUxfUk9VR0hORVNTIDAuMDg5XFxuXFxuICAgICNkZWZpbmUgTUlOX1JPVUdITkVTUyAgICAgICAgICAgIDAuMDA3OTIxXFxuXFxuI2Vsc2VcXG5cXG4gICAgI2RlZmluZSBNSU5fUEVSQ0VQVFVBTF9ST1VHSE5FU1MgMC4wNDVcXG5cXG4gICAgI2RlZmluZSBNSU5fUk9VR0hORVNTICAgICAgICAgICAgMC4wMDIwMjVcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jZGVmaW5lIE1BWF9DTEVBUl9DT0FUX1BFUkNFUFRVQUxfUk9VR0hORVNTIDAuNlxcblxcblxcblxcbiNkZWZpbmUgTUlOX05fRE9UX1YgMWUtNFxcblxcblxcblxcbmZsb2F0IGNsYW1wTm9WKGZsb2F0IE5vVikge1xcblxcbiAgICAvLyBOZXViZWx0IGFuZCBQZXR0aW5lbyAyMDEzLCBcXFwiQ3JhZnRpbmcgYSBOZXh0LWdlbiBNYXRlcmlhbCBQaXBlbGluZSBmb3IgVGhlIE9yZGVyOiAxODg2XFxcIlxcblxcbiAgICByZXR1cm4gbWF4KGRvdChzaGFkaW5nX25vcm1hbCwgc2hhZGluZ192aWV3KSwgTUlOX05fRE9UX1YpO1xcblxcbn1cXG5cXG5cXG5cXG52ZWMzIGNvbXB1dGVEaWZmdXNlQ29sb3IoY29uc3QgdmVjNCBiYXNlQ29sb3IsIGZsb2F0IG1ldGFsbGljKSB7XFxuXFxuICAgIHJldHVybiBiYXNlQ29sb3IucmdiICogKDEuMCAtIG1ldGFsbGljKTtcXG5cXG59XFxuXFxuXFxuXFxudmVjMyBjb21wdXRlRjAoY29uc3QgdmVjNCBiYXNlQ29sb3IsIGZsb2F0IG1ldGFsbGljLCBmbG9hdCByZWZsZWN0YW5jZSkge1xcblxcbiAgICByZXR1cm4gYmFzZUNvbG9yLnJnYiAqIG1ldGFsbGljICsgKHJlZmxlY3RhbmNlICogKDEuMCAtIG1ldGFsbGljKSk7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IGNvbXB1dGVEaWVsZWN0cmljRjAoZmxvYXQgcmVmbGVjdGFuY2UpIHtcXG5cXG4gICAgcmV0dXJuIDAuMTYgKiByZWZsZWN0YW5jZSAqIHJlZmxlY3RhbmNlO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBjb21wdXRlTWV0YWxsaWNGcm9tU3BlY3VsYXJDb2xvcihjb25zdCB2ZWMzIHNwZWN1bGFyQ29sb3IpIHtcXG5cXG4gICAgcmV0dXJuIG1heDMoc3BlY3VsYXJDb2xvcik7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IGNvbXB1dGVSb3VnaG5lc3NGcm9tR2xvc3NpbmVzcyhmbG9hdCBnbG9zc2luZXNzKSB7XFxuXFxuICAgIHJldHVybiAxLjAgLSBnbG9zc2luZXNzO1xcblxcbn1cXG5cXG5cXG5cXG5mbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzVG9Sb3VnaG5lc3MoZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzcykge1xcblxcbiAgICByZXR1cm4gcGVyY2VwdHVhbFJvdWdobmVzcyAqIHBlcmNlcHR1YWxSb3VnaG5lc3M7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IHJvdWdobmVzc1RvUGVyY2VwdHVhbFJvdWdobmVzcyhmbG9hdCByb3VnaG5lc3MpIHtcXG5cXG4gICAgcmV0dXJuIHNxcnQocm91Z2huZXNzKTtcXG5cXG59XFxuXFxuXFxuXFxuZmxvYXQgaW9yVG9GMChmbG9hdCB0cmFuc21pdHRlZElvciwgZmxvYXQgaW5jaWRlbnRJb3IpIHtcXG5cXG4gICAgcmV0dXJuIHNxKCh0cmFuc21pdHRlZElvciAtIGluY2lkZW50SW9yKSAvICh0cmFuc21pdHRlZElvciArIGluY2lkZW50SW9yKSk7XFxuXFxufVxcblxcblxcblxcbmZsb2F0IGYwVG9Jb3IoZmxvYXQgZjApIHtcXG5cXG4gICAgZmxvYXQgciA9IHNxcnQoZjApO1xcblxcbiAgICByZXR1cm4gKDEuMCArIHIpIC8gKDEuMCAtIHIpO1xcblxcbn1cXG5cXG5cXG5cXG52ZWMzIGYwQ2xlYXJDb2F0VG9TdXJmYWNlKGNvbnN0IHZlYzMgZjApIHtcXG5cXG4gICAgLy8gQXBwcm94aW1hdGlvbiBvZiBpb3JUb2YwKGYwVG9Jb3IoZjApLCAxLjUpXFxuXFxuICAgIC8vIFRoaXMgYXNzdW1lcyB0aGF0IHRoZSBjbGVhciBjb2F0IGxheWVyIGhhcyBhbiBJT1Igb2YgMS41XFxuXFxuI2lmIGRlZmluZWQoVEFSR0VUX01PQklMRSlcXG5cXG4gICAgcmV0dXJuIHNhdHVyYXRlKGYwICogKGYwICogMC41MjY4NjggKyAwLjUyOTMyNCkgLSAwLjA0ODIyNTYpO1xcblxcbiNlbHNlXFxuXFxuICAgIHJldHVybiBzYXR1cmF0ZShmMCAqIChmMCAqICgwLjk0MTg5MiAtIDAuMjYzMDA4ICogZjApICsgMC4zNDY0NzkpIC0gMC4wMjg1OTk4KTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXCI7XG5cbnZhciBmbF9jb21tb25fbGlnaHRpbmdfZnJhZyA9IFwic3RydWN0IExpZ2h0IHtcXG5cXG4gICAgdmVjNCBjb2xvckludGVuc2l0eTsgIC8vIHJnYiwgcHJlLWV4cG9zZWQgaW50ZW5zaXR5XFxuXFxuICAgIHZlYzMgbDtcXG5cXG4gICAgZmxvYXQgYXR0ZW51YXRpb247XFxuXFxuICAgIGZsb2F0IE5vTDtcXG5cXG59O1xcblxcblxcblxcbnN0cnVjdCBQaXhlbFBhcmFtcyB7XFxuXFxuICAgIHZlYzMgIGRpZmZ1c2VDb2xvcjtcXG5cXG4gICAgZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzcztcXG5cXG4gICAgdmVjMyAgZjA7XFxuXFxuICAgIGZsb2F0IHJvdWdobmVzcztcXG5cXG4gICAgdmVjMyAgZGZnO1xcblxcbiAgICB2ZWMzICBlbmVyZ3lDb21wZW5zYXRpb247XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVQpXFxuXFxuICAgIGZsb2F0IGNsZWFyQ29hdDtcXG5cXG4gICAgZmxvYXQgY2xlYXJDb2F0UGVyY2VwdHVhbFJvdWdobmVzcztcXG5cXG4gICAgZmxvYXQgY2xlYXJDb2F0Um91Z2huZXNzO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTklTT1RST1BZKVxcblxcbiAgICB2ZWMzICBhbmlzb3Ryb3BpY1Q7XFxuXFxuICAgIHZlYzMgIGFuaXNvdHJvcGljQjtcXG5cXG4gICAgZmxvYXQgYW5pc290cm9weTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChTSEFESU5HX01PREVMX1NVQlNVUkZBQ0UpXFxuXFxuICAgIGZsb2F0IHRoaWNrbmVzcztcXG5cXG4gICAgdmVjMyAgc3Vic3VyZmFjZUNvbG9yO1xcblxcbiAgICBmbG9hdCBzdWJzdXJmYWNlUG93ZXI7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoU0hBRElOR19NT0RFTF9DTE9USCkgJiYgZGVmaW5lZChNQVRFUklBTF9IQVNfU1VCU1VSRkFDRV9DT0xPUilcXG5cXG4gICAgdmVjMyAgc3Vic3VyZmFjZUNvbG9yO1xcblxcbiNlbmRpZlxcblxcbn07XFxuXFxuXFxuXFxuZmxvYXQgY29tcHV0ZU1pY3JvU2hhZG93aW5nKGZsb2F0IE5vTCwgZmxvYXQgdmlzaWJpbGl0eSkge1xcblxcbiAgICAvLyBDaGFuIDIwMTgsIFxcXCJNYXRlcmlhbCBBZHZhbmNlcyBpbiBDYWxsIG9mIER1dHk6IFdXSUlcXFwiXFxuXFxuICAgIGZsb2F0IGFwZXJ0dXJlID0gaW52ZXJzZXNxcnQoMS4wIC0gdmlzaWJpbGl0eSk7XFxuXFxuICAgIGZsb2F0IG1pY3JvU2hhZG93ID0gc2F0dXJhdGUoTm9MICogYXBlcnR1cmUpO1xcblxcbiAgICByZXR1cm4gbWljcm9TaGFkb3cgKiBtaWNyb1NoYWRvdztcXG5cXG59XFxuXFxuXCI7XG5cbnZhciBmbF9tYXRlcmlhbF91bmlmb3Jtc19mcmFnID0gXCIvL21hcHRhbGtzZ2znmoRtYXRlcmlhbOWumuS5iVxcblxcbnVuaWZvcm0gc3RydWN0IE1hdGVyaWFsIHtcXG5cXG4gICAgLy9odHRwczovL2dpdGh1Yi5jb20vS2hyb25vc0dyb3VwL2dsVEYvYmxvYi9tYXN0ZXIvc3BlY2lmaWNhdGlvbi8yLjAvUkVBRE1FLm1kI3JlZmVyZW5jZS1wYnJtZXRhbGxpY3JvdWdobmVzc1xcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQkFTRUNPTE9SX01BUClcXG5cXG4gICAgICAgIHNhbXBsZXIyRCAgIGJhc2VDb2xvclRleHR1cmU7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgICB2ZWM0ICAgICAgICBiYXNlQ29sb3JGYWN0b3I7XFxuXFxuICAgICNlbmRpZlxcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfTUVUQUxMSUNST1VHSE5FU1NfTUFQKVxcblxcbiAgICAgICAgLy9HOiByb3VnaG5lc3MgQjogbWV0YWxsaWNcXG5cXG4gICAgICAgIHNhbXBsZXIyRCAgIG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZTtcXG5cXG4gICAgI2Vsc2VcXG5cXG4gICAgICAgICNpZiAhZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKSAmJiAhZGVmaW5lZChTSEFESU5HX01PREVMX1NVQlNVUkZBQ0UpXFxuXFxuICAgICAgICAgICAgZmxvYXQgICAgICAgbWV0YWxsaWNGYWN0b3I7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgIGZsb2F0ICAgICAgIHJvdWdobmVzc0ZhY3RvcjtcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgIC8vaHR0cHM6Ly9naXRodWIuY29tL0tocm9ub3NHcm91cC9nbFRGL2Jsb2IvbWFzdGVyL3NwZWNpZmljYXRpb24vMi4wL1JFQURNRS5tZCNvY2NsdXNpb250ZXh0dXJlaW5mb1xcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU1CSUVOVF9PQ0NMVVNJT04pXFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU9fTUFQKVxcblxcbiAgICAgICAgICAgIC8vIGRlZmF1bHQ6IDAuMFxcblxcbiAgICAgICAgICAgIHNhbXBsZXIyRCBvY2NsdXNpb25UZXh0dXJlO1xcblxcbiAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICBmbG9hdCBvY2NsdXNpb247XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgICAgICBmbG9hdCBvY2NsdXNpb25TdHJlbmd0aDtcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19FTUlTU0lWRSlcXG5cXG4gICAgICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19FTUlTU0lWRV9NQVApXFxuXFxuICAgICAgICAgICAgc2FtcGxlcjJEIGVtaXNzaXZlVGV4dHVyZTtcXG5cXG4gICAgICAgICNlbHNlXFxuXFxuICAgICAgICAgICAgZmxvYXQgZW1pc3NpdmVGYWN0b3I7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19QT1NUX0xJR0hUSU5HX0NPTE9SKVxcblxcbiAgICAgICAgLy8gZGVmYXVsdDogdmVjNCgwLjApXFxuXFxuICAgICAgICB2ZWM0IHBvc3RMaWdodGluZ0NvbG9yO1xcblxcbiAgICAjZW5kaWZcXG5cXG5cXG5cXG4gICAgI2lmICFkZWZpbmVkKFNIQURJTkdfTU9ERUxfQ0xPVEgpICYmICFkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1VCU1VSRkFDRSlcXG5cXG4gICAgICAgIC8vVE9ETyByZWZsZWN0YW5jZSDmmK/lkKbog73lgZrmiJDmnZDotKjvvJ9cXG5cXG4gICAgICAgIC8vIGRlZmF1bHQ6IDAuNSwgbm90IGF2YWlsYWJsZSB3aXRoIGNsb3RoXFxuXFxuICAgICAgICAgICAgZmxvYXQgcmVmbGVjdGFuY2U7XFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVClcXG5cXG4gICAgICAgICAgICAgICAgLy8gZGVmYXVsdDogMS4wLCDmmK/lkKbmmK9jbGVhckNvYXQsIDAgb3IgMVxcblxcbiAgICAgICAgICAgICAgICBmbG9hdCBjbGVhckNvYXQ7XFxuXFxuICAgICAgICAgICAgI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSQ09BVF9ST1VHTkVTU19NQVApXFxuXFxuICAgICAgICAgICAgICAgIHNhbXBsZXIyRCBjbGVhckNvYXRSb3VnaG5lc3NUZXh0dXJlO1xcblxcbiAgICAgICAgICAgICNlbHNlXFxuXFxuICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IDAuMFxcblxcbiAgICAgICAgICAgICAgICBmbG9hdCBjbGVhckNvYXRSb3VnaG5lc3M7XFxuXFxuICAgICAgICAgICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICAgICAgICAgI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVRfTk9STUFMKVxcblxcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0OiB2ZWMzKDAuMCwgMC4wLCAxLjApXFxuXFxuICAgICAgICAgICAgICAgIHNhbXBsZXIyRCBjbGVhckNvYXROb3JtYWxUZXh0dXJlO1xcblxcbiAgICAgICAgICAgICNlbmRpZlxcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU5JU09UUk9QWSlcXG5cXG4gICAgICAgICAgICAvLyBkZWZhdWx0OiAwLjBcXG5cXG4gICAgICAgICAgICBmbG9hdCBhbmlzb3Ryb3B5O1xcblxcbiAgICAgICAgICAgIC8vIGRlZmF1bHQ6IHZlYzMoMS4wLCAwLjAsIDAuMClcXG5cXG4gICAgICAgICAgICB2ZWMzIGFuaXNvdHJvcHlEaXJlY3Rpb247XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG5cXG5cXG4gICAgI2VsaWYgZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKVxcblxcbiAgICAgICAgdmVjMyBzaGVlbkNvbG9yO1xcblxcbiAgICAgICAgI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX1NVQlNVUkZBQ0VfQ09MT1IpXFxuXFxuICAgICAgICB2ZWMzIHN1YnN1cmZhY2VDb2xvcjtcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICAjZWxzZVxcblxcbiAgICAgICAgZmxvYXQgdGhpY2tuZXNzO1xcblxcbiAgICAgICAgZmxvYXQgc3Vic3VyZmFjZVBvd2VyO1xcblxcbiAgICAgICAgdmVjMyBzdWJzdXJmYWNlQ29sb3I7XFxuXFxuICAgICNlbmRpZlxcblxcblxcblxcbiAgICAvLyBub3QgYXZhaWxhYmxlIHdoZW4gdGhlIHNoYWRpbmcgbW9kZWwgaXMgdW5saXRcXG5cXG4gICAgLy8gbXVzdCBiZSBzZXQgYmVmb3JlIGNhbGxpbmcgcHJlcGFyZU1hdGVyaWFsKClcXG5cXG4gICAgI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX05PUk1BTClcXG5cXG4gICAgICAgIC8vIGRlZmF1bHQ6IHZlYzMoMC4wLCAwLjAsIDEuMClcXG5cXG4gICAgICAgIHNhbXBsZXIyRCBub3JtYWxUZXh0dXJlO1xcblxcbiAgICAjZW5kaWZcXG5cXG59IG1hdGVyaWFsO1xcblxcblxcblxcbnZlYzMgZ2FtbWFDb3JyZWN0SW5wdXQodmVjMyBjb2xvcikge1xcblxcbiAgICAjaWYgZGVmaW5lZChHQU1NQV9DT1JSRUNUX0lOUFVUKVxcblxcbiAgICAgICAgcmV0dXJuIHBvdyhjb2xvciwgdmVjMygyLjIpKTtcXG5cXG4gICAgI2Vsc2VcXG5cXG4gICAgICAgIHJldHVybiBjb2xvcjtcXG5cXG4gICAgI2VuZGlmXFxuXFxufVxcblxcblxcblxcbnZlYzQgZ2FtbWFDb3JyZWN0SW5wdXQodmVjNCBjb2xvcikge1xcblxcbiAgICAjaWYgZGVmaW5lZChHQU1NQV9DT1JSRUNUX0lOUFVUKVxcblxcbiAgICAgICAgcmV0dXJuIHZlYzQoZ2FtbWFDb3JyZWN0SW5wdXQoY29sb3IucmdiKSwgY29sb3IuYSk7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgICByZXR1cm4gY29sb3I7XFxuXFxuICAgICNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG52b2lkIGdldE1hdGVyaWFsKG91dCBNYXRlcmlhbElucHV0cyBtYXRlcmlhbElucHV0cykge1xcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQkFTRUNPTE9SX01BUClcXG5cXG4gICAgICAgIG1hdGVyaWFsSW5wdXRzLmJhc2VDb2xvciA9IGdhbW1hQ29ycmVjdElucHV0KHRleHR1cmUyRChtYXRlcmlhbC5iYXNlQ29sb3JUZXh0dXJlLCB2ZXJ0ZXhfdXYwMS54eSkpO1xcblxcbiAgICAjZWxzZVxcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMuYmFzZUNvbG9yID0gbWF0ZXJpYWwuYmFzZUNvbG9yRmFjdG9yO1xcblxcbiAgICAjZW5kaWZcXG5cXG5cXG5cXG4gICAgI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX01FVEFMTElDUk9VR0hORVNTX01BUClcXG5cXG4gICAgICAgIHZlYzIgcm91Z2huZXNzTWV0YWxsaWMgPSB0ZXh0dXJlMkQobWF0ZXJpYWwubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlLCB2ZXJ0ZXhfdXYwMS54eSkuZ2I7XFxuXFxuICAgICAgICBtYXRlcmlhbElucHV0cy5yb3VnaG5lc3MgPSByb3VnaG5lc3NNZXRhbGxpY1swXTtcXG5cXG4gICAgICAgICNpZiAhZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKSAmJiAhZGVmaW5lZChTSEFESU5HX01PREVMX1NVQlNVUkZBQ0UpXFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMubWV0YWxsaWMgPSByb3VnaG5lc3NNZXRhbGxpY1sxXTtcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICAjZWxzZVxcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMucm91Z2huZXNzID0gbWF0ZXJpYWwucm91Z2huZXNzRmFjdG9yO1xcblxcbiAgICAgICAgI2lmICFkZWZpbmVkKFNIQURJTkdfTU9ERUxfQ0xPVEgpICYmICFkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1VCU1VSRkFDRSlcXG5cXG4gICAgICAgICAgICBtYXRlcmlhbElucHV0cy5tZXRhbGxpYyA9IG1hdGVyaWFsLm1ldGFsbGljRmFjdG9yO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICNlbmRpZlxcblxcblxcblxcbiAgICAjaWYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9DTE9USCkgJiYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9TVUJTVVJGQUNFKVxcblxcbiAgICAgICAgLy9UT0RPIOWPr+iDvemcgOimgeS7jue6ueeQhuS4reivu+WPllxcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMucmVmbGVjdGFuY2UgPSBtYXRlcmlhbC5yZWZsZWN0YW5jZTtcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTUJJRU5UX09DQ0xVU0lPTilcXG5cXG4gICAgICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BT19NQVApXFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMuYW1iaWVudE9jY2x1c2lvbiA9IHRleHR1cmUyRChtYXRlcmlhbC5vY2NsdXNpb25UZXh0dXJlLCB2ZXJ0ZXhfdXYwMS54eSkucjtcXG5cXG4gICAgICAgICNlbHNlXFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMuYW1iaWVudE9jY2x1c2lvbiA9IG1hdGVyaWFsLm9jY2x1c2lvbjtcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMuYW1iaWVudE9jY2x1c2lvbiAqPSBtYXRlcmlhbC5vY2NsdXNpb25TdHJlbmd0aDtcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19FTUlTU0lWRSlcXG5cXG4gICAgICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19FTUlTU0lWRV9NQVApXFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMuZW1pc3NpdmUgPSBnYW1tYUNvcnJlY3RJbnB1dCh0ZXh0dXJlMkQobWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlLCB2ZXJ0ZXhfdXYwMS54eSkpO1xcblxcbiAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICBtYXRlcmlhbElucHV0cy5lbWlzc2l2ZSA9IG1hdGVyaWFsLmVtaXNzaXZlRmFjdG9yO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICNlbmRpZlxcblxcblxcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVClcXG5cXG4gICAgICAgIG1hdGVyaWFsSW5wdXRzLmNsZWFyQ29hdCA9IG1hdGVyaWFsLmNsZWFyQ29hdDtcXG5cXG4gICAgICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUkNPQVRfUk9VR05FU1NfTUFQKVxcblxcbiAgICAgICAgICAgIG1hdGVyaWFsSW5wdXRzLmNsZWFyQ29hdFJvdWdobmVzcyA9IHRleHR1cmUyRChtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3NUZXh0dXJlLCB2ZXJ0ZXhfdXYwMS54eSkuZztcXG5cXG4gICAgICAgICNlbHNlXFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMuY2xlYXJDb2F0Um91Z2huZXNzID0gbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwpXFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMuY2xlYXJDb2F0Tm9ybWFsID0gdGV4dHVyZTJEKG1hdGVyaWFsLmNsZWFyQ29hdE5vcm1hbFRleHR1cmUsIHZlcnRleF91djAxLnh5KS54eXogKiAyLjAgLSAxLjA7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTklTT1RST1BZKVxcblxcbiAgICAgICAgLy9hbmlzb3Ryb3B55Li6MeaXtu+8jGFuaXNvdHJvcGljTG9iZSDkuK0gYXTlkoxhYiDnu5PmnpzkuLox77yM5Lqn55SfYW5pc290cm9weeS4jeWGjeWPl3JvdWdobmVzc+W9seWTjeeahOeOsOixoe+8jOe7mOWItue7k+aenOS4jeespuWQiOebtOiniVxcblxcbiAgICAgICAgLy/kuZjku6UwLjk15ZCO77yM5pyA5aSn5YC85LiN5YaN5Li6Me+8jOWImeiDvemBv+WFjeatpOeOsOixoVxcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMuYW5pc290cm9weSA9IG1hdGVyaWFsLmFuaXNvdHJvcHkgKiAwLjk1O1xcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMuYW5pc290cm9weURpcmVjdGlvbiA9IG1hdGVyaWFsLmFuaXNvdHJvcHlEaXJlY3Rpb247XFxuXFxuICAgICNlbmRpZlxcblxcblxcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfTk9STUFMKVxcblxcbiAgICAgICAgbWF0ZXJpYWxJbnB1dHMubm9ybWFsID0gdGV4dHVyZTJEKG1hdGVyaWFsLm5vcm1hbFRleHR1cmUsIHZlcnRleF91djAxLnh5KS54eXogKiAyLjAgLSAxLjA7XFxuXFxuICAgICNlbmRpZlxcblxcblxcblxcbiAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfUE9TVF9MSUdIVElOR19DT0xPUilcXG5cXG4gICAgICAgIG1hdGVyaWFsSW5wdXRzLnBvc3RMaWdodGluZ0NvbG9yID0gbWF0ZXJpYWwucG9zdExpZ2h0aW5nQ29sb3I7XFxuXFxuICAgICNlbmRpZlxcblxcblxcblxcbiAgICAjaWYgZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKVxcblxcbiAgICAgICAgaWYgKG1hdGVyaWFsLnNoZWVuQ29sb3JbMF0gPj0gMC4wKSB7XFxuXFxuICAgICAgICAgICAgbWF0ZXJpYWxJbnB1dHMuc2hlZW5Db2xvciA9IG1hdGVyaWFsLnNoZWVuQ29sb3I7XFxuXFxuICAgICAgICB9XFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfU1VCU1VSRkFDRV9DT0xPUilcXG5cXG4gICAgICAgICAgICBtYXRlcmlhbElucHV0cy5zdWJzdXJmYWNlQ29sb3IgPSBtYXRlcmlhbC5zdWJzdXJmYWNlQ29sb3I7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1VCU1VSRkFDRSlcXG5cXG4gICAgICAgIG1hdGVyaWFsSW5wdXRzLnRoaWNrbmVzcyA9IG1hdGVyaWFsLnRoaWNrbmVzcztcXG5cXG4gICAgICAgIG1hdGVyaWFsSW5wdXRzLnN1YnN1cmZhY2VQb3dlciA9IG1hdGVyaWFsLnN1YnN1cmZhY2VQb3dlcjtcXG5cXG4gICAgICAgIG1hdGVyaWFsSW5wdXRzLnN1YnN1cmZhY2VDb2xvciA9IG1hdGVyaWFsLnN1YnN1cmZhY2VDb2xvcjtcXG5cXG4gICAgI2VuZGlmXFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfbGlnaHRfdW5pZm9ybXNfZnJhZyA9IFwiLy9kZmdNYXBcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCBsaWdodF9pYmxERkc7XFxuXFxuLy9wcmVmaWx0ZXJNYXBcXG5cXG51bmlmb3JtIHNhbXBsZXJDdWJlIGxpZ2h0X2libFNwZWN1bGFyO1xcblxcblwiO1xuXG52YXIgZmxfbGlnaHRfaW5kaXJlY3QgPSBcIi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gSW1hZ2UgYmFzZWQgbGlnaHRpbmcgY29uZmlndXJhdGlvblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuI2lmbmRlZiBUQVJHRVRfTU9CSUxFXFxuXFxuI2RlZmluZSBJQkxfT0ZGX1NQRUNVTEFSX1BFQUtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4vLyBOdW1iZXIgb2Ygc3BoZXJpY2FsIGhhcm1vbmljcyBiYW5kcyAoMSwgMiBvciAzKVxcblxcbiNpZiBkZWZpbmVkKFRBUkdFVF9NT0JJTEUpXFxuXFxuI2RlZmluZSBTUEhFUklDQUxfSEFSTU9OSUNTX0JBTkRTICAgICAgICAgICAyXFxuXFxuI2Vsc2VcXG5cXG4jZGVmaW5lIFNQSEVSSUNBTF9IQVJNT05JQ1NfQkFORFMgICAgICAgICAgIDNcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4vLyBJQkwgaW50ZWdyYXRpb24gYWxnb3JpdGhtXFxuXFxuI2RlZmluZSBJQkxfSU5URUdSQVRJT05fUFJFRklMVEVSRURfQ1VCRU1BUCAgICAgICAgIDBcXG5cXG4jZGVmaW5lIElCTF9JTlRFR1JBVElPTl9JTVBPUlRBTkNFX1NBTVBMSU5HICAgICAgICAgMVxcblxcblxcblxcbiNkZWZpbmUgSUJMX0lOVEVHUkFUSU9OICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJQkxfSU5URUdSQVRJT05fUFJFRklMVEVSRURfQ1VCRU1BUFxcblxcblxcblxcbiNkZWZpbmUgSUJMX0lOVEVHUkFUSU9OX0lNUE9SVEFOQ0VfU0FNUExJTkdfQ09VTlQgICA2NFxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gSUJMIHV0aWxpdGllc1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxudmVjMyBkZWNvZGVEYXRhRm9ySUJMKGNvbnN0IHZlYzQgZGF0YSkge1xcblxcbiAgICByZXR1cm4gZGF0YS5yZ2I7XFxuXFxufVxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gSUJMIHByZWZpbHRlcmVkIERGRyB0ZXJtIGltcGxlbWVudGF0aW9uc1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxudmVjMyBQcmVmaWx0ZXJlZERGR19MVVQoZmxvYXQgbG9kLCBmbG9hdCBOb1YpIHtcXG5cXG4gICAgLy8gY29vcmQgPSBzcXJ0KGxpbmVhcl9yb3VnaG5lc3MpLCB3aGljaCBpcyB0aGUgbWFwcGluZyB1c2VkIGJ5IGNtZ2VuLlxcblxcbiAgICByZXR1cm4gdGV4dHVyZUxvZChsaWdodF9pYmxERkcsIHZlYzIoTm9WLCBsb2QpLCAwLjApLnJnYjtcXG5cXG59XFxuXFxuXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBJQkwgZW52aXJvbm1lbnQgQlJERiBkaXNwYXRjaFxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxudmVjMyBwcmVmaWx0ZXJlZERGRyhmbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzLCBmbG9hdCBOb1YpIHtcXG5cXG4gICAgLy8gUHJlZmlsdGVyZWRERkdfTFVUKCkgdGFrZXMgYSBMT0QsIHdoaWNoIGlzIHNxcnQocm91Z2huZXNzKSA9IHBlcmNlcHR1YWxSb3VnaG5lc3NcXG5cXG4gICAgcmV0dXJuIFByZWZpbHRlcmVkREZHX0xVVChwZXJjZXB0dWFsUm91Z2huZXNzLCBOb1YpO1xcblxcbn1cXG5cXG5cXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIElCTCBpcnJhZGlhbmNlIGltcGxlbWVudGF0aW9uc1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuLy8gdmVjMyBJcnJhZGlhbmNlX1NwaGVyaWNhbEhhcm1vbmljcyhjb25zdCB2ZWMzIG4pIHtcXG5cXG4vLyAgICAgcmV0dXJuIG1heChcXG5cXG4vLyAgICAgICAgICAgZnJhbWVVbmlmb3Jtcy5pYmxTSFswXVxcblxcbi8vICNpZiBTUEhFUklDQUxfSEFSTU9OSUNTX0JBTkRTID49IDJcXG5cXG4vLyAgICAgICAgICsgZnJhbWVVbmlmb3Jtcy5pYmxTSFsxXSAqIChuLnkpXFxuXFxuLy8gICAgICAgICArIGZyYW1lVW5pZm9ybXMuaWJsU0hbMl0gKiAobi56KVxcblxcbi8vICAgICAgICAgKyBmcmFtZVVuaWZvcm1zLmlibFNIWzNdICogKG4ueClcXG5cXG4vLyAjZW5kaWZcXG5cXG4vLyAjaWYgU1BIRVJJQ0FMX0hBUk1PTklDU19CQU5EUyA+PSAzXFxuXFxuLy8gICAgICAgICArIGZyYW1lVW5pZm9ybXMuaWJsU0hbNF0gKiAobi55ICogbi54KVxcblxcbi8vICAgICAgICAgKyBmcmFtZVVuaWZvcm1zLmlibFNIWzVdICogKG4ueSAqIG4ueilcXG5cXG4vLyAgICAgICAgICsgZnJhbWVVbmlmb3Jtcy5pYmxTSFs2XSAqICgzLjAgKiBuLnogKiBuLnogLSAxLjApXFxuXFxuLy8gICAgICAgICArIGZyYW1lVW5pZm9ybXMuaWJsU0hbN10gKiAobi56ICogbi54KVxcblxcbi8vICAgICAgICAgKyBmcmFtZVVuaWZvcm1zLmlibFNIWzhdICogKG4ueCAqIG4ueCAtIG4ueSAqIG4ueSlcXG5cXG4vLyAjZW5kaWZcXG5cXG4vLyAgICAgICAgICwgMC4wKTtcXG5cXG4vLyB9XFxuXFxuXFxuXFxudmVjMyBzaChjb25zdCB2ZWMzIHNwaFs5XSwgY29uc3QgaW4gdmVjMyBub3JtYWwpIHtcXG5cXG4gIGZsb2F0IHggPSBub3JtYWwueDtcXG5cXG4gIGZsb2F0IHkgPSBub3JtYWwueTtcXG5cXG4gIGZsb2F0IHogPSBub3JtYWwuejtcXG5cXG5cXG5cXG4gIHZlYzMgcmVzdWx0ID0gKFxcblxcbiAgICBzcGhbMF0gK1xcblxcblxcblxcbiAgICBzcGhbMV0gKiB4ICtcXG5cXG4gICAgc3BoWzJdICogeSArXFxuXFxuICAgIHNwaFszXSAqIHogK1xcblxcblxcblxcbiAgICBzcGhbNF0gKiB6ICogeCArXFxuXFxuICAgIHNwaFs1XSAqIHkgKiB6ICtcXG5cXG4gICAgc3BoWzZdICogeSAqIHggK1xcblxcbiAgICBzcGhbN10gKiAoMy4wICogeiAqIHogLSAxLjApICtcXG5cXG4gICAgc3BoWzhdICogKHgqeCAtIHkqeSlcXG5cXG4gICk7XFxuXFxuXFxuXFxuICByZXR1cm4gbWF4KHJlc3VsdCwgdmVjMygwLjApKTtcXG5cXG59XFxuXFxuXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBJQkwgaXJyYWRpYW5jZSBkaXNwYXRjaFxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxudmVjMyBkaWZmdXNlSXJyYWRpYW5jZShjb25zdCB2ZWMzIG4pIHtcXG5cXG4gICAgLy8gcmV0dXJuIElycmFkaWFuY2VfU3BoZXJpY2FsSGFybW9uaWNzKG4pO1xcblxcbiAgICByZXR1cm4gc2goZnJhbWVVbmlmb3Jtcy5pYmxTSCwgbik7XFxuXFxufVxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gSUJMIHNwZWN1bGFyXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG52ZWMzIHByZWZpbHRlcmVkUmFkaWFuY2UoY29uc3QgdmVjMyByLCBmbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzKSB7XFxuXFxuICAgIC8vIGxvZCA9IGxvZF9jb3VudCAqIHNxcnQocm91Z2huZXNzKSwgd2hpY2ggaXMgdGhlIG1hcHBpbmcgdXNlZCBieSBjbWdlblxcblxcbiAgICAvLyB3aGVyZSByb3VnaG5lc3MgPSBwZXJjZXB0dWFsUm91Z2huZXNzXjJcXG5cXG4gICAgLy8gdXNpbmcgYWxsIHRoZSBtaXAgbGV2ZWxzIHJlcXVpcmVzIHNlYW1sZXNzIGN1YmVtYXAgc2FtcGxpbmdcXG5cXG4gICAgZmxvYXQgbG9kID0gZnJhbWVVbmlmb3Jtcy5pYmxNYXhNaXBMZXZlbC54ICogcGVyY2VwdHVhbFJvdWdobmVzcztcXG5cXG4gICAgcmV0dXJuIGRlY29kZURhdGFGb3JJQkwodGV4dHVyZUxvZChsaWdodF9pYmxTcGVjdWxhciwgciwgbG9kKSk7XFxuXFxufVxcblxcblxcblxcbnZlYzMgcHJlZmlsdGVyZWRSYWRpYW5jZShjb25zdCB2ZWMzIHIsIGZsb2F0IHJvdWdobmVzcywgZmxvYXQgb2Zmc2V0KSB7XFxuXFxuICAgIGZsb2F0IGxvZCA9IGZyYW1lVW5pZm9ybXMuaWJsTWF4TWlwTGV2ZWwueCAqIHJvdWdobmVzcztcXG5cXG4gICAgcmV0dXJuIGRlY29kZURhdGFGb3JJQkwodGV4dHVyZUxvZChsaWdodF9pYmxTcGVjdWxhciwgciwgbG9kICsgb2Zmc2V0KSk7XFxuXFxufVxcblxcblxcblxcbnZlYzMgZ2V0U3BlY3VsYXJEb21pbmFudERpcmVjdGlvbih2ZWMzIG4sIHZlYzMgciwgZmxvYXQgcm91Z2huZXNzKSB7XFxuXFxuI2lmIGRlZmluZWQoSUJMX09GRl9TUEVDVUxBUl9QRUFLKVxcblxcbiAgICBmbG9hdCBzID0gMS4wIC0gcm91Z2huZXNzO1xcblxcbiAgICByZXR1cm4gbWl4KG4sIHIsIHMgKiAoc3FydChzKSArIHJvdWdobmVzcykpO1xcblxcbiNlbHNlXFxuXFxuICAgIHJldHVybiByO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG52ZWMzIHNwZWN1bGFyREZHKGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsKSB7XFxuXFxuI2lmIGRlZmluZWQoU0hBRElOR19NT0RFTF9DTE9USClcXG5cXG4gICAgcmV0dXJuIHBpeGVsLmYwICogcGl4ZWwuZGZnLno7XFxuXFxuI2VsaWYgIWRlZmluZWQoVVNFX01VTFRJUExFX1NDQVRURVJJTkdfQ09NUEVOU0FUSU9OKVxcblxcbiAgICByZXR1cm4gcGl4ZWwuZjAgKiBwaXhlbC5kZmcueCArIHBpeGVsLmRmZy55O1xcblxcbiNlbHNlXFxuXFxuICAgIHJldHVybiBtaXgocGl4ZWwuZGZnLnh4eCwgcGl4ZWwuZGZnLnl5eSwgcGl4ZWwuZjApO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG5cXG5cXG52ZWMzIGdldFJlZmxlY3RlZFZlY3Rvcihjb25zdCBQaXhlbFBhcmFtcyBwaXhlbCwgY29uc3QgdmVjMyB2LCBjb25zdCB2ZWMzIG4pIHtcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU5JU09UUk9QWSlcXG5cXG4gICAgdmVjMyAgYW5pc290cm9weURpcmVjdGlvbiA9IHBpeGVsLmFuaXNvdHJvcHkgPj0gMC4wID8gcGl4ZWwuYW5pc290cm9waWNCIDogcGl4ZWwuYW5pc290cm9waWNUO1xcblxcbiAgICB2ZWMzICBhbmlzb3Ryb3BpY1RhbmdlbnQgID0gY3Jvc3MoYW5pc290cm9weURpcmVjdGlvbiwgdik7XFxuXFxuICAgIHZlYzMgIGFuaXNvdHJvcGljTm9ybWFsICAgPSBjcm9zcyhhbmlzb3Ryb3BpY1RhbmdlbnQsIGFuaXNvdHJvcHlEaXJlY3Rpb24pO1xcblxcbiAgICBmbG9hdCBiZW5kRmFjdG9yICAgICAgICAgID0gYWJzKHBpeGVsLmFuaXNvdHJvcHkpICogc2F0dXJhdGUoNS4wICogcGl4ZWwucGVyY2VwdHVhbFJvdWdobmVzcyk7XFxuXFxuICAgIHZlYzMgIGJlbnROb3JtYWwgICAgICAgICAgPSBub3JtYWxpemUobWl4KG4sIGFuaXNvdHJvcGljTm9ybWFsLCBiZW5kRmFjdG9yKSk7XFxuXFxuXFxuXFxuICAgIHZlYzMgciA9IHJlZmxlY3QoLXYsIGJlbnROb3JtYWwpO1xcblxcbiNlbHNlXFxuXFxuICAgIHZlYzMgciA9IHJlZmxlY3QoLXYsIG4pO1xcblxcbiNlbmRpZlxcblxcbiAgICByZXR1cm4gcjtcXG5cXG59XFxuXFxuXFxuXFxudmVjMyBnZXRSZWZsZWN0ZWRWZWN0b3IoY29uc3QgUGl4ZWxQYXJhbXMgcGl4ZWwsIGNvbnN0IHZlYzMgbikge1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTklTT1RST1BZKVxcblxcbiAgICB2ZWMzIHIgPSBnZXRSZWZsZWN0ZWRWZWN0b3IocGl4ZWwsIHNoYWRpbmdfdmlldywgbik7XFxuXFxuI2Vsc2VcXG5cXG4gICAgdmVjMyByID0gc2hhZGluZ19yZWZsZWN0ZWQ7XFxuXFxuI2VuZGlmXFxuXFxuICAgIHJldHVybiBnZXRTcGVjdWxhckRvbWluYW50RGlyZWN0aW9uKG4sIHIsIHBpeGVsLnJvdWdobmVzcyk7XFxuXFxufVxcblxcblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuLy8gUHJlZmlsdGVyZWQgaW1wb3J0YW5jZSBzYW1wbGluZ1xcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuI2lmIElCTF9JTlRFR1JBVElPTiA9PSBJQkxfSU5URUdSQVRJT05fSU1QT1JUQU5DRV9TQU1QTElOR1xcblxcbnZlYzIgaGFtbWVyc2xleSh1aW50IGluZGV4KSB7XFxuXFxuICAgIC8vIENvbXB1dGUgSGFtbWVyc2xleSBzZXF1ZW5jZVxcblxcbiAgICAvLyBUT0RPOiB0aGVzZSBzaG91bGQgY29tZSBmcm9tIHVuaWZvcm1zXFxuXFxuICAgIC8vIFRPRE86IHdlIHNob3VsZCBkbyB0aGlzIHdpdGggbG9naWNhbCBiaXQgb3BlcmF0aW9uc1xcblxcbiAgICBjb25zdCB1aW50IG51bVNhbXBsZXMgPSB1aW50KElCTF9JTlRFR1JBVElPTl9JTVBPUlRBTkNFX1NBTVBMSU5HX0NPVU5UKTtcXG5cXG4gICAgY29uc3QgdWludCBudW1TYW1wbGVCaXRzID0gdWludChsb2cyKGZsb2F0KG51bVNhbXBsZXMpKSk7XFxuXFxuICAgIGNvbnN0IGZsb2F0IGludk51bVNhbXBsZXMgPSAxLjAgLyBmbG9hdChudW1TYW1wbGVzKTtcXG5cXG4gICAgdWludCBpID0gdWludChpbmRleCk7XFxuXFxuICAgIHVpbnQgdCA9IGk7XFxuXFxuICAgIHVpbnQgYml0cyA9IDB1O1xcblxcbiAgICBmb3IgKHVpbnQgaiA9IDB1OyBqIDwgbnVtU2FtcGxlQml0czsgaisrKSB7XFxuXFxuICAgICAgICBiaXRzID0gYml0cyAqIDJ1ICsgKHQgLSAoMnUgKiAodCAvIDJ1KSkpO1xcblxcbiAgICAgICAgdCAvPSAydTtcXG5cXG4gICAgfVxcblxcbiAgICByZXR1cm4gdmVjMihmbG9hdChpKSwgZmxvYXQoYml0cykpICogaW52TnVtU2FtcGxlcztcXG5cXG59XFxuXFxuXFxuXFxudmVjMyBpbXBvcnRhbmNlU2FtcGxpbmdOZGZEZ2d4KHZlYzIgdSwgZmxvYXQgcm91Z2huZXNzKSB7XFxuXFxuICAgIC8vIEltcG9ydGFuY2Ugc2FtcGxpbmcgRF9HR1hcXG5cXG4gICAgZmxvYXQgYTIgPSByb3VnaG5lc3MgKiByb3VnaG5lc3M7XFxuXFxuICAgIGZsb2F0IHBoaSA9IDIuMCAqIFBJICogdS54O1xcblxcbiAgICBmbG9hdCBjb3NUaGV0YTIgPSAoMS4wIC0gdS55KSAvICgxLjAgKyAoYTIgLSAxLjApICogdS55KTtcXG5cXG4gICAgZmxvYXQgY29zVGhldGEgPSBzcXJ0KGNvc1RoZXRhMik7XFxuXFxuICAgIGZsb2F0IHNpblRoZXRhID0gc3FydCgxLjAgLSBjb3NUaGV0YTIpO1xcblxcbiAgICByZXR1cm4gdmVjMyhjb3MocGhpKSAqIHNpblRoZXRhLCBzaW4ocGhpKSAqIHNpblRoZXRhLCBjb3NUaGV0YSk7XFxuXFxufVxcblxcblxcblxcbnZlYzMgaW1wb3J0YW5jZVNhbXBsaW5nVk5kZkRnZ3godmVjMiB1LCBmbG9hdCByb3VnaG5lc3MsIHZlYzMgdikge1xcblxcbiAgICAvLyBTZWU6IFxcXCJBIFNpbXBsZXIgYW5kIEV4YWN0IFNhbXBsaW5nIFJvdXRpbmUgZm9yIHRoZSBHR1ggRGlzdHJpYnV0aW9uIG9mIFZpc2libGUgTm9ybWFsc1xcXCIsIEVyaWMgSGVpdHpcXG5cXG4gICAgZmxvYXQgYWxwaGEgPSByb3VnaG5lc3M7XFxuXFxuXFxuXFxuICAgIC8vIHN0cmV0Y2ggdmlld1xcblxcbiAgICB2ID0gbm9ybWFsaXplKHZlYzMoYWxwaGEgKiB2LngsIGFscGhhICogdi55LCB2LnopKTtcXG5cXG5cXG5cXG4gICAgLy8gb3J0aG9ub3JtYWwgYmFzaXNcXG5cXG4gICAgdmVjMyB1cCA9IGFicyh2LnopIDwgMC45OTk5ID8gdmVjMygwLjAsIDAuMCwgMS4wKSA6IHZlYzMoMS4wLCAwLjAsIDAuMCk7XFxuXFxuICAgIHZlYzMgdCA9IG5vcm1hbGl6ZShjcm9zcyh1cCwgdikpO1xcblxcbiAgICB2ZWMzIGIgPSBjcm9zcyh0LCB2KTtcXG5cXG5cXG5cXG4gICAgLy8gc2FtcGxlIHBvaW50IHdpdGggcG9sYXIgY29vcmRpbmF0ZXMgKHIsIHBoaSlcXG5cXG4gICAgZmxvYXQgYSA9IDEuMCAvICgxLjAgKyB2LnopO1xcblxcbiAgICBmbG9hdCByID0gc3FydCh1LngpO1xcblxcbiAgICBmbG9hdCBwaGkgPSAodS55IDwgYSkgPyB1LnkgLyBhICogUEkgOiBQSSArICh1LnkgLSBhKSAvICgxLjAgLSBhKSAqIFBJO1xcblxcbiAgICBmbG9hdCBwMSA9IHIgKiBjb3MocGhpKTtcXG5cXG4gICAgZmxvYXQgcDIgPSByICogc2luKHBoaSkgKiAoKHUueSA8IGEpID8gMS4wIDogdi56KTtcXG5cXG5cXG5cXG4gICAgLy8gY29tcHV0ZSBub3JtYWxcXG5cXG4gICAgdmVjMyBoID0gcDEgKiB0ICsgcDIgKiBiICsgc3FydChtYXgoMC4wLCAxLjAgLSBwMSpwMSAtIHAyKnAyKSkgKiB2O1xcblxcblxcblxcbiAgICAvLyB1bnN0cmV0Y2hcXG5cXG4gICAgaCA9IG5vcm1hbGl6ZSh2ZWMzKGFscGhhICogaC54LCBhbHBoYSAqIGgueSwgbWF4KDAuMCwgaC56KSkpO1xcblxcbiAgICByZXR1cm4gaDtcXG5cXG59XFxuXFxuXFxuXFxuZmxvYXQgcHJlZmlsdGVyZWRJbXBvcnRhbmNlU2FtcGxpbmcoZmxvYXQgaXBkZiwgdmVjMiBpYmxNYXhNaXBMZXZlbCkge1xcblxcbiAgICAvLyBTZWU6IFxcXCJSZWFsLXRpbWUgU2hhZGluZyB3aXRoIEZpbHRlcmVkIEltcG9ydGFuY2UgU2FtcGxpbmdcXFwiLCBKYXJvc2xhdiBLcml2YW5la1xcblxcbiAgICAvLyBQcmVmaWx0ZXJpbmcgZG9lc24ndCB3b3JrIHdpdGggYW5pc290cm9weVxcblxcbiAgICBjb25zdCBmbG9hdCBudW1TYW1wbGVzID0gZmxvYXQoSUJMX0lOVEVHUkFUSU9OX0lNUE9SVEFOQ0VfU0FNUExJTkdfQ09VTlQpO1xcblxcbiAgICBjb25zdCBmbG9hdCBpbnZOdW1TYW1wbGVzID0gMS4wIC8gZmxvYXQobnVtU2FtcGxlcyk7XFxuXFxuICAgIGNvbnN0IGZsb2F0IGRpbSA9IGlibE1heE1pcExldmVsLnk7XFxuXFxuICAgIGNvbnN0IGZsb2F0IG9tZWdhUCA9ICg0LjAgKiBQSSkgLyAoNi4wICogZGltICogZGltKTtcXG5cXG4gICAgY29uc3QgZmxvYXQgaW52T21lZ2FQID0gMS4wIC8gb21lZ2FQO1xcblxcbiAgICBjb25zdCBmbG9hdCBLID0gNC4wO1xcblxcbiAgICBmbG9hdCBvbWVnYVMgPSBpbnZOdW1TYW1wbGVzICogaXBkZjtcXG5cXG4gICAgZmxvYXQgbWlwTGV2ZWwgPSBjbGFtcChsb2cyKEsgKiBvbWVnYVMgKiBpbnZPbWVnYVApICogMC41LCAwLjAsIGlibE1heE1pcExldmVsLngpO1xcblxcbiAgICByZXR1cm4gbWlwTGV2ZWw7XFxuXFxufVxcblxcblxcblxcbnZlYzMgaXNFdmFsdWF0ZUlCTChjb25zdCBQaXhlbFBhcmFtcyBwaXhlbCwgdmVjMyBuLCB2ZWMzIHYsIGZsb2F0IE5vVikge1xcblxcbiAgICAvLyBUT0RPOiBmb3IgYSB0cnVlIGFuaXNvdHJvcGljIEJSREYsIHdlIG5lZWQgYSByZWFsIHRhbmdlbnQgc3BhY2VcXG5cXG4gICAgdmVjMyB1cCA9IGFicyhuLnopIDwgMC45OTk5ID8gdmVjMygwLjAsIDAuMCwgMS4wKSA6IHZlYzMoMS4wLCAwLjAsIDAuMCk7XFxuXFxuXFxuXFxuICAgIG1hdDMgdGFuZ2VudFRvV29ybGQ7XFxuXFxuICAgIHRhbmdlbnRUb1dvcmxkWzBdID0gbm9ybWFsaXplKGNyb3NzKHVwLCBuKSk7XFxuXFxuICAgIHRhbmdlbnRUb1dvcmxkWzFdID0gY3Jvc3MobiwgdGFuZ2VudFRvV29ybGRbMF0pO1xcblxcbiAgICB0YW5nZW50VG9Xb3JsZFsyXSA9IG47XFxuXFxuXFxuXFxuICAgIGZsb2F0IHJvdWdobmVzcyA9IHBpeGVsLnJvdWdobmVzcztcXG5cXG4gICAgZmxvYXQgYTIgPSByb3VnaG5lc3MgKiByb3VnaG5lc3M7XFxuXFxuXFxuXFxuICAgIHZlYzIgaWJsTWF4TWlwTGV2ZWwgPSBmcmFtZVVuaWZvcm1zLmlibE1heE1pcExldmVsO1xcblxcbiAgICBjb25zdCB1aW50IG51bVNhbXBsZXMgPSB1aW50KElCTF9JTlRFR1JBVElPTl9JTVBPUlRBTkNFX1NBTVBMSU5HX0NPVU5UKTtcXG5cXG4gICAgY29uc3QgZmxvYXQgaW52TnVtU2FtcGxlcyA9IDEuMCAvIGZsb2F0KG51bVNhbXBsZXMpO1xcblxcblxcblxcbiAgICB2ZWMzIGluZGlyZWN0U3BlY3VsYXIgPSB2ZWMzKDAuMCk7XFxuXFxuICAgIGZvciAodWludCBpID0gMHU7IGkgPCBudW1TYW1wbGVzOyBpKyspIHtcXG5cXG4gICAgICAgIHZlYzIgdSA9IGhhbW1lcnNsZXkoaSk7XFxuXFxuICAgICAgICB2ZWMzIGggPSB0YW5nZW50VG9Xb3JsZCAqIGltcG9ydGFuY2VTYW1wbGluZ05kZkRnZ3godSwgcm91Z2huZXNzKTtcXG5cXG5cXG5cXG4gICAgICAgIC8vIFNpbmNlIGFuaXNvdHJvcHkgZG9lc24ndCB3b3JrIHdpdGggcHJlZmlsdGVyaW5nLCB3ZSB1c2UgdGhlIHNhbWUgXFxcImZhdXhcXFwiIGFuaXNvdHJvcHlcXG5cXG4gICAgICAgIC8vIHdlIGRvIHdoZW4gd2UgdXNlIHRoZSBwcmVmaWx0ZXJlZCBjdWJlbWFwXFxuXFxuICAgICAgICB2ZWMzIGwgPSBnZXRSZWZsZWN0ZWRWZWN0b3IocGl4ZWwsIHYsIGgpO1xcblxcblxcblxcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGlzIHNhbXBsZSdzIGNvbnRyaWJ1dGlvbiB0byB0aGUgYnJkZlxcblxcbiAgICAgICAgZmxvYXQgTm9MID0gZG90KG4sIGwpO1xcblxcbiAgICAgICAgaWYgKE5vTCA+IDAuMCkge1xcblxcbiAgICAgICAgICAgIGZsb2F0IE5vSCA9IGRvdChuLCBoKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBMb0ggPSBtYXgoZG90KGwsIGgpLCAwLjApO1xcblxcblxcblxcbiAgICAgICAgICAgIC8vIFBERiBpbnZlcnNlICh3ZSBtdXN0IHVzZSBEX0dHWCgpIGhlcmUsIHdoaWNoIGlzIHVzZWQgdG8gZ2VuZXJhdGUgc2FtcGxlcylcXG5cXG4gICAgICAgICAgICBmbG9hdCBpcGRmID0gKDQuMCAqIExvSCkgLyAoRF9HR1gocm91Z2huZXNzLCBOb0gsIGgpICogTm9IKTtcXG5cXG5cXG5cXG4gICAgICAgICAgICBmbG9hdCBtaXBMZXZlbCA9IHByZWZpbHRlcmVkSW1wb3J0YW5jZVNhbXBsaW5nKGlwZGYsIGlibE1heE1pcExldmVsKTtcXG5cXG5cXG5cXG4gICAgICAgICAgICAvLyB3ZSB1c2UgdGV4dHVyZSgpIGluc3RlYWQgb2YgdGV4dHVyZUxvZCgpIHRvIHRha2UgYWR2YW50YWdlIG9mIG1pcG1hcHBpbmdcXG5cXG4gICAgICAgICAgICB2ZWMzIEwgPSBkZWNvZGVEYXRhRm9ySUJMKHRleHR1cmUobGlnaHRfaWJsU3BlY3VsYXIsIGwsIG1pcExldmVsKSk7XFxuXFxuXFxuXFxuICAgICAgICAgICAgZmxvYXQgRCA9IGRpc3RyaWJ1dGlvbihyb3VnaG5lc3MsIE5vSCwgaCk7XFxuXFxuICAgICAgICAgICAgZmxvYXQgViA9IHZpc2liaWxpdHkocm91Z2huZXNzLCBOb1YsIE5vTCwgTG9IKTtcXG5cXG4gICAgICAgICAgICB2ZWMzICBGID0gZnJlc25lbChwaXhlbC5mMCwgTG9IKTtcXG5cXG4gICAgICAgICAgICB2ZWMzIEZyID0gRiAqIChEICogViAqIE5vTCAqIGlwZGYgKiBpbnZOdW1TYW1wbGVzKTtcXG5cXG5cXG5cXG4gICAgICAgICAgICBpbmRpcmVjdFNwZWN1bGFyICs9IChGciAqIEwpO1xcblxcbiAgICAgICAgfVxcblxcbiAgICB9XFxuXFxuXFxuXFxuICAgIHJldHVybiBpbmRpcmVjdFNwZWN1bGFyO1xcblxcbn1cXG5cXG5cXG5cXG52b2lkIGlzRXZhbHVhdGVDbGVhckNvYXRJQkwoY29uc3QgUGl4ZWxQYXJhbXMgcGl4ZWwsIGZsb2F0IHNwZWN1bGFyQU8sIGlub3V0IHZlYzMgRmQsIGlub3V0IHZlYzMgRnIpIHtcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVClcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfTk9STUFMKSB8fCBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUl9DT0FUX05PUk1BTClcXG5cXG4gICAgLy8gV2Ugd2FudCB0byB1c2UgdGhlIGdlb21ldHJpYyBub3JtYWwgZm9yIHRoZSBjbGVhciBjb2F0IGxheWVyXFxuXFxuICAgIGZsb2F0IGNsZWFyQ29hdE5vViA9IGNsYW1wTm9WKGRvdChzaGFkaW5nX2NsZWFyQ29hdE5vcm1hbCwgc2hhZGluZ192aWV3KSk7XFxuXFxuICAgIHZlYzMgY2xlYXJDb2F0Tm9ybWFsID0gc2hhZGluZ19jbGVhckNvYXROb3JtYWw7XFxuXFxuI2Vsc2VcXG5cXG4gICAgZmxvYXQgY2xlYXJDb2F0Tm9WID0gc2hhZGluZ19Ob1Y7XFxuXFxuICAgIHZlYzMgY2xlYXJDb2F0Tm9ybWFsID0gc2hhZGluZ19ub3JtYWw7XFxuXFxuI2VuZGlmXFxuXFxuICAgIC8vIFRoZSBjbGVhciBjb2F0IGxheWVyIGFzc3VtZXMgYW4gSU9SIG9mIDEuNSAoNCUgcmVmbGVjdGFuY2UpXFxuXFxuICAgIGZsb2F0IEZjID0gRl9TY2hsaWNrKDAuMDQsIDEuMCwgY2xlYXJDb2F0Tm9WKSAqIHBpeGVsLmNsZWFyQ29hdDtcXG5cXG4gICAgZmxvYXQgYXR0ZW51YXRpb24gPSAxLjAgLSBGYztcXG5cXG4gICAgRmQgKj0gYXR0ZW51YXRpb247XFxuXFxuICAgIEZyICo9IHNxKGF0dGVudWF0aW9uKTtcXG5cXG5cXG5cXG4gICAgUGl4ZWxQYXJhbXMgcDtcXG5cXG4gICAgcC5wZXJjZXB0dWFsUm91Z2huZXNzID0gcGl4ZWwuY2xlYXJDb2F0UGVyY2VwdHVhbFJvdWdobmVzcztcXG5cXG4gICAgcC5mMCA9IHZlYzMoMC4wNCk7XFxuXFxuICAgIHAucm91Z2huZXNzID0gcGVyY2VwdHVhbFJvdWdobmVzc1RvUm91Z2huZXNzKHAucGVyY2VwdHVhbFJvdWdobmVzcyk7XFxuXFxuICAgIHAuYW5pc290cm9weSA9IDAuMDtcXG5cXG5cXG5cXG4gICAgdmVjMyBjbGVhckNvYXRMb2JlID0gaXNFdmFsdWF0ZUlCTChwLCBjbGVhckNvYXROb3JtYWwsIHNoYWRpbmdfdmlldywgY2xlYXJDb2F0Tm9WKTtcXG5cXG4gICAgRnIgKz0gY2xlYXJDb2F0TG9iZSAqIChzcGVjdWxhckFPICogcGl4ZWwuY2xlYXJDb2F0KTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4vLyBJQkwgZXZhbHVhdGlvblxcblxcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxudm9pZCBldmFsdWF0ZUNsb3RoSW5kaXJlY3REaWZmdXNlQlJERihjb25zdCBQaXhlbFBhcmFtcyBwaXhlbCwgaW5vdXQgZmxvYXQgZGlmZnVzZSkge1xcblxcbiNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfQ0xPVEgpXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX1NVQlNVUkZBQ0VfQ09MT1IpXFxuXFxuICAgIC8vIFNpbXVsYXRlIHN1YnN1cmZhY2Ugc2NhdHRlcmluZyB3aXRoIGEgd3JhcCBkaWZmdXNlIHRlcm1cXG5cXG4gICAgZGlmZnVzZSAqPSBGZF9XcmFwKHNoYWRpbmdfTm9WLCAwLjUpO1xcblxcbiNlbmRpZlxcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG52b2lkIGV2YWx1YXRlQ2xlYXJDb2F0SUJMKGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsLCBmbG9hdCBzcGVjdWxhckFPLCBpbm91dCB2ZWMzIEZkLCBpbm91dCB2ZWMzIEZyKSB7XFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVQpXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX05PUk1BTCkgfHwgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwpXFxuXFxuICAgIC8vIFdlIHdhbnQgdG8gdXNlIHRoZSBnZW9tZXRyaWMgbm9ybWFsIGZvciB0aGUgY2xlYXIgY29hdCBsYXllclxcblxcbiAgICBmbG9hdCBjbGVhckNvYXROb1YgPSBjbGFtcE5vVihkb3Qoc2hhZGluZ19jbGVhckNvYXROb3JtYWwsIHNoYWRpbmdfdmlldykpO1xcblxcbiAgICB2ZWMzIGNsZWFyQ29hdFIgPSByZWZsZWN0KC1zaGFkaW5nX3ZpZXcsIHNoYWRpbmdfY2xlYXJDb2F0Tm9ybWFsKTtcXG5cXG4jZWxzZVxcblxcbiAgICBmbG9hdCBjbGVhckNvYXROb1YgPSBzaGFkaW5nX05vVjtcXG5cXG4gICAgdmVjMyBjbGVhckNvYXRSID0gc2hhZGluZ19yZWZsZWN0ZWQ7XFxuXFxuI2VuZGlmXFxuXFxuICAgIC8vIFRoZSBjbGVhciBjb2F0IGxheWVyIGFzc3VtZXMgYW4gSU9SIG9mIDEuNSAoNCUgcmVmbGVjdGFuY2UpXFxuXFxuICAgIGZsb2F0IEZjID0gRl9TY2hsaWNrKDAuMDQsIDEuMCwgY2xlYXJDb2F0Tm9WKSAqIHBpeGVsLmNsZWFyQ29hdDtcXG5cXG4gICAgZmxvYXQgYXR0ZW51YXRpb24gPSAxLjAgLSBGYztcXG5cXG4gICAgRnIgKj0gc3EoYXR0ZW51YXRpb24pO1xcblxcbiAgICBGciArPSBwcmVmaWx0ZXJlZFJhZGlhbmNlKGNsZWFyQ29hdFIsIHBpeGVsLmNsZWFyQ29hdFBlcmNlcHR1YWxSb3VnaG5lc3MpICogKHNwZWN1bGFyQU8gKiBGYyk7XFxuXFxuICAgIEZkICo9IGF0dGVudWF0aW9uO1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG52b2lkIGV2YWx1YXRlU3Vic3VyZmFjZUlCTChjb25zdCBQaXhlbFBhcmFtcyBwaXhlbCwgY29uc3QgdmVjMyBkaWZmdXNlSXJyYWRpYW5jZSxcXG5cXG4gICAgICAgIGlub3V0IHZlYzMgRmQsIGlub3V0IHZlYzMgRnIpIHtcXG5cXG4jaWYgZGVmaW5lZChTSEFESU5HX01PREVMX1NVQlNVUkZBQ0UpXFxuXFxuICAgIHZlYzMgdmlld0luZGVwZW5kZW50ID0gZGlmZnVzZUlycmFkaWFuY2U7XFxuXFxuICAgIHZlYzMgdmlld0RlcGVuZGVudCA9IHByZWZpbHRlcmVkUmFkaWFuY2UoLXNoYWRpbmdfdmlldywgcGl4ZWwucm91Z2huZXNzLCAxLjAgKyBwaXhlbC50aGlja25lc3MpO1xcblxcbiAgICBmbG9hdCBhdHRlbnVhdGlvbiA9ICgxLjAgLSBwaXhlbC50aGlja25lc3MpIC8gKDIuMCAqIFBJKTtcXG5cXG4gICAgRmQgKz0gcGl4ZWwuc3Vic3VyZmFjZUNvbG9yICogKHZpZXdJbmRlcGVuZGVudCArIHZpZXdEZXBlbmRlbnQpICogYXR0ZW51YXRpb247XFxuXFxuI2VsaWYgZGVmaW5lZChTSEFESU5HX01PREVMX0NMT1RIKSAmJiBkZWZpbmVkKE1BVEVSSUFMX0hBU19TVUJTVVJGQUNFX0NPTE9SKVxcblxcbiAgICBGZCAqPSBzYXR1cmF0ZShwaXhlbC5zdWJzdXJmYWNlQ29sb3IgKyBzaGFkaW5nX05vVik7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcblxcblxcbnZvaWQgZXZhbHVhdGVJQkwoY29uc3QgTWF0ZXJpYWxJbnB1dHMgbWF0ZXJpYWwsIGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsLCBpbm91dCB2ZWMzIGNvbG9yKSB7XFxuXFxuICAgIC8vIEFwcGx5IHRyYW5zZm9ybSBoZXJlIGlmIHdlIHdhbnRlZCB0byByb3RhdGUgdGhlIElCTFxcblxcbiAgICB2ZWMzIG4gPSBzaGFkaW5nX25vcm1hbDtcXG5cXG4gICAgdmVjMyByID0gZ2V0UmVmbGVjdGVkVmVjdG9yKHBpeGVsLCBuKTtcXG5cXG5cXG5cXG4gICAgLy8gZmxvYXQgc3NhbyA9IGV2YWx1YXRlU1NBTygpO1xcblxcbiAgICAvLyBmbG9hdCBkaWZmdXNlQU8gPSBtaW4obWF0ZXJpYWwuYW1iaWVudE9jY2x1c2lvbiwgc3Nhbyk7XFxuXFxuICAgIGZsb2F0IGRpZmZ1c2VBTyA9IG1pbihtYXRlcmlhbC5hbWJpZW50T2NjbHVzaW9uLCAwLjApO1xcblxcbiAgICBmbG9hdCBzcGVjdWxhckFPID0gY29tcHV0ZVNwZWN1bGFyQU8oc2hhZGluZ19Ob1YsIGRpZmZ1c2VBTywgcGl4ZWwucm91Z2huZXNzKTtcXG5cXG5cXG5cXG4gICAgLy8gZGlmZnVzZSBpbmRpcmVjdFxcblxcbiAgICBmbG9hdCBkaWZmdXNlQlJERiA9IHNpbmdsZUJvdW5jZUFPKGRpZmZ1c2VBTyk7Ly8gRmRfTGFtYmVydCgpIGlzIGJha2VkIGluIHRoZSBTSCBiZWxvd1xcblxcbiAgICBldmFsdWF0ZUNsb3RoSW5kaXJlY3REaWZmdXNlQlJERihwaXhlbCwgZGlmZnVzZUJSREYpO1xcblxcblxcblxcbiAgICB2ZWMzIGRpZmZ1c2VJcnJhZGlhbmNlID0gZGlmZnVzZUlycmFkaWFuY2Uobik7XFxuXFxuICAgIHZlYzMgRmQgPSBwaXhlbC5kaWZmdXNlQ29sb3IgKiBkaWZmdXNlSXJyYWRpYW5jZSAqIGRpZmZ1c2VCUkRGO1xcblxcblxcblxcbiAgICAvLyBzcGVjdWxhciBpbmRpcmVjdFxcblxcbiAgICB2ZWMzIEZyO1xcblxcbiNpZiBJQkxfSU5URUdSQVRJT04gPT0gSUJMX0lOVEVHUkFUSU9OX1BSRUZJTFRFUkVEX0NVQkVNQVBcXG5cXG4gICAgRnIgPSBzcGVjdWxhckRGRyhwaXhlbCkgKiBwcmVmaWx0ZXJlZFJhZGlhbmNlKHIsIHBpeGVsLnBlcmNlcHR1YWxSb3VnaG5lc3MpO1xcblxcbiAgICBGciAqPSBzaW5nbGVCb3VuY2VBTyhzcGVjdWxhckFPKSAqIHBpeGVsLmVuZXJneUNvbXBlbnNhdGlvbjtcXG5cXG4gICAgZXZhbHVhdGVDbGVhckNvYXRJQkwocGl4ZWwsIHNwZWN1bGFyQU8sIEZkLCBGcik7XFxuXFxuI2VsaWYgSUJMX0lOVEVHUkFUSU9OID09IElCTF9JTlRFR1JBVElPTl9JTVBPUlRBTkNFX1NBTVBMSU5HXFxuXFxuICAgIEZyID0gaXNFdmFsdWF0ZUlCTChwaXhlbCwgc2hhZGluZ19ub3JtYWwsIHNoYWRpbmdfdmlldywgc2hhZGluZ19Ob1YpO1xcblxcbiAgICBGciAqPSBzaW5nbGVCb3VuY2VBTyhzcGVjdWxhckFPKSAqIHBpeGVsLmVuZXJneUNvbXBlbnNhdGlvbjtcXG5cXG4gICAgaXNFdmFsdWF0ZUNsZWFyQ29hdElCTChwaXhlbCwgc3BlY3VsYXJBTywgRmQsIEZyKTtcXG5cXG4jZW5kaWZcXG5cXG4gICAgZXZhbHVhdGVTdWJzdXJmYWNlSUJMKHBpeGVsLCBkaWZmdXNlSXJyYWRpYW5jZSwgRmQsIEZyKTtcXG5cXG5cXG5cXG4gICAgbXVsdGlCb3VuY2VBTyhkaWZmdXNlQU8sIHBpeGVsLmRpZmZ1c2VDb2xvciwgRmQpO1xcblxcbiAgICBtdWx0aUJvdW5jZVNwZWN1bGFyQU8oc3BlY3VsYXJBTywgcGl4ZWwuZjAsIEZyKTtcXG5cXG5cXG5cXG4gICAgLy8gTm90ZTogaWJsTHVtaW5hbmNlIGlzIGFscmVhZHkgcHJlbXVsdGlwbGllZCBieSB0aGUgZXhwb3N1cmVcXG5cXG4gICAgY29sb3IucmdiICs9IChGZCArIEZyKSAqIGZyYW1lVW5pZm9ybXMuaWJsTHVtaW5hbmNlO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX2FtYmllbnRfb2NjbHVzaW9uX2ZyYWcgPSBcIiNkZWZpbmUgTVVMVElfQk9VTkNFX0FNQklFTlRfT0NDTFVTSU9OIDBcXG5cXG4jZGVmaW5lIFNQRUNVTEFSX0FNQklFTlRfT0NDTFVTSU9OIDBcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIEFtYmllbnQgb2NjbHVzaW9uIGhlbHBlcnNcXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcblxcbmZsb2F0IGV2YWx1YXRlU1NBTygpIHtcXG5cXG4gICAgLy8gVE9ETzogRG9uJ3QgdXNlIGdsX0ZyYWdDb29yZC54eSwgdXNlIHRoZSB2aWV3IGJvdW5kc1xcblxcbiAgICAvLyB2ZWMyIHV2ID0gZ2xfRnJhZ0Nvb3JkLnh5ICogZnJhbWVVbmlmb3Jtcy5yZXNvbHV0aW9uLnp3O1xcblxcbiAgICAvLyByZXR1cm4gdGV4dHVyZShsaWdodF9zc2FvLCB1diwgMC4wKS5yO1xcblxcbiAgICByZXR1cm4gMS4wO1xcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG5mbG9hdCBjb21wdXRlU3BlY3VsYXJBTyhmbG9hdCBOb1YsIGZsb2F0IHZpc2liaWxpdHksIGZsb2F0IHJvdWdobmVzcykge1xcblxcbiNpZiBTUEVDVUxBUl9BTUJJRU5UX09DQ0xVU0lPTiA9PSAxXFxuXFxuICAgIHJldHVybiBzYXR1cmF0ZShwb3coTm9WICsgdmlzaWJpbGl0eSwgZXhwMigtMTYuMCAqIHJvdWdobmVzcyAtIDEuMCkpIC0gMS4wICsgdmlzaWJpbGl0eSk7XFxuXFxuI2Vsc2VcXG5cXG4gICAgcmV0dXJuIDEuMDtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxuI2lmIE1VTFRJX0JPVU5DRV9BTUJJRU5UX09DQ0xVU0lPTiA9PSAxXFxuXFxuXFxuXFxudmVjMyBndGFvTXVsdGlCb3VuY2UoZmxvYXQgdmlzaWJpbGl0eSwgY29uc3QgdmVjMyBhbGJlZG8pIHtcXG5cXG4gICAgLy8gSmltZW5leiBldCBhbC4gMjAxNiwgXFxcIlByYWN0aWNhbCBSZWFsdGltZSBTdHJhdGVnaWVzIGZvciBBY2N1cmF0ZSBJbmRpcmVjdCBPY2NsdXNpb25cXFwiXFxuXFxuICAgIHZlYzMgYSA9ICAyLjA0MDQgKiBhbGJlZG8gLSAwLjMzMjQ7XFxuXFxuICAgIHZlYzMgYiA9IC00Ljc5NTEgKiBhbGJlZG8gKyAwLjY0MTc7XFxuXFxuICAgIHZlYzMgYyA9ICAyLjc1NTIgKiBhbGJlZG8gKyAwLjY5MDM7XFxuXFxuXFxuXFxuICAgIHJldHVybiBtYXgodmVjMyh2aXNpYmlsaXR5KSwgKCh2aXNpYmlsaXR5ICogYSArIGIpICogdmlzaWJpbGl0eSArIGMpICogdmlzaWJpbGl0eSk7XFxuXFxufVxcblxcbiNlbmRpZlxcblxcblxcblxcbnZvaWQgbXVsdGlCb3VuY2VBTyhmbG9hdCB2aXNpYmlsaXR5LCBjb25zdCB2ZWMzIGFsYmVkbywgaW5vdXQgdmVjMyBjb2xvcikge1xcblxcbiNpZiBNVUxUSV9CT1VOQ0VfQU1CSUVOVF9PQ0NMVVNJT04gPT0gMVxcblxcbiAgICBjb2xvciAqPSBndGFvTXVsdGlCb3VuY2UodmlzaWJpbGl0eSwgYWxiZWRvKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxudm9pZCBtdWx0aUJvdW5jZVNwZWN1bGFyQU8oZmxvYXQgdmlzaWJpbGl0eSwgY29uc3QgdmVjMyBhbGJlZG8sIGlub3V0IHZlYzMgY29sb3IpIHtcXG5cXG4jaWYgTVVMVElfQk9VTkNFX0FNQklFTlRfT0NDTFVTSU9OID09IDEgJiYgU1BFQ1VMQVJfQU1CSUVOVF9PQ0NMVVNJT04gPT0gMVxcblxcbiAgICBjb2xvciAqPSBndGFvTXVsdGlCb3VuY2UodmlzaWJpbGl0eSwgYWxiZWRvKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxuZmxvYXQgc2luZ2xlQm91bmNlQU8oZmxvYXQgdmlzaWJpbGl0eSkge1xcblxcbiNpZiBNVUxUSV9CT1VOQ0VfQU1CSUVOVF9PQ0NMVVNJT04gPT0gMVxcblxcbiAgICByZXR1cm4gMS4wO1xcblxcbiNlbHNlXFxuXFxuICAgIHJldHVybiB2aXNpYmlsaXR5O1xcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX3NoYWRpbmdfbW9kZWxfc3RhbmRhcmRfZnJhZyA9IFwiI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVQpXFxuXFxuZmxvYXQgY2xlYXJDb2F0TG9iZShjb25zdCBQaXhlbFBhcmFtcyBwaXhlbCwgY29uc3QgdmVjMyBoLCBmbG9hdCBOb0gsIGZsb2F0IExvSCwgb3V0IGZsb2F0IEZjYykge1xcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19OT1JNQUwpIHx8IGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVRfTk9STUFMKVxcblxcbiAgICAvLyBJZiB0aGUgbWF0ZXJpYWwgaGFzIGEgbm9ybWFsIG1hcCwgd2Ugd2FudCB0byB1c2UgdGhlIGdlb21ldHJpYyBub3JtYWxcXG5cXG4gICAgLy8gaW5zdGVhZCB0byBhdm9pZCBhcHBseWluZyB0aGUgbm9ybWFsIG1hcCBkZXRhaWxzIHRvIHRoZSBjbGVhciBjb2F0IGxheWVyXFxuXFxuICAgIGZsb2F0IGNsZWFyQ29hdE5vSCA9IHNhdHVyYXRlKGRvdChzaGFkaW5nX2NsZWFyQ29hdE5vcm1hbCwgaCkpO1xcblxcbiNlbHNlXFxuXFxuICAgIGZsb2F0IGNsZWFyQ29hdE5vSCA9IE5vSDtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4gICAgLy8gY2xlYXIgY29hdCBzcGVjdWxhciBsb2JlXFxuXFxuICAgIGZsb2F0IEQgPSBkaXN0cmlidXRpb25DbGVhckNvYXQocGl4ZWwuY2xlYXJDb2F0Um91Z2huZXNzLCBjbGVhckNvYXROb0gsIGgpO1xcblxcbiAgICBmbG9hdCBWID0gdmlzaWJpbGl0eUNsZWFyQ29hdChMb0gpO1xcblxcbiAgICBmbG9hdCBGID0gRl9TY2hsaWNrKDAuMDQsIDEuMCwgTG9IKSAqIHBpeGVsLmNsZWFyQ29hdDsgLy8gZml4IElPUiB0byAxLjVcXG5cXG5cXG5cXG4gICAgRmNjID0gRjtcXG5cXG4gICAgcmV0dXJuIEQgKiBWICogRjtcXG5cXG59XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0FOSVNPVFJPUFkpXFxuXFxudmVjMyBhbmlzb3Ryb3BpY0xvYmUoY29uc3QgUGl4ZWxQYXJhbXMgcGl4ZWwsIGNvbnN0IExpZ2h0IGxpZ2h0LCBjb25zdCB2ZWMzIGgsXFxuXFxuICAgICAgICBmbG9hdCBOb1YsIGZsb2F0IE5vTCwgZmxvYXQgTm9ILCBmbG9hdCBMb0gpIHtcXG5cXG5cXG5cXG4gICAgdmVjMyBsID0gbGlnaHQubDtcXG5cXG4gICAgdmVjMyB0ID0gcGl4ZWwuYW5pc290cm9waWNUO1xcblxcbiAgICB2ZWMzIGIgPSBwaXhlbC5hbmlzb3Ryb3BpY0I7XFxuXFxuICAgIHZlYzMgdiA9IHNoYWRpbmdfdmlldztcXG5cXG5cXG5cXG4gICAgZmxvYXQgVG9WID0gZG90KHQsIHYpO1xcblxcbiAgICBmbG9hdCBCb1YgPSBkb3QoYiwgdik7XFxuXFxuICAgIGZsb2F0IFRvTCA9IGRvdCh0LCBsKTtcXG5cXG4gICAgZmxvYXQgQm9MID0gZG90KGIsIGwpO1xcblxcbiAgICBmbG9hdCBUb0ggPSBkb3QodCwgaCk7XFxuXFxuICAgIGZsb2F0IEJvSCA9IGRvdChiLCBoKTtcXG5cXG5cXG5cXG4gICAgLy8gQW5pc290cm9waWMgcGFyYW1ldGVyczogYXQgYW5kIGFiIGFyZSB0aGUgcm91Z2huZXNzIGFsb25nIHRoZSB0YW5nZW50IGFuZCBiaXRhbmdlbnRcXG5cXG4gICAgLy8gdG8gc2ltcGxpZnkgbWF0ZXJpYWxzLCB3ZSBkZXJpdmUgdGhlbSBmcm9tIGEgc2luZ2xlIHJvdWdobmVzcyBwYXJhbWV0ZXJcXG5cXG4gICAgLy8gS3VsbGEgMjAxNywgXFxcIlJldmlzaXRpbmcgUGh5c2ljYWxseSBCYXNlZCBTaGFkaW5nIGF0IEltYWdld29ya3NcXFwiXFxuXFxuICAgIGZsb2F0IGF0ID0gbWF4KHBpeGVsLnJvdWdobmVzcyAqICgxLjAgKyBwaXhlbC5hbmlzb3Ryb3B5KSwgTUlOX1JPVUdITkVTUyk7XFxuXFxuICAgIGZsb2F0IGFiID0gbWF4KHBpeGVsLnJvdWdobmVzcyAqICgxLjAgLSBwaXhlbC5hbmlzb3Ryb3B5KSwgTUlOX1JPVUdITkVTUyk7XFxuXFxuXFxuXFxuICAgIC8vIHNwZWN1bGFyIGFuaXNvdHJvcGljIEJSREZcXG5cXG4gICAgZmxvYXQgRCA9IGRpc3RyaWJ1dGlvbkFuaXNvdHJvcGljKGF0LCBhYiwgVG9ILCBCb0gsIE5vSCk7XFxuXFxuICAgIGZsb2F0IFYgPSB2aXNpYmlsaXR5QW5pc290cm9waWMocGl4ZWwucm91Z2huZXNzLCBhdCwgYWIsIFRvViwgQm9WLCBUb0wsIEJvTCwgTm9WLCBOb0wpO1xcblxcbiAgICB2ZWMzICBGID0gZnJlc25lbChwaXhlbC5mMCwgTG9IKTtcXG5cXG5cXG5cXG4gICAgcmV0dXJuIChEICogVikgKiBGO1xcblxcbn1cXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG52ZWMzIGlzb3Ryb3BpY0xvYmUoY29uc3QgUGl4ZWxQYXJhbXMgcGl4ZWwsIGNvbnN0IExpZ2h0IGxpZ2h0LCBjb25zdCB2ZWMzIGgsXFxuXFxuICAgICAgICBmbG9hdCBOb1YsIGZsb2F0IE5vTCwgZmxvYXQgTm9ILCBmbG9hdCBMb0gpIHtcXG5cXG5cXG5cXG4gICAgZmxvYXQgRCA9IGRpc3RyaWJ1dGlvbihwaXhlbC5yb3VnaG5lc3MsIE5vSCwgaCk7XFxuXFxuICAgIGZsb2F0IFYgPSB2aXNpYmlsaXR5KHBpeGVsLnJvdWdobmVzcywgTm9WLCBOb0wsIExvSCk7XFxuXFxuICAgIHZlYzMgIEYgPSBmcmVzbmVsKHBpeGVsLmYwLCBMb0gpO1xcblxcblxcblxcbiAgICByZXR1cm4gKEQgKiBWKSAqIEY7XFxuXFxufVxcblxcblxcblxcbnZlYzMgc3BlY3VsYXJMb2JlKGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsLCBjb25zdCBMaWdodCBsaWdodCwgY29uc3QgdmVjMyBoLFxcblxcbiAgICAgICAgZmxvYXQgTm9WLCBmbG9hdCBOb0wsIGZsb2F0IE5vSCwgZmxvYXQgTG9IKSB7XFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0FOSVNPVFJPUFkpXFxuXFxuICAgIHJldHVybiBhbmlzb3Ryb3BpY0xvYmUocGl4ZWwsIGxpZ2h0LCBoLCBOb1YsIE5vTCwgTm9ILCBMb0gpO1xcblxcbiNlbHNlXFxuXFxuICAgIHJldHVybiBpc290cm9waWNMb2JlKHBpeGVsLCBsaWdodCwgaCwgTm9WLCBOb0wsIE5vSCwgTG9IKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxudmVjMyBkaWZmdXNlTG9iZShjb25zdCBQaXhlbFBhcmFtcyBwaXhlbCwgZmxvYXQgTm9WLCBmbG9hdCBOb0wsIGZsb2F0IExvSCkge1xcblxcbiAgICByZXR1cm4gcGl4ZWwuZGlmZnVzZUNvbG9yICogZGlmZnVzZShwaXhlbC5yb3VnaG5lc3MsIE5vViwgTm9MLCBMb0gpO1xcblxcbn1cXG5cXG5cXG5cXG5cXG5cXG52ZWMzIHN1cmZhY2VTaGFkaW5nKGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsLCBjb25zdCBMaWdodCBsaWdodCwgZmxvYXQgb2NjbHVzaW9uKSB7XFxuXFxuICAgIHZlYzMgaCA9IG5vcm1hbGl6ZShzaGFkaW5nX3ZpZXcgKyBsaWdodC5sKTtcXG5cXG5cXG5cXG4gICAgZmxvYXQgTm9WID0gc2hhZGluZ19Ob1Y7XFxuXFxuICAgIGZsb2F0IE5vTCA9IHNhdHVyYXRlKGxpZ2h0Lk5vTCk7XFxuXFxuICAgIGZsb2F0IE5vSCA9IHNhdHVyYXRlKGRvdChzaGFkaW5nX25vcm1hbCwgaCkpO1xcblxcbiAgICBmbG9hdCBMb0ggPSBzYXR1cmF0ZShkb3QobGlnaHQubCwgaCkpO1xcblxcblxcblxcbiAgICB2ZWMzIEZyID0gc3BlY3VsYXJMb2JlKHBpeGVsLCBsaWdodCwgaCwgTm9WLCBOb0wsIE5vSCwgTG9IKTtcXG5cXG4gICAgdmVjMyBGZCA9IGRpZmZ1c2VMb2JlKHBpeGVsLCBOb1YsIE5vTCwgTG9IKTtcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVClcXG5cXG4gICAgZmxvYXQgRmNjO1xcblxcbiAgICBmbG9hdCBjbGVhckNvYXQgPSBjbGVhckNvYXRMb2JlKHBpeGVsLCBoLCBOb0gsIExvSCwgRmNjKTtcXG5cXG4gICAgLy8gRW5lcmd5IGNvbXBlbnNhdGlvbiBhbmQgYWJzb3JwdGlvbjsgdGhlIGNsZWFyIGNvYXQgRnJlc25lbCB0ZXJtIGlzXFxuXFxuICAgIC8vIHNxdWFyZWQgdG8gdGFrZSBpbnRvIGFjY291bnQgYm90aCBlbnRlcmluZyB0aHJvdWdoIGFuZCBleGl0aW5nIHRocm91Z2hcXG5cXG4gICAgLy8gdGhlIGNsZWFyIGNvYXQgbGF5ZXJcXG5cXG4gICAgZmxvYXQgYXR0ZW51YXRpb24gPSAxLjAgLSBGY2M7XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX05PUk1BTCkgfHwgZGVmaW5lZChNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwpXFxuXFxuICAgIHZlYzMgY29sb3IgPSAoRmQgKyBGciAqIChwaXhlbC5lbmVyZ3lDb21wZW5zYXRpb24gKiBhdHRlbnVhdGlvbikpICogYXR0ZW51YXRpb24gKiBOb0w7XFxuXFxuXFxuXFxuICAgIC8vIElmIHRoZSBtYXRlcmlhbCBoYXMgYSBub3JtYWwgbWFwLCB3ZSB3YW50IHRvIHVzZSB0aGUgZ2VvbWV0cmljIG5vcm1hbFxcblxcbiAgICAvLyBpbnN0ZWFkIHRvIGF2b2lkIGFwcGx5aW5nIHRoZSBub3JtYWwgbWFwIGRldGFpbHMgdG8gdGhlIGNsZWFyIGNvYXQgbGF5ZXJcXG5cXG4gICAgZmxvYXQgY2xlYXJDb2F0Tm9MID0gc2F0dXJhdGUoZG90KHNoYWRpbmdfY2xlYXJDb2F0Tm9ybWFsLCBsaWdodC5sKSk7XFxuXFxuICAgIGNvbG9yICs9IGNsZWFyQ29hdCAqIGNsZWFyQ29hdE5vTDtcXG5cXG5cXG5cXG4gICAgLy8gRWFybHkgZXhpdCB0byBhdm9pZCB0aGUgZXh0cmEgbXVsdGlwbGljYXRpb24gYnkgTm9MXFxuXFxuICAgIHJldHVybiAoY29sb3IgKiBsaWdodC5jb2xvckludGVuc2l0eS5yZ2IpICpcXG5cXG4gICAgICAgICAgICAobGlnaHQuY29sb3JJbnRlbnNpdHkudyAqIGxpZ2h0LmF0dGVudWF0aW9uICogb2NjbHVzaW9uKTtcXG5cXG4jZWxzZVxcblxcbiAgICB2ZWMzIGNvbG9yID0gKEZkICsgRnIgKiAocGl4ZWwuZW5lcmd5Q29tcGVuc2F0aW9uICogYXR0ZW51YXRpb24pKSAqIGF0dGVudWF0aW9uICsgY2xlYXJDb2F0O1xcblxcbiNlbmRpZlxcblxcbiNlbHNlXFxuXFxuICAgIC8vIFRoZSBlbmVyZ3kgY29tcGVuc2F0aW9uIHRlcm0gaXMgdXNlZCB0byBjb3VudGVyYWN0IHRoZSBkYXJrZW5pbmcgZWZmZWN0XFxuXFxuICAgIC8vIGF0IGhpZ2ggcm91Z2huZXNzXFxuXFxuICAgIHZlYzMgY29sb3IgPSBGZCArIEZyICogcGl4ZWwuZW5lcmd5Q29tcGVuc2F0aW9uO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiAgICByZXR1cm4gKGNvbG9yICogbGlnaHQuY29sb3JJbnRlbnNpdHkucmdiKSAqXFxuXFxuICAgICAgICAgICAgKGxpZ2h0LmNvbG9ySW50ZW5zaXR5LncgKiBsaWdodC5hdHRlbnVhdGlvbiAqIE5vTCAqIG9jY2x1c2lvbik7XFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfc2hhZGluZ19tb2RlbF9jbG90aF9mcmFnID0gXCJcXG5cXG52ZWMzIHN1cmZhY2VTaGFkaW5nKGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsLCBjb25zdCBMaWdodCBsaWdodCwgZmxvYXQgb2NjbHVzaW9uKSB7XFxuXFxuICAgIHZlYzMgaCA9IG5vcm1hbGl6ZShzaGFkaW5nX3ZpZXcgKyBsaWdodC5sKTtcXG5cXG4gICAgZmxvYXQgTm9MID0gbGlnaHQuTm9MO1xcblxcbiAgICBmbG9hdCBOb0ggPSBzYXR1cmF0ZShkb3Qoc2hhZGluZ19ub3JtYWwsIGgpKTtcXG5cXG4gICAgZmxvYXQgTG9IID0gc2F0dXJhdGUoZG90KGxpZ2h0LmwsIGgpKTtcXG5cXG5cXG5cXG4gICAgLy8gc3BlY3VsYXIgQlJERlxcblxcbiAgICBmbG9hdCBEID0gZGlzdHJpYnV0aW9uQ2xvdGgocGl4ZWwucm91Z2huZXNzLCBOb0gpO1xcblxcbiAgICBmbG9hdCBWID0gdmlzaWJpbGl0eUNsb3RoKHNoYWRpbmdfTm9WLCBOb0wpO1xcblxcbiAgICB2ZWMzICBGID0gcGl4ZWwuZjA7XFxuXFxuICAgIC8vIElnbm9yZSBwaXhlbC5lbmVyZ3lDb21wZW5zYXRpb24gc2luY2Ugd2UgdXNlIGEgZGlmZmVyZW50IEJSREYgaGVyZVxcblxcbiAgICB2ZWMzIEZyID0gKEQgKiBWKSAqIEY7XFxuXFxuXFxuXFxuICAgIC8vIGRpZmZ1c2UgQlJERlxcblxcbiAgICBmbG9hdCBkaWZmdXNlID0gZGlmZnVzZShwaXhlbC5yb3VnaG5lc3MsIHNoYWRpbmdfTm9WLCBOb0wsIExvSCk7XFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX1NVQlNVUkZBQ0VfQ09MT1IpXFxuXFxuICAgIC8vIEVuZXJneSBjb25zZXJ2YXRpdmUgd3JhcCBkaWZmdXNlIHRvIHNpbXVsYXRlIHN1YnN1cmZhY2Ugc2NhdHRlcmluZ1xcblxcbiAgICBkaWZmdXNlICo9IEZkX1dyYXAoZG90KHNoYWRpbmdfbm9ybWFsLCBsaWdodC5sKSwgMC41KTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4gICAgLy8gV2UgZG8gbm90IG11bHRpcGx5IHRoZSBkaWZmdXNlIHRlcm0gYnkgdGhlIEZyZXNuZWwgdGVybSBhcyBkaXNjdXNzZWQgaW5cXG5cXG4gICAgLy8gTmV1YmVsdCBhbmQgUGV0dGluZW8gMjAxMywgXFxcIkNyYWZ0aW5nIGEgTmV4dC1nZW4gTWF0ZXJpYWwgUGlwZWxpbmUgZm9yIFRoZSBPcmRlcjogMTg4NlxcXCJcXG5cXG4gICAgLy8gVGhlIGVmZmVjdCBpcyBmYWlybHkgc3VidGxlIGFuZCBub3QgZGVlbWVkIHdvcnRoIHRoZSBjb3N0IGZvciBtb2JpbGVcXG5cXG4gICAgdmVjMyBGZCA9IGRpZmZ1c2UgKiBwaXhlbC5kaWZmdXNlQ29sb3I7XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX1NVQlNVUkZBQ0VfQ09MT1IpXFxuXFxuICAgIC8vIENoZWFwIHN1YnN1cmZhY2Ugc2NhdHRlclxcblxcbiAgICBGZCAqPSBzYXR1cmF0ZShwaXhlbC5zdWJzdXJmYWNlQ29sb3IgKyBOb0wpO1xcblxcbiAgICAvLyBXZSBuZWVkIHRvIGFwcGx5IE5vTCBzZXBhcmF0ZWx5IHRvIHRoZSBzcGVjdWxhciBsb2JlIHNpbmNlIHdlIGFscmVhZHkgdG9va1xcblxcbiAgICAvLyBpdCBpbnRvIGFjY291bnQgaW4gdGhlIGRpZmZ1c2UgbG9iZVxcblxcbiAgICB2ZWMzIGNvbG9yID0gRmQgKyBGciAqIE5vTDtcXG5cXG4gICAgY29sb3IgKj0gbGlnaHQuY29sb3JJbnRlbnNpdHkucmdiICogKGxpZ2h0LmNvbG9ySW50ZW5zaXR5LncgKiBsaWdodC5hdHRlbnVhdGlvbiAqIG9jY2x1c2lvbik7XFxuXFxuI2Vsc2VcXG5cXG4gICAgdmVjMyBjb2xvciA9IEZkICsgRnI7XFxuXFxuICAgIGNvbG9yICo9IGxpZ2h0LmNvbG9ySW50ZW5zaXR5LnJnYiAqIChsaWdodC5jb2xvckludGVuc2l0eS53ICogbGlnaHQuYXR0ZW51YXRpb24gKiBOb0wgKiBvY2NsdXNpb24pO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiAgICByZXR1cm4gY29sb3I7XFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfc2hhZGluZ19tb2RlbF9zdWJzdXJmYWNlX2ZyYWcgPSBcIlxcblxcbnZlYzMgc3VyZmFjZVNoYWRpbmcoY29uc3QgUGl4ZWxQYXJhbXMgcGl4ZWwsIGNvbnN0IExpZ2h0IGxpZ2h0LCBmbG9hdCBvY2NsdXNpb24pIHtcXG5cXG4gICAgdmVjMyBoID0gbm9ybWFsaXplKHNoYWRpbmdfdmlldyArIGxpZ2h0LmwpO1xcblxcblxcblxcbiAgICBmbG9hdCBOb0wgPSBsaWdodC5Ob0w7XFxuXFxuICAgIGZsb2F0IE5vSCA9IHNhdHVyYXRlKGRvdChzaGFkaW5nX25vcm1hbCwgaCkpO1xcblxcbiAgICBmbG9hdCBMb0ggPSBzYXR1cmF0ZShkb3QobGlnaHQubCwgaCkpO1xcblxcblxcblxcbiAgICB2ZWMzIEZyID0gdmVjMygwLjApO1xcblxcbiAgICBpZiAoTm9MID4gMC4wKSB7XFxuXFxuICAgICAgICAvLyBzcGVjdWxhciBCUkRGXFxuXFxuICAgICAgICBmbG9hdCBEID0gZGlzdHJpYnV0aW9uKHBpeGVsLnJvdWdobmVzcywgTm9ILCBoKTtcXG5cXG4gICAgICAgIGZsb2F0IFYgPSB2aXNpYmlsaXR5KHBpeGVsLnJvdWdobmVzcywgc2hhZGluZ19Ob1YsIE5vTCwgTG9IKTtcXG5cXG4gICAgICAgIHZlYzMgIEYgPSBmcmVzbmVsKHBpeGVsLmYwLCBMb0gpO1xcblxcbiAgICAgICAgRnIgPSAoRCAqIFYpICogRiAqIHBpeGVsLmVuZXJneUNvbXBlbnNhdGlvbjtcXG5cXG4gICAgfVxcblxcblxcblxcbiAgICAvLyBkaWZmdXNlIEJSREZcXG5cXG4gICAgdmVjMyBGZCA9IHBpeGVsLmRpZmZ1c2VDb2xvciAqIGRpZmZ1c2UocGl4ZWwucm91Z2huZXNzLCBzaGFkaW5nX05vViwgTm9MLCBMb0gpO1xcblxcblxcblxcbiAgICAvLyBOb0wgZG9lcyBub3QgYXBwbHkgdG8gdHJhbnNtaXR0ZWQgbGlnaHRcXG5cXG4gICAgdmVjMyBjb2xvciA9IChGZCArIEZyKSAqIChOb0wgKiBvY2NsdXNpb24pO1xcblxcblxcblxcbiAgICAvLyBzdWJzdXJmYWNlIHNjYXR0ZXJpbmdcXG5cXG4gICAgLy8gVXNlIGEgc3BoZXJpY2FsIGdhdXNzaWFuIGFwcHJveGltYXRpb24gb2YgcG93KCkgZm9yIGZvcndhcmRTY2F0dGVyaW5nXFxuXFxuICAgIC8vIFdlIGNvdWxkIGluY2x1ZGUgZGlzdG9ydGlvbiBieSBhZGRpbmcgc2hhZGluZ19ub3JtYWwgKiBkaXN0b3J0aW9uIHRvIGxpZ2h0LmxcXG5cXG4gICAgZmxvYXQgc2NhdHRlclZvSCA9IHNhdHVyYXRlKGRvdChzaGFkaW5nX3ZpZXcsIC1saWdodC5sKSk7XFxuXFxuICAgIGZsb2F0IGZvcndhcmRTY2F0dGVyID0gZXhwMihzY2F0dGVyVm9IICogcGl4ZWwuc3Vic3VyZmFjZVBvd2VyIC0gcGl4ZWwuc3Vic3VyZmFjZVBvd2VyKTtcXG5cXG4gICAgZmxvYXQgYmFja1NjYXR0ZXIgPSBzYXR1cmF0ZShOb0wgKiBwaXhlbC50aGlja25lc3MgKyAoMS4wIC0gcGl4ZWwudGhpY2tuZXNzKSkgKiAwLjU7XFxuXFxuICAgIGZsb2F0IHN1YnN1cmZhY2UgPSBtaXgoYmFja1NjYXR0ZXIsIDEuMCwgZm9yd2FyZFNjYXR0ZXIpICogKDEuMCAtIHBpeGVsLnRoaWNrbmVzcyk7XFxuXFxuICAgIGNvbG9yICs9IHBpeGVsLnN1YnN1cmZhY2VDb2xvciAqIChzdWJzdXJmYWNlICogRmRfTGFtYmVydCgpKTtcXG5cXG5cXG5cXG4gICAgLy8gVE9ETzogYXBwbHkgb2NjbHVzaW9uIHRvIHRoZSB0cmFuc21pdHRlZCBsaWdodFxcblxcbiAgICByZXR1cm4gKGNvbG9yICogbGlnaHQuY29sb3JJbnRlbnNpdHkucmdiKSAqIChsaWdodC5jb2xvckludGVuc2l0eS53ICogbGlnaHQuYXR0ZW51YXRpb24pO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX2xpZ2h0X2RpcmVjdGlvbmFsID0gXCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIERpcmVjdGlvbmFsIGxpZ2h0IGV2YWx1YXRpb25cXG5cXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcblxcblxcbiNpZiAhZGVmaW5lZChUQVJHRVRfTU9CSUxFKVxcblxcbiNkZWZpbmUgU1VOX0FTX0FSRUFfTElHSFRcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG52ZWMzIHNhbXBsZVN1bkFyZWFMaWdodChjb25zdCB2ZWMzIGxpZ2h0RGlyZWN0aW9uKSB7XFxuXFxuI2lmIGRlZmluZWQoU1VOX0FTX0FSRUFfTElHSFQpXFxuXFxuICAgIGlmIChmcmFtZVVuaWZvcm1zLnN1bi53ID49IDAuMCkge1xcblxcbiAgICAgICAgLy8gc2ltdWxhdGUgc3VuIGFzIGRpc2MgYXJlYSBsaWdodFxcblxcbiAgICAgICAgZmxvYXQgTG9SID0gZG90KGxpZ2h0RGlyZWN0aW9uLCBzaGFkaW5nX3JlZmxlY3RlZCk7XFxuXFxuICAgICAgICBmbG9hdCBkID0gZnJhbWVVbmlmb3Jtcy5zdW4ueDtcXG5cXG4gICAgICAgIGhpZ2hwIHZlYzMgcyA9IHNoYWRpbmdfcmVmbGVjdGVkIC0gTG9SICogbGlnaHREaXJlY3Rpb247XFxuXFxuICAgICAgICByZXR1cm4gTG9SIDwgZCA/XFxuXFxuICAgICAgICAgICAgICAgIG5vcm1hbGl6ZShsaWdodERpcmVjdGlvbiAqIGQgKyBub3JtYWxpemUocykgKiBmcmFtZVVuaWZvcm1zLnN1bi55KSA6IHNoYWRpbmdfcmVmbGVjdGVkO1xcblxcbiAgICB9XFxuXFxuI2VuZGlmXFxuXFxuICAgIHJldHVybiBsaWdodERpcmVjdGlvbjtcXG5cXG59XFxuXFxuXFxuXFxuTGlnaHQgZ2V0RGlyZWN0aW9uYWxMaWdodCgpIHtcXG5cXG4gICAgTGlnaHQgbGlnaHQ7XFxuXFxuICAgIC8vIG5vdGU6IGxpZ2h0Q29sb3JJbnRlbnNpdHkudyBpcyBhbHdheXMgcHJlbXVsdGlwbGllZCBieSB0aGUgZXhwb3N1cmVcXG5cXG4gICAgbGlnaHQuY29sb3JJbnRlbnNpdHkgPSBmcmFtZVVuaWZvcm1zLmxpZ2h0Q29sb3JJbnRlbnNpdHk7XFxuXFxuICAgIGxpZ2h0LmwgPSBzYW1wbGVTdW5BcmVhTGlnaHQoZnJhbWVVbmlmb3Jtcy5saWdodERpcmVjdGlvbik7XFxuXFxuICAgIGxpZ2h0LmF0dGVudWF0aW9uID0gMS4wO1xcblxcbiAgICBsaWdodC5Ob0wgPSBzYXR1cmF0ZShkb3Qoc2hhZGluZ19ub3JtYWwsIGxpZ2h0LmwpKTtcXG5cXG4gICAgcmV0dXJuIGxpZ2h0O1xcblxcbn1cXG5cXG5cXG5cXG52b2lkIGV2YWx1YXRlRGlyZWN0aW9uYWxMaWdodChjb25zdCBNYXRlcmlhbElucHV0cyBtYXRlcmlhbCxcXG5cXG4gICAgICAgIGNvbnN0IFBpeGVsUGFyYW1zIHBpeGVsLCBpbm91dCB2ZWMzIGNvbG9yKSB7XFxuXFxuXFxuXFxuICAgIExpZ2h0IGxpZ2h0ID0gZ2V0RGlyZWN0aW9uYWxMaWdodCgpO1xcblxcblxcblxcbiAgICBmbG9hdCB2aXNpYmlsaXR5ID0gMS4wO1xcblxcbiNpZiBkZWZpbmVkKEhBU19TSEFET1dJTkcpXFxuXFxuICAgIGlmIChsaWdodC5Ob0wgPiAwLjApIHtcXG5cXG4gICAgICAgIHZpc2liaWxpdHkgPSBzaGFkb3dfY29tcHV0ZVNoYWRvdygpO1xcblxcbiAgICAgICAgLy8gdmlzaWJpbGl0eSA9IHNoYWRvdyhsaWdodF9zaGFkb3dNYXAsIGdldExpZ2h0U3BhY2VQb3NpdGlvbigpKTtcXG5cXG4gICAgICAgICNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTUJJRU5UX09DQ0xVU0lPTilcXG5cXG4gICAgICAgIHZpc2liaWxpdHkgKj0gY29tcHV0ZU1pY3JvU2hhZG93aW5nKGxpZ2h0Lk5vTCwgbWF0ZXJpYWwuYW1iaWVudE9jY2x1c2lvbik7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgfSBlbHNlIHtcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9DQU5fU0tJUF9MSUdIVElORylcXG5cXG4gICAgICAgIHJldHVybjtcXG5cXG4jZW5kaWZcXG5cXG4gICAgfVxcblxcbiNlbGlmIGRlZmluZWQoTUFURVJJQUxfQ0FOX1NLSVBfTElHSFRJTkcpXFxuXFxuICAgIGlmIChsaWdodC5Ob0wgPD0gMC4wKSByZXR1cm47XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuICAgIGNvbG9yLnJnYiArPSBzdXJmYWNlU2hhZGluZyhwaXhlbCwgbGlnaHQsIHZpc2liaWxpdHkpO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGZsX3NoYWRpbmdfbGl0ID0gXCIvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbi8vIExpZ2h0aW5nXFxuXFxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5cXG5cXG5mbG9hdCBjb21wdXRlRGlmZnVzZUFscGhhKGZsb2F0IGEpIHtcXG5cXG4jaWYgZGVmaW5lZChCTEVORF9NT0RFX1RSQU5TUEFSRU5UKSB8fCBkZWZpbmVkKEJMRU5EX01PREVfRkFERSkgfHwgZGVmaW5lZChCTEVORF9NT0RFX01BU0tFRClcXG5cXG4gICAgcmV0dXJuIGE7XFxuXFxuI2Vsc2VcXG5cXG4gICAgcmV0dXJuIDEuMDtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoQkxFTkRfTU9ERV9NQVNLRUQpXFxuXFxuZmxvYXQgY29tcHV0ZU1hc2tlZEFscGhhKGZsb2F0IGEpIHtcXG5cXG4gICAgLy8gVXNlIGRlcml2YXRpdmVzIHRvIHNtb290aCBhbHBoYSB0ZXN0ZWQgZWRnZXNcXG5cXG4gICAgcmV0dXJuIChhIC0gZ2V0TWFza1RocmVzaG9sZCgpKSAvIG1heChmd2lkdGgoYSksIDFlLTMpICsgMC41O1xcblxcbn1cXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG52b2lkIGFwcGx5QWxwaGFNYXNrKGlub3V0IHZlYzQgYmFzZUNvbG9yKSB7XFxuXFxuI2lmIGRlZmluZWQoQkxFTkRfTU9ERV9NQVNLRUQpXFxuXFxuICAgIGJhc2VDb2xvci5hID0gY29tcHV0ZU1hc2tlZEFscGhhKGJhc2VDb2xvci5hKTtcXG5cXG4gICAgaWYgKGJhc2VDb2xvci5hIDw9IDAuMCkge1xcblxcbiAgICAgICAgZGlzY2FyZDtcXG5cXG4gICAgfVxcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChHRU9NRVRSSUNfU1BFQ1VMQVJfQUEpXFxuXFxuZmxvYXQgbm9ybWFsRmlsdGVyaW5nKGZsb2F0IHBlcmNlcHR1YWxSb3VnaG5lc3MsIGNvbnN0IHZlYzMgd29ybGROb3JtYWwpIHtcXG5cXG4gICAgLy8gS2FwbGFueWFuIDIwMTYsIFxcXCJTdGFibGUgc3BlY3VsYXIgaGlnaGxpZ2h0c1xcXCJcXG5cXG4gICAgLy8gVG9rdXlvc2hpIDIwMTcsIFxcXCJFcnJvciBSZWR1Y3Rpb24gYW5kIFNpbXBsaWZpY2F0aW9uIGZvciBTaGFkaW5nIEFudGktQWxpYXNpbmdcXFwiXFxuXFxuICAgIC8vIFRva3V5b3NoaSBhbmQgS2FwbGFueWFuIDIwMTksIFxcXCJJbXByb3ZlZCBHZW9tZXRyaWMgU3BlY3VsYXIgQW50aWFsaWFzaW5nXFxcIlxcblxcblxcblxcbiAgICAvLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIG1lYW50IGZvciBkZWZlcnJlZCByZW5kZXJpbmcgaW4gdGhlIG9yaWdpbmFsIHBhcGVyIGJ1dFxcblxcbiAgICAvLyB3ZSB1c2UgaXQgaW4gZm9yd2FyZCByZW5kZXJpbmcgYXMgd2VsbCAoYXMgZGlzY3Vzc2VkIGluIFRva3V5b3NoaSBhbmQgS2FwbGFueWFuXFxuXFxuICAgIC8vIDIwMTkpLiBUaGUgbWFpbiByZWFzb24gaXMgdGhhdCB0aGUgZm9yd2FyZCB2ZXJzaW9uIHJlcXVpcmVzIGFuIGV4cGVuc2l2ZSB0cmFuc2Zvcm1cXG5cXG4gICAgLy8gb2YgdGhlIGhhbGYgdmVjdG9yIGJ5IHRoZSB0YW5nZW50IGZyYW1lIGZvciBldmVyeSBsaWdodC4gVGhpcyBpcyB0aGVyZWZvcmUgYW5cXG5cXG4gICAgLy8gYXBwcm94aW1hdGlvbiBidXQgaXQgd29ya3Mgd2VsbCBlbm91Z2ggZm9yIG91ciBuZWVkcyBhbmQgcHJvdmlkZXMgYW4gaW1wcm92ZW1lbnRcXG5cXG4gICAgLy8gb3ZlciBvdXIgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gVmxhY2hvcyAyMDE1LCBcXFwiQWR2YW5jZWQgVlIgUmVuZGVyaW5nXFxcIi5cXG5cXG5cXG5cXG4gICAgdmVjMyBkdSA9IGRGZHgod29ybGROb3JtYWwpO1xcblxcbiAgICB2ZWMzIGR2ID0gZEZkeSh3b3JsZE5vcm1hbCk7XFxuXFxuXFxuXFxuICAgIGZsb2F0IHZhcmlhbmNlID0gbWF0ZXJpYWxQYXJhbXMuX3NwZWN1bGFyQW50aUFsaWFzaW5nVmFyaWFuY2UgKiAoZG90KGR1LCBkdSkgKyBkb3QoZHYsIGR2KSk7XFxuXFxuXFxuXFxuICAgIGZsb2F0IHJvdWdobmVzcyA9IHBlcmNlcHR1YWxSb3VnaG5lc3NUb1JvdWdobmVzcyhwZXJjZXB0dWFsUm91Z2huZXNzKTtcXG5cXG4gICAgZmxvYXQga2VybmVsUm91Z2huZXNzID0gbWluKDIuMCAqIHZhcmlhbmNlLCBtYXRlcmlhbFBhcmFtcy5fc3BlY3VsYXJBbnRpQWxpYXNpbmdUaHJlc2hvbGQpO1xcblxcbiAgICBmbG9hdCBzcXVhcmVSb3VnaG5lc3MgPSBzYXR1cmF0ZShyb3VnaG5lc3MgKiByb3VnaG5lc3MgKyBrZXJuZWxSb3VnaG5lc3MpO1xcblxcblxcblxcbiAgICByZXR1cm4gcm91Z2huZXNzVG9QZXJjZXB0dWFsUm91Z2huZXNzKHNxcnQoc3F1YXJlUm91Z2huZXNzKSk7XFxuXFxufVxcblxcbiNlbmRpZlxcblxcblxcblxcbnZvaWQgZ2V0Q29tbW9uUGl4ZWxQYXJhbXMoY29uc3QgTWF0ZXJpYWxJbnB1dHMgbWF0ZXJpYWwsIGlub3V0IFBpeGVsUGFyYW1zIHBpeGVsKSB7XFxuXFxuICAgIHZlYzQgYmFzZUNvbG9yID0gbWF0ZXJpYWwuYmFzZUNvbG9yO1xcblxcbiAgICBhcHBseUFscGhhTWFzayhiYXNlQ29sb3IpO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKEJMRU5EX01PREVfRkFERSkgJiYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9VTkxJVClcXG5cXG4gICAgLy8gU2luY2Ugd2Ugd29yayBpbiBwcmVtdWx0aXBsaWVkIGFscGhhIG1vZGUsIHdlIG5lZWQgdG8gdW4tcHJlbXVsdGlwbHlcXG5cXG4gICAgLy8gaW4gZmFkZSBtb2RlIHNvIHdlIGNhbiBhcHBseSBhbHBoYSB0byBib3RoIHRoZSBzcGVjdWxhciBhbmQgZGlmZnVzZVxcblxcbiAgICAvLyBjb21wb25lbnRzIGF0IHRoZSBlbmRcXG5cXG4gICAgdW5wcmVtdWx0aXBseShiYXNlQ29sb3IpO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1BFQ1VMQVJfR0xPU1NJTkVTUylcXG5cXG4gICAgLy8gVGhpcyBpcyBmcm9tIEtIUl9tYXRlcmlhbHNfcGJyU3BlY3VsYXJHbG9zc2luZXNzLlxcblxcbiAgICB2ZWMzIHNwZWN1bGFyQ29sb3IgPSBtYXRlcmlhbC5zcGVjdWxhckNvbG9yO1xcblxcbiAgICBmbG9hdCBtZXRhbGxpYyA9IGNvbXB1dGVNZXRhbGxpY0Zyb21TcGVjdWxhckNvbG9yKHNwZWN1bGFyQ29sb3IpO1xcblxcblxcblxcbiAgICBwaXhlbC5kaWZmdXNlQ29sb3IgPSBjb21wdXRlRGlmZnVzZUNvbG9yKGJhc2VDb2xvciwgbWV0YWxsaWMpO1xcblxcbiAgICBwaXhlbC5mMCA9IHNwZWN1bGFyQ29sb3I7XFxuXFxuI2VsaWYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9DTE9USClcXG5cXG4gICAgcGl4ZWwuZGlmZnVzZUNvbG9yID0gY29tcHV0ZURpZmZ1c2VDb2xvcihiYXNlQ29sb3IsIG1hdGVyaWFsLm1ldGFsbGljKTtcXG5cXG5cXG5cXG4gICAgLy8gQXNzdW1lcyBhbiBpbnRlcmZhY2UgZnJvbSBhaXIgdG8gYW4gSU9SIG9mIDEuNSBmb3IgZGllbGVjdHJpY3NcXG5cXG4gICAgZmxvYXQgcmVmbGVjdGFuY2UgPSBjb21wdXRlRGllbGVjdHJpY0YwKG1hdGVyaWFsLnJlZmxlY3RhbmNlKTtcXG5cXG4gICAgcGl4ZWwuZjAgPSBjb21wdXRlRjAoYmFzZUNvbG9yLCBtYXRlcmlhbC5tZXRhbGxpYywgcmVmbGVjdGFuY2UpO1xcblxcbiNlbHNlXFxuXFxuICAgIHBpeGVsLmRpZmZ1c2VDb2xvciA9IGJhc2VDb2xvci5yZ2I7XFxuXFxuICAgIHBpeGVsLmYwID0gbWF0ZXJpYWwuc2hlZW5Db2xvcjtcXG5cXG4jaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfU1VCU1VSRkFDRV9DT0xPUilcXG5cXG4gICAgcGl4ZWwuc3Vic3VyZmFjZUNvbG9yID0gbWF0ZXJpYWwuc3Vic3VyZmFjZUNvbG9yO1xcblxcbiNlbmRpZlxcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG52b2lkIGdldENsZWFyQ29hdFBpeGVsUGFyYW1zKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsLCBpbm91dCBQaXhlbFBhcmFtcyBwaXhlbCkge1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUl9DT0FUKVxcblxcbiAgICBwaXhlbC5jbGVhckNvYXQgPSBtYXRlcmlhbC5jbGVhckNvYXQ7XFxuXFxuXFxuXFxuICAgIC8vIENsYW1wIHRoZSBjbGVhciBjb2F0IHJvdWdobmVzcyB0byBhdm9pZCBkaXZpc2lvbnMgYnkgMFxcblxcbiAgICBmbG9hdCBjbGVhckNvYXRQZXJjZXB0dWFsUm91Z2huZXNzID0gbWF0ZXJpYWwuY2xlYXJDb2F0Um91Z2huZXNzO1xcblxcbiAgICBjbGVhckNvYXRQZXJjZXB0dWFsUm91Z2huZXNzID0gbWl4KE1JTl9QRVJDRVBUVUFMX1JPVUdITkVTUyxcXG5cXG4gICAgICAgICAgICBNQVhfQ0xFQVJfQ09BVF9QRVJDRVBUVUFMX1JPVUdITkVTUywgY2xlYXJDb2F0UGVyY2VwdHVhbFJvdWdobmVzcyk7XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoR0VPTUVUUklDX1NQRUNVTEFSX0FBKVxcblxcbiAgICBjbGVhckNvYXRQZXJjZXB0dWFsUm91Z2huZXNzID1cXG5cXG4gICAgICAgICAgICBub3JtYWxGaWx0ZXJpbmcoY2xlYXJDb2F0UGVyY2VwdHVhbFJvdWdobmVzcywgZ2V0V29ybGRHZW9tZXRyaWNOb3JtYWxWZWN0b3IoKSk7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuICAgIHBpeGVsLmNsZWFyQ29hdFBlcmNlcHR1YWxSb3VnaG5lc3MgPSBjbGVhckNvYXRQZXJjZXB0dWFsUm91Z2huZXNzO1xcblxcbiAgICBwaXhlbC5jbGVhckNvYXRSb3VnaG5lc3MgPSBwZXJjZXB0dWFsUm91Z2huZXNzVG9Sb3VnaG5lc3MoY2xlYXJDb2F0UGVyY2VwdHVhbFJvdWdobmVzcyk7XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoQ0xFQVJfQ09BVF9JT1JfQ0hBTkdFKVxcblxcbiAgICAvLyBUaGUgYmFzZSBsYXllcidzIGYwIGlzIGNvbXB1dGVkIGFzc3VtaW5nIGFuIGludGVyZmFjZSBmcm9tIGFpciB0byBhbiBJT1JcXG5cXG4gICAgLy8gb2YgMS41LCBidXQgdGhlIGNsZWFyIGNvYXQgbGF5ZXIgZm9ybXMgYW4gaW50ZXJmYWNlIGZyb20gSU9SIDEuNSB0byBJT1JcXG5cXG4gICAgLy8gMS41LiBXZSByZWNvbXB1dGUgZjAgYnkgZmlyc3QgY29tcHV0aW5nIGl0cyBJT1IsIHRoZW4gcmVjb252ZXJ0aW5nIHRvIGYwXFxuXFxuICAgIC8vIGJ5IHVzaW5nIHRoZSBjb3JyZWN0IGludGVyZmFjZVxcblxcbiAgICBwaXhlbC5mMCA9IG1peChwaXhlbC5mMCwgZjBDbGVhckNvYXRUb1N1cmZhY2UocGl4ZWwuZjApLCBwaXhlbC5jbGVhckNvYXQpO1xcblxcbiNlbmRpZlxcblxcbiNlbmRpZlxcblxcbn1cXG5cXG5cXG5cXG52b2lkIGdldFJvdWdobmVzc1BpeGVsUGFyYW1zKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsLCBpbm91dCBQaXhlbFBhcmFtcyBwaXhlbCkge1xcblxcbiNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1BFQ1VMQVJfR0xPU1NJTkVTUylcXG5cXG4gICAgZmxvYXQgcGVyY2VwdHVhbFJvdWdobmVzcyA9IGNvbXB1dGVSb3VnaG5lc3NGcm9tR2xvc3NpbmVzcyhtYXRlcmlhbC5nbG9zc2luZXNzKTtcXG5cXG4jZWxzZVxcblxcbiAgICBmbG9hdCBwZXJjZXB0dWFsUm91Z2huZXNzID0gbWF0ZXJpYWwucm91Z2huZXNzO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiAgICAvLyBDbGFtcCB0aGUgcm91Z2huZXNzIHRvIGEgbWluaW11bSB2YWx1ZSB0byBhdm9pZCBkaXZpc2lvbnMgYnkgMCBkdXJpbmcgbGlnaHRpbmdcXG5cXG4gICAgcGVyY2VwdHVhbFJvdWdobmVzcyA9IGNsYW1wKHBlcmNlcHR1YWxSb3VnaG5lc3MsIE1JTl9QRVJDRVBUVUFMX1JPVUdITkVTUywgMS4wKTtcXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChHRU9NRVRSSUNfU1BFQ1VMQVJfQUEpXFxuXFxuICAgIHBlcmNlcHR1YWxSb3VnaG5lc3MgPSBub3JtYWxGaWx0ZXJpbmcocGVyY2VwdHVhbFJvdWdobmVzcywgZ2V0V29ybGRHZW9tZXRyaWNOb3JtYWxWZWN0b3IoKSk7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVQpICYmIGRlZmluZWQoTUFURVJJQUxfSEFTX0NMRUFSX0NPQVRfUk9VR0hORVNTKVxcblxcbiAgICAvLyBUaGlzIGlzIGEgaGFjayBidXQgaXQgd2lsbCBkbzogdGhlIGJhc2UgbGF5ZXIgbXVzdCBiZSBhdCBsZWFzdCBhcyByb3VnaFxcblxcbiAgICAvLyBhcyB0aGUgY2xlYXIgY29hdCBsYXllciB0byB0YWtlIGludG8gYWNjb3VudCBwb3NzaWJsZSBkaWZmdXNpb24gYnkgdGhlXFxuXFxuICAgIC8vIHRvcCBsYXllclxcblxcbiAgICBmbG9hdCBiYXNlUGVyY2VwdHVhbFJvdWdobmVzcyA9IG1heChwZXJjZXB0dWFsUm91Z2huZXNzLCBwaXhlbC5jbGVhckNvYXRQZXJjZXB0dWFsUm91Z2huZXNzKTtcXG5cXG4gICAgcGVyY2VwdHVhbFJvdWdobmVzcyA9IG1peChwZXJjZXB0dWFsUm91Z2huZXNzLCBiYXNlUGVyY2VwdHVhbFJvdWdobmVzcywgcGl4ZWwuY2xlYXJDb2F0KTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4gICAgLy8gUmVtYXBzIHRoZSByb3VnaG5lc3MgdG8gYSBwZXJjZXB0dWFsbHkgbGluZWFyIHJvdWdobmVzcyAocm91Z2huZXNzXjIpXFxuXFxuICAgIHBpeGVsLnBlcmNlcHR1YWxSb3VnaG5lc3MgPSBwZXJjZXB0dWFsUm91Z2huZXNzO1xcblxcbiAgICBwaXhlbC5yb3VnaG5lc3MgPSBwZXJjZXB0dWFsUm91Z2huZXNzVG9Sb3VnaG5lc3MocGVyY2VwdHVhbFJvdWdobmVzcyk7XFxuXFxufVxcblxcblxcblxcbnZvaWQgZ2V0U3Vic3VyZmFjZVBpeGVsUGFyYW1zKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsLCBpbm91dCBQaXhlbFBhcmFtcyBwaXhlbCkge1xcblxcbiNpZiBkZWZpbmVkKFNIQURJTkdfTU9ERUxfU1VCU1VSRkFDRSlcXG5cXG4gICAgcGl4ZWwuc3Vic3VyZmFjZVBvd2VyID0gbWF0ZXJpYWwuc3Vic3VyZmFjZVBvd2VyO1xcblxcbiAgICBwaXhlbC5zdWJzdXJmYWNlQ29sb3IgPSBtYXRlcmlhbC5zdWJzdXJmYWNlQ29sb3I7XFxuXFxuICAgIHBpeGVsLnRoaWNrbmVzcyA9IHNhdHVyYXRlKG1hdGVyaWFsLnRoaWNrbmVzcyk7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcblxcblxcbnZvaWQgZ2V0QW5pc290cm9weVBpeGVsUGFyYW1zKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsLCBpbm91dCBQaXhlbFBhcmFtcyBwaXhlbCkge1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19BTklTT1RST1BZKVxcblxcbiAgICB2ZWMzIGRpcmVjdGlvbiA9IG1hdGVyaWFsLmFuaXNvdHJvcHlEaXJlY3Rpb247XFxuXFxuICAgIHBpeGVsLmFuaXNvdHJvcHkgPSBtYXRlcmlhbC5hbmlzb3Ryb3B5O1xcblxcbiAgICBwaXhlbC5hbmlzb3Ryb3BpY1QgPSBub3JtYWxpemUoc2hhZGluZ190YW5nZW50VG9Xb3JsZCAqIGRpcmVjdGlvbik7XFxuXFxuICAgIHBpeGVsLmFuaXNvdHJvcGljQiA9IG5vcm1hbGl6ZShjcm9zcyhnZXRXb3JsZEdlb21ldHJpY05vcm1hbFZlY3RvcigpLCBwaXhlbC5hbmlzb3Ryb3BpY1QpKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxudm9pZCBnZXRFbmVyZ3lDb21wZW5zYXRpb25QaXhlbFBhcmFtcyhpbm91dCBQaXhlbFBhcmFtcyBwaXhlbCkge1xcblxcbiAgICAvLyBQcmUtZmlsdGVyZWQgREZHIHRlcm0gdXNlZCBmb3IgaW1hZ2UtYmFzZWQgbGlnaHRpbmdcXG5cXG4gICAgcGl4ZWwuZGZnID0gcHJlZmlsdGVyZWRERkcocGl4ZWwucGVyY2VwdHVhbFJvdWdobmVzcywgc2hhZGluZ19Ob1YpO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKFVTRV9NVUxUSVBMRV9TQ0FUVEVSSU5HX0NPTVBFTlNBVElPTikgJiYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9DTE9USClcXG5cXG4gICAgLy8gRW5lcmd5IGNvbXBlbnNhdGlvbiBmb3IgbXVsdGlwbGUgc2NhdHRlcmluZyBpbiBhIG1pY3JvZmFjZXQgbW9kZWxcXG5cXG4gICAgLy8gU2VlIFxcXCJNdWx0aXBsZS1TY2F0dGVyaW5nIE1pY3JvZmFjZXQgQlNERnMgd2l0aCB0aGUgU21pdGggTW9kZWxcXFwiXFxuXFxuICAgIHBpeGVsLmVuZXJneUNvbXBlbnNhdGlvbiA9IDEuMCArIHBpeGVsLmYwICogKDEuMCAvIHBpeGVsLmRmZy55IC0gMS4wKTtcXG5cXG4jZWxzZVxcblxcbiAgICBwaXhlbC5lbmVyZ3lDb21wZW5zYXRpb24gPSB2ZWMzKDEuMCk7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcblxcblxcblxcblxcbnZvaWQgZ2V0UGl4ZWxQYXJhbXMoY29uc3QgTWF0ZXJpYWxJbnB1dHMgbWF0ZXJpYWwsIG91dCBQaXhlbFBhcmFtcyBwaXhlbCkge1xcblxcbiAgICBnZXRDb21tb25QaXhlbFBhcmFtcyhtYXRlcmlhbCwgcGl4ZWwpO1xcblxcbiAgICBnZXRDbGVhckNvYXRQaXhlbFBhcmFtcyhtYXRlcmlhbCwgcGl4ZWwpO1xcblxcbiAgICBnZXRSb3VnaG5lc3NQaXhlbFBhcmFtcyhtYXRlcmlhbCwgcGl4ZWwpO1xcblxcbiAgICBnZXRTdWJzdXJmYWNlUGl4ZWxQYXJhbXMobWF0ZXJpYWwsIHBpeGVsKTtcXG5cXG4gICAgZ2V0QW5pc290cm9weVBpeGVsUGFyYW1zKG1hdGVyaWFsLCBwaXhlbCk7XFxuXFxuICAgIGdldEVuZXJneUNvbXBlbnNhdGlvblBpeGVsUGFyYW1zKHBpeGVsKTtcXG5cXG59XFxuXFxuXFxuXFxuXFxuXFxudmVjNCBldmFsdWF0ZUxpZ2h0cyhjb25zdCBNYXRlcmlhbElucHV0cyBtYXRlcmlhbCkge1xcblxcbiAgICBQaXhlbFBhcmFtcyBwaXhlbDtcXG5cXG4gICAgZ2V0UGl4ZWxQYXJhbXMobWF0ZXJpYWwsIHBpeGVsKTtcXG5cXG5cXG5cXG4gICAgLy8gSWRlYWxseSB3ZSB3b3VsZCBrZWVwIHRoZSBkaWZmdXNlIGFuZCBzcGVjdWxhciBjb21wb25lbnRzIHNlcGFyYXRlXFxuXFxuICAgIC8vIHVudGlsIHRoZSB2ZXJ5IGVuZCBidXQgaXQgY29zdHMgbW9yZSBBTFVzIG9uIG1vYmlsZS4gVGhlIGdhaW5zIGFyZVxcblxcbiAgICAvLyBjdXJyZW50bHkgbm90IHdvcnRoIHRoZSBleHRyYSBvcGVyYXRpb25zXFxuXFxuICAgIHZlYzMgY29sb3IgPSB2ZWMzKDAuMCk7XFxuXFxuXFxuXFxuICAgIC8vIFdlIGFsd2F5cyBldmFsdWF0ZSB0aGUgSUJMIGFzIG5vdCBoYXZpbmcgb25lIGlzIGdvaW5nIHRvIGJlIHVuY29tbW9uLFxcblxcbiAgICAvLyBpdCBhbHNvIHNhdmVzIDEgc2hhZGVyIHZhcmlhbnRcXG5cXG4gICAgZXZhbHVhdGVJQkwobWF0ZXJpYWwsIHBpeGVsLCBjb2xvcik7XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX0RJUkVDVElPTkFMX0xJR0hUSU5HKVxcblxcbiAgICBldmFsdWF0ZURpcmVjdGlvbmFsTGlnaHQobWF0ZXJpYWwsIHBpeGVsLCBjb2xvcik7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX0RZTkFNSUNfTElHSFRJTkcpXFxuXFxuICAgIC8vVE9ETyDnm67liY3mmoLml7bmsqHmnInngrnlhYnmupDnmoTpnIDmsYLvvIzkvYbmnKrmnaXln7rkuo5EZWZlcnJlZCBSZW5kZXJpbmfnu5jliLblpKfph4/lpJzmma/ngrnlhYnmupDvvIjot6/nga/vvInml7bvvIzmiY3pnIDopoFcXG5cXG4gICAgLy8gZXZhbHVhdGVQdW5jdHVhbExpZ2h0cyhwaXhlbCwgY29sb3IpO1xcblxcbiNlbmRpZlxcblxcblxcblxcbiNpZiBkZWZpbmVkKEJMRU5EX01PREVfRkFERSkgJiYgIWRlZmluZWQoU0hBRElOR19NT0RFTF9VTkxJVClcXG5cXG4gICAgLy8gSW4gZmFkZSBtb2RlIHdlIHVuLXByZW11bHRpcGx5IGJhc2VDb2xvciBlYXJseSBvbiwgc28gd2UgbmVlZCB0b1xcblxcbiAgICAvLyBwcmVtdWx0aXBseSBhZ2FpbiBhdCB0aGUgZW5kIChhZmZlY3RzIGRpZmZ1c2UgYW5kIHNwZWN1bGFyIGxpZ2h0aW5nKVxcblxcbiAgICBjb2xvciAqPSBtYXRlcmlhbC5iYXNlQ29sb3IuYTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4gICAgcmV0dXJuIHZlYzQoY29sb3IsIGNvbXB1dGVEaWZmdXNlQWxwaGEobWF0ZXJpYWwuYmFzZUNvbG9yLmEpKTtcXG5cXG59XFxuXFxuXFxuXFxudm9pZCBhZGRFbWlzc2l2ZShjb25zdCBNYXRlcmlhbElucHV0cyBtYXRlcmlhbCwgaW5vdXQgdmVjNCBjb2xvcikge1xcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19FTUlTU0lWRSlcXG5cXG4gICAgLy8gVGhlIGVtaXNzaXZlIHByb3BlcnR5IGFwcGxpZXMgaW5kZXBlbmRlbnRseSBvZiB0aGUgc2hhZGluZyBtb2RlbFxcblxcbiAgICAvLyBJdCBpcyBkZWZpbmVkIGFzIGEgY29sb3IgKyBleHBvc3VyZSBjb21wZW5zYXRpb25cXG5cXG4gICAgaGlnaHAgdmVjNCBlbWlzc2l2ZSA9IG1hdGVyaWFsLmVtaXNzaXZlO1xcblxcbiAgICBoaWdocCBmbG9hdCBhdHRlbnVhdGlvbiA9IGNvbXB1dGVQcmVFeHBvc2VkSW50ZW5zaXR5KFxcblxcbiAgICAgICAgICAgIHBvdygyLjAsIGZyYW1lVW5pZm9ybXMuZXYxMDAgKyBlbWlzc2l2ZS53IC0gMy4wKSwgZnJhbWVVbmlmb3Jtcy5leHBvc3VyZSk7XFxuXFxuICAgIGNvbG9yLnJnYiArPSBlbWlzc2l2ZS5yZ2IgKiBhdHRlbnVhdGlvbjtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXFxuXFxuXFxuXFxudmVjNCBldmFsdWF0ZU1hdGVyaWFsKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsKSB7XFxuXFxuICAgIHZlYzQgY29sb3IgPSBldmFsdWF0ZUxpZ2h0cyhtYXRlcmlhbCk7XFxuXFxuICAgIGFkZEVtaXNzaXZlKG1hdGVyaWFsLCBjb2xvcik7XFxuXFxuICAgIHJldHVybiBjb2xvcjtcXG5cXG59XFxuXFxuXCI7XG5cbnZhciBmbF9nbF9wb3N0X3Byb2Nlc3NfZnJhZyA9IFwiZmxvYXQgbGluZWFyVG9TUkdCKGZsb2F0IGMpIHtcXG5cXG4gICAgcmV0dXJuIChjIDw9IDAuMDAzMTMwOCkgPyBjICogMTIuOTIgOiAocG93KGFicyhjKSwgMS4wIC8gMi40KSAqIDEuMDU1KSAtIDAuMDU1O1xcblxcbn1cXG5cXG52ZWMzIGxpbmVhclRvU1JHQih2ZWMzIGMpIHtcXG5cXG4gICAgcmV0dXJuIHZlYzMobGluZWFyVG9TUkdCKGMuciksIGxpbmVhclRvU1JHQihjLmcpLCBsaW5lYXJUb1NSR0IoYy5iKSk7XFxuXFxufVxcblxcblxcblxcbnZlYzMgSERSX0FDRVMoY29uc3QgdmVjMyB4KSB7XFxuXFxuICAgIC8vIE5hcmtvd2ljeiAyMDE1LCBcXFwiQUNFUyBGaWxtaWMgVG9uZSBNYXBwaW5nIEN1cnZlXFxcIlxcblxcbiAgICBjb25zdCBmbG9hdCBhID0gMi41MTtcXG5cXG4gICAgY29uc3QgZmxvYXQgYiA9IDAuMDM7XFxuXFxuICAgIGNvbnN0IGZsb2F0IGMgPSAyLjQzO1xcblxcbiAgICBjb25zdCBmbG9hdCBkID0gMC41OTtcXG5cXG4gICAgY29uc3QgZmxvYXQgZSA9IDAuMTQ7XFxuXFxuICAgIHJldHVybiAoeCAqIChhICogeCArIGIpKSAvICh4ICogKGMgKiB4ICsgZCkgKyBlKTtcXG5cXG59XFxuXFxudmVjMyB0b25lbWFwKGNvbnN0IHZlYzMgeCkge1xcblxcbiAgICByZXR1cm4gSERSX0FDRVMoeCk7XFxuXFxufVxcblxcblxcblxcbnZlYzMgcG9zdFByb2Nlc3ModmVjMyBjb2xvcikge1xcblxcbiAgICB2ZWMzIGMgPSBjb2xvcjtcXG5cXG4gICAgYyA9IGxpbmVhclRvU1JHQih0b25lbWFwKGMpKTtcXG5cXG4gICAgcmV0dXJuIGM7XFxuXFxufVxcblxcblwiO1xuXG52YXIgZmxfbWFpbiA9IFwiI2lmIGRlZmluZWQoTUFURVJJQUxfSEFTX1BPU1RfTElHSFRJTkdfQ09MT1IpXFxuXFxudm9pZCBibGVuZFBvc3RMaWdodGluZ0NvbG9yKGNvbnN0IE1hdGVyaWFsSW5wdXRzIG1hdGVyaWFsLCBpbm91dCB2ZWM0IGNvbG9yKSB7XFxuXFxuI2lmIGRlZmluZWQoUE9TVF9MSUdIVElOR19CTEVORF9NT0RFX09QQVFVRSlcXG5cXG4gICAgY29sb3IgPSBtYXRlcmlhbC5wb3N0TGlnaHRpbmdDb2xvcjtcXG5cXG4jZWxpZiBkZWZpbmVkKFBPU1RfTElHSFRJTkdfQkxFTkRfTU9ERV9UUkFOU1BBUkVOVClcXG5cXG4gICAgY29sb3IgPSBtYXRlcmlhbC5wb3N0TGlnaHRpbmdDb2xvciArIGNvbG9yICogKDEuMCAtIG1hdGVyaWFsLnBvc3RMaWdodGluZ0NvbG9yLmEpO1xcblxcbiNlbGlmIGRlZmluZWQoUE9TVF9MSUdIVElOR19CTEVORF9NT0RFX0FERClcXG5cXG4gICAgY29sb3IgKz0gbWF0ZXJpYWwucG9zdExpZ2h0aW5nQ29sb3I7XFxuXFxuI2VuZGlmXFxuXFxufVxcblxcbiNlbmRpZlxcblxcblxcblxcbiNpbmNsdWRlIDxmbF9nbF9wb3N0X3Byb2Nlc3NfZnJhZz5cXG5cXG5cXG5cXG52b2lkIG1haW4oKSB7XFxuXFxuICAgIC8vdW5pZm9ybXMuZ2xzbFxcblxcbiAgICBpbml0RnJhbWVVbmlmb3JtcygpO1xcblxcbiAgICAvLyBTZWUgc2hhZGluZ19wYXJhbWV0ZXJzLmZyYWdcXG5cXG4gICAgLy8gQ29tcHV0ZXMgZ2xvYmFsIHZhcmlhYmxlcyB3ZSBuZWVkIHRvIGV2YWx1YXRlIG1hdGVyaWFsIGFuZCBsaWdodGluZ1xcblxcbiAgICBjb21wdXRlU2hhZGluZ1BhcmFtcygpO1xcblxcblxcblxcbiAgICAvLyBJbml0aWFsaXplIHRoZSBpbnB1dHMgdG8gc2Vuc2libGUgZGVmYXVsdCB2YWx1ZXMsIHNlZSBjb21tb25fbWF0ZXJpYWwuZnNcXG5cXG4gICAgTWF0ZXJpYWxJbnB1dHMgaW5wdXRzO1xcblxcbiAgICBpbml0TWF0ZXJpYWwoaW5wdXRzKTtcXG5cXG5cXG5cXG4gICAgLy8gSW52b2tlIHVzZXIgY29kZVxcblxcbiAgICBnZXRNYXRlcmlhbChpbnB1dHMpO1xcblxcbiAgICAvL3NoYWRpbmdfcGFyYW1zXFxuXFxuICAgIHByZXBhcmVNYXRlcmlhbChpbnB1dHMpO1xcblxcblxcblxcbiAgICB2ZWM0IGNvbG9yID0gZXZhbHVhdGVNYXRlcmlhbChpbnB1dHMpO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKEhBU19UT05FX01BUFBJTkcpXFxuXFxuICAgIGNvbG9yLnJnYiA9IHBvc3RQcm9jZXNzKGNvbG9yLnJnYik7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuICAgIGdsX0ZyYWdDb2xvciA9IGNvbG9yO1xcblxcbiAgICAvLyBnbF9GcmFnQ29sb3IgPSB2ZWM0KHZlYzMoaW5wdXRzLmFtYmllbnRPY2NsdXNpb24pLCAxLjApO1xcblxcblxcblxcbiNpZiBkZWZpbmVkKE1BVEVSSUFMX0hBU19QT1NUX0xJR0hUSU5HX0NPTE9SKVxcblxcbiAgICBibGVuZFBvc3RMaWdodGluZ0NvbG9yKGlucHV0cywgZ2xfRnJhZ0NvbG9yKTtcXG5cXG4jZW5kaWZcXG5cXG59XFxuXFxuXCI7XG5cbi8qIGVzbGludC1kaXNhYmxlIGNhbWVsY2FzZSAqL1xyXG5cclxuLy9TaGFkZXIgQ2h1bmtzIGZvciBpbmNsdWRlc1xyXG5jb25zdCBTaGFkZXJDaHVuayA9IHtcclxuICAgIHZzbV9zaGFkb3dfdmVydCxcclxuICAgIHZzbV9zaGFkb3dfZnJhZyxcclxuICAgIGZib19waWNraW5nX3ZlcnQsXHJcblxyXG4gICAgLy9wYnIgY29tbW9uIGluY2x1ZGVzXHJcbiAgICBmbF9jb21tb25fbWF0aF9nbHNsLFxyXG4gICAgZmxfY29tbW9uX2dyYXBoaWNzX2dsc2wsXHJcbiAgICBmbF91bmlmb3Jtc19nbHNsLFxyXG5cclxuICAgIC8vcGJyIHZlcnRleCBpbmNsdWRlc1xyXG4gICAgZmxfbWF0ZXJpYWxfaW5wdXRzX3ZlcnQsXHJcbiAgICBmbF9pbnB1dHNfdmVydCxcclxuXHJcbiAgICAvL3BiciBmcmFnIGluY2x1ZGVzXHJcbiAgICBmbF9oZWFkZXJfZnJhZyxcclxuICAgIGZsX2lucHV0c19mcmFnLFxyXG4gICAgZmxfYnJkZl9mcmFnLFxyXG4gICAgZmxfc2hhZGluZ19wYXJhbXMsXHJcbiAgICBmbF9jb21tb25fc2hhZGluZ19mcmFnLFxyXG4gICAgZmxfZ2V0dGVyc19mcmFnLFxyXG4gICAgZmxfbWF0ZXJpYWxfaW5wdXRzX2ZyYWcsXHJcbiAgICBmbF9jb21tb25fbWF0ZXJpYWxfZnJhZyxcclxuICAgIGZsX2NvbW1vbl9saWdodGluZ19mcmFnLFxyXG4gICAgZmxfbWF0ZXJpYWxfdW5pZm9ybXNfZnJhZyxcclxuICAgIGZsX2xpZ2h0X3VuaWZvcm1zX2ZyYWcsXHJcbiAgICBmbF9hbWJpZW50X29jY2x1c2lvbl9mcmFnLFxyXG4gICAgZmxfbGlnaHRfaW5kaXJlY3QsXHJcbiAgICBmbF9zaGFkaW5nX21vZGVsX3N0YW5kYXJkX2ZyYWcsXHJcbiAgICBmbF9zaGFkaW5nX21vZGVsX2Nsb3RoX2ZyYWcsXHJcbiAgICBmbF9zaGFkaW5nX21vZGVsX3N1YnN1cmZhY2VfZnJhZyxcclxuICAgIGZsX2xpZ2h0X2RpcmVjdGlvbmFsLFxyXG4gICAgZmxfc2hhZGluZ19saXQsXHJcbiAgICBmbF9nbF9wb3N0X3Byb2Nlc3NfZnJhZyxcclxuICAgIGZsX21haW4sXHJcbiAgICBpbnZlcnRfdmVydCxcclxuICAgIGluc3RhbmNlX3ZlcnQsXHJcbiAgICBza2luX3ZlcnRcclxufTtcclxuLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cclxuXHJcbnZhciBTaGFkZXJMaWIgPSB7XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVyIGEgbmV3IHNoYWRlciBzZWdtZW50IGZvciBpbmNsdWRlcyBmb3IgM3JkIHBhcnRpZXNcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIGtleSBuYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc291cmNlIHNoYWRlciBzZWdtZW50IHNvdXJjZVxyXG4gICAgICovXHJcbiAgICByZWdpc3RlcihuYW1lLCBzb3VyY2UpIHtcclxuICAgICAgICBpZiAoU2hhZGVyQ2h1bmtbbmFtZV0pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBLZXkgb2YgJHtuYW1lfSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgaW4gU2hhZGVyTGliLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBTaGFkZXJDaHVua1tuYW1lXSA9IHNvdXJjZTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21waWxlIHRoZSBnaXZlbiBzb3VyY2UsIHJlcGxhY2UgI2luY2x1ZGUgd2l0aCByZWdpc3RlcmVkIHNoYWRlciBzb3VyY2VzXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gc291cmNlIHNvdXJjZSB0byBjb21waWxlXHJcbiAgICAgKi9cclxuICAgIGNvbXBpbGUoc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlSW5jbHVkZXMoc291cmNlKTtcclxuICAgIH1cclxufTtcclxuXHJcbmNvbnN0IHBhdHRlcm4gPSAvXlsgXFx0XSojaW5jbHVkZSArPChbXFx3XFxkLl0rKT4vZ207XHJcblxyXG5mdW5jdGlvbiBwYXJzZUluY2x1ZGVzKHN0cmluZykge1xyXG4gICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHBhdHRlcm4sIHJlcGxhY2UpO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXBsYWNlKG1hdGNoLCBpbmNsdWRlKSB7XHJcbiAgICBjb25zdCByZXBsYWNlID0gU2hhZGVyQ2h1bmtbaW5jbHVkZV07XHJcbiAgICBpZiAoIXJlcGxhY2UpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBub3QgcmVzb2x2ZSAjaW5jbHVkZSA8JyArIGluY2x1ZGUgKyAnPicpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcnNlSW5jbHVkZXMocmVwbGFjZSk7XHJcbn1cblxuY29uc3QgVU5JRk9STV9UWVBFID0ge1xyXG4gICAgZnVuY3Rpb24gOiAnZnVuY3Rpb24nLFxyXG4gICAgYXJyYXkgOiAnYXJyYXknXHJcbn07XHJcblxyXG5jbGFzcyBTaGFkZXIge1xyXG4gICAgY29uc3RydWN0b3IoeyB2ZXJ0LCBmcmFnLCB1bmlmb3JtcywgZGVmaW5lcywgZXh0cmFDb21tYW5kUHJvcHMgfSkge1xyXG4gICAgICAgIHRoaXMudmVydCA9IHZlcnQ7XHJcbiAgICAgICAgdGhpcy5mcmFnID0gZnJhZztcclxuICAgICAgICAvL2RlZmluZXMgYmVzaWRlcyBtZXNoZXMgOiBsaWdodHMsIGV0Y1xyXG4gICAgICAgIHRoaXMuc2hhZGVyRGVmaW5lcyA9IGRlZmluZXMgfHwge307XHJcblxyXG4gICAgICAgIHVuaWZvcm1zID0gdW5pZm9ybXMgfHwgW107XHJcbiAgICAgICAgdGhpcy5jb250ZXh0RGVzYyA9IHt9O1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdW5pZm9ybXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSB1bmlmb3Jtc1tpXTtcclxuICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHApKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocC5pbmRleE9mKCdbJykgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIGxlbiB9ID0gcGFyc2VBcnJheU5hbWUocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0RGVzY1tuYW1lXSA9IHsgbmFtZSwgdHlwZSA6ICdhcnJheScsIGxlbmd0aCA6IGxlbiB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHREZXNjW3BdID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChwLm5hbWUuaW5kZXhPZignWycpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gYXJyYXkgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmFtZSwgbGVuIH0gPSBwYXJzZUFycmF5TmFtZShwLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0RGVzY1tuYW1lXSA9IHsgbmFtZSwgdHlwZSA6ICdhcnJheScsIGxlbmd0aCA6IGxlbiwgZm4gOiBwLmZuIH07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBlLmcuXHJcbiAgICAgICAgICAgICAgICAvLyB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbmFtZSA6ICdmb28nLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIHR5cGUgOiAnZnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGZuIDogKGNvbnRleHQsIHByb3BzKSA9PiB7IC4uLiB9XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHREZXNjW3AubmFtZV0gPSBwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXh0cmFDb21tYW5kUHJvcHMgPSBleHRyYUNvbW1hbmRQcm9wcyB8fCB7fTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRzID0ge307XHJcbiAgICAgICAgdGhpcy5fY29tcGlsZVNvdXJjZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZyYW1lYnVmZmVyIG9iamVjdCB0byByZW5kZXIgdG9cclxuICAgICAqIFNldCB0byBudWxsIHRvIHJlbmRlciB0byBkZWZhdWx0IGRpc3BsYXlcclxuICAgICAqIEBwYXJhbSB7UkVHTEZyYW1lYnVmZmVyfSBmcmFtZWJ1ZmZlclxyXG4gICAgICovXHJcbiAgICBzZXRGcmFtZWJ1ZmZlcihmcmFtZWJ1ZmZlcikge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mcmFtZWJ1ZmZlciA9IGZyYW1lYnVmZmVyO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IHNoYWRlcidzIGNvbnRleHQgdW5pZm9ybXMgdmFsdWVzXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWVzaFByb3BzIC0gbWVzaCB1bmlmb3Jtc1xyXG4gICAgICovXHJcbiAgICBhcHBlbmRSZW5kZXJVbmlmb3JtcyhtZXNoUHJvcHMpIHtcclxuICAgICAgICAvL2FwcGVuZCBidXQgbm90IGV4dGVuZCB0byBzYXZlIHVubmVjZXNzYXJ5IG9iamVjdCBjb3BpZXNcclxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xyXG4gICAgICAgIC8vVE9ETyDov5nph4zku6XliY3mmK9leHRlbmQy77yM6ZyA6KaB5piO56Gu5pS555SoZXh0ZW5k5ZCO5piv5ZCm5Lya5pyJYnVnXHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSBleHRlbmQobWVzaFByb3BzLCBjb250ZXh0KTtcclxuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IHByb3BzO1xyXG4gICAgICAgIGNvbnN0IGRlc2MgPSB0aGlzLmNvbnRleHREZXNjO1xyXG4gICAgICAgIGZvciAoY29uc3QgcCBpbiBkZXNjKSB7XHJcbiAgICAgICAgICAgIGlmIChkZXNjW3BdICYmIGRlc2NbcF0udHlwZSA9PT0gJ2FycmF5Jykge1xyXG4gICAgICAgICAgICAgICAgLy9hbiBhcnJheSB1bmlmb3JtJ3MgdmFsdWVcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwLCBsZW4gPSBkZXNjW3BdLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSB1bmlmb3JtIHZhbHVlIHRvIHRoZSBmb2xsb3dpbmcgZm9ybSBhcyByZWdsIHJlcXVpcmVzOlxyXG4gICAgICAgICAgICAgICAgLy8gZm9vIDoge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIDAgOiAndmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIDEgOiAndmFsdWUnLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgIDIgOiAndmFsdWUnXHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWVzID0gY29udGV4dFtwXTtcclxuICAgICAgICAgICAgICAgIGlmIChkZXNjW3BdLmZuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW4gYXJyYXkgZnVuY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBkZXNjW3BdLmZuKGNvbnRleHQsIHByb3BzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoICE9PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7bmFtZX0gdW5pZm9ybSdzIGxlbmd0aCBpcyBub3QgJHtsZW59YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB1bmlmb3Jtc1tuYW1lXSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zW25hbWVdW2Ake2l9YF0gPSB2YWx1ZXNbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVuaWZvcm1zO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0IG9yIGdldCBjb250ZXh0IHVuaWZvcm0gdG8gb3IgZnJvbSB0aGUgc2hhZGVyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gayAtIGtleVxyXG4gICAgICogQHBhcmFtIHtBbnl9IHYgLSB2YWx1ZVxyXG4gICAgICogQHJldHVybnMge0FueX1cclxuICAgICAqL1xyXG4gICAgc2V0VW5pZm9ybXModW5pZm9ybXMpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB1bmlmb3JtcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGVSRUdMQ29tbWFuZChyZWdsLCBtYXRlcmlhbERlZmluZXMsIGF0dHJQcm9wcywgdW5pUHJvcHMsIGVsZW1lbnRzLCBpc0luc3RhbmNlZCkge1xyXG4gICAgICAgIHVuaVByb3BzID0gdW5pUHJvcHMgfHwgW107XHJcbiAgICAgICAgYXR0clByb3BzID0gYXR0clByb3BzIHx8IFtdO1xyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSBleHRlbmQoe30sIHRoaXMuc2hhZGVyRGVmaW5lcyB8fCB7fSwgbWF0ZXJpYWxEZWZpbmVzIHx8IHt9KTtcclxuICAgICAgICBjb25zdCB2ZXJ0ID0gdGhpcy5faW5zZXJ0RGVmaW5lcyh0aGlzLnZlcnQsIGRlZmluZXMpO1xyXG4gICAgICAgIGNvbnN0IGZyYWcgPSB0aGlzLl9pbnNlcnREZWZpbmVzKHRoaXMuZnJhZywgZGVmaW5lcyk7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IHt9O1xyXG4gICAgICAgIGF0dHJQcm9wcy5mb3JFYWNoKHAgPT4ge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzW3BdID0gcmVnbC5wcm9wKHApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IHt9O1xyXG4gICAgICAgIHVuaVByb3BzLmZvckVhY2gocCA9PiB7XHJcbiAgICAgICAgICAgIHVuaWZvcm1zW3BdID0gcmVnbC5wcm9wKHApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCBkZXNjID0gdGhpcy5jb250ZXh0RGVzYztcclxuICAgICAgICBmb3IgKGNvbnN0IHAgaW4gZGVzYykge1xyXG4gICAgICAgICAgICBpZiAoZGVzY1twXSAmJiBkZXNjW3BdLnR5cGUgPT09IFVOSUZPUk1fVFlQRVsnZnVuY3Rpb24nXSkge1xyXG4gICAgICAgICAgICAgICAgdW5pZm9ybXNbcF0gPSBkZXNjW3BdWydmbiddO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlc2NbcF0gJiYgZGVzY1twXS50eXBlID09PSBVTklGT1JNX1RZUEVbJ2FycmF5J10pIHtcclxuICAgICAgICAgICAgICAgIC8vIGFuIGFycmF5IHVuaWZvcm1cclxuICAgICAgICAgICAgICAgIC8vIHNwbGl0IHRvIGZvb1swXSwgZm9vWzFdLCAuLi4uIGFzIHJlZ2wgcmVxdWlyZXNcclxuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWdsLXByb2plY3QvcmVnbC9pc3N1ZXMvMjU4XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuYW1lID0gZGVzY1twXS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlbiA9IGRlc2NbcF0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGAke25hbWV9WyR7aX1dYDtcclxuICAgICAgICAgICAgICAgICAgICB1bmlmb3Jtc1trZXldID0gcmVnbC5wcm9wKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1bmlmb3Jtc1twXSA9IHJlZ2wucHJvcChwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29tbWFuZCA9IHtcclxuICAgICAgICAgICAgdmVydCwgZnJhZywgdW5pZm9ybXMsIGF0dHJpYnV0ZXNcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChlbGVtZW50cyAmJiAhaXNOdW1iZXIoZWxlbWVudHMpKSB7XHJcbiAgICAgICAgICAgIGNvbW1hbmQuZWxlbWVudHMgPSByZWdsLnByb3AoJ2VsZW1lbnRzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbW1hbmQuY291bnQgPSByZWdsLnByb3AoJ2NvdW50Jyk7XHJcbiAgICAgICAgY29tbWFuZC5vZmZzZXQgPSByZWdsLnByb3AoJ29mZnNldCcpO1xyXG4gICAgICAgIGNvbW1hbmQucHJpbWl0aXZlID0gcmVnbC5wcm9wKCdwcmltaXRpdmUnKTtcclxuICAgICAgICBjb21tYW5kLmZyYW1lYnVmZmVyID0gcmVnbC5wcm9wKCdmcmFtZWJ1ZmZlcicpO1xyXG4gICAgICAgIGlmIChpc0luc3RhbmNlZCkge1xyXG4gICAgICAgICAgICBjb21tYW5kLmluc3RhbmNlcyA9IHJlZ2wucHJvcCgnaW5zdGFuY2VzJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGV4dGVuZChjb21tYW5kLCB0aGlzLmV4dHJhQ29tbWFuZFByb3BzKTtcclxuICAgICAgICByZXR1cm4gcmVnbChjb21tYW5kKTtcclxuICAgIH1cclxuXHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIC8vVE9ETyBkaXNwb3NlIHRoZSBzaGFkZXIgYW5kIHJlZ2wgY29tbWFuZHNcclxuICAgIH1cclxuXHJcbiAgICBfaW5zZXJ0RGVmaW5lcyhzb3VyY2UsIGRlZmluZXMpIHtcclxuICAgICAgICBjb25zdCBkZWZpbmVIZWFkZXJzID0gW107XHJcbiAgICAgICAgZm9yIChjb25zdCBwIGluIGRlZmluZXMpIHtcclxuICAgICAgICAgICAgaWYgKGRlZmluZXMuaGFzT3duUHJvcGVydHkocCkgJiYgIWlzRnVuY3Rpb24oZGVmaW5lc1twXSkpIHtcclxuICAgICAgICAgICAgICAgIGRlZmluZUhlYWRlcnMucHVzaChgI2RlZmluZSAke3B9ICR7ZGVmaW5lc1twXX1cXG5gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVmaW5lSGVhZGVycy5qb2luKCcnKSArIHNvdXJjZTtcclxuICAgIH1cclxuXHJcbiAgICBfY29tcGlsZVNvdXJjZSgpIHtcclxuICAgICAgICB0aGlzLnZlcnQgPSBTaGFkZXJMaWIuY29tcGlsZSh0aGlzLnZlcnQpO1xyXG4gICAgICAgIHRoaXMuZnJhZyA9IFNoYWRlckxpYi5jb21waWxlKHRoaXMuZnJhZyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhcnNlQXJyYXlOYW1lKHApIHtcclxuICAgIGNvbnN0IGwgPSBwLmluZGV4T2YoJ1snKSwgciA9IHAuaW5kZXhPZignXScpO1xyXG4gICAgY29uc3QgbmFtZSA9IHAuc3Vic3RyaW5nKDAsIGwpLCBsZW4gPSArcC5zdWJzdHJpbmcobCArIDEsIHIpO1xyXG4gICAgcmV0dXJuIHsgbmFtZSwgbGVuIH07XHJcbn1cblxuY2xhc3MgTWVzaFNoYWRlciBleHRlbmRzIFNoYWRlciB7XHJcblxyXG4gICAgZHJhdyhyZWdsLCBtZXNoZXMpIHtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IFtdO1xyXG4gICAgICAgIGxldCBwcmVDb21tYW5kO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gbWVzaGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoIW1lc2hlc1tpXS5pc1ZhbGlkKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSBsIC0gMSAmJiBwcmVDb21tYW5kICYmIHByb3BzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZUNvbW1hbmQocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFtZXNoZXNbaV0uZ2VvbWV0cnkuY291bnQgfHwgIXRoaXMuZmlsdGVyKG1lc2hlc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSBsIC0gMSAmJiBwcmVDb21tYW5kICYmIHByb3BzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByZUNvbW1hbmQocHJvcHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY29tbWFuZCA9IHRoaXMuZ2V0TWVzaENvbW1hbmQocmVnbCwgbWVzaGVzW2ldKTtcclxuXHJcbiAgICAgICAgICAgIC8vcnVuIGNvbW1hbmQgb25lIGJ5IG9uZSwgZm9yIGRlYnVnXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IHByb3BzID0gZXh0ZW5kKHt9LCB0aGlzLmNvbnRleHQsIG1lc2hlc1tpXS5nZXRSRUdMUHJvcHMoKSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGkpO1xyXG4gICAgICAgICAgICAvLyBjb21tYW5kKHByb3BzKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChwcm9wcy5sZW5ndGggJiYgcHJlQ29tbWFuZCAhPT0gY29tbWFuZCkge1xyXG4gICAgICAgICAgICAgICAgLy9iYXRjaCBtb2RlXHJcbiAgICAgICAgICAgICAgICBwcmVDb21tYW5kKHByb3BzKTtcclxuICAgICAgICAgICAgICAgIHByb3BzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbWVzaFByb3BzID0gbWVzaGVzW2ldLmdldFJFR0xQcm9wcyhyZWdsKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBlbmRSZW5kZXJVbmlmb3JtcyhtZXNoUHJvcHMpO1xyXG4gICAgICAgICAgICBwcm9wcy5wdXNoKG1lc2hQcm9wcyk7XHJcbiAgICAgICAgICAgIGlmIChpIDwgbCAtIDEpIHtcclxuICAgICAgICAgICAgICAgIHByZUNvbW1hbmQgPSBjb21tYW5kO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGwgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb21tYW5kKHByb3BzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWVzaENvbW1hbmQocmVnbCwgbWVzaCkge1xyXG4gICAgICAgIGxldCBkS2V5ID0gbWVzaC5nZXREZWZpbmVzS2V5KCk7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IG1lc2guZ2V0RGVmaW5lcygpO1xyXG4gICAgICAgIGNvbnN0IGVsZW1lbnRUeXBlID0gaXNOdW1iZXIobWVzaC5nZXRFbGVtZW50cygpKSA/ICdjb3VudCcgOiAnZWxlbWVudHMnO1xyXG4gICAgICAgIGRLZXkgKz0gJ18nICsgZWxlbWVudFR5cGU7XHJcbiAgICAgICAgaWYgKG1lc2ggaW5zdGFuY2VvZiBJbnN0YW5jZWRNZXNoKSB7XHJcbiAgICAgICAgICAgIGRLZXkgKz0gJ19pbnN0YW5jZWQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgY29tbWFuZCA9IHRoaXMuY29tbWFuZHNbZEtleV07XHJcbiAgICAgICAgaWYgKCFjb21tYW5kKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHVuaWZvcm1zID0gT2JqZWN0LmtleXMobWVzaC5nZXRVbmlmb3JtcyhyZWdsKSk7XHJcbiAgICAgICAgICAgIGNvbW1hbmQgPSB0aGlzLmNvbW1hbmRzW2RLZXldID1cclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUkVHTENvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICAgICAgcmVnbCxcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbmVzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc2guZ2V0QXR0cmlidXRlcygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHVuaWZvcm1zLFxyXG4gICAgICAgICAgICAgICAgICAgIG1lc2guZ2V0RWxlbWVudHMoKSxcclxuICAgICAgICAgICAgICAgICAgICBtZXNoIGluc3RhbmNlb2YgSW5zdGFuY2VkTWVzaFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmQ7XHJcbiAgICB9XHJcbn1cblxudmFyIHdpcmVmcmFtZUZyYWcgPSBcIlxcblxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcbnZhcnlpbmcgdmVjMyB2QmFyeWNlbnRyaWM7XFxuXFxudW5pZm9ybSBmbG9hdCB0aW1lO1xcblxcbnVuaWZvcm0gZmxvYXQgdGhpY2tuZXNzO1xcblxcbnVuaWZvcm0gZmxvYXQgc2Vjb25kVGhpY2tuZXNzO1xcblxcblxcblxcbnVuaWZvcm0gZmxvYXQgZGFzaFJlcGVhdHM7XFxuXFxudW5pZm9ybSBmbG9hdCBkYXNoTGVuZ3RoO1xcblxcbnVuaWZvcm0gYm9vbCBkYXNoT3ZlcmxhcDtcXG5cXG51bmlmb3JtIGJvb2wgZGFzaEVuYWJsZWQ7XFxuXFxudW5pZm9ybSBib29sIGRhc2hBbmltYXRlO1xcblxcblxcblxcbnVuaWZvcm0gYm9vbCBzZWVUaHJvdWdoO1xcblxcbnVuaWZvcm0gYm9vbCBpbnNpZGVBbHRDb2xvcjtcXG5cXG51bmlmb3JtIGJvb2wgZHVhbFN0cm9rZTtcXG5cXG5cXG5cXG51bmlmb3JtIGJvb2wgc3F1ZWV6ZTtcXG5cXG51bmlmb3JtIGZsb2F0IHNxdWVlemVNaW47XFxuXFxudW5pZm9ybSBmbG9hdCBzcXVlZXplTWF4O1xcblxcblxcblxcbnVuaWZvcm0gdmVjNCBzdHJva2U7XFxuXFxudW5pZm9ybSB2ZWM0IGZpbGw7XFxuXFxudW5pZm9ybSBmbG9hdCBvcGFjaXR5O1xcblxcblxcblxcbiNpZmRlZiBVU0VfSU5TVEFOQ0VcXG5cXG4gIHZhcnlpbmcgdmVjNCB2SW5zdGFuY2VDb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG4jZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZVxcblxcblxcblxcbmNvbnN0IGZsb2F0IFBJID0gMy4xNDE1OTI2NTtcXG5cXG5cXG5cXG4vLyBUaGlzIGlzIGxpa2VcXG5cXG5mbG9hdCBhYXN0ZXAgKGZsb2F0IHRocmVzaG9sZCwgZmxvYXQgZGlzdCkge1xcblxcbiAgZmxvYXQgYWZ3aWR0aCA9IGZ3aWR0aChkaXN0KSAqIDAuNTtcXG5cXG4gIHJldHVybiBzbW9vdGhzdGVwKHRocmVzaG9sZCAtIGFmd2lkdGgsIHRocmVzaG9sZCArIGFmd2lkdGgsIGRpc3QpO1xcblxcbn1cXG5cXG5cXG5cXG4vLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZyYWdtZW50IGNvbG9yIGZvciBvdXIgc3R5bGVkIHdpcmVmcmFtZSBlZmZlY3RcXG5cXG4vLyBiYXNlZCBvbiB0aGUgYmFyeWNlbnRyaWMgY29vcmRpbmF0ZXMgZm9yIHRoaXMgZnJhZ21lbnRcXG5cXG52ZWM0IGdldFN0eWxlZFdpcmVmcmFtZSAodmVjMyBiYXJ5Y2VudHJpYykge1xcblxcbiAgLy8gdGhpcyB3aWxsIGJlIG91ciBzaWduZWQgZGlzdGFuY2UgZm9yIHRoZSB3aXJlZnJhbWUgZWRnZVxcblxcbiAgZmxvYXQgZCA9IG1pbihtaW4oYmFyeWNlbnRyaWMueCwgYmFyeWNlbnRyaWMueSksIGJhcnljZW50cmljLnopO1xcblxcbiAgLy8gZm9yIGRhc2hlZCByZW5kZXJpbmcsIHdlIGNhbiB1c2UgdGhpcyB0byBnZXQgdGhlIDAgLi4gMSB2YWx1ZSBvZiB0aGUgbGluZSBsZW5ndGhcXG5cXG4gIGZsb2F0IHBvc2l0aW9uQWxvbmcgPSBtYXgoYmFyeWNlbnRyaWMueCwgYmFyeWNlbnRyaWMueSk7XFxuXFxuICBpZiAoYmFyeWNlbnRyaWMueSA8IGJhcnljZW50cmljLnggJiYgYmFyeWNlbnRyaWMueSA8IGJhcnljZW50cmljLnopIHtcXG5cXG4gICAgcG9zaXRpb25BbG9uZyA9IDEuMCAtIHBvc2l0aW9uQWxvbmc7XFxuXFxuICB9XFxuXFxuXFxuXFxuICAvLyB0aGUgdGhpY2tuZXNzIG9mIHRoZSBzdHJva2VcXG5cXG4gIGZsb2F0IGNvbXB1dGVkVGhpY2tuZXNzID0gdGhpY2tuZXNzO1xcblxcblxcblxcbiAgLy8gaWYgd2Ugd2FudCB0byBzaHJpbmsgdGhlIHRoaWNrbmVzcyB0b3dhcmQgdGhlIGNlbnRlciBvZiB0aGUgbGluZSBzZWdtZW50XFxuXFxuICBpZiAoc3F1ZWV6ZSkge1xcblxcbiAgICBjb21wdXRlZFRoaWNrbmVzcyAqPSBtaXgoc3F1ZWV6ZU1pbiwgc3F1ZWV6ZU1heCwgKDEuMCAtIHNpbihwb3NpdGlvbkFsb25nICogUEkpKSk7XFxuXFxuICB9XFxuXFxuXFxuXFxuICAvLyBpZiB3ZSBzaG91bGQgY3JlYXRlIGEgZGFzaCBwYXR0ZXJuXFxuXFxuICBpZiAoZGFzaEVuYWJsZWQpIHtcXG5cXG4gICAgLy8gaGVyZSB3ZSBvZmZzZXQgdGhlIHN0cm9rZSBwb3NpdGlvbiBkZXBlbmRpbmcgb24gd2hldGhlciBpdFxcblxcbiAgICAvLyBzaG91bGQgb3ZlcmxhcCBvciBub3RcXG5cXG4gICAgZmxvYXQgb2Zmc2V0ID0gMS4wIC8gZGFzaFJlcGVhdHMgKiBkYXNoTGVuZ3RoIC8gMi4wO1xcblxcbiAgICBpZiAoIWRhc2hPdmVybGFwKSB7XFxuXFxuICAgICAgb2Zmc2V0ICs9IDEuMCAvIGRhc2hSZXBlYXRzIC8gMi4wO1xcblxcbiAgICB9XFxuXFxuXFxuXFxuICAgIC8vIGlmIHdlIHNob3VsZCBhbmltYXRlIHRoZSBkYXNoIG9yIG5vdFxcblxcbiAgICBpZiAoZGFzaEFuaW1hdGUpIHtcXG5cXG4gICAgICBvZmZzZXQgKz0gdGltZSAqIDAuMjI7XFxuXFxuICAgIH1cXG5cXG5cXG5cXG4gICAgLy8gY3JlYXRlIHRoZSByZXBlYXRpbmcgZGFzaCBwYXR0ZXJuXFxuXFxuICAgIGZsb2F0IHBhdHRlcm4gPSBmcmFjdCgocG9zaXRpb25BbG9uZyArIG9mZnNldCkgKiBkYXNoUmVwZWF0cyk7XFxuXFxuICAgIGNvbXB1dGVkVGhpY2tuZXNzICo9IDEuMCAtIGFhc3RlcChkYXNoTGVuZ3RoLCBwYXR0ZXJuKTtcXG5cXG4gIH1cXG5cXG5cXG5cXG4gIC8vIGNvbXB1dGUgdGhlIGFudGktYWxpYXNlZCBzdHJva2UgZWRnZSAgXFxuXFxuICBmbG9hdCBlZGdlID0gMS4wIC0gYWFzdGVwKGNvbXB1dGVkVGhpY2tuZXNzLCBkKTtcXG5cXG5cXG5cXG4gIC8vIG5vdyBjb21wdXRlIHRoZSBmaW5hbCBjb2xvciBvZiB0aGUgbWVzaFxcblxcbiAgI2lmZGVmIFVTRV9JTlNUQU5DRVxcblxcbiAgICB2ZWM0IHN0cm9rZUNvbG9yID0gdkluc3RhbmNlQ29sb3I7XFxuXFxuICAjZWxzZVxcblxcbiAgICB2ZWM0IHN0cm9rZUNvbG9yID0gc3Ryb2tlO1xcblxcbiAgI2VuZGlmXFxuXFxuICB2ZWM0IG91dENvbG9yID0gdmVjNCgwLjApO1xcblxcbiAgaWYgKHNlZVRocm91Z2gpIHtcXG5cXG4gICAgb3V0Q29sb3IgPSB2ZWM0KHN0cm9rZUNvbG9yLnh5eiwgZWRnZSk7XFxuXFxuICAgIGlmIChpbnNpZGVBbHRDb2xvciAmJiAhZ2xfRnJvbnRGYWNpbmcpIHtcXG5cXG4gICAgICAgb3V0Q29sb3IucmdiID0gZmlsbC54eXo7XFxuXFxuICAgIH1cXG5cXG4gIH0gZWxzZSB7XFxuXFxuICAgIHZlYzMgbWFpblN0cm9rZSA9IG1peChmaWxsLnh5eiwgc3Ryb2tlQ29sb3IueHl6LCBlZGdlKTtcXG5cXG4gICAgb3V0Q29sb3IuYSA9IGZpbGwuYTtcXG5cXG4gICAgaWYgKGR1YWxTdHJva2UpIHtcXG5cXG4gICAgICBmbG9hdCBpbm5lciA9IDEuMCAtIGFhc3RlcChzZWNvbmRUaGlja25lc3MsIGQpO1xcblxcbiAgICAgIHZlYzMgd2lyZUNvbG9yID0gbWl4KGZpbGwueHl6LCBzdHJva2UueHl6LCBhYnMoaW5uZXIgLSBlZGdlKSk7XFxuXFxuICAgICAgb3V0Q29sb3IucmdiID0gd2lyZUNvbG9yO1xcblxcbiAgICB9IGVsc2Uge1xcblxcbiAgICAgIG91dENvbG9yLnJnYiA9IG1haW5TdHJva2U7XFxuXFxuICAgIH1cXG5cXG4gIH1cXG5cXG5cXG5cXG4gIHJldHVybiBvdXRDb2xvcjtcXG5cXG59XFxuXFxuXFxuXFxudm9pZCBtYWluICgpIHtcXG5cXG4gIGdsX0ZyYWdDb2xvciA9IGdldFN0eWxlZFdpcmVmcmFtZSh2QmFyeWNlbnRyaWMpICogb3BhY2l0eTtcXG5cXG59XCI7XG5cbnZhciB3aXJlZnJhbWVWZXJ0ID0gXCJhdHRyaWJ1dGUgdmVjMyBhUG9zaXRpb247XFxuXFxuYXR0cmlidXRlIHZlYzMgYUJhcnljZW50cmljO1xcblxcbnZhcnlpbmcgdmVjMyB2QmFyeWNlbnRyaWM7XFxuXFxuXFxuXFxudW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcblxcbnVuaWZvcm0gbWF0NCBwcm9qVmlld01hdHJpeDtcXG5cXG51bmlmb3JtIG1hdDQgcHJvalZpZXdNb2RlbE1hdHJpeDtcXG5cXG5cXG5cXG4jaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgICNpbmNsdWRlIDxpbnN0YW5jZV92ZXJ0PlxcblxcbiAgICB2YXJ5aW5nIHZlYzQgdkluc3RhbmNlQ29sb3I7XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuI2lmZGVmIFVTRV9TS0lOXFxuXFxuICAgICNpbmNsdWRlIDxza2luX3ZlcnQ+XFxuXFxuI2VuZGlmXFxuXFxudm9pZCBtYWluICgpIHtcXG5cXG4gICNpZmRlZiBVU0VfSU5TVEFOQ0VcXG5cXG4gICAgICBtYXQ0IGF0dHJpYnV0ZU1hdHJpeCA9IGluc3RhbmNlX2dldEF0dHJpYnV0ZU1hdHJpeCgpO1xcblxcbiAgICAgICAgICAjaWZkZWYgVVNFX1NLSU5cXG5cXG4gICAgICAgICAgICAgIG1hdDQgd29ybGRNYXRyaXggPSBhdHRyaWJ1dGVNYXRyaXggKiBza2luX2dldFNraW5NYXRyaXgoKTtcXG5cXG4gICAgICAgICAgICAgIG1hdDQgcHZtTWF0cml4ID0gcHJvalZpZXdNYXRyaXggKiB3b3JsZE1hdHJpeDtcXG5cXG4gICAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICAgIG1hdDQgcHZtTWF0cml4ID0gcHJvalZpZXdNYXRyaXggKiBhdHRyaWJ1dGVNYXRyaXg7XFxuXFxuICAgICAgICAgICNlbmRpZlxcblxcbiAgICAgIGdsX1Bvc2l0aW9uID0gPSBwdm1NYXRyaXggKiB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgICB2SW5zdGFuY2VDb2xvciA9IGluc3RhbmNlX2dldEluc3RhbmNlQ29sb3IoKTtcXG5cXG4gICNlbHNlXFxuXFxuICAgICAgI2lmZGVmIFVTRV9TS0lOXFxuXFxuICAgICAgICAgIG1hdDQgd29ybGRNYXRyaXggPSBtb2RlbE1hdHJpeCAqIHNraW5fZ2V0U2tpbk1hdHJpeCgpO1xcblxcbiAgICAgICAgICBtYXQ0IHB2bU1hdHJpeCA9IHByb2pWaWV3TWF0cml4ICogd29ybGRNYXRyaXg7XFxuXFxuICAgICAgICAgIGdsX1Bvc2l0aW9uID0gcHZtTWF0cml4ICogdmVjNChhUG9zaXRpb24sIDEuMCk7XFxuXFxuICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgZ2xfUG9zaXRpb24gPSBwcm9qVmlld01vZGVsTWF0cml4ICogdmVjNChhUG9zaXRpb24sIDEuMCk7XFxuXFxuICAgICAgI2VuZGlmXFxuXFxuICAjZW5kaWZcXG5cXG4gIHZCYXJ5Y2VudHJpYyA9IGFCYXJ5Y2VudHJpYztcXG5cXG59XCI7XG5cbi8vaHR0cDovL2NvZGVmbG93Lm9yZy9lbnRyaWVzLzIwMTIvYXVnLzAyL2Vhc3ktd2lyZWZyYW1lLWRpc3BsYXktd2l0aC1iYXJ5Y2VudHJpYy1jb29yZGluYXRlcy9cclxuY2xhc3MgV2lyZWZyYW1lU2hhZGVyIGV4dGVuZHMgTWVzaFNoYWRlciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcclxuICAgICAgICBsZXQgZXh0cmFDb21tYW5kUHJvcHMgPSBjb25maWcuZXh0cmFDb21tYW5kUHJvcHMgfHwge307XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBjb25maWcucG9zaXRpb25BdHRyaWJ1dGUgfHwgJ2FQb3NpdGlvbicsXHJcbiAgICAgICAgICAgIGJhcnljZW50cmljQXR0cmlidXRlID0gY29uZmlnLmJhcnljZW50cmljQXR0cmlidXRlIHx8ICdhQmFyeWNlbnRyaWMnO1xyXG4gICAgICAgIGV4dHJhQ29tbWFuZFByb3BzID0gZXh0ZW5kKHt9LCBleHRyYUNvbW1hbmRQcm9wcywge1xyXG4gICAgICAgICAgICBibGVuZCA6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGZ1bmM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzcmM6ICdzcmMgYWxwaGEnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdDogJ29uZSBtaW51cyBzcmMgYWxwaGEnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXF1YXRpb246ICdhZGQnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNhbXBsZToge1xyXG4gICAgICAgICAgICAgICAgYWxwaGE6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCB2ZXJ0ID0gd2lyZWZyYW1lVmVydDtcclxuICAgICAgICAvL+WwhuedgOiJsuWZqOS7o+eggeS4reeahGFQb3NpdGlvbuabv+aNouaIkOaMh+WumueahOWPmOmHj+WQjVxyXG4gICAgICAgIGlmIChwb3NpdGlvbkF0dHJpYnV0ZSAhPT0gJ2FQb3NpdGlvbicpIHtcclxuICAgICAgICAgICAgdmVydCA9IHZlcnQucmVwbGFjZSgvYVBvc2l0aW9uL2csIHBvc2l0aW9uQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJhcnljZW50cmljQXR0cmlidXRlICE9PSAnYUJhcnljZW50cmljJykge1xyXG4gICAgICAgICAgICB2ZXJ0ID0gdmVydC5yZXBsYWNlKC9hQmFyeWNlbnRyaWMvZywgYmFyeWNlbnRyaWNBdHRyaWJ1dGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHZlcnQsXHJcbiAgICAgICAgICAgIGZyYWcgOiB3aXJlZnJhbWVGcmFnLFxyXG4gICAgICAgICAgICB1bmlmb3JtcyA6IFtcclxuICAgICAgICAgICAgICAgICd0aW1lJyxcclxuICAgICAgICAgICAgICAgICdmaWxsJyxcclxuICAgICAgICAgICAgICAgICdzdHJva2UnLFxyXG4gICAgICAgICAgICAgICAgJ2R1YWxTdHJva2UnLFxyXG4gICAgICAgICAgICAgICAgJ3NlZVRocm91Z2gnLFxyXG4gICAgICAgICAgICAgICAgJ2luc2lkZUFsdENvbG9yJyxcclxuICAgICAgICAgICAgICAgICd0aGlja25lc3MnLFxyXG4gICAgICAgICAgICAgICAgJ3NlY29uZFRoaWNrbmVzcycsXHJcbiAgICAgICAgICAgICAgICAnZGFzaEVuYWJsZWQnLFxyXG4gICAgICAgICAgICAgICAgJ2Rhc2hSZXBlYXRzJyxcclxuICAgICAgICAgICAgICAgICdkYXNoT3ZlcmxhcCcsXHJcbiAgICAgICAgICAgICAgICAnZGFzaExlbmd0aCcsXHJcbiAgICAgICAgICAgICAgICAnZGFzaEFuaW1hdGUnLFxyXG4gICAgICAgICAgICAgICAgJ3NxdWVlemUnLFxyXG4gICAgICAgICAgICAgICAgJ3NxdWVlemVNaW4nLFxyXG4gICAgICAgICAgICAgICAgJ3NxdWVlemVNYXgnLFxyXG4gICAgICAgICAgICAgICAgJ29wYWNpdHknLFxyXG4gICAgICAgICAgICAgICAgJ3Byb2pWaWV3TWF0cml4JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lIDogJ3Byb2pWaWV3TW9kZWxNYXRyaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnZnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGZuIDogKGNvbnRleHQsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXQ0Lm11bHRpcGx5KFtdLCBwcm9wc1sncHJvalZpZXdNYXRyaXgnXSwgcHJvcHNbJ21vZGVsTWF0cml4J10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZXh0cmFDb21tYW5kUHJvcHNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxuXG52YXIgcGhvbmdGcmFnID0gXCJcXG5cXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleENvb3JkcztcXG5cXG51bmlmb3JtIGZsb2F0IG1hdGVyaWFsU2hpbmluZXNzOy8v5Y+N5YWJ5bqm77yM5Y2z5b2x5ZON6ZWc6Z2i6auY5YWJ55qE5pWj5bCEL+WNiuW+hFxcblxcbnVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcXG5cXG51bmlmb3JtIGZsb2F0IGFtYmllbnRTdHJlbmd0aDtcXG5cXG51bmlmb3JtIGZsb2F0IHNwZWN1bGFyU3RyZW5ndGg7XFxuXFxuXFxuXFxuXFxuXFxudW5pZm9ybSB2ZWMzIGxpZ2h0UG9zaXRpb247XFxuXFxudW5pZm9ybSB2ZWM0IGxpZ2h0QW1iaWVudDtcXG5cXG51bmlmb3JtIHZlYzQgbGlnaHREaWZmdXNlO1xcblxcbnVuaWZvcm0gdmVjNCBsaWdodFNwZWN1bGFyO1xcblxcblxcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcbnZhcnlpbmcgdmVjNCB2RnJhZ1BvcztcXG5cXG51bmlmb3JtIHZlYzMgdmlld1BvcztcXG5cXG5cXG5cXG4jaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgIHZhcnlpbmcgdmVjNCB2SW5zdGFuY2VDb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWZkZWYgVVNFX0JBU0VDT0xPUlRFWFRVUkVcXG5cXG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgYmFzZUNvbG9yVGV4dHVyZTtcXG5cXG4jZW5kaWZcXG5cXG51bmlmb3JtIHZlYzQgYmFzZUNvbG9yRmFjdG9yO1xcblxcblxcblxcbnZvaWQgbWFpbigpIHtcXG5cXG4gICAgLy/njq/looPlhYlcXG5cXG4gICAgI2lmZGVmIFVTRV9CQVNFQ09MT1JURVhUVVJFXFxuXFxuICAgICAgICAjaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgICAgICAgICAgdmVjMyBhbWJpZW50Q29sb3IgPSBhbWJpZW50U3RyZW5ndGggKiB2SW5zdGFuY2VDb2xvci54eXogKiB0ZXh0dXJlMkQoYmFzZUNvbG9yVGV4dHVyZSwgdlRleENvb3JkcykucmdiO1xcblxcbiAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICB2ZWMzIGFtYmllbnRDb2xvciA9IGFtYmllbnRTdHJlbmd0aCAqIGxpZ2h0QW1iaWVudC54eXogKiB0ZXh0dXJlMkQoYmFzZUNvbG9yVGV4dHVyZSwgdlRleENvb3JkcykucmdiO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgICAjaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgICAgICAgICAgdmVjMyBhbWJpZW50Q29sb3IgPSBhbWJpZW50U3RyZW5ndGggKiB2SW5zdGFuY2VDb2xvci54eXogO1xcblxcbiAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICB2ZWMzIGFtYmllbnRDb2xvciA9IGFtYmllbnRTdHJlbmd0aCAqIGxpZ2h0QW1iaWVudC54eXo7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgI2VuZGlmXFxuXFxuICAgIHZlYzMgYW1iaWVudCA9IGFtYmllbnRDb2xvciAqIGJhc2VDb2xvckZhY3Rvci54eXo7XFxuXFxuXFxuXFxuICAgIC8v5ryr5Y+N5bCE5YWJXFxuXFxuICAgIHZlYzMgbm9ybSA9IG5vcm1hbGl6ZSh2Tm9ybWFsKTtcXG5cXG4gICAgdmVjMyBsaWdodERpciA9IHZlYzMobm9ybWFsaXplKGxpZ2h0UG9zaXRpb24gLXZlYzModkZyYWdQb3MpKSk7XFxuXFxuICAgIGZsb2F0IGRpZmYgPSBtYXgoZG90KG5vcm0sIGxpZ2h0RGlyKSwgMC4wKTtcXG5cXG4gICAgI2lmZGVmIFVTRV9CQVNFQ09MT1JURVhUVVJFXFxuXFxuICAgICAgICB2ZWMzIGRpZmZ1c2UgPSBsaWdodERpZmZ1c2UueHl6ICogZGlmZiAqIHRleHR1cmUyRChiYXNlQ29sb3JUZXh0dXJlLCB2VGV4Q29vcmRzKS5yZ2I7XFxuXFxuICAgICNlbHNlXFxuXFxuICAgICAgICB2ZWMzIGRpZmZ1c2UgPSBsaWdodERpZmZ1c2UueHl6ICogZGlmZjtcXG5cXG4gICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgIC8v6ZWc6Z2i5Y+N6Imy5YWJXFxuXFxuICAgIHZlYzMgdmlld0RpciA9IHZlYzMobm9ybWFsaXplKHZpZXdQb3MgLXZlYzModkZyYWdQb3MpKSk7XFxuXFxuICAgIC8vIHZlYzMgcmVmbGVjdERpciA9IHJlZmxlY3QoLWxpZ2h0RGlyLCBub3JtKTtcXG5cXG4gICAgdmVjMyBoYWxmd2F5RGlyID0gbm9ybWFsaXplKGxpZ2h0RGlyICsgdmlld0Rpcik7XFxuXFxuICAgIGZsb2F0IHNwZWMgPSBwb3cobWF4KGRvdChub3JtLCBoYWxmd2F5RGlyKSwgMC4wKSwgbWF0ZXJpYWxTaGluaW5lc3MpO1xcblxcbiAgICB2ZWMzIHNwZWN1bGFyID0gc3BlY3VsYXJTdHJlbmd0aCAqIGxpZ2h0U3BlY3VsYXIueHl6ICogc3BlYztcXG5cXG5cXG5cXG5cXG5cXG4gICAgdmVjMyByZXN1bHQgPSBhbWJpZW50ICtkaWZmdXNlICtzcGVjdWxhcjtcXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChyZXN1bHQsIDEuMCkgKiBvcGFjaXR5O1xcblxcbn1cXG5cXG5cIjtcblxudmFyIHBob25nVmVydCA9IFwiYXR0cmlidXRlIHZlYzMgYVBvc2l0aW9uO1xcblxcbiNpZmRlZiBVU0VfQkFTRUNPTE9SVEVYVFVSRVxcblxcbiAgICBhdHRyaWJ1dGUgdmVjMiBURVhDT09SRF8wO1xcblxcbiAgICB2YXJ5aW5nIHZlYzIgdlRleENvb3JkcztcXG5cXG4jZW5kaWZcXG5cXG5hdHRyaWJ1dGUgdmVjMyBOT1JNQUw7XFxuXFxuXFxuXFxudmFyeWluZyB2ZWM0IHZGcmFnUG9zO1xcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcblxcbnVuaWZvcm0gbWF0NCBwcm9qVmlld01vZGVsTWF0cml4O1xcblxcbnVuaWZvcm0gbWF0NCBwcm9qVmlld01hdHJpeDtcXG5cXG51bmlmb3JtIG1hdDQgbm9ybWFsTWF0cml4O1xcblxcbnVuaWZvcm0gbWF0NCBtb2RlbE1hdHJpeDtcXG5cXG5cXG5cXG4jaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgICNpbmNsdWRlIDxpbnZlcnRfdmVydD5cXG5cXG4gICAgI2luY2x1ZGUgPGluc3RhbmNlX3ZlcnQ+XFxuXFxuICAgIHZhcnlpbmcgdmVjNCB2SW5zdGFuY2VDb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4jaWZkZWYgVVNFX1NLSU5cXG5cXG4gICAgI2luY2x1ZGUgPGludmVydF92ZXJ0PlxcblxcbiAgICAjaW5jbHVkZSA8c2tpbl92ZXJ0PlxcblxcbiNlbmRpZlxcblxcbnZvaWQgbWFpbigpXFxuXFxue1xcblxcbiAgICAjaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgICAgICBtYXQ0IGF0dHJpYnV0ZU1hdHJpeCA9IGluc3RhbmNlX2dldEF0dHJpYnV0ZU1hdHJpeCgpO1xcblxcbiAgICAgICAgdkZyYWdQb3MgPSBhdHRyaWJ1dGVNYXRyaXggKiB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgICAgIG1hdDQgaW52ZXJzZU1hdCA9IGludmVydChhdHRyaWJ1dGVNYXRyaXgpO1xcblxcbiAgICAgICAgbWF0NCBub3JtYWxNYXQgPSB0cmFuc3Bvc2UoaW52ZXJzZU1hdCk7XFxuXFxuICAgICAgICB2Tm9ybWFsID0gbm9ybWFsaXplKHZlYzMobm9ybWFsTWF0ICogdmVjNChOT1JNQUwsIDEuMCkpKTtcXG5cXG4gICAgICAgICNpZmRlZiBVU0VfU0tJTlxcblxcbiAgICAgICAgICAgIG1hdDQgd29ybGRNYXRyaXggPSBhdHRyaWJ1dGVNYXRyaXggKiBza2luX2dldFNraW5NYXRyaXgoKTtcXG5cXG4gICAgICAgICAgICBtYXQ0IHB2bU1hdHJpeCA9IHByb2pWaWV3TWF0cml4ICogd29ybGRNYXRyaXg7XFxuXFxuICAgICAgICAjZWxzZVxcblxcbiAgICAgICAgICAgIG1hdDQgcHZtTWF0cml4ID0gcHJvalZpZXdNYXRyaXggKiBhdHRyaWJ1dGVNYXRyaXg7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgIGdsX1Bvc2l0aW9uID0gPSBwdm1NYXRyaXggKiB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgICAgIHZJbnN0YW5jZUNvbG9yID0gaW5zdGFuY2VfZ2V0SW5zdGFuY2VDb2xvcigpO1xcblxcbiAgICAjZWxzZVxcblxcbiAgICAgICAgI2lmZGVmIFVTRV9TS0lOXFxuXFxuICAgICAgICAgICAgbWF0NCB3b3JsZE1hdHJpeCA9ICBtb2RlbE1hdHJpeCAqIHNraW5fZ2V0U2tpbk1hdHJpeCgpO1xcblxcbiAgICAgICAgICAgIHZGcmFnUG9zID0gd29ybGRNYXRyaXggKiB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHByb2pWaWV3TWF0cml4ICogd29ybGRNYXRyaXggKiB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgICAgICAgICBtYXQ0IGludmVyc2VNYXQgPSBpbnZlcnQod29ybGRNYXRyaXgpO1xcblxcbiAgICAgICAgICAgIG1hdDQgbm9ybWFsTWF0ID0gdHJhbnNwb3NlKHdvcmxkTWF0cml4KTtcXG5cXG4gICAgICAgICAgICB2Tm9ybWFsID0gbm9ybWFsaXplKHZlYzMobm9ybWFsTWF0ICogdmVjNChOT1JNQUwsIDEuMCkpKTtcXG5cXG4gICAgICAgICNlbHNlXFxuXFxuICAgICAgICAgICAgdkZyYWdQb3MgPSBtb2RlbE1hdHJpeCAqIHZlYzQoYVBvc2l0aW9uLCAxLjApO1xcblxcbiAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gcHJvalZpZXdNb2RlbE1hdHJpeCAqIHZlYzQoYVBvc2l0aW9uLCAxLjApO1xcblxcbiAgICAgICAgICAgIHZOb3JtYWwgPSBub3JtYWxpemUodmVjMyhub3JtYWxNYXRyaXggKiB2ZWM0KE5PUk1BTCwgMS4wKSkpO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICNlbmRpZlxcblxcbiAgICAjaWZkZWYgVVNFX0JBU0VDT0xPUlRFWFRVUkVcXG5cXG4gICAgICAgIHZUZXhDb29yZHMgPSBURVhDT09SRF8wO1xcblxcbiAgICAjZW5kaWZcXG5cXG59XFxuXFxuXCI7XG5cbmNsYXNzIFBob25nU2hhZGVyIGV4dGVuZHMgTWVzaFNoYWRlciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcclxuICAgICAgICBsZXQgZXh0cmFDb21tYW5kUHJvcHMgPSBjb25maWcuZXh0cmFDb21tYW5kUHJvcHMgfHwge307XHJcbiAgICAgICAgY29uc3QgcG9zaXRpb25BdHRyaWJ1dGUgPSBjb25maWcucG9zaXRpb25BdHRyaWJ1dGUgfHwgJ2FQb3NpdGlvbic7XHJcbiAgICAgICAgbGV0IHZlcnQgPSBwaG9uZ1ZlcnQ7XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uQXR0cmlidXRlICE9PSAnYVBvc2l0aW9uJykge1xyXG4gICAgICAgICAgICB2ZXJ0ID0gdmVydC5yZXBsYWNlKC9hUG9zaXRpb24vZywgcG9zaXRpb25BdHRyaWJ1dGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHZlcnQsXHJcbiAgICAgICAgICAgIGZyYWcgOiBwaG9uZ0ZyYWcsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zIDogW1xyXG4gICAgICAgICAgICAgICAgJ3ZpZXdQb3MnLFxyXG4gICAgICAgICAgICAgICAgJ2xpZ2h0QW1iaWVudCcsXHJcbiAgICAgICAgICAgICAgICAnbGlnaHREaWZmdXNlJyxcclxuICAgICAgICAgICAgICAgICdsaWdodFNwZWN1bGFyJyxcclxuICAgICAgICAgICAgICAgICdhbWJpZW50U3RyZW5ndGgnLFxyXG4gICAgICAgICAgICAgICAgJ3NwZWN1bGFyU3RyZW5ndGgnLFxyXG4gICAgICAgICAgICAgICAgJ21hdGVyaWFsU2hpbmluZXNzJyxcclxuICAgICAgICAgICAgICAgICdwcm9qVmlld01hdHJpeCcsXHJcbiAgICAgICAgICAgICAgICAnb3BhY2l0eScsXHJcbiAgICAgICAgICAgICAgICAnYmFzZUNvbG9yVGV4dHVyZScsXHJcbiAgICAgICAgICAgICAgICAnYmFzZUNvbG9yRmFjdG9yJyxcclxuICAgICAgICAgICAgICAgICdsaWdodFBvc2l0aW9uJyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lIDogJ25vcm1hbE1hdHJpeCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdmdW5jdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZm4gOiBmdW5jdGlvbiAoY29udGV4dCwgcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9ybWFsTWF0cml4ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdDQuaW52ZXJ0KG5vcm1hbE1hdHJpeCwgcHJvcHNbJ21vZGVsTWF0cml4J10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXQ0LnRyYW5zcG9zZShub3JtYWxNYXRyaXgsIG5vcm1hbE1hdHJpeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub3JtYWxNYXRyaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lIDogJ3Byb2pWaWV3TW9kZWxNYXRyaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnZnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGZuIDogZnVuY3Rpb24gKGNvbnRleHQsIHByb3BzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXQ0Lm11bHRpcGx5KFtdLCBwcm9wc1sncHJvalZpZXdNYXRyaXgnXSwgcHJvcHNbJ21vZGVsTWF0cml4J10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZGVmaW5lcyA6IHtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZXh0cmFDb21tYW5kUHJvcHNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxuXG52YXIgc2t5Ym94RGF0YSA9IHtcclxuICAgIHZlcnRpY2VzIDogW1xyXG4gICAgICAgIC8vIHBvc2l0aW9uc1xyXG4gICAgICAgIC0xLjAsICAxLjAsIC0xLjAsXHJcbiAgICAgICAgLTEuMCwgLTEuMCwgLTEuMCxcclxuICAgICAgICAxLjAsIC0xLjAsIC0xLjAsXHJcbiAgICAgICAgMS4wLCAtMS4wLCAtMS4wLFxyXG4gICAgICAgIDEuMCwgIDEuMCwgLTEuMCxcclxuICAgICAgICAtMS4wLCAgMS4wLCAtMS4wLFxyXG5cclxuICAgICAgICAtMS4wLCAtMS4wLCAgMS4wLFxyXG4gICAgICAgIC0xLjAsIC0xLjAsIC0xLjAsXHJcbiAgICAgICAgLTEuMCwgIDEuMCwgLTEuMCxcclxuICAgICAgICAtMS4wLCAgMS4wLCAtMS4wLFxyXG4gICAgICAgIC0xLjAsICAxLjAsICAxLjAsXHJcbiAgICAgICAgLTEuMCwgLTEuMCwgIDEuMCxcclxuXHJcbiAgICAgICAgMS4wLCAtMS4wLCAtMS4wLFxyXG4gICAgICAgIDEuMCwgLTEuMCwgIDEuMCxcclxuICAgICAgICAxLjAsICAxLjAsICAxLjAsXHJcbiAgICAgICAgMS4wLCAgMS4wLCAgMS4wLFxyXG4gICAgICAgIDEuMCwgIDEuMCwgLTEuMCxcclxuICAgICAgICAxLjAsIC0xLjAsIC0xLjAsXHJcblxyXG4gICAgICAgIC0xLjAsIC0xLjAsICAxLjAsXHJcbiAgICAgICAgLTEuMCwgIDEuMCwgIDEuMCxcclxuICAgICAgICAxLjAsICAxLjAsICAxLjAsXHJcbiAgICAgICAgMS4wLCAgMS4wLCAgMS4wLFxyXG4gICAgICAgIDEuMCwgLTEuMCwgIDEuMCxcclxuICAgICAgICAtMS4wLCAtMS4wLCAgMS4wLFxyXG5cclxuICAgICAgICAtMS4wLCAgMS4wLCAtMS4wLFxyXG4gICAgICAgIDEuMCwgIDEuMCwgLTEuMCxcclxuICAgICAgICAxLjAsICAxLjAsICAxLjAsXHJcbiAgICAgICAgMS4wLCAgMS4wLCAgMS4wLFxyXG4gICAgICAgIC0xLjAsICAxLjAsICAxLjAsXHJcbiAgICAgICAgLTEuMCwgIDEuMCwgLTEuMCxcclxuXHJcbiAgICAgICAgLTEuMCwgLTEuMCwgLTEuMCxcclxuICAgICAgICAtMS4wLCAtMS4wLCAgMS4wLFxyXG4gICAgICAgIDEuMCwgLTEuMCwgLTEuMCxcclxuICAgICAgICAxLjAsIC0xLjAsIC0xLjAsXHJcbiAgICAgICAgLTEuMCwgLTEuMCwgIDEuMCxcclxuICAgICAgICAxLjAsIC0xLjAsICAxLjBcclxuICAgIF1cclxufTtcblxudmFyIHNreWJveFZTID0gXCIgICAgYXR0cmlidXRlIHZlYzMgYVBvc2l0aW9uO1xcblxcblxcblxcbiAgICB1bmlmb3JtIG1hdDQgcHJvak1hdHJpeDtcXG5cXG4gICAgdW5pZm9ybSBtYXQ0IHZpZXdNYXRyaXg7XFxuXFxuXFxuXFxuICAgIHZhcnlpbmcgdmVjMyB2V29ybGRQb3M7XFxuXFxuXFxuXFxuICAgIHZvaWQgbWFpbigpXFxuXFxuICAgIHtcXG5cXG4gICAgICAgIHZXb3JsZFBvcyA9IGFQb3NpdGlvbjtcXG5cXG5cXG5cXG4gICAgICAgIG1hdDQgcm90Vmlld01hdHJpeCA9IG1hdDQobWF0Myh2aWV3TWF0cml4KSk7IC8vIHJlbW92ZSB0cmFuc2xhdGlvbiBmcm9tIHRoZSB2aWV3IG1hdHJpeFxcblxcbiAgICAgICAgdmVjNCBjbGlwUG9zID0gcHJvak1hdHJpeCAqIHJvdFZpZXdNYXRyaXggKiB2ZWM0KHZXb3JsZFBvcywgMS4wKTtcXG5cXG5cXG5cXG4gICAgICAgIGdsX1Bvc2l0aW9uID0gY2xpcFBvcy54eXd3O1xcblxcbiAgICB9XFxuXFxuXCI7XG5cbnZhciBza3lib3hGcmFnID0gXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5cXG5cXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zO1xcblxcblxcblxcbnVuaWZvcm0gc2FtcGxlckN1YmUgY3ViZU1hcDtcXG5cXG5cXG5cXG52b2lkIG1haW4oKVxcblxcbntcXG5cXG4gICAgdmVjMyBlbnZDb2xvciA9IHRleHR1cmVDdWJlKGN1YmVNYXAsIHZXb3JsZFBvcykucmdiO1xcblxcblxcblxcbiAgICAjaWZkZWYgVVNFX0hEUlxcblxcbiAgICBlbnZDb2xvciA9IGVudkNvbG9yIC8gKGVudkNvbG9yICsgdmVjMygxLjApKTtcXG5cXG4gICAgZW52Q29sb3IgPSBwb3coZW52Q29sb3IsIHZlYzMoMS4wLzIuMikpO1xcblxcbiAgICAjZW5kaWZcXG5cXG5cXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChlbnZDb2xvciwgMS4wKTtcXG5cXG59XFxuXFxuXCI7XG5cbmxldCBjb21tYW5kLCBjb21tYW5kSERSO1xyXG5sZXQgY29uZmlnO1xyXG5cclxuLyoqXHJcbiAqIERyYXcgc2t5Ym94IHdpdGggZ2l2ZW4gY3ViZW1hcCBhbmQgY2FtZXJhIHBvc2l0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7UkVHTH0gcmVnbCAtIHJlZ2wgaW5zdGFuY2VcclxuICogQHBhcmFtIHtSRUdMQ3ViZU1hcH0gY3ViZU1hcCAtIGEgcmVnbCBjdWJlbWFwXHJcbiAqIEBwYXJhbSB7TnVtYmVyW119IHZpZXdNYXRyaXggLSBjYW1lcmEgdmlldyBtYXRyaXgsIGEgY29sdW1uLW1ham9yIGZsb2F0IGFycmF5IG9mIDR4NCBtYXRyaXhcclxuICogQHBhcmFtIHtOdW1iZXJbXX0gcHJvak1hdHJpeCAgLSBjYW1lcmEgcHJvamVjdGlvbiBtYXRyaXgsIGNvbHVtbi1tYWpvciBmbG9hdCBhcnJheSBvZiA0eDQgbWF0cml4XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3VzZUhEUj1mYWxzZV0gLSB3aGV0aGVyIGV4cG9ydCBjb2xvciB1c2luZyBIRFJcclxuICogQHBhcmFtIHtSRUdMRnJhbWVidWZmZXJ9IFtmcmFtZUJ1ZmZlcj1mYWxzZV0gLSB0aGUgZnJhbWVidWZmZXIgdG8gcmVuZGVyIHRvXHJcbiAqL1xyXG5mdW5jdGlvbiBkcmF3U2t5Ym94KHJlZ2wsIGN1YmVNYXAsIHZpZXdNYXRyaXgsIHByb2pNYXRyaXgsIHVzZUhEUiwgZnJhbWVCdWZmZXIpIHtcclxuICAgIGxldCBkcmF3Q29tbWFuZDtcclxuICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7XHJcbiAgICAgICAgdmVydCA6IHNreWJveFZTLFxyXG4gICAgICAgIGF0dHJpYnV0ZXMgOiB7XHJcbiAgICAgICAgICAgICdhUG9zaXRpb24nIDogc2t5Ym94RGF0YS52ZXJ0aWNlc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5pZm9ybXMgOiB7XHJcbiAgICAgICAgICAgICdjdWJlTWFwJyA6IHJlZ2wucHJvcCgnY3ViZU1hcCcpLFxyXG4gICAgICAgICAgICAndmlld01hdHJpeCcgOiByZWdsLnByb3AoJ3ZpZXdNYXRyaXgnKSxcclxuICAgICAgICAgICAgJ3Byb2pNYXRyaXgnIDogcmVnbC5wcm9wKCdwcm9qTWF0cml4JylcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvdW50IDogc2t5Ym94RGF0YS52ZXJ0aWNlcy5sZW5ndGggLyAzLFxyXG4gICAgICAgIGZyYW1lYnVmZmVyIDogcmVnbC5wcm9wKCdmcmFtZUJ1ZmZlcicpLFxyXG4gICAgICAgIGRlcHRoIDoge1xyXG4gICAgICAgICAgICBlbmFibGUgOiB0cnVlLFxyXG4gICAgICAgICAgICBmdW5jIDogJ2xlcXVhbCdcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaWYgKHVzZUhEUikge1xyXG4gICAgICAgIGNvbmZpZ1snZnJhZyddID0gJyNkZWZpbmUgVVNFX0hEUiBcXG4nICsgc2t5Ym94RnJhZztcclxuICAgICAgICBkcmF3Q29tbWFuZCA9IGNvbW1hbmRIRFIgPSBjb21tYW5kSERSIHx8IHJlZ2woY29uZmlnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uZmlnWydmcmFnJ10gPSBza3lib3hGcmFnO1xyXG4gICAgICAgIGRyYXdDb21tYW5kID0gY29tbWFuZCA9IGNvbW1hbmQgfHwgcmVnbChjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdDb21tYW5kKHtcclxuICAgICAgICBjdWJlTWFwLFxyXG4gICAgICAgIHZpZXdNYXRyaXgsXHJcbiAgICAgICAgcHJvak1hdHJpeCxcclxuICAgICAgICBmcmFtZUJ1ZmZlclxyXG4gICAgfSk7XHJcbn1cblxudmFyIFNreWJveEhlbHBlciA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBkcmF3U2t5Ym94OiBkcmF3U2t5Ym94XG59KTtcblxuY29uc3QgcmVuZGVyVG9DdWJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY2FtZXJhUG9zID0gWzAsIDAsIDBdO1xyXG4gICAgY29uc3QgY2FwdHVyZVZpZXdzID0gW1xyXG4gICAgICAgIG1hdDQubG9va0F0KFtdLCBjYW1lcmFQb3MsIFsxLCAwLCAwXSwgIFswLCAtMSwgMF0pLFxyXG4gICAgICAgIG1hdDQubG9va0F0KFtdLCBjYW1lcmFQb3MsIFstMSwgMCwgMF0sIFswLCAtMSwgMF0pLFxyXG4gICAgICAgIG1hdDQubG9va0F0KFtdLCBjYW1lcmFQb3MsIFswLCAxLCAwXSwgIFswLCAwLCAxXSksXHJcbiAgICAgICAgbWF0NC5sb29rQXQoW10sIGNhbWVyYVBvcywgWzAsIC0xLCAwXSwgWzAsIDAsIC0xXSksXHJcbiAgICAgICAgbWF0NC5sb29rQXQoW10sIGNhbWVyYVBvcywgWzAsIDAsIDFdLCAgWzAsIC0xLCAwXSksXHJcbiAgICAgICAgbWF0NC5sb29rQXQoW10sIGNhbWVyYVBvcywgWzAsIDAsIC0xXSwgWzAsIC0xLCAwXSlcclxuICAgIF07XHJcbiAgICBjb25zdCBmb3YgPSA5MCAqIE1hdGguUEkgLyAxODA7XHJcbiAgICBjb25zdCBjbGVhckNvbG9yID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgY29uc3QgcG1hdCA9IG5ldyBBcnJheSgxNik7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWdsLCBmYm8sIGRyYXdDb21tYW5kLCBwcm9wcywgY2IpIHtcclxuICAgICAgICBjb25zdCBhc3BlY3QgPSAxO1xyXG4gICAgICAgIGNvbnN0IG5lYXIgPSAwLjU7XHJcbiAgICAgICAgY29uc3QgZmFyID0gMS4xO1xyXG4gICAgICAgIGNvbnN0IHByb2pNYXRyaXggPSBtYXQ0LnBlcnNwZWN0aXZlKHBtYXQsIGZvdiwgYXNwZWN0LCBuZWFyLCBmYXIpO1xyXG5cclxuICAgICAgICBjb25zdCBjb25maWcgPSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQgOiB7XHJcbiAgICAgICAgICAgICAgICAvL+avj+asoeW6lOeUqOS4jeWQjOeahCB2aWV3IG1hdHJpeFxyXG4gICAgICAgICAgICAgICAgdmlld01hdHJpeDogZnVuY3Rpb24gKGNvbnRleHQsIHByb3BzLCBiYXRjaElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhcHR1cmVWaWV3c1tiYXRjaElkXTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBwcm9qTWF0cml4XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChmYm8pIHtcclxuICAgICAgICAgICAgaWYgKGZiby5mYWNlcykge1xyXG4gICAgICAgICAgICAgICAgLy9hIGN1YmUgbWFwXHJcbiAgICAgICAgICAgICAgICBjb25maWcuZnJhbWVidWZmZXIgPSBmdW5jdGlvbiAoY29udGV4dCwgcHJvcHMsIGJhdGNoSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmJvLmZhY2VzW2JhdGNoSWRdO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5mcmFtZWJ1ZmZlciA9IGZibztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2V0dXBGYWNlID0gcmVnbChjb25maWcpO1xyXG5cclxuICAgICAgICBzZXR1cEZhY2UoNiwgKCkgPT4ge1xyXG4gICAgICAgICAgICByZWdsLmNsZWFyKHtcclxuICAgICAgICAgICAgICAgIGNvbG9yOiBjbGVhckNvbG9yLFxyXG4gICAgICAgICAgICAgICAgZGVwdGg6IDFcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRyYXdDb21tYW5kKHByb3BzKTtcclxuICAgICAgICAgICAgaWYgKGNiKSBjYigpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gZmJvO1xyXG4gICAgfTtcclxufSgpO1xuXG52YXIgY3ViZURhdGEgPSB7XHJcbiAgICAvLyBDcmVhdGUgYSBjdWJlXHJcbiAgICAvLyAgICB2Ni0tLS0tIHY1XHJcbiAgICAvLyAgIC98ICAgICAgL3xcclxuICAgIC8vICB2MS0tLS0tLXYwfFxyXG4gICAgLy8gIHwgfCAgICAgfCB8XHJcbiAgICAvLyAgfCB8djctLS18LXx2NFxyXG4gICAgLy8gIHwvICAgICAgfC9cclxuICAgIC8vICB2Mi0tLS0tLXYzXHJcbiAgICAvLyBDb29yZGluYXRlc1xyXG4gICAgdmVydGljZXMgOiBbXHJcbiAgICAgICAgMS4wLCAxLjAsIDEuMCwgIC0xLjAsIDEuMCwgMS4wLCAgLTEuMCwgLTEuMCwgMS4wLCAgIDEuMCwgLTEuMCwgMS4wLCAvLyB2MC12MS12Mi12MyBmcm9udFxyXG4gICAgICAgIDEuMCwgMS4wLCAxLjAsICAgMS4wLCAtMS4wLCAxLjAsICAgMS4wLCAtMS4wLCAtMS4wLCAgIDEuMCwgMS4wLCAtMS4wLCAvLyB2MC12My12NC12NSByaWdodFxyXG4gICAgICAgIDEuMCwgMS4wLCAxLjAsICAgMS4wLCAxLjAsIC0xLjAsICAtMS4wLCAxLjAsIC0xLjAsICAtMS4wLCAxLjAsIDEuMCwgLy8gdjAtdjUtdjYtdjEgdXBcclxuICAgICAgICAtMS4wLCAxLjAsIDEuMCwgIC0xLjAsIDEuMCwgLTEuMCwgIC0xLjAsIC0xLjAsIC0xLjAsICAtMS4wLCAtMS4wLCAxLjAsIC8vIHYxLXY2LXY3LXYyIGxlZnRcclxuICAgICAgICAtMS4wLCAtMS4wLCAtMS4wLCAgIDEuMCwgLTEuMCwgLTEuMCwgICAxLjAsIC0xLjAsIDEuMCwgIC0xLjAsIC0xLjAsIDEuMCwgLy8gdjctdjQtdjMtdjIgZG93blxyXG4gICAgICAgIDEuMCwgLTEuMCwgLTEuMCwgIC0xLjAsIC0xLjAsIC0xLjAsICAtMS4wLCAxLjAsIC0xLjAsICAgMS4wLCAxLjAsIC0xLjAgIC8vIHY0LXY3LXY2LXY1IGJhY2tcclxuICAgICAgICAvLyAyLjAsIDIuMCwgMi4wLCAgLTIuMCwgMi4wLCAyLjAsICAtMi4wLC0yLjAsIDIuMCwgICAyLjAsLTIuMCwgMi4wLCAvLyB2MC12MS12Mi12MyBmcm9udFxyXG4gICAgICAgIC8vIDIuMCwgMi4wLCAyLjAsICAgMi4wLC0yLjAsIDIuMCwgICAyLjAsLTIuMCwtMi4wLCAgIDIuMCwgMi4wLC0yLjAsIC8vIHYwLXYzLXY0LXY1IHJpZ2h0XHJcbiAgICAgICAgLy8gMi4wLCAyLjAsIDIuMCwgICAyLjAsIDIuMCwtMi4wLCAgLTIuMCwgMi4wLC0yLjAsICAtMi4wLCAyLjAsIDIuMCwgLy8gdjAtdjUtdjYtdjEgdXBcclxuICAgICAgICAvLyAtMi4wLCAyLjAsIDIuMCwgIC0yLjAsIDIuMCwtMi4wLCAgLTIuMCwtMi4wLC0yLjAsICAtMi4wLC0yLjAsIDIuMCwgLy8gdjEtdjYtdjctdjIgbGVmdFxyXG4gICAgICAgIC8vIC0yLjAsLTIuMCwtMi4wLCAgIDIuMCwtMi4wLC0yLjAsICAgMi4wLC0yLjAsIDIuMCwgIC0yLjAsLTIuMCwgMi4wLCAvLyB2Ny12NC12My12MiBkb3duXHJcbiAgICAgICAgLy8gMi4wLC0yLjAsLTIuMCwgIC0yLjAsLTIuMCwtMi4wLCAgLTIuMCwgMi4wLC0yLjAsICAgMi4wLCAyLjAsLTIuMCAgLy8gdjQtdjctdjYtdjUgYmFja1xyXG4gICAgXSxcclxuXHJcbiAgICAvLyBOb3JtYWxcclxuICAgIC8vIG5vcm1hbHMgOiBbXHJcbiAgICAvLyAgIDAuMCwgMC4wLCAxLjAsICAgMC4wLCAwLjAsIDEuMCwgICAwLjAsIDAuMCwgMS4wLCAgIDAuMCwgMC4wLCAxLjAsICAvLyB2MC12MS12Mi12MyBmcm9udFxyXG4gICAgLy8gICAxLjAsIDAuMCwgMC4wLCAgIDEuMCwgMC4wLCAwLjAsICAgMS4wLCAwLjAsIDAuMCwgICAxLjAsIDAuMCwgMC4wLCAgLy8gdjAtdjMtdjQtdjUgcmlnaHRcclxuICAgIC8vICAgMC4wLCAxLjAsIDAuMCwgICAwLjAsIDEuMCwgMC4wLCAgIDAuMCwgMS4wLCAwLjAsICAgMC4wLCAxLjAsIDAuMCwgIC8vIHYwLXY1LXY2LXYxIHVwXHJcbiAgICAvLyAgIC0xLjAsIDAuMCwgMC4wLCAgLTEuMCwgMC4wLCAwLjAsICAtMS4wLCAwLjAsIDAuMCwgIC0xLjAsIDAuMCwgMC4wLCAgLy8gdjEtdjYtdjctdjIgbGVmdFxyXG4gICAgLy8gICAwLjAsIC0xLjAsIDAuMCwgICAwLjAsIC0xLjAsIDAuMCwgICAwLjAsIC0xLjAsIDAuMCwgICAwLjAsIC0xLjAsIDAuMCwgIC8vIHY3LXY0LXYzLXYyIGRvd25cclxuICAgIC8vICAgMC4wLCAwLjAsIC0xLjAsICAgMC4wLCAwLjAsIC0xLjAsICAgMC4wLCAwLjAsIC0xLjAsICAgMC4wLCAwLjAsIC0xLjAgICAvLyB2NC12Ny12Ni12NSBiYWNrXHJcbiAgICAvLyBdLFxyXG5cclxuICAgIHRleHR1cmVzIDogW1xyXG4gICAgICAgIDEuMCwgMS4wLCAgIDAuMCwgMS4wLCAgIDAuMCwgMC4wLCAgMS4wLCAwLjAsXHJcbiAgICAgICAgMS4wLCAxLjAsICAgMC4wLCAxLjAsICAgMC4wLCAwLjAsICAxLjAsIDAuMCxcclxuICAgICAgICAxLjAsIDEuMCwgICAwLjAsIDEuMCwgICAwLjAsIDAuMCwgIDEuMCwgMC4wLFxyXG4gICAgICAgIDEuMCwgMS4wLCAgIDAuMCwgMS4wLCAgIDAuMCwgMC4wLCAgMS4wLCAwLjAsXHJcbiAgICAgICAgMS4wLCAxLjAsICAgMC4wLCAxLjAsICAgMC4wLCAwLjAsICAxLjAsIDAuMCxcclxuICAgICAgICAxLjAsIDEuMCwgICAwLjAsIDEuMCwgICAwLjAsIDAuMCwgIDEuMCwgMC4wXHJcbiAgICBdLFxyXG5cclxuICAgIC8vIEluZGljZXMgb2YgdGhlIHZlcnRpY2VzXHJcbiAgICBpbmRpY2VzIDogW1xyXG4gICAgICAgIDAsIDEsIDIsICAgMCwgMiwgMywgICAgLy8gZnJvbnRcclxuICAgICAgICA0LCA1LCA2LCAgIDQsIDYsIDcsICAgIC8vIHJpZ2h0XHJcbiAgICAgICAgOCwgOSwgMTAsICAgOCwgMTAsIDExLCAgICAvLyB1cFxyXG4gICAgICAgIDEyLCAxMywgMTQsICAxMiwgMTQsIDE1LCAgICAvLyBsZWZ0XHJcbiAgICAgICAgMTYsIDE3LCAxOCwgIDE2LCAxOCwgMTksICAgIC8vIGRvd25cclxuICAgICAgICAyMCwgMjEsIDIyLCAgMjAsIDIyLCAyMyAgICAgLy8gYmFja1xyXG4gICAgXVxyXG59O1xuXG52YXIgY3ViZW1hcFZTID0gXCJhdHRyaWJ1dGUgdmVjMyBhUG9zaXRpb247XFxuXFxuXFxuXFxudmFyeWluZyB2ZWMzIHZXb3JsZFBvcztcXG5cXG5cXG5cXG51bmlmb3JtIG1hdDQgcHJvak1hdHJpeDtcXG5cXG51bmlmb3JtIG1hdDQgdmlld01hdHJpeDtcXG5cXG5cXG5cXG52b2lkIG1haW4oKVxcblxcbntcXG5cXG4gICAgdldvcmxkUG9zID0gYVBvc2l0aW9uO1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9ICBwcm9qTWF0cml4ICogdmlld01hdHJpeCAqIHZlYzQodldvcmxkUG9zLCAxLjApO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGVxdWlyZWN0YW5ndWxhck1hcEZTID0gXCIvL+W5s+mdouWbvui9rOaIkGN1YmVtYXBcXG5cXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5cXG5cXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zO1xcblxcblxcblxcbnVuaWZvcm0gc2FtcGxlcjJEIGVxdWlyZWN0YW5ndWxhck1hcDtcXG5cXG5cXG5cXG5jb25zdCB2ZWMyIGludkF0YW4gPSB2ZWMyKDAuMTU5MSwgMC4zMTgzKTtcXG5cXG52ZWMyIFNhbXBsZVNwaGVyaWNhbE1hcCh2ZWMzIHYpXFxuXFxue1xcblxcbiAgICB2ZWMyIHV2ID0gdmVjMihhdGFuKHYueSwgdi54KSwgYXNpbih2LnopKTtcXG5cXG4gICAgdXYgKj0gaW52QXRhbjtcXG5cXG4gICAgdXYgKz0gMC41O1xcblxcbiAgICByZXR1cm4gdXY7XFxuXFxufVxcblxcblxcblxcbnZvaWQgbWFpbigpXFxuXFxue1xcblxcbiAgICB2ZWMyIHV2ID0gU2FtcGxlU3BoZXJpY2FsTWFwKG5vcm1hbGl6ZSh2V29ybGRQb3MpKTsgLy8gbWFrZSBzdXJlIHRvIG5vcm1hbGl6ZSBsb2NhbFBvc1xcblxcbiAgICB2ZWMzIGNvbG9yID0gdGV4dHVyZTJEKGVxdWlyZWN0YW5ndWxhck1hcCwgdXYpLnJnYjtcXG5cXG5cXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMS4wKTtcXG5cXG4gICAgLy8gZ2xfRnJhZ0NvbG9yID0gdmVjNCh1diwgMC4wLCAxLjApO1xcblxcbn1cXG5cXG5cXG5cXG5cIjtcblxudmFyIHByZWZpbHRlckZTID0gXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5cXG5cXG52YXJ5aW5nIHZlYzMgdldvcmxkUG9zO1xcblxcblxcblxcbnVuaWZvcm0gc2FtcGxlckN1YmUgZW52aXJvbm1lbnRNYXA7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgZGlzdHJpYnV0aW9uTWFwO1xcblxcbnVuaWZvcm0gZmxvYXQgcm91Z2huZXNzO1xcblxcbnVuaWZvcm0gZmxvYXQgcmVzb2x1dGlvbjsgLy8gcmVzb2x1dGlvbiBvZiBzb3VyY2UgY3ViZW1hcCAocGVyIGZhY2UpXFxuXFxuXFxuXFxuY29uc3QgZmxvYXQgUEkgPSAzLjE0MTU5MjY1MzU5O1xcblxcblxcblxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5mbG9hdCBEaXN0cmlidXRpb25HR1godmVjMyBOLCB2ZWMzIEgsIGZsb2F0IHJvdWdobmVzcylcXG5cXG57XFxuXFxuICAgIGZsb2F0IGEgPSByb3VnaG5lc3Mqcm91Z2huZXNzO1xcblxcbiAgICBmbG9hdCBhMiA9IGEqYTtcXG5cXG4gICAgZmxvYXQgTmRvdEggPSBtYXgoZG90KE4sIEgpLCAwLjApO1xcblxcbiAgICBmbG9hdCBOZG90SDIgPSBOZG90SCpOZG90SDtcXG5cXG5cXG5cXG4gICAgZmxvYXQgbm9tICAgPSBhMjtcXG5cXG4gICAgZmxvYXQgZGVub20gPSAoTmRvdEgyICogKGEyIC0gMS4wKSArIDEuMCk7XFxuXFxuICAgIGRlbm9tID0gUEkgKiBkZW5vbSAqIGRlbm9tO1xcblxcblxcblxcbiAgICByZXR1cm4gbm9tIC8gZGVub207XFxuXFxufVxcblxcblxcblxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG52ZWMzIEltcG9ydGFuY2VTYW1wbGVHR1goZmxvYXQgWGksIHZlYzMgTiwgZmxvYXQgcm91Z2huZXNzKVxcblxcbntcXG5cXG4gICAgdmVjMyBIID0gdGV4dHVyZTJEKGRpc3RyaWJ1dGlvbk1hcCwgdmVjMihyb3VnaG5lc3MsIFhpKSkucmdiO1xcblxcblxcblxcbiAgICAvLyBmcm9tIHRhbmdlbnQtc3BhY2UgSCB2ZWN0b3IgdG8gd29ybGQtc3BhY2Ugc2FtcGxlIHZlY3RvclxcblxcbiAgICB2ZWMzIHVwICAgICAgICAgID0gYWJzKE4ueikgPCAwLjk5OSA/IHZlYzMoMC4wLCAwLjAsIDEuMCkgOiB2ZWMzKDEuMCwgMC4wLCAwLjApO1xcblxcbiAgICB2ZWMzIHRhbmdlbnQgICA9IG5vcm1hbGl6ZShjcm9zcyh1cCwgTikpO1xcblxcbiAgICB2ZWMzIGJpdGFuZ2VudCA9IGNyb3NzKE4sIHRhbmdlbnQpO1xcblxcblxcblxcbiAgICB2ZWMzIHNhbXBsZVZlYyA9IHRhbmdlbnQgKiBILnggKyBiaXRhbmdlbnQgKiBILnkgKyBOICogSC56O1xcblxcbiAgICByZXR1cm4gbm9ybWFsaXplKHNhbXBsZVZlYyk7XFxuXFxufVxcblxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG52b2lkIG1haW4oKVxcblxcbntcXG5cXG4gICAgdmVjMyBOID0gbm9ybWFsaXplKHZXb3JsZFBvcyk7XFxuXFxuXFxuXFxuICAgIC8vIG1ha2UgdGhlIHNpbXBseWZ5aW5nIGFzc3VtcHRpb24gdGhhdCBWIGVxdWFscyBSIGVxdWFscyB0aGUgbm9ybWFsXFxuXFxuICAgIHZlYzMgUiA9IE47XFxuXFxuICAgIHZlYzMgViA9IFI7XFxuXFxuXFxuXFxuICAgIGNvbnN0IGludCBTQU1QTEVfQ09VTlQgPSAxMDI0O1xcblxcbiAgICB2ZWMzIHByZWZpbHRlcmVkQ29sb3IgPSB2ZWMzKDAuMCk7XFxuXFxuICAgIGZsb2F0IHRvdGFsV2VpZ2h0ID0gMC4wO1xcblxcblxcblxcbiAgICBmb3IoaW50IGkgPSAwOyBpIDwgU0FNUExFX0NPVU5UOyArK2kpXFxuXFxuICAgIHtcXG5cXG4gICAgICAgIC8vIGdlbmVyYXRlcyBhIHNhbXBsZSB2ZWN0b3IgdGhhdCdzIGJpYXNlZCB0b3dhcmRzIHRoZSBwcmVmZXJyZWQgYWxpZ25tZW50IGRpcmVjdGlvbiAoaW1wb3J0YW5jZSBzYW1wbGluZykuXFxuXFxuICAgICAgICB2ZWMzIEggPSBJbXBvcnRhbmNlU2FtcGxlR0dYKGZsb2F0KGkpIC8gZmxvYXQoU0FNUExFX0NPVU5UKSwgTiwgcm91Z2huZXNzKTtcXG5cXG4gICAgICAgIHZlYzMgTCAgPSBub3JtYWxpemUoMi4wICogZG90KFYsIEgpICogSCAtIFYpO1xcblxcblxcblxcbiAgICAgICAgZmxvYXQgTmRvdEwgPSBtYXgoZG90KE4sIEwpLCAwLjApO1xcblxcbiAgICAgICAgaWYoTmRvdEwgPiAwLjApXFxuXFxuICAgICAgICB7XFxuXFxuICAgICAgICAgICAgLy8gYSBtb3JlIHByZWNpc2lvbiBtZXRob2QsICBzYW1wbGUgZnJvbSB0aGUgZW52aXJvbm1lbnQncyBtaXAgbGV2ZWwgYmFzZWQgb24gcm91Z2huZXNzL3BkZlxcblxcbiAgICAgICAgICAgIGZsb2F0IEQgICA9IERpc3RyaWJ1dGlvbkdHWChOLCBILCByb3VnaG5lc3MpO1xcblxcbiAgICAgICAgICAgIGZsb2F0IE5kb3RIID0gbWF4KGRvdChOLCBIKSwgMC4wKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBIZG90ViA9IG1heChkb3QoSCwgViksIDAuMCk7XFxuXFxuICAgICAgICAgICAgZmxvYXQgcGRmID0gRCAqIE5kb3RIIC8gKDQuMCAqIEhkb3RWKSArIDAuMDAwMTtcXG5cXG5cXG5cXG4gICAgICAgICAgICBmbG9hdCBzYVRleGVsICA9IDQuMCAqIFBJIC8gKDYuMCAqIHJlc29sdXRpb24gKiByZXNvbHV0aW9uKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBzYVNhbXBsZSA9IDEuMCAvIChmbG9hdChTQU1QTEVfQ09VTlQpICogcGRmICsgMC4wMDAxKTtcXG5cXG5cXG5cXG4gICAgICAgICAgICBmbG9hdCBtaXBMZXZlbCA9IHJvdWdobmVzcyA9PSAwLjAgPyAwLjAgOiAwLjUgKiBsb2cyKHNhU2FtcGxlIC8gc2FUZXhlbCk7XFxuXFxuXFxuXFxuICAgICAgICAgICAgcHJlZmlsdGVyZWRDb2xvciArPSB0ZXh0dXJlQ3ViZShlbnZpcm9ubWVudE1hcCwgTCwgbWlwTGV2ZWwpLnJnYiAqIE5kb3RMO1xcblxcbiAgICAgICAgICAgIHRvdGFsV2VpZ2h0ICAgICAgKz0gTmRvdEw7XFxuXFxuICAgICAgICAgICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcblxcbiAgICAgICAgICAgIC8vIHByZWZpbHRlcmVkQ29sb3IgKz0gdGV4dHVyZUN1YmUoZW52aXJvbm1lbnRNYXAsIEwpLnJnYiAqIE5kb3RMO1xcblxcbiAgICAgICAgICAgIC8vIHRvdGFsV2VpZ2h0ICAgICAgKz0gTmRvdEw7XFxuXFxuICAgICAgICB9XFxuXFxuICAgIH1cXG5cXG5cXG5cXG4gICAgcHJlZmlsdGVyZWRDb2xvciA9IHByZWZpbHRlcmVkQ29sb3IgLyB0b3RhbFdlaWdodDtcXG5cXG5cXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChwcmVmaWx0ZXJlZENvbG9yLCAxLjApO1xcblxcbiAgICAvLyBnbF9GcmFnQ29sb3IgPSB2ZWM0KHRvdGFsV2VpZ2h0LCAwLjAsIDAuMCwgMS4wKTtcXG5cXG4gICAgLy8gZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGRmZ0ZTID0gXCIvL+eUn+aIkCBCUkRGIExVVFxcblxcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcblxcblxcblxcbnZhcnlpbmcgdmVjMiB2VGV4Q29vcmRzO1xcblxcbnVuaWZvcm0gc2FtcGxlcjJEIGRpc3RyaWJ1dGlvbk1hcDtcXG5cXG5cXG5cXG5jb25zdCBmbG9hdCBQSSA9IDMuMTQxNTkyNjUzNTk7XFxuXFxuXFxuXFxudmVjMyBJbXBvcnRhbmNlU2FtcGxlR0dYKGZsb2F0IFhpLCB2ZWMzIE4sIGZsb2F0IHJvdWdobmVzcylcXG5cXG57XFxuXFxuICAgIHZlYzMgSCA9IHRleHR1cmUyRChkaXN0cmlidXRpb25NYXAsIHZlYzIocm91Z2huZXNzLCBYaSkpLnJnYjtcXG5cXG4gICAgXFxuXFxuICAgIC8vIGZyb20gdGFuZ2VudC1zcGFjZSBIIHZlY3RvciB0byB3b3JsZC1zcGFjZSBzYW1wbGUgdmVjdG9yXFxuXFxuICAgIHZlYzMgdXAgICAgICAgICAgPSBhYnMoTi56KSA8IDAuOTk5ID8gdmVjMygwLjAsIDAuMCwgMS4wKSA6IHZlYzMoMS4wLCAwLjAsIDAuMCk7XFxuXFxuICAgIHZlYzMgdGFuZ2VudCAgID0gbm9ybWFsaXplKGNyb3NzKHVwLCBOKSk7XFxuXFxuICAgIHZlYzMgYml0YW5nZW50ID0gY3Jvc3MoTiwgdGFuZ2VudCk7XFxuXFxuICAgIFxcblxcbiAgICB2ZWMzIHNhbXBsZVZlYyA9IHRhbmdlbnQgKiBILnggKyBiaXRhbmdlbnQgKiBILnkgKyBOICogSC56O1xcblxcbiAgICByZXR1cm4gbm9ybWFsaXplKHNhbXBsZVZlYyk7XFxuXFxufVxcblxcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG5mbG9hdCBHZW9tZXRyeVNjaGxpY2tHR1goZmxvYXQgTmRvdFYsIGZsb2F0IHJvdWdobmVzcylcXG5cXG57XFxuXFxuICAgIC8vIG5vdGUgdGhhdCB3ZSB1c2UgYSBkaWZmZXJlbnQgayBmb3IgSUJMXFxuXFxuICAgIGZsb2F0IGEgPSByb3VnaG5lc3M7XFxuXFxuICAgIGZsb2F0IGsgPSAoYSAqIGEpIC8gMi4wO1xcblxcblxcblxcbiAgICBmbG9hdCBub20gICA9IE5kb3RWO1xcblxcbiAgICBmbG9hdCBkZW5vbSA9IE5kb3RWICogKDEuMCAtIGspICsgaztcXG5cXG5cXG5cXG4gICAgcmV0dXJuIG5vbSAvIGRlbm9tO1xcblxcbn1cXG5cXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuZmxvYXQgR2VvbWV0cnlTbWl0aCh2ZWMzIE4sIHZlYzMgViwgdmVjMyBMLCBmbG9hdCByb3VnaG5lc3MpXFxuXFxue1xcblxcbiAgICBmbG9hdCBOZG90ViA9IG1heChkb3QoTiwgViksIDAuMCk7XFxuXFxuICAgIGZsb2F0IE5kb3RMID0gbWF4KGRvdChOLCBMKSwgMC4wKTtcXG5cXG4gICAgZmxvYXQgZ2d4MiA9IEdlb21ldHJ5U2NobGlja0dHWChOZG90Viwgcm91Z2huZXNzKTtcXG5cXG4gICAgZmxvYXQgZ2d4MSA9IEdlb21ldHJ5U2NobGlja0dHWChOZG90TCwgcm91Z2huZXNzKTtcXG5cXG5cXG5cXG4gICAgcmV0dXJuIGdneDEgKiBnZ3gyO1xcblxcbn1cXG5cXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxudmVjMiBJbnRlZ3JhdGVCUkRGKGZsb2F0IE5kb3RWLCBmbG9hdCByb3VnaG5lc3MpXFxuXFxue1xcblxcbiAgICB2ZWMzIFY7XFxuXFxuICAgIFYueCA9IHNxcnQoMS4wIC0gTmRvdFYqTmRvdFYpO1xcblxcbiAgICBWLnkgPSAwLjA7XFxuXFxuICAgIFYueiA9IE5kb3RWO1xcblxcblxcblxcbiAgICBmbG9hdCBBID0gMC4wO1xcblxcbiAgICBmbG9hdCBCID0gMC4wOyBcXG5cXG5cXG5cXG4gICAgdmVjMyBOID0gdmVjMygwLjAsIDAuMCwgMS4wKTtcXG5cXG4gICAgXFxuXFxuICAgIGNvbnN0IGludCBTQU1QTEVfQ09VTlQgPSAxMDI0O1xcblxcbiAgICBmb3IoaW50IGkgPSAwOyBpIDwgU0FNUExFX0NPVU5UOyArK2kpXFxuXFxuICAgIHtcXG5cXG4gICAgICAgIC8vIGdlbmVyYXRlcyBhIHNhbXBsZSB2ZWN0b3IgdGhhdCdzIGJpYXNlZCB0b3dhcmRzIHRoZVxcblxcbiAgICAgICAgLy8gcHJlZmVycmVkIGFsaWdubWVudCBkaXJlY3Rpb24gKGltcG9ydGFuY2Ugc2FtcGxpbmcpLlxcblxcbiAgICAgICAgdmVjMyBIID0gSW1wb3J0YW5jZVNhbXBsZUdHWChmbG9hdChpKSAvIGZsb2F0KFNBTVBMRV9DT1VOVCksIE4sIHJvdWdobmVzcyk7XFxuXFxuICAgICAgICB2ZWMzIEwgID0gbm9ybWFsaXplKDIuMCAqIGRvdChWLCBIKSAqIEggLSBWKTtcXG5cXG5cXG5cXG4gICAgICAgIGZsb2F0IE5kb3RMID0gbWF4KEwueiwgMC4wKTtcXG5cXG4gICAgICAgIGZsb2F0IE5kb3RIID0gbWF4KEgueiwgMC4wKTtcXG5cXG4gICAgICAgIGZsb2F0IFZkb3RIID0gbWF4KGRvdChWLCBIKSwgMC4wKTtcXG5cXG5cXG5cXG4gICAgICAgIGlmKE5kb3RMID4gMC4wKVxcblxcbiAgICAgICAge1xcblxcbiAgICAgICAgICAgIGZsb2F0IEcgPSBHZW9tZXRyeVNtaXRoKE4sIFYsIEwsIHJvdWdobmVzcyk7XFxuXFxuICAgICAgICAgICAgZmxvYXQgR19WaXMgPSAoRyAqIFZkb3RIKSAvIChOZG90SCAqIE5kb3RWKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBGYyA9IHBvdygxLjAgLSBWZG90SCwgNS4wKTtcXG5cXG5cXG5cXG4gICAgICAgICAgICBBICs9ICgxLjAgLSBGYykgKiBHX1ZpcztcXG5cXG4gICAgICAgICAgICBCICs9IEZjICogR19WaXM7XFxuXFxuICAgICAgICB9XFxuXFxuICAgIH1cXG5cXG4gICAgQSAvPSBmbG9hdChTQU1QTEVfQ09VTlQpO1xcblxcbiAgICBCIC89IGZsb2F0KFNBTVBMRV9DT1VOVCk7XFxuXFxuICAgIHJldHVybiB2ZWMyKEEsIEIpO1xcblxcbn1cXG5cXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxudm9pZCBtYWluKCkgXFxuXFxue1xcblxcbiAgICB2ZWMyIGludGVncmF0ZWRCUkRGID0gSW50ZWdyYXRlQlJERih2VGV4Q29vcmRzLngsIHZUZXhDb29yZHMueSk7XFxuXFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoaW50ZWdyYXRlZEJSREYsIDAuMCwgMS4wKTtcXG5cXG4gICAgLy8gZ2xfRnJhZ0NvbG9yID0gdmVjNCgxLjAsIDAuMCwgMC4wLCAxLjApO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGRmZ1ZTID0gXCJhdHRyaWJ1dGUgdmVjMyBhUG9zaXRpb247XFxuXFxuYXR0cmlidXRlIHZlYzIgYVRleENvb3JkO1xcblxcblxcblxcbnZhcnlpbmcgdmVjMiB2VGV4Q29vcmRzO1xcblxcblxcblxcbnZvaWQgbWFpbigpXFxuXFxue1xcblxcbiAgICB2VGV4Q29vcmRzID0gYVRleENvb3JkO1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoYVBvc2l0aW9uLCAxLjApO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIGVwc2lsb24gPSAwLjAwMDAwMTtcblxudmFyIGNyZWF0ZV8xID0gY3JlYXRlO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzNcbiAqXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICB2YXIgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICBvdXRbMF0gPSAwO1xuICAgIG91dFsxXSA9IDA7XG4gICAgb3V0WzJdID0gMDtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBjbG9uZV8xID0gY2xvbmU7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2ZWMzIGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgdmVjdG9yXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjbG9uZVxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxuICovXG5mdW5jdGlvbiBjbG9uZShhKSB7XG4gICAgdmFyIG91dCA9IG5ldyBGbG9hdDMyQXJyYXkoMyk7XG4gICAgb3V0WzBdID0gYVswXTtcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGFbMl07XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgZnJvbVZhbHVlc18xID0gZnJvbVZhbHVlcztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxuICovXG5mdW5jdGlvbiBmcm9tVmFsdWVzKHgsIHksIHopIHtcbiAgICB2YXIgb3V0ID0gbmV3IEZsb2F0MzJBcnJheSgzKTtcbiAgICBvdXRbMF0gPSB4O1xuICAgIG91dFsxXSA9IHk7XG4gICAgb3V0WzJdID0gejtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBub3JtYWxpemVfMSA9IG5vcm1hbGl6ZSQxO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBub3JtYWxpemVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplJDEob3V0LCBhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgdmFyIGxlbiA9IHgqeCArIHkqeSArIHoqejtcbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xuICAgICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XG4gICAgICAgIG91dFswXSA9IGFbMF0gKiBsZW47XG4gICAgICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XG4gICAgICAgIG91dFsyXSA9IGFbMl0gKiBsZW47XG4gICAgfVxuICAgIHJldHVybiBvdXRcbn1cblxudmFyIGRvdF8xID0gZG90O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRvdCBwcm9kdWN0IG9mIGEgYW5kIGJcbiAqL1xuZnVuY3Rpb24gZG90KGEsIGIpIHtcbiAgICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdXG59XG5cbnZhciBhbmdsZV8xID0gYW5nbGU7XG5cblxuXG5cblxuLyoqXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDNEIHZlY3RvcnNcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcbiAqL1xuZnVuY3Rpb24gYW5nbGUoYSwgYikge1xuICAgIHZhciB0ZW1wQSA9IGZyb21WYWx1ZXNfMShhWzBdLCBhWzFdLCBhWzJdKTtcbiAgICB2YXIgdGVtcEIgPSBmcm9tVmFsdWVzXzEoYlswXSwgYlsxXSwgYlsyXSk7XG4gXG4gICAgbm9ybWFsaXplXzEodGVtcEEsIHRlbXBBKTtcbiAgICBub3JtYWxpemVfMSh0ZW1wQiwgdGVtcEIpO1xuIFxuICAgIHZhciBjb3NpbmUgPSBkb3RfMSh0ZW1wQSwgdGVtcEIpO1xuXG4gICAgaWYoY29zaW5lID4gMS4wKXtcbiAgICAgICAgcmV0dXJuIDBcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSlcbiAgICB9ICAgICBcbn1cblxudmFyIGNvcHlfMSA9IGNvcHk7XG5cbi8qKlxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gY29weShvdXQsIGEpIHtcbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGFbMV07XG4gICAgb3V0WzJdID0gYVsyXTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBzZXRfMSA9IHNldDtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzIHRvIHRoZSBnaXZlbiB2YWx1ZXNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBzZXQob3V0LCB4LCB5LCB6KSB7XG4gICAgb3V0WzBdID0geDtcbiAgICBvdXRbMV0gPSB5O1xuICAgIG91dFsyXSA9IHo7XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgZXF1YWxzXzEgPSBlcXVhbHM7XG5cblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gIHZhciBhMCA9IGFbMF07XG4gIHZhciBhMSA9IGFbMV07XG4gIHZhciBhMiA9IGFbMl07XG4gIHZhciBiMCA9IGJbMF07XG4gIHZhciBiMSA9IGJbMV07XG4gIHZhciBiMiA9IGJbMl07XG4gIHJldHVybiAoTWF0aC5hYnMoYTAgLSBiMCkgPD0gZXBzaWxvbiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZXBzaWxvbiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmXG4gICAgICAgICAgTWF0aC5hYnMoYTIgLSBiMikgPD0gZXBzaWxvbiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpKVxufVxuXG52YXIgZXhhY3RFcXVhbHNfMSA9IGV4YWN0RXF1YWxzO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgZXhhY3RseSBoYXZlIHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxuICpcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3QgdmVjdG9yLlxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdXG59XG5cbnZhciBhZGRfMSA9IGFkZDtcblxuLyoqXG4gKiBBZGRzIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBzdWJ0cmFjdF8xID0gc3VidHJhY3Q7XG5cbi8qKlxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xuICAgIG91dFswXSA9IGFbMF0gLSBiWzBdO1xuICAgIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xuICAgIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xuICAgIHJldHVybiBvdXRcbn1cblxudmFyIHN1YiA9IHN1YnRyYWN0XzE7XG5cbnZhciBtdWx0aXBseV8xID0gbXVsdGlwbHk7XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYlswXTtcbiAgICBvdXRbMV0gPSBhWzFdICogYlsxXTtcbiAgICBvdXRbMl0gPSBhWzJdICogYlsyXTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBtdWwgPSBtdWx0aXBseV8xO1xuXG52YXIgZGl2aWRlXzEgPSBkaXZpZGU7XG5cbi8qKlxuICogRGl2aWRlcyB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBkaXZpZGUob3V0LCBhLCBiKSB7XG4gICAgb3V0WzBdID0gYVswXSAvIGJbMF07XG4gICAgb3V0WzFdID0gYVsxXSAvIGJbMV07XG4gICAgb3V0WzJdID0gYVsyXSAvIGJbMl07XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgZGl2ID0gZGl2aWRlXzE7XG5cbnZhciBtaW5fMSA9IG1pbjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcbiAgICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBtYXhfMSA9IG1heDtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBtYXhpbXVtIG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIG1heChvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBNYXRoLm1heChhWzBdLCBiWzBdKTtcbiAgICBvdXRbMV0gPSBNYXRoLm1heChhWzFdLCBiWzFdKTtcbiAgICBvdXRbMl0gPSBNYXRoLm1heChhWzJdLCBiWzJdKTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBmbG9vcl8xID0gZmxvb3I7XG5cbi8qKlxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBmbG9vclxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgY2VpbF8xID0gY2VpbDtcblxuLyoqXG4gKiBNYXRoLmNlaWwgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2VpbFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBjZWlsKG91dCwgYSkge1xuICBvdXRbMF0gPSBNYXRoLmNlaWwoYVswXSk7XG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5jZWlsKGFbMl0pO1xuICByZXR1cm4gb3V0XG59XG5cbnZhciByb3VuZF8xID0gcm91bmQ7XG5cbi8qKlxuICogTWF0aC5yb3VuZCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byByb3VuZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiByb3VuZChvdXQsIGEpIHtcbiAgb3V0WzBdID0gTWF0aC5yb3VuZChhWzBdKTtcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcbiAgb3V0WzJdID0gTWF0aC5yb3VuZChhWzJdKTtcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgc2NhbGVfMSA9IHNjYWxlO1xuXG4vKipcbiAqIFNjYWxlcyBhIHZlYzMgYnkgYSBzY2FsYXIgbnVtYmVyXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcbiAgICBvdXRbMF0gPSBhWzBdICogYjtcbiAgICBvdXRbMV0gPSBhWzFdICogYjtcbiAgICBvdXRbMl0gPSBhWzJdICogYjtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBzY2FsZUFuZEFkZF8xID0gc2NhbGVBbmRBZGQ7XG5cbi8qKlxuICogQWRkcyB0d28gdmVjMydzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcbiAgICBvdXRbMF0gPSBhWzBdICsgKGJbMF0gKiBzY2FsZSk7XG4gICAgb3V0WzFdID0gYVsxXSArIChiWzFdICogc2NhbGUpO1xuICAgIG91dFsyXSA9IGFbMl0gKyAoYlsyXSAqIHNjYWxlKTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBkaXN0YW5jZV8xID0gZGlzdGFuY2U7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXG4gKi9cbmZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcbiAgICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxuICAgICAgICB5ID0gYlsxXSAtIGFbMV0sXG4gICAgICAgIHogPSBiWzJdIC0gYVsyXTtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHgqeCArIHkqeSArIHoqeilcbn1cblxudmFyIGRpc3QgPSBkaXN0YW5jZV8xO1xuXG52YXIgc3F1YXJlZERpc3RhbmNlXzEgPSBzcXVhcmVkRGlzdGFuY2U7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxuICovXG5mdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xuICAgIHZhciB4ID0gYlswXSAtIGFbMF0sXG4gICAgICAgIHkgPSBiWzFdIC0gYVsxXSxcbiAgICAgICAgeiA9IGJbMl0gLSBhWzJdO1xuICAgIHJldHVybiB4KnggKyB5KnkgKyB6Knpcbn1cblxudmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2VfMTtcblxudmFyIGxlbmd0aF8xID0gbGVuZ3RoO1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGxlbmd0aCBvZiBhXG4gKi9cbmZ1bmN0aW9uIGxlbmd0aChhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgcmV0dXJuIE1hdGguc3FydCh4KnggKyB5KnkgKyB6KnopXG59XG5cbnZhciBsZW4gPSBsZW5ndGhfMTtcblxudmFyIHNxdWFyZWRMZW5ndGhfMSA9IHNxdWFyZWRMZW5ndGg7XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjYWxjdWxhdGUgc3F1YXJlZCBsZW5ndGggb2ZcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcbiAqL1xuZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XG4gICAgdmFyIHggPSBhWzBdLFxuICAgICAgICB5ID0gYVsxXSxcbiAgICAgICAgeiA9IGFbMl07XG4gICAgcmV0dXJuIHgqeCArIHkqeSArIHoqelxufVxuXG52YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aF8xO1xuXG52YXIgbmVnYXRlXzEgPSBuZWdhdGU7XG5cbi8qKlxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBuZWdhdGVcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gbmVnYXRlKG91dCwgYSkge1xuICAgIG91dFswXSA9IC1hWzBdO1xuICAgIG91dFsxXSA9IC1hWzFdO1xuICAgIG91dFsyXSA9IC1hWzJdO1xuICAgIHJldHVybiBvdXRcbn1cblxudmFyIGludmVyc2VfMSA9IGludmVyc2U7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gaW52ZXJzZShvdXQsIGEpIHtcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcbiAgb3V0WzJdID0gMS4wIC8gYVsyXTtcbiAgcmV0dXJuIG91dFxufVxuXG52YXIgY3Jvc3NfMSA9IGNyb3NzO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBjcm9zcyBwcm9kdWN0IG9mIHR3byB2ZWMzJ3NcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIGNyb3NzKG91dCwgYSwgYikge1xuICAgIHZhciBheCA9IGFbMF0sIGF5ID0gYVsxXSwgYXogPSBhWzJdLFxuICAgICAgICBieCA9IGJbMF0sIGJ5ID0gYlsxXSwgYnogPSBiWzJdO1xuXG4gICAgb3V0WzBdID0gYXkgKiBieiAtIGF6ICogYnk7XG4gICAgb3V0WzFdID0gYXogKiBieCAtIGF4ICogYno7XG4gICAgb3V0WzJdID0gYXggKiBieSAtIGF5ICogYng7XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgbGVycF8xID0gbGVycDtcblxuLyoqXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzMnc1xuICpcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50IGJldHdlZW4gdGhlIHR3byBpbnB1dHNcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcbiAgICB2YXIgYXggPSBhWzBdLFxuICAgICAgICBheSA9IGFbMV0sXG4gICAgICAgIGF6ID0gYVsyXTtcbiAgICBvdXRbMF0gPSBheCArIHQgKiAoYlswXSAtIGF4KTtcbiAgICBvdXRbMV0gPSBheSArIHQgKiAoYlsxXSAtIGF5KTtcbiAgICBvdXRbMl0gPSBheiArIHQgKiAoYlsyXSAtIGF6KTtcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciByYW5kb21fMSA9IHJhbmRvbTtcblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdmVjdG9yIHdpdGggdGhlIGdpdmVuIHNjYWxlXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVdIExlbmd0aCBvZiB0aGUgcmVzdWx0aW5nIHZlY3Rvci4gSWYgb21taXR0ZWQsIGEgdW5pdCB2ZWN0b3Igd2lsbCBiZSByZXR1cm5lZFxuICogQHJldHVybnMge3ZlYzN9IG91dFxuICovXG5mdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xuICAgIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xuXG4gICAgdmFyIHIgPSBNYXRoLnJhbmRvbSgpICogMi4wICogTWF0aC5QSTtcbiAgICB2YXIgeiA9IChNYXRoLnJhbmRvbSgpICogMi4wKSAtIDEuMDtcbiAgICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMC16KnopICogc2NhbGU7XG5cbiAgICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcbiAgICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHpTY2FsZTtcbiAgICBvdXRbMl0gPSB6ICogc2NhbGU7XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgdHJhbnNmb3JtTWF0NF8xID0gdHJhbnNmb3JtTWF0NDtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBtYXQ0LlxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcbiAqXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XG4gICAgdmFyIHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl0sXG4gICAgICAgIHcgPSBtWzNdICogeCArIG1bN10gKiB5ICsgbVsxMV0gKiB6ICsgbVsxNV07XG4gICAgdyA9IHcgfHwgMS4wO1xuICAgIG91dFswXSA9IChtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSkgLyB3O1xuICAgIG91dFsxXSA9IChtWzFdICogeCArIG1bNV0gKiB5ICsgbVs5XSAqIHogKyBtWzEzXSkgLyB3O1xuICAgIG91dFsyXSA9IChtWzJdICogeCArIG1bNl0gKiB5ICsgbVsxMF0gKiB6ICsgbVsxNF0pIC8gdztcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciB0cmFuc2Zvcm1NYXQzXzEgPSB0cmFuc2Zvcm1NYXQzO1xuXG4vKipcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHttYXQ0fSBtIHRoZSAzeDMgbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XG4gICAgdmFyIHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl07XG4gICAgb3V0WzBdID0geCAqIG1bMF0gKyB5ICogbVszXSArIHogKiBtWzZdO1xuICAgIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcbiAgICBvdXRbMl0gPSB4ICogbVsyXSArIHkgKiBtWzVdICsgeiAqIG1bOF07XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgdHJhbnNmb3JtUXVhdF8xID0gdHJhbnNmb3JtUXVhdDtcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMzIHdpdGggYSBxdWF0XG4gKlxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtUXVhdChvdXQsIGEsIHEpIHtcbiAgICAvLyBiZW5jaG1hcmtzOiBodHRwOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXRyYW5zZm9ybS12ZWMzLWltcGxlbWVudGF0aW9uc1xuXG4gICAgdmFyIHggPSBhWzBdLCB5ID0gYVsxXSwgeiA9IGFbMl0sXG4gICAgICAgIHF4ID0gcVswXSwgcXkgPSBxWzFdLCBxeiA9IHFbMl0sIHF3ID0gcVszXSxcblxuICAgICAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY1xuICAgICAgICBpeCA9IHF3ICogeCArIHF5ICogeiAtIHF6ICogeSxcbiAgICAgICAgaXkgPSBxdyAqIHkgKyBxeiAqIHggLSBxeCAqIHosXG4gICAgICAgIGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4LFxuICAgICAgICBpdyA9IC1xeCAqIHggLSBxeSAqIHkgLSBxeiAqIHo7XG5cbiAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG4gICAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcbiAgICBvdXRbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xuICAgIG91dFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XG4gICAgcmV0dXJuIG91dFxufVxuXG52YXIgcm90YXRlWF8xID0gcm90YXRlWDtcblxuLyoqXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB4LWF4aXNcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXG4gKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcbiAqL1xuZnVuY3Rpb24gcm90YXRlWChvdXQsIGEsIGIsIGMpe1xuICAgIHZhciBieSA9IGJbMV07XG4gICAgdmFyIGJ6ID0gYlsyXTtcblxuICAgIC8vIFRyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG4gICAgdmFyIHB5ID0gYVsxXSAtIGJ5O1xuICAgIHZhciBweiA9IGFbMl0gLSBiejtcblxuICAgIHZhciBzYyA9IE1hdGguc2luKGMpO1xuICAgIHZhciBjYyA9IE1hdGguY29zKGMpO1xuXG4gICAgLy8gcGVyZm9ybSByb3RhdGlvbiBhbmQgdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cbiAgICBvdXRbMF0gPSBhWzBdO1xuICAgIG91dFsxXSA9IGJ5ICsgcHkgKiBjYyAtIHB6ICogc2M7XG4gICAgb3V0WzJdID0gYnogKyBweSAqIHNjICsgcHogKiBjYztcblxuICAgIHJldHVybiBvdXRcbn1cblxudmFyIHJvdGF0ZVlfMSA9IHJvdGF0ZVk7XG5cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeS1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCBiLCBjKXtcbiAgICB2YXIgYnggPSBiWzBdO1xuICAgIHZhciBieiA9IGJbMl07XG5cbiAgICAvLyB0cmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxuICAgIHZhciBweCA9IGFbMF0gLSBieDtcbiAgICB2YXIgcHogPSBhWzJdIC0gYno7XG4gICAgXG4gICAgdmFyIHNjID0gTWF0aC5zaW4oYyk7XG4gICAgdmFyIGNjID0gTWF0aC5jb3MoYyk7XG4gIFxuICAgIC8vIHBlcmZvcm0gcm90YXRpb24gYW5kIHRyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXG4gICAgb3V0WzBdID0gYnggKyBweiAqIHNjICsgcHggKiBjYztcbiAgICBvdXRbMV0gPSBhWzFdO1xuICAgIG91dFsyXSA9IGJ6ICsgcHogKiBjYyAtIHB4ICogc2M7XG4gIFxuICAgIHJldHVybiBvdXRcbn1cblxudmFyIHJvdGF0ZVpfMSA9IHJvdGF0ZVo7XG5cbi8qKlxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgei1heGlzXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxuICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XG4gKi9cbmZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCBiLCBjKXtcbiAgICB2YXIgYnggPSBiWzBdO1xuICAgIHZhciBieSA9IGJbMV07XG5cbiAgICAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXG4gICAgdmFyIHB4ID0gYVswXSAtIGJ4O1xuICAgIHZhciBweSA9IGFbMV0gLSBieTtcbiAgXG4gICAgdmFyIHNjID0gTWF0aC5zaW4oYyk7XG4gICAgdmFyIGNjID0gTWF0aC5jb3MoYyk7XG5cbiAgICAvLyBwZXJmb3JtIHJvdGF0aW9uIGFuZCB0cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxuICAgIG91dFswXSA9IGJ4ICsgcHggKiBjYyAtIHB5ICogc2M7XG4gICAgb3V0WzFdID0gYnkgKyBweCAqIHNjICsgcHkgKiBjYztcbiAgICBvdXRbMl0gPSBhWzJdO1xuICBcbiAgICByZXR1cm4gb3V0XG59XG5cbnZhciBmb3JFYWNoXzEgPSBmb3JFYWNoO1xuXG52YXIgdmVjID0gY3JlYXRlXzEoKTtcblxuLyoqXG4gKiBQZXJmb3JtIHNvbWUgb3BlcmF0aW9uIG92ZXIgYW4gYXJyYXkgb2YgdmVjM3MuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYSB0aGUgYXJyYXkgb2YgdmVjdG9ycyB0byBpdGVyYXRlIG92ZXJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzdHJpZGUgTnVtYmVyIG9mIGVsZW1lbnRzIGJldHdlZW4gdGhlIHN0YXJ0IG9mIGVhY2ggdmVjMy4gSWYgMCBhc3N1bWVzIHRpZ2h0bHkgcGFja2VkXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XG4gKiBAcGFyYW0ge051bWJlcn0gY291bnQgTnVtYmVyIG9mIHZlYzNzIHRvIGl0ZXJhdGUgb3Zlci4gSWYgMCBpdGVyYXRlcyBvdmVyIGVudGlyZSBhcnJheVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gRnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCB2ZWN0b3IgaW4gdGhlIGFycmF5XG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXG4gKiBAcmV0dXJucyB7QXJyYXl9IGFcbiAqIEBmdW5jdGlvblxuICovXG5mdW5jdGlvbiBmb3JFYWNoKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xuICAgICAgICB2YXIgaSwgbDtcbiAgICAgICAgaWYoIXN0cmlkZSkge1xuICAgICAgICAgICAgc3RyaWRlID0gMztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKCFvZmZzZXQpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmKGNvdW50KSB7XG4gICAgICAgICAgICBsID0gTWF0aC5taW4oKGNvdW50ICogc3RyaWRlKSArIG9mZnNldCwgYS5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbCA9IGEubGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xuICAgICAgICAgICAgdmVjWzBdID0gYVtpXTsgXG4gICAgICAgICAgICB2ZWNbMV0gPSBhW2krMV07IFxuICAgICAgICAgICAgdmVjWzJdID0gYVtpKzJdO1xuICAgICAgICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XG4gICAgICAgICAgICBhW2ldID0gdmVjWzBdOyBcbiAgICAgICAgICAgIGFbaSsxXSA9IHZlY1sxXTsgXG4gICAgICAgICAgICBhW2krMl0gPSB2ZWNbMl07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBhXG59XG5cbnZhciBnbFZlYzMgPSB7XG4gIEVQU0lMT046IGVwc2lsb25cbiAgLCBjcmVhdGU6IGNyZWF0ZV8xXG4gICwgY2xvbmU6IGNsb25lXzFcbiAgLCBhbmdsZTogYW5nbGVfMVxuICAsIGZyb21WYWx1ZXM6IGZyb21WYWx1ZXNfMVxuICAsIGNvcHk6IGNvcHlfMVxuICAsIHNldDogc2V0XzFcbiAgLCBlcXVhbHM6IGVxdWFsc18xXG4gICwgZXhhY3RFcXVhbHM6IGV4YWN0RXF1YWxzXzFcbiAgLCBhZGQ6IGFkZF8xXG4gICwgc3VidHJhY3Q6IHN1YnRyYWN0XzFcbiAgLCBzdWI6IHN1YlxuICAsIG11bHRpcGx5OiBtdWx0aXBseV8xXG4gICwgbXVsOiBtdWxcbiAgLCBkaXZpZGU6IGRpdmlkZV8xXG4gICwgZGl2OiBkaXZcbiAgLCBtaW46IG1pbl8xXG4gICwgbWF4OiBtYXhfMVxuICAsIGZsb29yOiBmbG9vcl8xXG4gICwgY2VpbDogY2VpbF8xXG4gICwgcm91bmQ6IHJvdW5kXzFcbiAgLCBzY2FsZTogc2NhbGVfMVxuICAsIHNjYWxlQW5kQWRkOiBzY2FsZUFuZEFkZF8xXG4gICwgZGlzdGFuY2U6IGRpc3RhbmNlXzFcbiAgLCBkaXN0OiBkaXN0XG4gICwgc3F1YXJlZERpc3RhbmNlOiBzcXVhcmVkRGlzdGFuY2VfMVxuICAsIHNxckRpc3Q6IHNxckRpc3RcbiAgLCBsZW5ndGg6IGxlbmd0aF8xXG4gICwgbGVuOiBsZW5cbiAgLCBzcXVhcmVkTGVuZ3RoOiBzcXVhcmVkTGVuZ3RoXzFcbiAgLCBzcXJMZW46IHNxckxlblxuICAsIG5lZ2F0ZTogbmVnYXRlXzFcbiAgLCBpbnZlcnNlOiBpbnZlcnNlXzFcbiAgLCBub3JtYWxpemU6IG5vcm1hbGl6ZV8xXG4gICwgZG90OiBkb3RfMVxuICAsIGNyb3NzOiBjcm9zc18xXG4gICwgbGVycDogbGVycF8xXG4gICwgcmFuZG9tOiByYW5kb21fMVxuICAsIHRyYW5zZm9ybU1hdDQ6IHRyYW5zZm9ybU1hdDRfMVxuICAsIHRyYW5zZm9ybU1hdDM6IHRyYW5zZm9ybU1hdDNfMVxuICAsIHRyYW5zZm9ybVF1YXQ6IHRyYW5zZm9ybVF1YXRfMVxuICAsIHJvdGF0ZVg6IHJvdGF0ZVhfMVxuICAsIHJvdGF0ZVk6IHJvdGF0ZVlfMVxuICAsIHJvdGF0ZVo6IHJvdGF0ZVpfMVxuICAsIGZvckVhY2g6IGZvckVhY2hfMVxufTtcblxuY29uc3QgY3ViZW1hcEZhY2VOb3JtYWxzID0gW1xuICBbIFswLCAwLCAtMV0sIFswLCAtMSwgMF0sIFsxLCAwLCAwXSBdLCAgLy8gcG9zeFxuICBbIFswLCAwLCAxXSwgWzAsIC0xLCAwXSwgWy0xLCAwLCAwXSBdLCAgLy8gbmVneFxuXG4gIFsgWzEsIDAsIDBdLCBbMCwgMCwgMV0sIFswLCAxLCAwXSBdLCAgICAvLyBwb3N5XG4gIFsgWzEsIDAsIDBdLCBbMCwgMCwgLTFdLCBbMCwgLTEsIDBdIF0sICAvLyBuZWd5XG5cbiAgWyBbMSwgMCwgMF0sIFswLCAtMSwgMF0sIFswLCAwLCAxXSBdLCAgIC8vIHBvc3pcbiAgWyBbLTEsIDAsIDBdLCBbMCwgLTEsIDBdLCBbMCwgMCwgLTFdIF0gIC8vIG5lZ3pcbl07XG5cbi8vIGdpdmUgbWUgYSBjdWJlbWFwLCBpdHMgc2l6ZSBhbmQgbnVtYmVyIG9mIGNoYW5uZWxzXG4vLyBhbmQgaSdsbCBnaXZlIHlvdSBzcGhlcmljYWwgaGFybW9uaWNzXG52YXIgY3ViZW1hcFNoID0gZnVuY3Rpb24gKGZhY2VzLCBjdWJlbWFwU2l6ZSwgY2gpIHtcbiAgYXNzZXJ0Lm9rKEFycmF5LmlzQXJyYXkoZmFjZXMpLCAnY3ViZW1hcC1zaDogZmFjZXMgc2hvdWxkIGJlIGFuIGFycmF5Jyk7XG4gIGFzc2VydC5lcXVhbChmYWNlcy5sZW5ndGgsIDYsICdjdWJlbWFwLXNoOiBmYWNlcyBzaG91bGQgaGF2ZSA2IGVsZW1lbnRzJyk7XG4gIGNvbnN0IHNpemUgPSBjdWJlbWFwU2l6ZSB8fCAxMjg7XG4gIGNvbnN0IGNoYW5uZWxzID0gY2ggfHwgNDtcbiAgY29uc3QgY3ViZU1hcFZlY3MgPSBbXTtcblxuICAvLyBnZW5lcmF0ZSBjdWJlIG1hcCB2ZWN0b3JzXG4gIGZhY2VzLmZvckVhY2goKGZhY2UsIGluZGV4KSA9PiB7XG4gICAgY29uc3QgZmFjZVZlY3MgPSBbXTtcbiAgICBmb3IgKGxldCB2ID0gMDsgdiA8IHNpemU7IHYrKykge1xuICAgICAgZm9yIChsZXQgdSA9IDA7IHUgPCBzaXplOyB1KyspIHtcbiAgICAgICAgY29uc3QgZlUgPSAoMi4wICogdSAvIChzaXplIC0gMS4wKSkgLSAxLjA7XG4gICAgICAgIGNvbnN0IGZWID0gKDIuMCAqIHYgLyAoc2l6ZSAtIDEuMCkpIC0gMS4wO1xuXG4gICAgICAgIGNvbnN0IHZlY1ggPSBbXTtcbiAgICAgICAgZ2xWZWMzLnNjYWxlKHZlY1gsIGN1YmVtYXBGYWNlTm9ybWFsc1tpbmRleF1bMF0sIGZVKTtcbiAgICAgICAgY29uc3QgdmVjWSA9IFtdO1xuICAgICAgICBnbFZlYzMuc2NhbGUodmVjWSwgY3ViZW1hcEZhY2VOb3JtYWxzW2luZGV4XVsxXSwgZlYpO1xuICAgICAgICBjb25zdCB2ZWNaID0gY3ViZW1hcEZhY2VOb3JtYWxzW2luZGV4XVsyXTtcblxuICAgICAgICBjb25zdCByZXMgPSBbXTtcbiAgICAgICAgZ2xWZWMzLmFkZChyZXMsIHZlY1gsIHZlY1kpO1xuICAgICAgICBnbFZlYzMuYWRkKHJlcywgcmVzLCB2ZWNaKTtcbiAgICAgICAgZ2xWZWMzLm5vcm1hbGl6ZShyZXMsIHJlcyk7XG5cbiAgICAgICAgZmFjZVZlY3MucHVzaChyZXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBjdWJlTWFwVmVjcy5wdXNoKGZhY2VWZWNzKTtcbiAgfSk7XG5cbiAgLy8gZ2VuZXJhdGUgc2hwZXJpY2FsIGhhcm1vbmljc1xuICBsZXQgc2ggPSBbXG4gICAgbmV3IEZsb2F0MzJBcnJheSgzKSxcbiAgICBuZXcgRmxvYXQzMkFycmF5KDMpLFxuICAgIG5ldyBGbG9hdDMyQXJyYXkoMyksXG4gICAgbmV3IEZsb2F0MzJBcnJheSgzKSxcbiAgICBuZXcgRmxvYXQzMkFycmF5KDMpLFxuICAgIG5ldyBGbG9hdDMyQXJyYXkoMyksXG4gICAgbmV3IEZsb2F0MzJBcnJheSgzKSxcbiAgICBuZXcgRmxvYXQzMkFycmF5KDMpLFxuICAgIG5ldyBGbG9hdDMyQXJyYXkoMylcbiAgXTtcbiAgbGV0IHdlaWdodEFjY3VtID0gMDtcblxuICBmYWNlcy5mb3JFYWNoKChmYWNlLCBpbmRleCkgPT4ge1xuICAgIGNvbnN0IHBpeGVscyA9IGZhY2U7XG4gICAgbGV0IGdhbW1hQ29ycmVjdCA9IHRydWU7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwaXhlbHMpID09PSAnW29iamVjdCBGbG9hdDMyQXJyYXldJykgZ2FtbWFDb3JyZWN0ID0gZmFsc2U7IC8vIHRoaXMgaXMgcHJvYmFibHkgSERSIGltYWdlLCBhbHJlYWR5IGluIGxpbmVhciBzcGFjZVxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgc2l6ZTsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHNpemU7IHgrKykge1xuICAgICAgICBjb25zdCB0ZXhlbFZlY3QgPSBjdWJlTWFwVmVjc1tpbmRleF1beSAqIHNpemUgKyB4XTtcblxuICAgICAgICBjb25zdCB3ZWlnaHQgPSB0ZXhlbFNvbGlkQW5nbGUoeCwgeSwgc2l6ZSwgc2l6ZSk7XG4gICAgICAgIC8vIGZvcnN5dGhzIHdlaWdodHNcbiAgICAgICAgY29uc3Qgd2VpZ2h0MSA9IHdlaWdodCAqIDQgLyAxNztcbiAgICAgICAgY29uc3Qgd2VpZ2h0MiA9IHdlaWdodCAqIDggLyAxNztcbiAgICAgICAgY29uc3Qgd2VpZ2h0MyA9IHdlaWdodCAqIDE1IC8gMTc7XG4gICAgICAgIGNvbnN0IHdlaWdodDQgPSB3ZWlnaHQgKiA1IC8gNjg7XG4gICAgICAgIGNvbnN0IHdlaWdodDUgPSB3ZWlnaHQgKiAxNSAvIDY4O1xuXG4gICAgICAgIGxldCBkeCA9IHRleGVsVmVjdFswXTtcbiAgICAgICAgbGV0IGR5ID0gdGV4ZWxWZWN0WzFdO1xuICAgICAgICBsZXQgZHogPSB0ZXhlbFZlY3RbMl07XG5cbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCAzOyBjKyspIHtcbiAgICAgICAgICBsZXQgdmFsdWUgPSBwaXhlbHNbeSAqIHNpemUgKiBjaGFubmVscyArIHggKiBjaGFubmVscyArIGNdIC8gMjU1O1xuICAgICAgICAgIGlmIChnYW1tYUNvcnJlY3QpIHZhbHVlID0gTWF0aC5wb3codmFsdWUsIDIuMik7XG5cbiAgICAgICAgICAvLyBpbmRleGVkIGJ5IGNvZWZmaWVjZW50ICsgY29sb3JcbiAgICAgICAgICBzaFswXVtjXSArPSB2YWx1ZSAqIHdlaWdodDE7XG4gICAgICAgICAgc2hbMV1bY10gKz0gdmFsdWUgKiB3ZWlnaHQyICogZHg7XG4gICAgICAgICAgc2hbMl1bY10gKz0gdmFsdWUgKiB3ZWlnaHQyICogZHk7XG4gICAgICAgICAgc2hbM11bY10gKz0gdmFsdWUgKiB3ZWlnaHQyICogZHo7XG5cbiAgICAgICAgICBzaFs0XVtjXSArPSB2YWx1ZSAqIHdlaWdodDMgKiBkeCAqIGR6O1xuICAgICAgICAgIHNoWzVdW2NdICs9IHZhbHVlICogd2VpZ2h0MyAqIGR6ICogZHk7XG4gICAgICAgICAgc2hbNl1bY10gKz0gdmFsdWUgKiB3ZWlnaHQzICogZHkgKiBkeDtcblxuICAgICAgICAgIHNoWzddW2NdICs9IHZhbHVlICogd2VpZ2h0NCAqICgzLjAgKiBkeiAqIGR6IC0gMS4wKTtcbiAgICAgICAgICBzaFs4XVtjXSArPSB2YWx1ZSAqIHdlaWdodDUgKiAoZHggKiBkeCAtIGR5ICogZHkpO1xuXG4gICAgICAgICAgd2VpZ2h0QWNjdW0gKz0gd2VpZ2h0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNoLmxlbmd0aDsgaSsrKSB7XG4gICAgc2hbaV1bMF0gKj0gNCAqIE1hdGguUEkgLyB3ZWlnaHRBY2N1bTtcbiAgICBzaFtpXVsxXSAqPSA0ICogTWF0aC5QSSAvIHdlaWdodEFjY3VtO1xuICAgIHNoW2ldWzJdICo9IDQgKiBNYXRoLlBJIC8gd2VpZ2h0QWNjdW07XG4gIH1cblxuICByZXR1cm4gc2hcbn07XG5cbmZ1bmN0aW9uIHRleGVsU29saWRBbmdsZSAoYVUsIGFWLCB3aWR0aCwgaGVpZ2h0KSB7XG4gIC8vIHRyYW5zZm9ybSBmcm9tIFswLi5yZXMgLSAxXSB0byBbLSAoMSAtIDEgLyByZXMpIC4uICgxIC0gMSAvIHJlcyldXG4gIC8vICggMC41IGlzIGZvciB0ZXhlbCBjZW50ZXIgYWRkcmVzc2luZylcbiAgY29uc3QgVSA9ICgyLjAgKiAoYVUgKyAwLjUpIC8gd2lkdGgpIC0gMS4wO1xuICBjb25zdCBWID0gKDIuMCAqIChhViArIDAuNSkgLyBoZWlnaHQpIC0gMS4wO1xuXG4gIC8vIHNoaWZ0IGZyb20gYSBkZW1pIHRleGVsLCBtZWFuIDEuMCAvIHNpemUgIHdpdGggVSBhbmQgViBpbiBbLTEuLjFdXG4gIGNvbnN0IGludlJlc29sdXRpb25XID0gMS4wIC8gd2lkdGg7XG4gIGNvbnN0IGludlJlc29sdXRpb25IID0gMS4wIC8gaGVpZ2h0O1xuXG4gIC8vIFUgYW5kIFYgYXJlIHRoZSAtMS4uMSB0ZXh0dXJlIGNvb3JkaW5hdGUgb24gdGhlIGN1cnJlbnQgZmFjZS5cbiAgLy8gZ2V0IHByb2plY3RlZCBhcmVhIGZvciB0aGlzIHRleGVsXG4gIGNvbnN0IHgwID0gVSAtIGludlJlc29sdXRpb25XO1xuICBjb25zdCB5MCA9IFYgLSBpbnZSZXNvbHV0aW9uSDtcbiAgY29uc3QgeDEgPSBVICsgaW52UmVzb2x1dGlvblc7XG4gIGNvbnN0IHkxID0gViArIGludlJlc29sdXRpb25IO1xuICBjb25zdCBhbmdsZSA9IGFyZWFFbGVtZW50KHgwLCB5MCkgLSBhcmVhRWxlbWVudCh4MCwgeTEpIC0gYXJlYUVsZW1lbnQoeDEsIHkwKSArIGFyZWFFbGVtZW50KHgxLCB5MSk7XG5cbiAgcmV0dXJuIGFuZ2xlXG59XG5cbmZ1bmN0aW9uIGFyZWFFbGVtZW50ICh4LCB5KSB7XG4gIHJldHVybiBNYXRoLmF0YW4yKHggKiB5LCBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIDEuMCkpXG59XG5cbi8vIGltcG9ydCBpcnJhZGlhbmNlRlMgZnJvbSAnLi9nbHNsL2hlbHBlci9pcnJhZGlhbmNlX2NvbnZvbHV0aW9uLmZyYWcnO1xyXG4vKipcclxuICoge1xyXG4gKiAgZW52VGV4dHVyZSxcclxuICogIGVudkN1YmVTaXplLFxyXG4gKiAgaXJyYWRpYW5jZUN1YmVTaXplLFxyXG4gKiAgc2FtcGxlU2l6ZSxcclxuICogIHJvdWdobmVzc0xldmVscyxcclxuICogIHByZWZpbHRlckN1YmVTaXplLFxyXG4gKiAgZGZnU2l6ZVxyXG4gKiB9XHJcbiAqIEBwYXJhbSB7UkVHTH0gcmVnbCAtIHJlZ2xcclxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyAtIGNvbmZpZ1xyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlSUJMTWFwcyhyZWdsLCBjb25maWcgPSB7fSkge1xyXG4gICAgLy8gY29uZmlnIHZhbHVlc1xyXG5cclxuICAgIGNvbnN0IGVudlRleHR1cmUgPSBjb25maWcuZW52VGV4dHVyZTtcclxuXHJcbiAgICBjb25zdCBlbnZDdWJlU2l6ZSA9IGNvbmZpZy5lbnZDdWJlU2l6ZSB8fCA1MTI7XHJcblxyXG4gICAgLy8gY29uc3QgaXJyYWRpYW5jZUN1YmVTaXplID0gY29uZmlnLmlycmFkaWFuY2VDdWJlU2l6ZSB8fCAzMjtcclxuXHJcbiAgICBjb25zdCBzYW1wbGVTaXplID0gY29uZmlnLnNhbXBsZVNpemUgfHwgMTAyNDtcclxuICAgIGNvbnN0IHJvdWdobmVzc0xldmVscyA9IGNvbmZpZy5yb3VnaG5lc3NMZXZlbHMgfHwgMjU2O1xyXG4gICAgY29uc3QgcHJlZmlsdGVyQ3ViZVNpemUgPSBjb25maWcucHJlZmlsdGVyQ3ViZVNpemUgfHwgMjU2O1xyXG5cclxuICAgIGNvbnN0IGRmZ1NpemUgPSBjb25maWcuZGZnU2l6ZSB8fCA1MTI7XHJcblxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBnZW5lcmF0ZSBpYmwgbWFwc1xyXG4gICAgbGV0IGVudk1hcDtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShlbnZUZXh0dXJlKSkge1xyXG4gICAgICAgIGVudk1hcCA9IGNyZWF0ZUVxdWlyZWN0YW5ndWxhck1hcEN1YmUocmVnbCwgZW52VGV4dHVyZSwgZW52Q3ViZVNpemUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCBjdWJlID0gcmVnbC5jdWJlKC4uLmVudlRleHR1cmUpO1xyXG4gICAgICAgIGVudk1hcCA9IGNyZWF0ZVNreWJveChyZWdsLCBjdWJlLCBlbnZDdWJlU2l6ZSk7XHJcbiAgICAgICAgY3ViZS5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcHJlZmlsdGVyTWFwID0gY3JlYXRlUHJlZmlsdGVyQ3ViZShyZWdsLCBlbnZNYXAsIHByZWZpbHRlckN1YmVTaXplLCBzYW1wbGVTaXplLCByb3VnaG5lc3NMZXZlbHMpO1xyXG5cclxuICAgIGNvbnN0IGRmZ0xVVCA9IGdlbmVyYXRlREZHTFVUKHJlZ2wsIGRmZ1NpemUsIHNhbXBsZVNpemUsIHJvdWdobmVzc0xldmVscyk7XHJcblxyXG4gICAgbGV0IHNoO1xyXG4gICAgaWYgKCFjb25maWcuaWdub3JlU0gpIHtcclxuICAgICAgICBjb25zdCBmYWNlcyA9IGdldEVudm1hcFBpeGVscyhyZWdsLCBlbnZNYXAsIGVudkN1YmVTaXplKTtcclxuICAgICAgICBzaCA9IGN1YmVtYXBTaChmYWNlcywgZW52Q3ViZVNpemUsIDQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGNvbnN0IGlycmFkaWFuY2VNYXAgPSBjcmVhdGVJcnJhZGlhbmNlQ3ViZShyZWdsLCBlbnZNYXAsIGlycmFkaWFuY2VDdWJlU2l6ZSk7XHJcblxyXG4gICAgY29uc3QgbWFwcyA9IHtcclxuICAgICAgICBlbnZNYXAsXHJcbiAgICAgICAgcHJlZmlsdGVyTWFwLFxyXG4gICAgICAgIGRmZ0xVVFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoc2gpIHtcclxuICAgICAgICBtYXBzWydzaCddID0gc2g7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbWFwcztcclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU2t5Ym94KHJlZ2wsIGN1YmVtYXAsIGVudkN1YmVTaXplKSB7XHJcbiAgICBjb25zdCBkcmF3Q3ViZSA9IHJlZ2woe1xyXG4gICAgICAgIGZyYWcgOiBza3lib3hGcmFnLFxyXG4gICAgICAgIHZlcnQgOiBjdWJlbWFwVlMsXHJcbiAgICAgICAgYXR0cmlidXRlcyA6IHtcclxuICAgICAgICAgICAgJ2FQb3NpdGlvbicgOiBjdWJlRGF0YS52ZXJ0aWNlc1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5pZm9ybXMgOiB7XHJcbiAgICAgICAgICAgICdwcm9qTWF0cml4JyA6IHJlZ2wuY29udGV4dCgncHJvak1hdHJpeCcpLFxyXG4gICAgICAgICAgICAndmlld01hdHJpeCcgOiAgcmVnbC5jb250ZXh0KCd2aWV3TWF0cml4JyksXHJcbiAgICAgICAgICAgICdjdWJlTWFwJyA6IGN1YmVtYXBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnRzIDogY3ViZURhdGEuaW5kaWNlc1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCB0bXBGQk8gPSByZWdsLmZyYW1lYnVmZmVyQ3ViZShlbnZDdWJlU2l6ZSk7XHJcbiAgICByZW5kZXJUb0N1YmUocmVnbCwgdG1wRkJPLCBkcmF3Q3ViZSk7XHJcbiAgICByZXR1cm4gdG1wRkJPO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRFbnZtYXBQaXhlbHMocmVnbCwgY3ViZW1hcCwgZW52Q3ViZVNpemUpIHtcclxuICAgIGNvbnN0IGRyYXdDdWJlID0gcmVnbCh7XHJcbiAgICAgICAgZnJhZyA6IHNreWJveEZyYWcsXHJcbiAgICAgICAgdmVydCA6IGN1YmVtYXBWUyxcclxuICAgICAgICBhdHRyaWJ1dGVzIDoge1xyXG4gICAgICAgICAgICAnYVBvc2l0aW9uJyA6IGN1YmVEYXRhLnZlcnRpY2VzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmlmb3JtcyA6IHtcclxuICAgICAgICAgICAgJ3Byb2pNYXRyaXgnIDogcmVnbC5jb250ZXh0KCdwcm9qTWF0cml4JyksXHJcbiAgICAgICAgICAgICd2aWV3TWF0cml4JyA6ICByZWdsLmNvbnRleHQoJ3ZpZXdNYXRyaXgnKSxcclxuICAgICAgICAgICAgJ2N1YmVNYXAnIDogY3ViZW1hcFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZWxlbWVudHMgOiBjdWJlRGF0YS5pbmRpY2VzXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGZhY2VzID0gW107XHJcbiAgICBjb25zdCB0bXBGQk8gPSByZWdsLmZyYW1lYnVmZmVyKGVudkN1YmVTaXplKTtcclxuICAgIHJlbmRlclRvQ3ViZShyZWdsLCB0bXBGQk8sIGRyYXdDdWJlLCB7XHJcbiAgICAgICAgc2l6ZSA6IGVudkN1YmVTaXplXHJcbiAgICB9LCBmdW5jdGlvbiAoLyogY29udGV4dCwgcHJvcHMsIGJhdGNoSWQgKi8pIHtcclxuICAgICAgICBjb25zdCBwaXhlbHMgPSByZWdsLnJlYWQoKTtcclxuICAgICAgICBmYWNlcy5wdXNoKHBpeGVscyk7XHJcbiAgICB9KTtcclxuICAgIHRtcEZCTy5kZXN0cm95KCk7XHJcbiAgICByZXR1cm4gZmFjZXM7XHJcbn1cclxuXHJcbi8vc29sdmUgZGlmZnVzZSBpbnRlZ3JhbCBieSBjb252b2x1dGlvbiB0byBjcmVhdGUgYW4gaXJyYWRpYW5jZSAoY3ViZSltYXAuXHJcbi8vIGZ1bmN0aW9uIGNyZWF0ZUlycmFkaWFuY2VDdWJlKHJlZ2wsIGVudkN1YmUsIFNJWkUpIHtcclxuLy8gICAgIFNJWkUgPSBTSVpFIHx8IDMyO1xyXG4vLyAgICAgY29uc3QgaXJyYWRpYW5jZUN1YmUgPSByZWdsLmZyYW1lYnVmZmVyQ3ViZSh7XHJcbi8vICAgICAgICAgcmFkaXVzIDogU0laRSxcclxuLy8gICAgICAgICBjb2xvciA6IHJlZ2wuY3ViZSh7XHJcbi8vICAgICAgICAgICAgIHJhZGl1cyA6IFNJWkUsXHJcbi8vICAgICAgICAgICAgIHdyYXAgOiAnY2xhbXAnLCAvLyBzaG9ydGN1dCBmb3IgYm90aCB3cmFwUyBhbmQgd3JhcFRcclxuLy8gICAgICAgICAgICAgbWluIDogJ2xpbmVhcicsXHJcbi8vICAgICAgICAgICAgIG1hZyA6ICdsaW5lYXInXHJcbi8vICAgICAgICAgfSlcclxuLy8gICAgIH0pO1xyXG5cclxuLy8gICAgIGNvbnN0IGRyYXdDdWJlID0gcmVnbCh7XHJcbi8vICAgICAgICAgZnJhZyA6IGlycmFkaWFuY2VGUyxcclxuLy8gICAgICAgICB2ZXJ0IDogY3ViZW1hcFZTLFxyXG4vLyAgICAgICAgIGF0dHJpYnV0ZXMgOiB7XHJcbi8vICAgICAgICAgICAgICdhUG9zaXRpb24nIDogY3ViZURhdGEudmVydGljZXNcclxuLy8gICAgICAgICB9LFxyXG4vLyAgICAgICAgIHVuaWZvcm1zIDoge1xyXG4vLyAgICAgICAgICAgICAncHJvak1hdHJpeCcgOiByZWdsLmNvbnRleHQoJ3Byb2pNYXRyaXgnKSxcclxuLy8gICAgICAgICAgICAgJ3ZpZXdNYXRyaXgnIDogIHJlZ2wuY29udGV4dCgndmlld01hdHJpeCcpLFxyXG4vLyAgICAgICAgICAgICAnZW52aXJvbm1lbnRNYXAnIDogZW52Q3ViZVxyXG4vLyAgICAgICAgIH0sXHJcbi8vICAgICAgICAgZWxlbWVudHMgOiBjdWJlRGF0YS5pbmRpY2VzXHJcbi8vICAgICB9KTtcclxuXHJcbi8vICAgICByZW5kZXJUb0N1YmUocmVnbCwgaXJyYWRpYW5jZUN1YmUsIGRyYXdDdWJlKTtcclxuXHJcbi8vICAgICByZXR1cm4gaXJyYWRpYW5jZUN1YmU7XHJcbi8vIH1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSB0ZXh0dXJlIGN1YmUgbWFwIGZyb20gYW4gZXF1aXJlY3Rhbmd1bGFyIHRleHR1cmVcclxuICogQHBhcmFtIHtSRUdMfSByZWdsIC0gcmVnbCByZWZlcmVuY2VcclxuICogQHBhcmFtIHtSRUdMVGV4dHVyZX0gdGV4dHVyZSAtIGEgcmVnbCB0ZXh0dXJlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2l6ZT01MTJdIC0gc2l6ZSBvZiB0aGUgY3ViZW1hcCwgNTEyIGJ5IGRlZmF1bHRcclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZUVxdWlyZWN0YW5ndWxhck1hcEN1YmUocmVnbCwgdGV4dHVyZSwgc2l6ZSkge1xyXG4gICAgc2l6ZSA9IHNpemUgfHwgNTEyO1xyXG4gICAgY29uc3QgZHJhd0N1YmUgPSByZWdsKHtcclxuICAgICAgICBmcmFnIDogZXF1aXJlY3Rhbmd1bGFyTWFwRlMsXHJcbiAgICAgICAgdmVydCA6IGN1YmVtYXBWUyxcclxuICAgICAgICBhdHRyaWJ1dGVzIDoge1xyXG4gICAgICAgICAgICAnYVBvc2l0aW9uJyA6IGN1YmVEYXRhLnZlcnRpY2VzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmlmb3JtcyA6IHtcclxuICAgICAgICAgICAgJ3Byb2pNYXRyaXgnIDogcmVnbC5jb250ZXh0KCdwcm9qTWF0cml4JyksXHJcbiAgICAgICAgICAgICd2aWV3TWF0cml4JyA6ICByZWdsLmNvbnRleHQoJ3ZpZXdNYXRyaXgnKSxcclxuICAgICAgICAgICAgJ2VxdWlyZWN0YW5ndWxhck1hcCcgOiB0ZXh0dXJlXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbGVtZW50cyA6IGN1YmVEYXRhLmluZGljZXNcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGVudk1hcEZCTyA9IHJlZ2wuZnJhbWVidWZmZXJDdWJlKHNpemUpO1xyXG5cclxuICAgIHJlbmRlclRvQ3ViZShyZWdsLCBlbnZNYXBGQk8sIGRyYXdDdWJlKTtcclxuXHJcbiAgICByZXR1cm4gZW52TWFwRkJPO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVQcmVmaWx0ZXJNaXBtYXAocmVnbCwgZnJvbUN1YmVNYXAsIFNJWkUsIHNhbXBsZVNpemUsIHJvdWdobmVzc0xldmVscykge1xyXG4gICAgLy8xLiDnlJ/miJBOb3JtYWxEaXN0cmlidXRpb27ph4fmoLfnmoRMVVRcclxuICAgIHNhbXBsZVNpemUgPSBzYW1wbGVTaXplIHx8IDEwMjQ7XHJcbiAgICByb3VnaG5lc3NMZXZlbHMgPSByb3VnaG5lc3NMZXZlbHMgfHwgMjU2O1xyXG5cclxuICAgIGNvbnN0IGRpc3RybyA9IGdlbmVyYXRlTm9ybWFsRGlzdHJpYnV0aW9uKHNhbXBsZVNpemUsIHJvdWdobmVzc0xldmVscyk7XHJcblxyXG4gICAgY29uc3QgZGlzdHJpYnV0aW9uTWFwID0gcmVnbC50ZXh0dXJlKHtcclxuICAgICAgICBkYXRhIDogZGlzdHJvLFxyXG4gICAgICAgIHdpZHRoIDogcm91Z2huZXNzTGV2ZWxzLFxyXG4gICAgICAgIGhlaWdodCA6IHNhbXBsZVNpemUsXHJcbiAgICAgICAgbWluIDogJ25lYXJlc3QnLFxyXG4gICAgICAgIG1hZyA6ICduZWFyZXN0J1xyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgZHJhd0N1YmUgPSByZWdsKHtcclxuICAgICAgICBmcmFnIDogcHJlZmlsdGVyRlMsXHJcbiAgICAgICAgdmVydCA6IGN1YmVtYXBWUyxcclxuICAgICAgICBhdHRyaWJ1dGVzIDoge1xyXG4gICAgICAgICAgICAnYVBvc2l0aW9uJyA6IGN1YmVEYXRhLnZlcnRpY2VzXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmlmb3JtcyA6IHtcclxuICAgICAgICAgICAgJ3Byb2pNYXRyaXgnIDogcmVnbC5jb250ZXh0KCdwcm9qTWF0cml4JyksXHJcbiAgICAgICAgICAgICd2aWV3TWF0cml4JyA6ICByZWdsLmNvbnRleHQoJ3ZpZXdNYXRyaXgnKSxcclxuICAgICAgICAgICAgJ2Vudmlyb25tZW50TWFwJyA6IGZyb21DdWJlTWFwLFxyXG4gICAgICAgICAgICAnZGlzdHJpYnV0aW9uTWFwJyA6IGRpc3RyaWJ1dGlvbk1hcCxcclxuICAgICAgICAgICAgJ3JvdWdobmVzcycgOiByZWdsLnByb3AoJ3JvdWdobmVzcycpLFxyXG4gICAgICAgICAgICAncmVzb2x1dGlvbic6IFNJWkVcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVsZW1lbnRzIDogY3ViZURhdGEuaW5kaWNlcyxcclxuICAgICAgICB2aWV3cG9ydCA6IHtcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgd2lkdGg6IHJlZ2wucHJvcCgnc2l6ZScpLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHJlZ2wucHJvcCgnc2l6ZScpXHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBsZXQgc2l6ZSA9IFNJWkU7XHJcblxyXG4gICAgY29uc3QgdG1wRkJPID0gcmVnbC5mcmFtZWJ1ZmZlcihzaXplKTtcclxuXHJcbiAgICBjb25zdCBtYXhMZXZlbHMgPSBNYXRoLmxvZyhzaXplKSAvIE1hdGgubG9nKDIpOy8vbG9nMihTSVpFKTsgLy9maXggdG8gNFxyXG5cclxuICAgIC8v5omL5Yqo5p6E6YCgcHJlZmlsdGVyTWFw5ZCEbWlwbWFwIGxldmVs55qE5pWw5o2uXHJcbiAgICBjb25zdCBtaXBtYXAgPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IG1heExldmVsczsgaSsrKSB7XHJcbiAgICAgICAgY29uc3Qgcm91Z2huZXNzID0gaSAvIChtYXhMZXZlbHMgLSAxKTtcclxuICAgICAgICBsZXQgZmFjZUlkID0gMDtcclxuICAgICAgICAvL+WIhuWIq+e7mOWItuWFreS4quaWueWQke+8jOivu+WPlmZib+eahHBpeGVs77yM5L2c5Li65p+Q5Liq5pa55ZCR55qEbWlwbWFw57qn5Yir5pWw5o2uXHJcbiAgICAgICAgcmVuZGVyVG9DdWJlKHJlZ2wsIHRtcEZCTywgZHJhd0N1YmUsIHtcclxuICAgICAgICAgICAgcm91Z2huZXNzIDogTWF0aC5zcXJ0KHJvdWdobmVzcyksXHJcbiAgICAgICAgICAgIHNpemUgOiBzaXplXHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKC8qIGNvbnRleHQsIHByb3BzLCBiYXRjaElkICovKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBpeGVscyA9IHJlZ2wucmVhZCgpO1xyXG4gICAgICAgICAgICBpZiAoIW1pcG1hcFtmYWNlSWRdKSB7XHJcbiAgICAgICAgICAgICAgICAvL3JlZ2zopoHmsYLnmoRjdWJlIGZhY2XnmoRtaXBtYXDmlbDmja7moLzlvI9cclxuICAgICAgICAgICAgICAgIG1pcG1hcFtmYWNlSWRdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pcG1hcCA6IFtdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1pcG1hcFtmYWNlSWRdLm1pcG1hcC5wdXNoKHBpeGVscyk7XHJcbiAgICAgICAgICAgIC8v5LiL5LiA5Liq6Z2iXHJcbiAgICAgICAgICAgIGZhY2VJZCsrO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8v5LiL5LiA5LiqbWlwbWFwIGxldmVsXHJcbiAgICAgICAgc2l6ZSAvPSAyO1xyXG4gICAgICAgIHRtcEZCTy5yZXNpemUoc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG1wRkJPLmRlc3Ryb3koKTtcclxuICAgIHJldHVybiBtaXBtYXA7XHJcbn1cclxuXHJcbi8v5Zugd2ViZ2zpmZDliLbvvIxmcmFtZWJ1ZmZlclRleEltYWdlMkTml6Dms5XmjIflrpptaXAgbGV2ZWxcclxuLy/mlYXmlLnnlKjku6XkuIvmraXpqqTnlJ/miJA6XHJcbi8v5Y+C6ICD5Luj56CB77yaXHJcbi8vaHR0cHM6Ly9naXRodWIuY29tL0pvZXlEZVZyaWVzL0xlYXJuT3BlbkdML2Jsb2IvbWFzdGVyL3NyYy82LnBici8yLjIuMi5pYmxfc3BlY3VsYXJfdGV4dHVyZWQvaWJsX3NwZWN1bGFyX3RleHR1cmVkLmNwcCNMMjkwXHJcbi8vaHR0cHM6Ly9naXRodWIuY29tL3ZvcmcvcHJhZ21hdGljLXBici9ibG9iL21hc3Rlci9sb2NhbF9tb2R1bGVzL3ByZWZpbHRlci1jdWJlbWFwL2luZGV4LmpzXHJcbmZ1bmN0aW9uIGNyZWF0ZVByZWZpbHRlckN1YmUocmVnbCwgZnJvbUN1YmVNYXAsIFNJWkUsIHNhbXBsZVNpemUsIHJvdWdobmVzc0xldmVscykge1xyXG4gICAgY29uc3QgbWlwbWFwID0gY3JlYXRlUHJlZmlsdGVyTWlwbWFwKHJlZ2wsIGZyb21DdWJlTWFwLCBTSVpFLCBzYW1wbGVTaXplLCByb3VnaG5lc3NMZXZlbHMpO1xyXG5cclxuICAgIGNvbnN0IHByZWZpbHRlck1hcEZCTyA9IHJlZ2wuY3ViZSh7XHJcbiAgICAgICAgcmFkaXVzIDogU0laRSxcclxuICAgICAgICBtaW4gOiAnbGluZWFyIG1pcG1hcCBsaW5lYXInLFxyXG4gICAgICAgIG1hZyA6ICdsaW5lYXInLFxyXG4gICAgICAgIC8vIHdyYXAgOiAnY2xhbXAnLFxyXG4gICAgICAgIGZhY2VzIDogbWlwbWFwXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgcmV0dXJuIHByZWZpbHRlck1hcEZCTztcclxufVxyXG5cclxuY29uc3QgcXVhZFZlcnRpY2VzID0gW1xyXG4gICAgLy8gcG9zaXRpb25zICAgICAvLyB0ZXh0dXJlIENvb3Jkc1xyXG4gICAgLTEuMCwgIDEuMCwgMC4wLFxyXG4gICAgLTEuMCwgLTEuMCwgMC4wLFxyXG4gICAgMS4wLCAgMS4wLCAwLjAsXHJcbiAgICAxLjAsIC0xLjAsIDAuMCxcclxuXTtcclxuY29uc3QgcXVhZFRleGNvb3JkcyA9IFtcclxuICAgIDAuMCwgMS4wLFxyXG4gICAgMC4wLCAwLjAsXHJcbiAgICAxLjAsIDEuMCxcclxuICAgIDEuMCwgMC4wLFxyXG5dO1xyXG5cclxuY29uc3QgREZHX0NBQ0hFID0ge307XHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZURGR0xVVChyZWdsLCBzaXplLCBzYW1wbGVTaXplLCByb3VnaG5lc3NMZXZlbHMpIHtcclxuICAgIHNhbXBsZVNpemUgPSBzYW1wbGVTaXplIHx8IDEwMjQ7XHJcbiAgICByb3VnaG5lc3NMZXZlbHMgPSByb3VnaG5lc3NMZXZlbHMgfHwgMjU2O1xyXG5cclxuICAgIGNvbnN0IGtleSA9IHNpemUgKyAnLScgKyBzYW1wbGVTaXplICsgJy0nICsgcm91Z2huZXNzTGV2ZWxzO1xyXG5cclxuICAgIGxldCBkaXN0cm87XHJcbiAgICBpZiAoREZHX0NBQ0hFW2tleV0pIHtcclxuICAgICAgICBkaXN0cm8gPSBERkdfQ0FDSEVba2V5XTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZGlzdHJvID0gZ2VuZXJhdGVOb3JtYWxEaXN0cmlidXRpb24oc2FtcGxlU2l6ZSwgcm91Z2huZXNzTGV2ZWxzKTtcclxuICAgICAgICBERkdfQ0FDSEVba2V5XSA9IGRpc3RybztcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkaXN0cmlidXRpb25NYXAgPSByZWdsLnRleHR1cmUoe1xyXG4gICAgICAgIGRhdGEgOiBkaXN0cm8sXHJcbiAgICAgICAgd2lkdGggOiByb3VnaG5lc3NMZXZlbHMsXHJcbiAgICAgICAgaGVpZ2h0IDogc2FtcGxlU2l6ZSxcclxuICAgICAgICB0eXBlIDogJ2Zsb2F0JyxcclxuICAgICAgICBtaW4gOiAnbmVhcmVzdCcsXHJcbiAgICAgICAgbWFnIDogJ25lYXJlc3QnXHJcbiAgICB9KTtcclxuXHJcbiAgICBjb25zdCBxdWFkQnVmID0gcmVnbC5idWZmZXIocXVhZFZlcnRpY2VzKTtcclxuICAgIGNvbnN0IHF1YWRUZXhCdWYgPSByZWdsLmJ1ZmZlcihxdWFkVGV4Y29vcmRzKTtcclxuICAgIGNvbnN0IGZibyA9IHJlZ2wuZnJhbWVidWZmZXIoe1xyXG4gICAgICAgIHJhZGl1cyA6IHNpemUsXHJcbiAgICAgICAgdHlwZSA6ICdmbG9hdCcsXHJcbiAgICAgICAgbWluIDogJ25lYXJlc3QnLFxyXG4gICAgICAgIG1hZyA6ICduZWFyZXN0J1xyXG4gICAgfSk7XHJcbiAgICAvLyBjb25zdCBGU0laRSA9IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVDtcclxuICAgIGNvbnN0IGRyYXdMVVQgPSByZWdsKHtcclxuICAgICAgICBmcmFnIDogZGZnRlMsXHJcbiAgICAgICAgdmVydCA6IGRmZ1ZTLFxyXG4gICAgICAgIGF0dHJpYnV0ZXMgOiB7XHJcbiAgICAgICAgICAgICdhUG9zaXRpb24nIDoge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyIDogcXVhZEJ1ZixcclxuICAgICAgICAgICAgICAgIC8vIHN0cmlkZSA6IDUgKiBGU0laRSxcclxuICAgICAgICAgICAgICAgIC8vIHNpemUgOiAzXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICdhVGV4Q29vcmQnIDoge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyIDogcXVhZFRleEJ1ZixcclxuICAgICAgICAgICAgICAgIC8vIG9mZnNldCA6IDMgKiBGU0laRSxcclxuICAgICAgICAgICAgICAgIC8vIHN0cmlkZSA6IDUgKiBGU0laRSxcclxuICAgICAgICAgICAgICAgIC8vIHNpemUgOiAyLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bmlmb3JtcyA6IHtcclxuICAgICAgICAgICAgJ2Rpc3RyaWJ1dGlvbk1hcCcgOiBkaXN0cmlidXRpb25NYXBcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZyYW1lYnVmZmVyIDogZmJvLFxyXG4gICAgICAgIHZpZXdwb3J0IDoge1xyXG4gICAgICAgICAgICB4IDogMCxcclxuICAgICAgICAgICAgeSA6IDAsXHJcbiAgICAgICAgICAgIHdpZHRoIDogc2l6ZSxcclxuICAgICAgICAgICAgaGVpZ2h0IDogc2l6ZVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY291bnQgOiBxdWFkVmVydGljZXMubGVuZ3RoIC8gMyxcclxuICAgICAgICBwcmltaXRpdmU6ICd0cmlhbmdsZSBzdHJpcCdcclxuICAgIH0pO1xyXG4gICAgZHJhd0xVVCgpO1xyXG5cclxuICAgIHF1YWRCdWYuZGVzdHJveSgpO1xyXG4gICAgcXVhZFRleEJ1Zi5kZXN0cm95KCk7XHJcblxyXG4gICAgcmV0dXJuIGZibztcclxuXHJcbn1cclxuXHJcbi8v5Zug5Li6Z2xzbOS4jeaUr+aMgeS9jeaTjeS9nO+8jOaJgOS7pemihOWFiOeUn+aIkOmHh+agt0xVVO+8jCDku6Pmm7/ljp/ku6PnoIHkuK3nmoTph4fmoLfpgLvovpFcclxuLy9odHRwczovL2dpdGh1Yi5jb20vSm9leURlVnJpZXMvTGVhcm5PcGVuR0wvYmxvYi9tYXN0ZXIvc3JjLzYucGJyLzIuMi4yLmlibF9zcGVjdWxhcl90ZXh0dXJlZC8yLjIuMi5wcmVmaWx0ZXIuZnNcclxuZnVuY3Rpb24gZ2VuZXJhdGVOb3JtYWxEaXN0cmlidXRpb24oc2FtcGxlU2l6ZSwgcm91Z2huZXNzTGV2ZWxzKSB7XHJcbiAgICBjb25zdCBwaXhlbHMgPSBuZXcgQXJyYXkoc2FtcGxlU2l6ZSAqIHJvdWdobmVzc0xldmVscyAqIDQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1wbGVTaXplOyBpKyspIHtcclxuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IGhhbW1lcnNsZXkoaSwgc2FtcGxlU2l6ZSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcm91Z2huZXNzTGV2ZWxzOyBqKyspIHtcclxuICAgICAgICAgICAgLy/ljp9mc+S4reeahEltcG9ydGFuY2VTYW1wbGVHR1jliY3ljYrpg6jliIZcclxuICAgICAgICAgICAgY29uc3Qgcm91Z2huZXNzID0gaiAvIHJvdWdobmVzc0xldmVscztcclxuICAgICAgICAgICAgY29uc3QgYSA9IHJvdWdobmVzcyAqIHJvdWdobmVzcztcclxuICAgICAgICAgICAgY29uc3QgcGhpID0gMi4wICogTWF0aC5QSSAqIHg7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvc1RoZXRhID0gTWF0aC5zcXJ0KCgxIC0geSkgLyAoMSArIChhICogYSAtIDEuMCkgKiB5KSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNpblRoZXRhID0gTWF0aC5zcXJ0KDEuMCAtIGNvc1RoZXRhICogY29zVGhldGEpO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSAoaSAqIHJvdWdobmVzc0xldmVscyArIGopICogNDtcclxuICAgICAgICAgICAgcGl4ZWxzW29mZnNldF0gPSBzaW5UaGV0YSAqIE1hdGguY29zKHBoaSk7XHJcbiAgICAgICAgICAgIHBpeGVsc1tvZmZzZXQgKyAxXSA9IHNpblRoZXRhICogTWF0aC5zaW4ocGhpKTtcclxuICAgICAgICAgICAgcGl4ZWxzW29mZnNldCArIDJdID0gY29zVGhldGE7XHJcbiAgICAgICAgICAgIHBpeGVsc1tvZmZzZXQgKyAzXSA9IDEuMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHBpeGVscztcclxufVxyXG5cclxuZnVuY3Rpb24gaGFtbWVyc2xleShpLCBzYW1wbGVTaXplKSB7XHJcbiAgICBjb25zdCB4ID0gaSAvIHNhbXBsZVNpemU7XHJcbiAgICBsZXQgeSA9IChpIDw8IDE2IHwgaSA+Pj4gMTYpID4+PiAwO1xyXG4gICAgeSA9ICgoeSAmIDE0MzE2NTU3NjUpIDw8IDEgfCAoeSAmIDI4NjMzMTE1MzApID4+PiAxKSA+Pj4gMDtcclxuICAgIHkgPSAoKHkgJiA4NTg5OTM0NTkpIDw8IDIgfCAoeSAmIDM0MzU5NzM4MzYpID4+PiAyKSA+Pj4gMDtcclxuICAgIHkgPSAoKHkgJiAyNTI2NDUxMzUpIDw8IDQgfCAoeSAmIDQwNDIzMjIxNjApID4+PiA0KSA+Pj4gMDtcclxuICAgIHkgPSAoKCh5ICYgMTY3MTE5MzUpIDw8IDggfCAoeSAmIDQyNzgyNTUzNjApID4+PiA4KSA+Pj4gMCkgLyA0Mjk0OTY3Mjk2O1xyXG5cclxuICAgIHJldHVybiB7IHgsIHkgfTtcclxufVxuXG52YXIgUEJSSGVscGVyID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICAgIGNyZWF0ZUlCTE1hcHM6IGNyZWF0ZUlCTE1hcHNcbn0pO1xuXG5jb25zdCBERUZBVUxUX1VOSUZPUk1TID0ge1xyXG4gICAgYmFzZUNvbG9yVGV4dHVyZTogbnVsbCxcclxuICAgIGJhc2VDb2xvckZhY3RvcjogWzEsIDEsIDEsIDFdLFxyXG5cclxuICAgIG1ldGFsbGljUm91Z2huZXNzVGV4dHVyZTogbnVsbCxcclxuICAgIG1ldGFsbGljRmFjdG9yOiAxLFxyXG4gICAgcm91Z2huZXNzRmFjdG9yOiAxLFxyXG5cclxuICAgIG9jY2x1c2lvblRleHR1cmU6IG51bGwsXHJcbiAgICBvY2NsdXNpb246IDAsICAgLy9maWxhbWVudDogYW1iaWVudE9jY2x1c2lvblxyXG4gICAgb2NjbHVzaW9uU3RyZW5ndGg6IDEsIC8vZmlsYW1lbnQ6IGFtYmllbnRTdHJlbmd0aFxyXG5cclxuICAgIG5vcm1hbFRleHR1cmU6IG51bGwsXHJcbiAgICBub3JtYWxTdHJlbmd0aDogMSxcclxuXHJcbiAgICByZWZsZWN0YW5jZTogMC41LFxyXG5cclxuICAgIGVtaXNzaXZlVGV4dHVyZTogbnVsbCxcclxuICAgIGVtaXNzaXZlRmFjdG9yOiBbMCwgMCwgMCwgMF0sXHJcblxyXG4gICAgY2xlYXJDb2F0OiB1bmRlZmluZWQsXHJcbiAgICBjbGVhckNvYXRSb3VnaG5lc3NUZXh0dXJlOiBudWxsLFxyXG4gICAgY2xlYXJDb2F0Um91Z2huZXNzOiAwLFxyXG4gICAgY2xlYXJDb2F0Tm9ybWFsVGV4dHVyZTogbnVsbCxcclxuICAgIGNsZWFyQ29hdElvckNoYW5nZTogdHJ1ZSxcclxuXHJcbiAgICBhbmlzb3Ryb3B5OiB1bmRlZmluZWQsXHJcbiAgICBhbmlzb3Ryb3B5RGlyZWN0aW9uOiBbMSwgMCwgMF0sXHJcblxyXG4gICAgcG9zdExpZ2h0aW5nQ29sb3I6IFswLCAwLCAwLCAwXSxcclxuXHJcbiAgICBIQVNfVE9ORV9NQVBQSU5HOiAxLFxyXG5cclxuICAgIEdBTU1BX0NPUlJFQ1RfSU5QVVQ6IDEsXHJcblxyXG4gICAgdXZTY2FsZTogWzEsIDFdLFxyXG4gICAgdXZPZmZzZXQ6IFswLCAwXVxyXG59O1xyXG5cclxuY2xhc3MgTGl0TWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCQxIHtcclxuICAgIGNvbnN0cnVjdG9yKHVuaWZvcm1zKSB7XHJcbiAgICAgICAgc3VwZXIodW5pZm9ybXMsIERFRkFVTFRfVU5JRk9STVMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZURlZmluZXMoKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSB0aGlzLnVuaWZvcm1zO1xyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSB7XHJcbiAgICAgICAgICAgIEJMRU5EX01PREVfVFJBTlNQQVJFTlQ6IDFcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snYmFzZUNvbG9yRmFjdG9yJ10gJiYgdW5pZm9ybXNbJ2Jhc2VDb2xvckZhY3RvciddWzNdIDwgMSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydCTEVORF9NT0RFX1RSQU5TUEFSRU5UJ10gPSAxO1xyXG4gICAgICAgICAgICBkZWZpbmVzWydUUkFOU1BBUkVOVF9NQVRFUklBTCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydiYXNlQ29sb3JUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0JBU0VDT0xPUl9NQVAnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX01FVEFMTElDUk9VR0hORVNTX01BUCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydvY2NsdXNpb25UZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0FPX01BUCddID0gMTtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0FNQklFTlRfT0NDTFVTSU9OJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pZm9ybXNbJ2VtaXNzaXZlVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19FTUlTU0lWRV9NQVAnXSA9IDE7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19FTUlTU0lWRSddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydjbGVhckNvYXRSb3VnaG5lc3NUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0NMRUFSQ09BVF9ST1VHTkVTU19NQVAnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snY2xlYXJDb2F0Tm9ybWFsVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19DTEVBUl9DT0FUX05PUk1BTCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydhbmlzb3Ryb3B5J10gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfQU5JU09UUk9QWSddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydub3JtYWxUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX05PUk1BTCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydjbGVhckNvYXQnXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19DTEVBUl9DT0FUJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pZm9ybXNbJ2NsZWFyQ29hdElvckNoYW5nZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ0NMRUFSX0NPQVRfSU9SX0NIQU5HRSddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydwb3N0TGlnaHRpbmdDb2xvciddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19QT1NUX0xJR0hUSU5HX0NPTE9SJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVmaW5lc1snTUFURVJJQUxfSEFTX0JBU0VDT0xPUl9NQVAnXSB8fFxyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfTUVUQUxMSUNST1VHSE5FU1NfTUFQJ10gfHxcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX01FVE1BVEVSSUFMX0hBU19BT19NQVBBTExJQ1JPVUdITkVTU19NQVAnXSB8fFxyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfRU1JU1NJVkVfTUFQJ10gfHxcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0NMRUFSQ09BVF9ST1VHTkVTU19NQVAnXSB8fFxyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfQ0xFQVJfQ09BVF9OT1JNQUwnXSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfTUFQJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pZm9ybXNbJ0hBU19UT05FX01BUFBJTkcnXSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydIQVNfVE9ORV9NQVBQSU5HJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pZm9ybXNbJ0dBTU1BX0NPUlJFQ1RfSU5QVVQnXSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydHQU1NQV9DT1JSRUNUX0lOUFVUJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVmaW5lcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRVbmlmb3JtcyhyZWdsKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBzdXBlci5nZXRVbmlmb3JtcyhyZWdsKTtcclxuICAgICAgICByZXR1cm4geyBtYXRlcmlhbDogdW5pZm9ybXMsIHV2U2NhbGU6IHVuaWZvcm1zLnV2U2NhbGUsIHV2T2Zmc2V0OiB1bmlmb3Jtcy51dk9mZnNldCB9O1xyXG4gICAgfVxyXG59XG5cbnZhciBsaXRGcmFnID0gXCIjaW5jbHVkZSA8ZmxfaGVhZGVyX2ZyYWc+XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX1NIQURPV0lORylcXG5cXG4jaW5jbHVkZSA8dnNtX3NoYWRvd19mcmFnPlxcblxcbiNlbmRpZlxcblxcblxcblxcbi8vd2ViZ2wgMi4w5Lit55qE5Ye95pWw5a6e546wXFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9tYXRoX2dsc2w+XFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9ncmFwaGljc19nbHNsPlxcblxcbi8vaW5pdGlhbGl6ZSBmcmFtZVVuaWZvcm1zXFxuXFxuI2luY2x1ZGUgPGZsX3VuaWZvcm1zX2dsc2w+XFxuXFxuLy92YXJ5aW5nc1xcblxcbiNpbmNsdWRlIDxmbF9pbnB1dHNfZnJhZz5cXG5cXG4vL2JyZGYgZnVuY3Rpb25zXFxuXFxuI2luY2x1ZGUgPGZsX2JyZGZfZnJhZz5cXG5cXG4vL01hdGVyaWFsSW5wdXRz57uT5p6E5a6a5LmJXFxuXFxuLy9tYXBhdGFsa3NnbOeahE1hdGVyaWFsID0+IE1hdGVyaWFsSW5wdXRzXFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9zaGFkaW5nX2ZyYWc+XFxuXFxuI2luY2x1ZGUgPGZsX2dldHRlcnNfZnJhZz5cXG5cXG4jaW5jbHVkZSA8ZmxfbWF0ZXJpYWxfaW5wdXRzX2ZyYWc+XFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9tYXRlcmlhbF9mcmFnPlxcblxcbi8v5p6E6YCg5ZCE57G7c2hhZGluZ18q55qE5YC8XFxuXFxuI2luY2x1ZGUgPGZsX3NoYWRpbmdfcGFyYW1zPlxcblxcbi8vUGl4ZWxQYXJhbXPnu5PmnoTlrprkuYlcXG5cXG4jaW5jbHVkZSA8ZmxfY29tbW9uX2xpZ2h0aW5nX2ZyYWc+XFxuXFxuXFxuXFxuI2luY2x1ZGUgPGZsX21hdGVyaWFsX3VuaWZvcm1zX2ZyYWc+XFxuXFxuLy/liJ3lp4vljJZsaWdodOebuOWFs+eahHVuaWZvcm1z77yM5aaCbGlnaHRfaWJsREZH562JXFxuXFxuI2luY2x1ZGUgPGZsX2xpZ2h0X3VuaWZvcm1zX2ZyYWc+XFxuXFxuXFxuXFxuI2luY2x1ZGUgPGZsX2FtYmllbnRfb2NjbHVzaW9uX2ZyYWc+XFxuXFxuLy9JQkznga/lhYnnmoTorqHnrpfpgLvovpFcXG5cXG4jaW5jbHVkZSA8ZmxfbGlnaHRfaW5kaXJlY3Q+XFxuXFxuI2luY2x1ZGUgPGZsX3NoYWRpbmdfbW9kZWxfc3RhbmRhcmRfZnJhZz5cXG5cXG4vL+acieWQkeWFieeahOiuoeeul+mAu+i+kVxcblxcbiNpbmNsdWRlIDxmbF9saWdodF9kaXJlY3Rpb25hbD5cXG5cXG5cXG5cXG4vL2xpdOadkOi0qOeahOmAu+i+kVxcblxcbiNpbmNsdWRlIDxmbF9zaGFkaW5nX2xpdD5cXG5cXG5cXG5cXG4jaW5jbHVkZSA8ZmxfbWFpbj5cXG5cXG5cIjtcblxudmFyIHZlcnRTb3VyY2UgPSBcIiNkZWZpbmUgU0hBREVSX05BTUUgc3RhbmRhcmRfdmVydGV4XFxuXFxuXFxuXFxuICAgIGF0dHJpYnV0ZSB2ZWMzIGFQb3NpdGlvbjtcXG5cXG4jaWZkZWYgSVNfTElORV9FWFRSVVNJT05cXG5cXG4gICAgI2RlZmluZSBFWFRSVURFX1NDQUxFIDYzLjA7XFxuXFxuICAgIGF0dHJpYnV0ZSB2ZWMyIGFFeHRydWRlO1xcblxcbiAgICB1bmlmb3JtIGZsb2F0IGxpbmVXaWR0aDtcXG5cXG4gICAgdW5pZm9ybSBmbG9hdCBsaW5lSGVpZ2h0O1xcblxcbiAgICB1bmlmb3JtIGZsb2F0IGxpbmVQaXhlbFNjYWxlO1xcblxcbiNlbmRpZlxcblxcbiNpZmRlZiBIQVNfQVRUUklCVVRFX1RBTkdFTlRTXFxuXFxuICAgICNpZm5kZWYgSEFTX0FUVFJJQlVURV9OT1JNQUxTXFxuXFxuICAgIGF0dHJpYnV0ZSB2ZWM0IGFUYW5nZW50O1xcblxcbiAgICAjZWxzZVxcblxcbiAgICBhdHRyaWJ1dGUgdmVjMyBhTm9ybWFsO1xcblxcbiAgICAjZW5kaWZcXG5cXG4jZW5kaWZcXG5cXG4jaWZkZWYgSEFTX0NPTE9SXFxuXFxuICAgIGF0dHJpYnV0ZSB2ZWMzIGFDb2xvcjtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMClcXG5cXG4gICAgYXR0cmlidXRlIHZlYzIgYVRleENvb3JkMDtcXG5cXG4gICAgdW5pZm9ybSB2ZWMyIHV2U2NhbGU7XFxuXFxuICAgIHVuaWZvcm0gdmVjMiB1dk9mZnNldDtcXG5cXG4jZW5kaWZcXG5cXG4jaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMSlcXG5cXG4gICAgYXR0cmlidXRlIHZlYzIgYVRleENvb3JkMTtcXG5cXG4jZW5kaWZcXG5cXG5cXG5cXG4gICAgdW5pZm9ybSBtYXQzIG5vcm1hbE1hdHJpeDtcXG5cXG4gICAgdW5pZm9ybSBtYXQ0IG1vZGVsTWF0cml4O1xcblxcbiAgICB1bmlmb3JtIG1hdDQgbW9kZWxWaWV3TWF0cml4O1xcblxcbiAgICB1bmlmb3JtIG1hdDQgcHJvalZpZXdNYXRyaXg7XFxuXFxuICAgIHVuaWZvcm0gbWF0NCBwcm9qVmlld01vZGVsTWF0cml4O1xcblxcblxcblxcbiNpbmNsdWRlIDxmbF91bmlmb3Jtc19nbHNsPlxcblxcbiNpbmNsdWRlIDxmbF9pbnB1dHNfdmVydD5cXG5cXG5cXG5cXG4gICAgc3RydWN0IE9iamVjdFVuaWZvcm1zIHtcXG5cXG4gICAgICAgIG1hdDQgd29ybGRGcm9tTW9kZWxNYXRyaXg7XFxuXFxuICAgICAgICBtYXQzIHdvcmxkRnJvbU1vZGVsTm9ybWFsTWF0cml4O1xcblxcbiAgICB9IG9iamVjdFVuaWZvcm1zO1xcblxcblxcblxcbiAgICB2ZWM0IGNvbXB1dGVXb3JsZFBvc2l0aW9uKCkge1xcblxcbiAgICAgICAgcmV0dXJuIG1vZGVsTWF0cml4ICogbWVzaF9wb3NpdGlvbjtcXG5cXG4gICAgfVxcblxcblxcblxcbiNpbmNsdWRlIDxmbF9tYXRlcmlhbF9pbnB1dHNfdmVydD5cXG5cXG4jaW5jbHVkZSA8ZmxfY29tbW9uX21hdGhfZ2xzbD5cXG5cXG5cXG5cXG4jaWZkZWYgSEFTX1NIQURPV0lOR1xcblxcbiAgICAjaW5jbHVkZSA8dnNtX3NoYWRvd192ZXJ0PlxcblxcbiNlbmRpZlxcblxcblxcblxcbiAgICB2b2lkIGluaXRNZXNoUG9zaXRpb24oKSB7XFxuXFxuICAgICAgICAjaWZkZWYgSVNfTElORV9FWFRSVVNJT05cXG5cXG4gICAgICAgICAgICBmbG9hdCBoYWxmd2lkdGggPSBsaW5lV2lkdGggLyAyLjA7XFxuXFxuICAgICAgICAgICAgZmxvYXQgb3V0c2V0ID0gaGFsZndpZHRoO1xcblxcbiAgICAgICAgICAgIHZlYzIgZGlzdCA9IG91dHNldCAqIGFFeHRydWRlIC8gRVhUUlVERV9TQ0FMRTtcXG5cXG4gICAgICAgICAgICAvL2xpbmVQaXhlbFNjYWxlID0gdGlsZVJhdGlvICogcmVzb2x1dGlvbiAvIHRpbGVSZXNvbHV0aW9uXFxuXFxuICAgICAgICAgICAgbWVzaF9wb3NpdGlvbiA9IHZlYzQoYVBvc2l0aW9uICsgdmVjMyhkaXN0LCAwLjApICogbGluZVBpeGVsU2NhbGUsIDEuMCk7XFxuXFxuICAgICAgICAjZWxzZVxcblxcbiAgICAgICAgICAgIG1lc2hfcG9zaXRpb24gPSB2ZWM0KGFQb3NpdGlvbiwgMS4wKTtcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICB9XFxuXFxuXFxuXFxuICAgIHZvaWQgaW5pdEF0dHJpYnV0ZXMoKSB7XFxuXFxuICAgICAgICBpbml0TWVzaFBvc2l0aW9uKCk7XFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU5JU09UUk9QWSkgfHwgZGVmaW5lZChNQVRFUklBTF9IQVNfTk9STUFMKSB8fCBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUl9DT0FUX05PUk1BTClcXG5cXG4gICAgICAgICAgICBtZXNoX3RhbmdlbnRzID0gYVRhbmdlbnQ7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgICNpZiBkZWZpbmVkKEhBU19BVFRSSUJVVEVfQ09MT1IpXFxuXFxuICAgICAgICAgICAgbWVzaF9jb2xvciA9IHZlYzQoYUNvbG9yLCAxLjApO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMClcXG5cXG4gICAgICAgICAgICBtZXNoX3V2MCA9IChhVGV4Q29vcmQwICsgdXZPZmZzZXQpICogdXZTY2FsZTtcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICAgICAgI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9VVjEpXFxuXFxuICAgICAgICAgICAgbWVzaF91djEgPSBhVGV4Q29vcmQxO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuXFxuXFxuICAgICAgICAvL1RPRE8gU0tJTk5JTkfnmoTnm7jlhbPlsZ7mgKdcXG5cXG4gICAgICAgIC8vIG1lc2hfYm9uZV9pbmRpY2VzIC8vIHZlYzRcXG5cXG4gICAgICAgIC8vIG1lc2hfYm9uZV93ZWlnaHRzIC8vIHZlYzRcXG5cXG4gICAgfVxcblxcblxcblxcbiAgICB2b2lkIGluaXRPYmplY3RVbmlmb3JtcygpIHtcXG5cXG4gICAgICAgIG9iamVjdFVuaWZvcm1zLndvcmxkRnJvbU1vZGVsTWF0cml4ID0gbW9kZWxNYXRyaXg7XFxuXFxuICAgICAgICBvYmplY3RVbmlmb3Jtcy53b3JsZEZyb21Nb2RlbE5vcm1hbE1hdHJpeCA9IG5vcm1hbE1hdHJpeDtcXG5cXG4gICAgfVxcblxcblxcblxcbiAgICB2b2lkIGluaXRUYW5nZW50cyhpbm91dCBNYXRlcmlhbFZlcnRleElucHV0cyBtYXRlcmlhbCkge1xcblxcbiAgICAgICAgI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9UQU5HRU5UUylcXG5cXG4gICAgICAgICAgICAvLyBJZiB0aGUgbWF0ZXJpYWwgZGVmaW5lcyBhIHZhbHVlIGZvciB0aGUgXFxcIm5vcm1hbFxcXCIgcHJvcGVydHksIHdlIG5lZWQgdG8gb3V0cHV0XFxuXFxuICAgICAgICAgICAgLy8gdGhlIGZ1bGwgb3J0aG9ub3JtYWwgYmFzaXMgdG8gYXBwbHkgbm9ybWFsIG1hcHBpbmdcXG5cXG4gICAgICAgICAgICAjaWYgZGVmaW5lZChNQVRFUklBTF9IQVNfQU5JU09UUk9QWSkgfHwgZGVmaW5lZChNQVRFUklBTF9IQVNfTk9STUFMKSB8fCBkZWZpbmVkKE1BVEVSSUFMX0hBU19DTEVBUl9DT0FUX05PUk1BTClcXG5cXG4gICAgICAgICAgICAgICAgLy8gRXh0cmFjdCB0aGUgbm9ybWFsIGFuZCB0YW5nZW50IGluIHdvcmxkIHNwYWNlIGZyb20gdGhlIGlucHV0IHF1YXRlcm5pb25cXG5cXG4gICAgICAgICAgICAgICAgLy8gV2UgZW5jb2RlIHRoZSBvcnRob25vcm1hbCBiYXNpcyBhcyBhIHF1YXRlcm5pb24gdG8gc2F2ZSBzcGFjZSBpbiB0aGUgYXR0cmlidXRlc1xcblxcbiAgICAgICAgICAgICAgICB0b1RhbmdlbnRGcmFtZShtZXNoX3RhbmdlbnRzLCBtYXRlcmlhbC53b3JsZE5vcm1hbCwgdmVydGV4X3dvcmxkVGFuZ2VudCk7XFxuXFxuXFxuXFxuICAgICAgICAgICAgICAgICNpZiBkZWZpbmVkKEhBU19TS0lOTklORylcXG5cXG4gICAgICAgICAgICAgICAgICAgIHNraW5Ob3JtYWwobWF0ZXJpYWwud29ybGROb3JtYWwsIG1lc2hfYm9uZV9pbmRpY2VzLCBtZXNoX2JvbmVfd2VpZ2h0cyk7XFxuXFxuICAgICAgICAgICAgICAgICAgICBza2luTm9ybWFsKHZlcnRleF93b3JsZFRhbmdlbnQsIG1lc2hfYm9uZV9pbmRpY2VzLCBtZXNoX2JvbmVfd2VpZ2h0cyk7XFxuXFxuICAgICAgICAgICAgICAgICNlbmRpZlxcblxcblxcblxcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCBuZWVkIHRvIG5vcm1hbGl6ZSBoZXJlLCBldmVuIGlmIHRoZXJlJ3MgYSBzY2FsZSBpbiB0aGUgbWF0cml4XFxuXFxuICAgICAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgZW5zdXJlIHRoZSB3b3JsZEZyb21Nb2RlbE5vcm1hbE1hdHJpeCBwcmUtc2NhbGVzIHRoZSBub3JtYWwgc3VjaCB0aGF0XFxuXFxuICAgICAgICAgICAgICAgIC8vIGFsbCBpdHMgY29tcG9uZW50cyBhcmUgPCAxLjAuIFRoaXMgcHJlY2VudHMgdGhlIGJpdGFuZ2VudCB0byBleGNlZWQgdGhlIHJhbmdlIG9mIGZwMTZcXG5cXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhlIGZyYWdtZW50IHNoYWRlciwgd2hlcmUgd2UgcmVub3JtYWxpemUgYWZ0ZXIgaW50ZXJwb2xhdGlvblxcblxcbiAgICAgICAgICAgICAgICB2ZXJ0ZXhfd29ybGRUYW5nZW50ID0gb2JqZWN0VW5pZm9ybXMud29ybGRGcm9tTW9kZWxOb3JtYWxNYXRyaXggKiB2ZXJ0ZXhfd29ybGRUYW5nZW50O1xcblxcbiAgICAgICAgICAgICAgICBtYXRlcmlhbC53b3JsZE5vcm1hbCA9IG9iamVjdFVuaWZvcm1zLndvcmxkRnJvbU1vZGVsTm9ybWFsTWF0cml4ICogbWF0ZXJpYWwud29ybGROb3JtYWw7XFxuXFxuXFxuXFxuICAgICAgICAgICAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBiaXRhbmdlbnQgZnJvbSB0aGUgbm9ybWFsIGFuZCB0YW5nZW50LiBXZSBkb24ndCBib3RoZXIgd2l0aFxcblxcbiAgICAgICAgICAgICAgICAvLyBub3JtYWxpemF0aW9uIGhlcmUgc2luY2Ugd2UnbGwgZG8gaXQgYWZ0ZXIgaW50ZXJwb2xhdGlvbiBpbiB0aGUgZnJhZ21lbnQgc3RhZ2VcXG5cXG4gICAgICAgICAgICAgICAgdmVydGV4X3dvcmxkQml0YW5nZW50ID1cXG5cXG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zcyhtYXRlcmlhbC53b3JsZE5vcm1hbCwgdmVydGV4X3dvcmxkVGFuZ2VudCkgKiBzaWduKG1lc2hfdGFuZ2VudHMudyk7XFxuXFxuICAgICAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICAgICAgI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9OT1JNQUxTKVxcblxcbiAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWwud29ybGROb3JtYWwgPSBhTm9ybWFsO1xcblxcbiAgICAgICAgICAgICAgICAjZWxzZVxcblxcbiAgICAgICAgICAgICAgICAgICAgLy8gV2l0aG91dCBhbmlzb3Ryb3B5IG9yIG5vcm1hbCBtYXBwaW5nIHdlIG9ubHkgbmVlZCB0aGUgbm9ybWFsIHZlY3RvclxcblxcbiAgICAgICAgICAgICAgICAgICAgdG9UYW5nZW50RnJhbWUobWVzaF90YW5nZW50cywgbWF0ZXJpYWwud29ybGROb3JtYWwpO1xcblxcbiAgICAgICAgICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgICAgICAgICAgbWF0ZXJpYWwud29ybGROb3JtYWwgPSBvYmplY3RVbmlmb3Jtcy53b3JsZEZyb21Nb2RlbE5vcm1hbE1hdHJpeCAqIG1hdGVyaWFsLndvcmxkTm9ybWFsO1xcblxcbiAgICAgICAgICAgICAgICAjaWYgZGVmaW5lZChIQVNfU0tJTk5JTkcpXFxuXFxuICAgICAgICAgICAgICAgICAgICBza2luTm9ybWFsKG1hdGVyaWFsLndvcmxkTm9ybWFsLCBtZXNoX2JvbmVfaW5kaWNlcywgbWVzaF9ib25lX3dlaWdodHMpO1xcblxcbiAgICAgICAgICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICB9XFxuXFxuICAgICNpZmRlZiBVU0VfSU5TVEFOQ0VcXG5cXG4gICAgICAgICNpbmNsdWRlIDxpbnZlcnRfdmVydD5cXG5cXG4gICAgICAgICNpbmNsdWRlIDxpbnN0YW5jZV92ZXJ0PlxcblxcbiAgICAgICAgdmFyeWluZyB2ZWM0IHZJbnN0YW5jZUNvbG9yO1xcblxcbiAgICAjZW5kaWZcXG5cXG5cXG5cXG4gICAgI2lmZGVmIFVTRV9TS0lOXFxuXFxuICAgICAgICAjaW5jbHVkZSA8aW52ZXJ0X3ZlcnQ+XFxuXFxuICAgICAgICAjaW5jbHVkZSA8c2tpbl92ZXJ0PlxcblxcbiAgICAjZW5kaWZcXG5cXG4gICAgdm9pZCBtYWluKClcXG5cXG4gICAge1xcblxcbiAgICAgICAgaW5pdEF0dHJpYnV0ZXMoKTtcXG5cXG4gICAgICAgIGluaXRGcmFtZVVuaWZvcm1zKCk7XFxuXFxuICAgICAgICBpbml0T2JqZWN0VW5pZm9ybXMoKTtcXG5cXG4gICAgICAgIE1hdGVyaWFsVmVydGV4SW5wdXRzIG1hdGVyaWFsO1xcblxcbiAgICAgICAgaW5pdE1hdGVyaWFsVmVydGV4KG1hdGVyaWFsKTtcXG5cXG4gICAgICAgIGluaXRUYW5nZW50cyhtYXRlcmlhbCk7XFxuXFxuXFxuXFxuICAgICAgICAgLy8gSGFuZGxlIGJ1aWx0LWluIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzXFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX0NPTE9SKVxcblxcbiAgICAgICAgICAgIHZlcnRleF9jb2xvciA9IG1hdGVyaWFsLmNvbG9yO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICAgICAjaWYgZGVmaW5lZChIQVNfQVRUUklCVVRFX1VWMClcXG5cXG4gICAgICAgICAgICB2ZXJ0ZXhfdXYwMS54eSA9IG1hdGVyaWFsLnV2MDtcXG5cXG4gICAgICAgICNlbmRpZlxcblxcbiAgICAgICAgI2lmIGRlZmluZWQoSEFTX0FUVFJJQlVURV9VVjEpXFxuXFxuICAgICAgICAgICAgdmVydGV4X3V2MDEuencgPSBtYXRlcmlhbC51djE7XFxuXFxuICAgICAgICAjZW5kaWZcXG5cXG5cXG5cXG5cXG5cXG4gICAgICAgICAgICAvLyBUaGUgd29ybGQgcG9zaXRpb24gY2FuIGJlIGNoYW5nZWQgYnkgdGhlIHVzZXIgaW4gbWF0ZXJpYWxWZXJ0ZXgoKVxcblxcbiAgICAgICAgICAgIHZlcnRleF93b3JsZFBvc2l0aW9uID0gbWF0ZXJpYWwud29ybGRQb3NpdGlvbi54eXo7XFxuXFxuICAgICAgICAjaWZkZWYgSEFTX0FUVFJJQlVURV9UQU5HRU5UU1xcblxcbiAgICAgICAgICAgIHZlcnRleF93b3JsZE5vcm1hbCA9IG1hdGVyaWFsLndvcmxkTm9ybWFsO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuXFxuXFxuXFxuXFxuICAgICAgICAjaWZkZWYgVVNFX0lOU1RBTkNFXFxuXFxuICAgICAgICAgICAgbWF0NCBhdHRyaWJ1dGVNYXRyaXggPSBpbnN0YW5jZV9nZXRBdHRyaWJ1dGVNYXRyaXgoKTtcXG5cXG4gICAgICAgICAgICAjaWZkZWYgVVNFX1NLSU5cXG5cXG4gICAgICAgICAgICAgICAgbWF0NCB3b3JsZE1hdHJpeCA9IGF0dHJpYnV0ZU1hdHJpeCAqIHNraW5fZ2V0U2tpbk1hdHJpeCgpO1xcblxcbiAgICAgICAgICAgICAgICBtYXQ0IHB2bU1hdHJpeCA9IHByb2pWaWV3TWF0cml4ICogd29ybGRNYXRyaXg7XFxuXFxuICAgICAgICAgICAgI2Vsc2VcXG5cXG4gICAgICAgICAgICAgICAgbWF0NCBwdm1NYXRyaXggPSBwcm9qVmlld01hdHJpeCAqIGF0dHJpYnV0ZU1hdHJpeDtcXG5cXG4gICAgICAgICAgICAjZW5kaWZcXG5cXG4gICAgICAgICAgICBnbF9Qb3NpdGlvbiA9ID0gcHZtTWF0cml4ICogbWVzaF9wb3NpdGlvbjtcXG5cXG4gICAgICAgICNlbHNlXFxuXFxuICAgICAgICAgICAgI2lmZGVmIFVTRV9TS0lOXFxuXFxuICAgICAgICAgICAgICAgIG1hdDQgd29ybGRNYXRyaXggPSAgbW9kZWxNYXRyaXggKiBza2luX2dldFNraW5NYXRyaXgoKTtcXG5cXG4gICAgICAgICAgICAgICAgZ2xfUG9zaXRpb24gPSBwcm9qVmlld01hdHJpeCAqIHdvcmxkTWF0cml4ICogbWVzaF9wb3NpdGlvbjtcXG5cXG4gICAgICAgICAgICAjZWxzZVxcblxcbiAgICAgICAgICAgICAgICBnbF9Qb3NpdGlvbiA9IHByb2pWaWV3TW9kZWxNYXRyaXggKiBtZXNoX3Bvc2l0aW9uO1xcblxcbiAgICAgICAgICAgICNlbmRpZlxcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgICAgICAvLyBnbF9Qb3NpdGlvbiA9ICBwcm9qVmlld01vZGVsTWF0cml4ICogbWVzaF9wb3NpdGlvbjtcXG5cXG5cXG5cXG4gICAgICAgICNpZmRlZiBIQVNfU0hBRE9XSU5HXFxuXFxuICAgICAgICAgICAgc2hhZG93X2NvbXB1dGVTaGFkb3dQYXJzKG1lc2hfcG9zaXRpb24pO1xcblxcbiAgICAgICAgI2VuZGlmXFxuXFxuICAgIH1cXG5cXG5cXG5cXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG5cXG4gICAgLy8gU2hhZG93aW5nXFxuXFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuXFxuXFxuXFxuICAgIC8vICNpZiBkZWZpbmVkKEhBU19TSEFET1dJTkcpICYmIGRlZmluZWQoSEFTX0RJUkVDVElPTkFMX0xJR0hUSU5HKVxcblxcbiAgICAvL1xcblxcbiAgICAvLyB2ZWM0IGdldExpZ2h0U3BhY2VQb3NpdGlvbihjb25zdCB2ZWMzIHAsIGNvbnN0IHZlYzMgbikge1xcblxcbiAgICAvLyAgICAgZmxvYXQgTm9MID0gc2F0dXJhdGUoZG90KG4sIGZyYW1lVW5pZm9ybXMubGlnaHREaXJlY3Rpb24pKTtcXG5cXG5cXG5cXG4gICAgLy8gI2lmZGVmIFRBUkdFVF9NT0JJTEVcXG5cXG4gICAgLy8gICAgIGZsb2F0IG5vcm1hbEJpYXMgPSAxLjAgLSBOb0wgKiBOb0w7XFxuXFxuICAgIC8vICNlbHNlXFxuXFxuICAgIC8vICAgICBmbG9hdCBub3JtYWxCaWFzID0gc3FydCgxLjAgLSBOb0wgKiBOb0wpO1xcblxcbiAgICAvLyAjZW5kaWZcXG5cXG5cXG5cXG4gICAgLy8gICAgIHZlYzMgb2Zmc2V0UG9zaXRpb24gPSBwICsgbiAqIChub3JtYWxCaWFzICogZnJhbWVVbmlmb3Jtcy5zaGFkb3dCaWFzLnkpO1xcblxcbiAgICAvLyAgICAgdmVjNCBsaWdodFNwYWNlUG9zaXRpb24gPSAoZ2V0TGlnaHRGcm9tV29ybGRNYXRyaXgoKSAqIHZlYzQob2Zmc2V0UG9zaXRpb24sIDEuMCkpO1xcblxcbiAgICAvLyAgICAgbGlnaHRTcGFjZVBvc2l0aW9uLnogLT0gZnJhbWVVbmlmb3Jtcy5zaGFkb3dCaWFzLng7XFxuXFxuXFxuXFxuICAgIC8vICAgICByZXR1cm4gbGlnaHRTcGFjZVBvc2l0aW9uO1xcblxcbiAgICAvLyB9XFxuXFxuICAgIC8vICNlbmRpZlxcblxcblxcblxcblwiO1xuXG4vL2h0dHA6Ly9jb2RlZmxvdy5vcmcvZW50cmllcy8yMDEyL2F1Zy8wMi9lYXN5LXdpcmVmcmFtZS1kaXNwbGF5LXdpdGgtYmFyeWNlbnRyaWMtY29vcmRpbmF0ZXMvXHJcbmNsYXNzIFN0YW5kYXJkU2hhZGVyIGV4dGVuZHMgTWVzaFNoYWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSwgZnJhZywgbWF0ZXJpYWxVbmlmb3Jtcykge1xyXG4gICAgICAgIGxldCBleHRyYUNvbW1hbmRQcm9wcyA9IGNvbmZpZy5leHRyYUNvbW1hbmRQcm9wcyB8fCB7fTtcclxuICAgICAgICBjb25zdCBwb3NpdGlvbkF0dHJpYnV0ZSAgPSBjb25maWcucG9zaXRpb25BdHRyaWJ1dGUgfHwgJ2FQb3NpdGlvbic7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsQXR0cmlidXRlICA9IGNvbmZpZy5ub3JtYWxBdHRyaWJ1dGUgfHwgJ2FOb3JtYWwnO1xyXG4gICAgICAgIGNvbnN0IHRhbmdlbnRBdHRyaWJ1dGUgID0gY29uZmlnLnRhbmdlbnRBdHRyaWJ1dGUgfHwgJ2FUYW5nZW50JztcclxuICAgICAgICBjb25zdCBjb2xvckF0dHJpYnV0ZSAgPSBjb25maWcuY29sb3JBdHRyaWJ1dGUgfHwgJ2FDb2xvcic7XHJcbiAgICAgICAgY29uc3QgdXYwQXR0cmlidXRlID0gY29uZmlnLnV2MEF0dHJpYnV0ZSB8fCAnYVRleENvb3JkMCc7XHJcbiAgICAgICAgY29uc3QgdXYxQXR0cmlidXRlICA9IGNvbmZpZy51djFBdHRyaWJ1dGUgfHwgJ2FUZXhDb29yZDEnO1xyXG4gICAgICAgIGV4dHJhQ29tbWFuZFByb3BzID0gZXh0ZW5kKHt9LCBleHRyYUNvbW1hbmRQcm9wcywge1xyXG4gICAgICAgICAgICBibGVuZCA6IHtcclxuICAgICAgICAgICAgICAgIGVuYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGZ1bmM6IHtcclxuICAgICAgICAgICAgICAgICAgICBzcmM6ICdvbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGRzdDogJ29uZSBtaW51cyBzcmMgYWxwaGEnXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3JjUkdCOiAnc3JjIGFscGhhJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyBzcmNBbHBoYTogMSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBkc3RSR0I6ICdvbmUgbWludXMgc3JjIGFscGhhJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyBkc3RBbHBoYTogJ29uZSBtaW51cyBzcmMgYWxwaGEnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZXF1YXRpb246ICdhZGQnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNhbXBsZToge1xyXG4gICAgICAgICAgICAgICAgYWxwaGE6IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxldCB2ZXJ0ID0gdmVydFNvdXJjZTtcclxuICAgICAgICAvL+WwhuedgOiJsuWZqOS7o+eggeS4reeahGFQb3NpdGlvbuabv+aNouaIkOaMh+WumueahOWPmOmHj+WQjVxyXG4gICAgICAgIGlmIChwb3NpdGlvbkF0dHJpYnV0ZSAhPT0gJ2FQb3NpdGlvbicpIHtcclxuICAgICAgICAgICAgdmVydCA9IHZlcnQucmVwbGFjZSgvYVBvc2l0aW9uL2csIHBvc2l0aW9uQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG5vcm1hbEF0dHJpYnV0ZSAhPT0gJ2FOb3JtYWwnKSB7XHJcbiAgICAgICAgICAgIHZlcnQgPSB2ZXJ0LnJlcGxhY2UoL2FOb3JtYWwvZywgbm9ybWFsQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRhbmdlbnRBdHRyaWJ1dGUgIT09ICdhVGFuZ2VudCcpIHtcclxuICAgICAgICAgICAgdmVydCA9IHZlcnQucmVwbGFjZSgvYVRhbmdlbnQvZywgdGFuZ2VudEF0dHJpYnV0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjb2xvckF0dHJpYnV0ZSAhPT0gJ2FDb2xvcicpIHtcclxuICAgICAgICAgICAgdmVydCA9IHZlcnQucmVwbGFjZSgvYUNvbG9yL2csIGNvbG9yQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHV2MEF0dHJpYnV0ZSAhPT0gJ2FUZXhDb29yZDAnKSB7XHJcbiAgICAgICAgICAgIHZlcnQgPSB2ZXJ0LnJlcGxhY2UoL2FUZXhDb29yZDAvZywgdXYwQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHV2MUF0dHJpYnV0ZSAhPT0gJ2FUZXhDb29yZDEnKSB7XHJcbiAgICAgICAgICAgIHZlcnQgPSB2ZXJ0LnJlcGxhY2UoL2FUZXhDb29yZDEvZywgdXYxQXR0cmlidXRlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICB2ZXJ0LFxyXG4gICAgICAgICAgICBmcmFnLFxyXG4gICAgICAgICAgICB1bmlmb3JtcyA6IFtcclxuICAgICAgICAgICAgICAgIC8vdmVydOS4reeahHVuaWZvcm1zXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ25vcm1hbE1hdHJpeCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Z1bmN0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBmbjogKGNvbnRleHQsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IG1vZGVsVmlldyA9IG1hdDQubXVsdGlwbHkoTUFUNCwgcHJvcHNbJ3ZpZXdNYXRyaXgnXSwgcHJvcHNbJ21vZGVsTWF0cml4J10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBpbnZlcnRlZCA9IG1hdDQuaW52ZXJ0KG1vZGVsVmlldywgbW9kZWxWaWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc3QgdHJhbnNwb3NlZCA9IG1hdDQudHJhbnNwb3NlKGludmVydGVkLCBpbnZlcnRlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJldHVybiBtYXQzLmZyb21NYXQ0KFtdLCB0cmFuc3Bvc2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1hdDMuZnJvbU1hdDQoW10sIHByb3BzWydtb2RlbE1hdHJpeCddKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgJ21vZGVsTWF0cml4JyxcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lIDogJ3Byb2pWaWV3TW9kZWxNYXRyaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnZnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGZuIDogKGNvbnRleHQsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXQ0Lm11bHRpcGx5KFtdLCBwcm9wc1sncHJvalZpZXdNYXRyaXgnXSwgcHJvcHNbJ21vZGVsTWF0cml4J10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZSA6ICdtb2RlbFZpZXdNYXRyaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgOiAnZnVuY3Rpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGZuIDogKGNvbnRleHQsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXQ0Lm11bHRpcGx5KFtdLCBwcm9wc1sndmlld01hdHJpeCddLCBwcm9wc1snbW9kZWxNYXRyaXgnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICd1dlNjYWxlJyxcclxuICAgICAgICAgICAgICAgICd1dk9mZnNldCcsXHJcblxyXG4gICAgICAgICAgICAgICAgLy9mcmFn5Lit55qEdW5pZm9ybXNcclxuICAgICAgICAgICAgICAgICdyZXNvbHV0aW9uJyxcclxuICAgICAgICAgICAgICAgICdjYW1lcmFQb3NpdGlvbicsXHJcbiAgICAgICAgICAgICAgICAndGltZScsXHJcbiAgICAgICAgICAgICAgICAnbGlnaHRDb2xvckludGVuc2l0eScsXHJcbiAgICAgICAgICAgICAgICAnc3VuJyxcclxuICAgICAgICAgICAgICAgICdsaWdodERpcmVjdGlvbicsXHJcbiAgICAgICAgICAgICAgICAnaWJsTHVtaW5hbmNlJyxcclxuICAgICAgICAgICAgICAgICdleHBvc3VyZScsXHJcbiAgICAgICAgICAgICAgICAnZXYxMDAnLFxyXG5cclxuICAgICAgICAgICAgICAgICdsaWdodF9pYmxERkcnLFxyXG4gICAgICAgICAgICAgICAgJ2xpZ2h0X2libFNwZWN1bGFyJyxcclxuICAgICAgICAgICAgICAgICdpYmxTSFs5XScsXHJcbiAgICAgICAgICAgICAgICAnaWJsTWF4TWlwTGV2ZWwnLFxyXG4gICAgICAgICAgICAgICAgJ3Byb2pWaWV3TWF0cml4J1xyXG4gICAgICAgICAgICBdLmNvbmNhdChtYXRlcmlhbFVuaWZvcm1zKS5jb25jYXQoY29uZmlnLnVuaWZvcm1zIHx8IFtdKSxcclxuICAgICAgICAgICAgZXh0cmFDb21tYW5kUHJvcHMsXHJcbiAgICAgICAgICAgIGRlZmluZXM6IGNvbmZpZy5kZWZpbmVzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbkF0dHJpYnV0ZSA9IHBvc2l0aW9uQXR0cmlidXRlO1xyXG4gICAgICAgIHRoaXMubm9ybWFsQXR0cmlidXRlID0gbm9ybWFsQXR0cmlidXRlO1xyXG4gICAgICAgIHRoaXMudGFuZ2VudEF0dHJpYnV0ZSA9IHRhbmdlbnRBdHRyaWJ1dGU7XHJcbiAgICAgICAgdGhpcy5jb2xvckF0dHJpYnV0ZSA9IGNvbG9yQXR0cmlidXRlO1xyXG4gICAgICAgIHRoaXMudXYwQXR0cmlidXRlID0gdXYwQXR0cmlidXRlO1xyXG4gICAgICAgIHRoaXMudXYxQXR0cmlidXRlID0gdXYxQXR0cmlidXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEdlb21ldHJ5RGVmaW5lcyhnZW9tZXRyeSkge1xyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSB7fTtcclxuICAgICAgICBpZiAoZ2VvbWV0cnkuZGF0YVt0aGlzLnRhbmdlbnRBdHRyaWJ1dGVdIHx8IGdlb21ldHJ5LmRhdGFbdGhpcy5ub3JtYWxBdHRyaWJ1dGVdKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ0hBU19BVFRSSUJVVEVfVEFOR0VOVFMnXSA9IDE7XHJcbiAgICAgICAgICAgIGlmICghZ2VvbWV0cnkuZGF0YVt0aGlzLnRhbmdlbnRBdHRyaWJ1dGVdKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzWydIQVNfQVRUUklCVVRFX05PUk1BTFMnXSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGdlb21ldHJ5LmRhdGFbdGhpcy5jb2xvckF0dHJpYnV0ZV0pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snSEFTX0NPTE9SJ10gPSAxO1xyXG4gICAgICAgICAgICBkZWZpbmVzWydIQVNfQVRUUklCVVRFX0NPTE9SJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ2VvbWV0cnkuZGF0YVt0aGlzLnV2MEF0dHJpYnV0ZV0pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snSEFTX0FUVFJJQlVURV9VVjAnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChnZW9tZXRyeS5kYXRhW3RoaXMudXYxQXR0cmlidXRlXSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydIQVNfQVRUUklCVVRFX1VWMSddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRlZmluZXM7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgVU5JRk9STVMgPSBbXHJcbiAgICAnbWF0ZXJpYWwuYmFzZUNvbG9yVGV4dHVyZScsXHJcbiAgICAnbWF0ZXJpYWwuYmFzZUNvbG9yRmFjdG9yJyxcclxuXHJcbiAgICAnbWF0ZXJpYWwubWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlJyxcclxuICAgICdtYXRlcmlhbC5tZXRhbGxpY0ZhY3RvcicsXHJcbiAgICAnbWF0ZXJpYWwucm91Z2huZXNzRmFjdG9yJyxcclxuXHJcbiAgICAnbWF0ZXJpYWwub2NjbHVzaW9uVGV4dHVyZScsICAgIC8vIGRlZmF1bHQ6IDAuMFxyXG4gICAgJ21hdGVyaWFsLm9jY2x1c2lvbicsXHJcbiAgICAnbWF0ZXJpYWwub2NjbHVzaW9uU3RyZW5ndGgnLFxyXG5cclxuICAgICdtYXRlcmlhbC5lbWlzc2l2ZVRleHR1cmUnLFxyXG4gICAgJ21hdGVyaWFsLmVtaXNzaXZlRmFjdG9yJyxcclxuXHJcbiAgICAnbWF0ZXJpYWwucG9zdExpZ2h0aW5nQ29sb3InLCAgIC8vIGRlZmF1bHQ6IHZlYzQoMC4wKVxyXG5cclxuICAgICdtYXRlcmlhbC5yZWZsZWN0YW5jZScsICAgICAgICAgLy8gZGVmYXVsdDogMC41LCBub3QgYXZhaWxhYmxlIHdpdGggY2xvdGhcclxuXHJcbiAgICAnbWF0ZXJpYWwuY2xlYXJDb2F0JywgICAgICAgICAgIC8vIGRlZmF1bHQ6IDEuMCwg5piv5ZCm5pivY2xlYXJDb2F0LCAwIG9yIDFcclxuICAgICdtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3NUZXh0dXJlJyxcclxuICAgICdtYXRlcmlhbC5jbGVhckNvYXRSb3VnaG5lc3MnLCAgLy8gZGVmYXVsdDogMC4wXHJcbiAgICAnbWF0ZXJpYWwuY2xlYXJDb2F0Tm9ybWFsVGV4dHVyZScsICAgICAvLyBkZWZhdWx0OiB2ZWMzKDAuMCwgMC4wLCAxLjApXHJcblxyXG4gICAgJ21hdGVyaWFsLmFuaXNvdHJvcHknLCAgICAgICAgICAvLyBkZWZhdWx0OiAwLjBcclxuICAgICdtYXRlcmlhbC5hbmlzb3Ryb3B5RGlyZWN0aW9uJywgLy8gZGVmYXVsdDogdmVjMygxLjAsIDAuMCwgMC4wKVxyXG5cclxuICAgICdtYXRlcmlhbC5ub3JtYWxUZXh0dXJlJywgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IHZlYzMoMC4wLCAwLjAsIDEuMClcclxuXTtcclxuXHJcbmNsYXNzIExpdFNoYWRlciBleHRlbmRzIFN0YW5kYXJkU2hhZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoY29uZmlnLCBsaXRGcmFnLCBVTklGT1JNUyk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgREVGQVVMVF9VTklGT1JNUyQxID0ge1xyXG4gICAgYmFzZUNvbG9yVGV4dHVyZSA6IG51bGwsXHJcbiAgICBiYXNlQ29sb3JGYWN0b3IgOiBbMSwgMSwgMSwgMV0sXHJcblxyXG4gICAgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlOiBudWxsLFxyXG4gICAgcm91Z2huZXNzRmFjdG9yIDogMSxcclxuXHJcbiAgICBvY2NsdXNpb25UZXh0dXJlOiBudWxsLFxyXG4gICAgb2NjbHVzaW9uOiAwLCAgIC8vZmlsYW1lbnQ6IGFtYmllbnRPY2NsdXNpb25cclxuICAgIG9jY2x1c2lvblN0cmVuZ3RoOiAxLCAvL2ZpbGFtZW50OiBhbWJpZW50U3RyZW5ndGhcclxuXHJcbiAgICBub3JtYWxUZXh0dXJlIDogbnVsbCxcclxuICAgIG5vcm1hbFN0cmVuZ3RoIDogMSxcclxuXHJcbiAgICBlbWlzc2l2ZVRleHR1cmU6IG51bGwsXHJcbiAgICBlbWlzc2l2ZUZhY3RvcjogWzAsIDAsIDAsIDBdLFxyXG5cclxuXHJcbiAgICBwb3N0TGlnaHRpbmdDb2xvcjogWzAsIDAsIDAsIDBdLFxyXG5cclxuICAgIEhBU19UT05FX01BUFBJTkc6IDEsXHJcblxyXG4gICAgc2hlZW5Db2xvcjogWy0xLCAtMSwgLTFdLCAgICAgICAgICAvLyBkZWZhdWx0OiBzcXJ0KGJhc2VDb2xvcilcclxuICAgIHN1YnN1cmZhY2VDb2xvcjogdW5kZWZpbmVkLCAgICAgLy8gZGVmYXVsdDogZmxvYXQzKDAuMClcclxuXHJcbiAgICB1dlNjYWxlOiBbMSwgMV0sXHJcbiAgICB1dk9mZnNldDogWzAsIDBdXHJcbn07XHJcblxyXG5jbGFzcyBDbG90aE1hdGVyaWFsIGV4dGVuZHMgTWF0ZXJpYWwkMSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1bmlmb3Jtcykge1xyXG4gICAgICAgIHN1cGVyKHVuaWZvcm1zLCBERUZBVUxUX1VOSUZPUk1TJDEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZURlZmluZXMoKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSB0aGlzLnVuaWZvcm1zO1xyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSB7XHJcbiAgICAgICAgICAgICdTSEFESU5HX01PREVMX0NMT1RIJzogMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydiYXNlQ29sb3JUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0JBU0VDT0xPUl9NQVAnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX01FVEFMTElDUk9VR0hORVNTX01BUCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydvY2NsdXNpb25UZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0FPX01BUCddID0gMTtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0FNQklFTlRfT0NDTFVTSU9OJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pZm9ybXNbJ2VtaXNzaXZlVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19FTUlTU0lWRV9NQVAnXSA9IDE7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19FTUlTU0lWRSddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydub3JtYWxUZXh0dXJlJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX05PUk1BTCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydwb3N0TGlnaHRpbmdDb2xvciddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19QT1NUX0xJR0hUSU5HX0NPTE9SJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVmaW5lc1snTUFURVJJQUxfSEFTX0JBU0VDT0xPUl9NQVAnXSB8fFxyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfTUVUQUxMSUNST1VHSE5FU1NfTUFQJ10gfHxcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX01FVE1BVEVSSUFMX0hBU19BT19NQVBBTExJQ1JPVUdITkVTU19NQVAnXSB8fFxyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfRU1JU1NJVkVfTUFQJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX01BUCddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydIQVNfVE9ORV9NQVBQSU5HJ10pIHtcclxuICAgICAgICAgICAgZGVmaW5lc1snSEFTX1RPTkVfTUFQUElORyddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydzdWJzdXJmYWNlQ29sb3InXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19TVUJTVVJGQUNFX0NPTE9SJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGVmaW5lcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRVbmlmb3JtcyhyZWdsKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSBzdXBlci5nZXRVbmlmb3JtcyhyZWdsKTtcclxuICAgICAgICByZXR1cm4geyBtYXRlcmlhbDogdW5pZm9ybXMsIHV2U2NhbGU6IHVuaWZvcm1zLnV2U2NhbGUsIHV2T2Zmc2V0OiB1bmlmb3Jtcy51dk9mZnNldCB9O1xyXG4gICAgfVxyXG59XG5cbnZhciBjbG90aEZyYWcgPSBcIiNpbmNsdWRlIDxmbF9oZWFkZXJfZnJhZz5cXG5cXG5cXG5cXG4jaWYgZGVmaW5lZChIQVNfU0hBRE9XSU5HKVxcblxcbiNpbmNsdWRlIDx2c21fc2hhZG93X2ZyYWc+XFxuXFxuI2VuZGlmXFxuXFxuXFxuXFxuLy93ZWJnbCAyLjDkuK3nmoTlh73mlbDlrp7njrBcXG5cXG4jaW5jbHVkZSA8ZmxfY29tbW9uX21hdGhfZ2xzbD5cXG5cXG4jaW5jbHVkZSA8ZmxfY29tbW9uX2dyYXBoaWNzX2dsc2w+XFxuXFxuLy9pbml0aWFsaXplIGZyYW1lVW5pZm9ybXNcXG5cXG4jaW5jbHVkZSA8ZmxfdW5pZm9ybXNfZ2xzbD5cXG5cXG4vL3ZhcnlpbmdzXFxuXFxuI2luY2x1ZGUgPGZsX2lucHV0c19mcmFnPlxcblxcbi8vYnJkZiBmdW5jdGlvbnNcXG5cXG4jaW5jbHVkZSA8ZmxfYnJkZl9mcmFnPlxcblxcbi8vTWF0ZXJpYWxJbnB1dHPnu5PmnoTlrprkuYlcXG5cXG4vL21hcGF0YWxrc2ds55qETWF0ZXJpYWwgPT4gTWF0ZXJpYWxJbnB1dHNcXG5cXG4jaW5jbHVkZSA8ZmxfY29tbW9uX3NoYWRpbmdfZnJhZz5cXG5cXG4jaW5jbHVkZSA8ZmxfZ2V0dGVyc19mcmFnPlxcblxcbiNpbmNsdWRlIDxmbF9tYXRlcmlhbF9pbnB1dHNfZnJhZz5cXG5cXG4jaW5jbHVkZSA8ZmxfY29tbW9uX21hdGVyaWFsX2ZyYWc+XFxuXFxuLy/mnoTpgKDlkITnsbtzaGFkaW5nXyrnmoTlgLxcXG5cXG4jaW5jbHVkZSA8Zmxfc2hhZGluZ19wYXJhbXM+XFxuXFxuLy9QaXhlbFBhcmFtc+e7k+aehOWumuS5iVxcblxcbiNpbmNsdWRlIDxmbF9jb21tb25fbGlnaHRpbmdfZnJhZz5cXG5cXG5cXG5cXG4jaW5jbHVkZSA8ZmxfbWF0ZXJpYWxfdW5pZm9ybXNfZnJhZz5cXG5cXG4vL+WIneWni+WMlmxpZ2h055u45YWz55qEdW5pZm9ybXPvvIzlpoJsaWdodF9pYmxERkfnrYlcXG5cXG4jaW5jbHVkZSA8ZmxfbGlnaHRfdW5pZm9ybXNfZnJhZz5cXG5cXG5cXG5cXG4jaW5jbHVkZSA8ZmxfYW1iaWVudF9vY2NsdXNpb25fZnJhZz5cXG5cXG4vL0lCTOeBr+WFieeahOiuoeeul+mAu+i+kVxcblxcbiNpbmNsdWRlIDxmbF9saWdodF9pbmRpcmVjdD5cXG5cXG4jaW5jbHVkZSA8Zmxfc2hhZGluZ19tb2RlbF9jbG90aF9mcmFnPlxcblxcbi8v5pyJ5ZCR5YWJ55qE6K6h566X6YC76L6RXFxuXFxuI2luY2x1ZGUgPGZsX2xpZ2h0X2RpcmVjdGlvbmFsPlxcblxcblxcblxcbi8vbGl05p2Q6LSo55qE6YC76L6RXFxuXFxuI2luY2x1ZGUgPGZsX3NoYWRpbmdfbGl0PlxcblxcblxcblxcbiNpbmNsdWRlIDxmbF9tYWluPlxcblxcblwiO1xuXG5jb25zdCBVTklGT1JNUyQxID0gW1xyXG4gICAgJ21hdGVyaWFsLmJhc2VDb2xvclRleHR1cmUnLFxyXG4gICAgJ21hdGVyaWFsLmJhc2VDb2xvckZhY3RvcicsXHJcblxyXG4gICAgJ21hdGVyaWFsLm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZScsXHJcbiAgICAnbWF0ZXJpYWwucm91Z2huZXNzRmFjdG9yJyxcclxuXHJcbiAgICAnbWF0ZXJpYWwub2NjbHVzaW9uVGV4dHVyZScsICAgIC8vIGRlZmF1bHQ6IDAuMFxyXG4gICAgJ21hdGVyaWFsLm9jY2x1c2lvbicsXHJcbiAgICAnbWF0ZXJpYWwub2NjbHVzaW9uU3RyZW5ndGgnLFxyXG5cclxuICAgICdtYXRlcmlhbC5lbWlzc2l2ZVRleHR1cmUnLFxyXG4gICAgJ21hdGVyaWFsLmVtaXNzaXZlRmFjdG9yJyxcclxuXHJcbiAgICAnbWF0ZXJpYWwucG9zdExpZ2h0aW5nQ29sb3InLCAgIC8vIGRlZmF1bHQ6IHZlYzQoMC4wKVxyXG5cclxuICAgICdtYXRlcmlhbC5ub3JtYWxUZXh0dXJlJywgICAgICAgICAgICAgIC8vIGRlZmF1bHQ6IHZlYzMoMC4wLCAwLjAsIDEuMClcclxuXHJcbiAgICAnbWF0ZXJpYWwuc2hlZW5Db2xvcicsXHJcbiAgICAnbWF0ZXJpYWwuc3Vic3VyZmFjZUNvbG9yJyxcclxuXTtcclxuXHJcbmNsYXNzIENsb3RoU2hhZGVyIGV4dGVuZHMgU3RhbmRhcmRTaGFkZXIge1xyXG4gICAgY29uc3RydWN0b3IoY29uZmlnID0ge30pIHtcclxuICAgICAgICBzdXBlcihjb25maWcsIGNsb3RoRnJhZywgVU5JRk9STVMkMSk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgREVGQVVMVF9VTklGT1JNUyQyID0ge1xyXG4gICAgYmFzZUNvbG9yVGV4dHVyZSA6IG51bGwsXHJcbiAgICBiYXNlQ29sb3JGYWN0b3IgOiBbMSwgMSwgMSwgMV0sXHJcblxyXG4gICAgbWV0YWxsaWNSb3VnaG5lc3NUZXh0dXJlOiBudWxsLFxyXG4gICAgcm91Z2huZXNzRmFjdG9yIDogMSxcclxuXHJcbiAgICBvY2NsdXNpb25UZXh0dXJlOiBudWxsLFxyXG4gICAgb2NjbHVzaW9uOiAwLCAgIC8vZmlsYW1lbnQ6IGFtYmllbnRPY2NsdXNpb25cclxuICAgIG9jY2x1c2lvblN0cmVuZ3RoOiAxLCAvL2ZpbGFtZW50OiBhbWJpZW50U3RyZW5ndGhcclxuXHJcbiAgICBub3JtYWxUZXh0dXJlIDogbnVsbCxcclxuICAgIG5vcm1hbFN0cmVuZ3RoIDogMSxcclxuXHJcbiAgICBlbWlzc2l2ZVRleHR1cmU6IG51bGwsXHJcbiAgICBlbWlzc2l2ZUZhY3RvcjogWzAsIDAsIDAsIDBdLFxyXG5cclxuXHJcbiAgICBwb3N0TGlnaHRpbmdDb2xvcjogWzAsIDAsIDAsIDBdLFxyXG5cclxuICAgIEhBU19UT05FX01BUFBJTkc6IDEsXHJcblxyXG4gICAgdGhpY2tuZXNzOiAwLjUsICAgICAgICAgICAvLyBkZWZhdWx0OiAwLjVcclxuICAgIHN1YnN1cmZhY2VQb3dlcjogMTIuMjM0LCAgICAgLy8gZGVmYXVsdDogMTIuMjM0XHJcbiAgICBzdWJzdXJmYWNlQ29sb3I6IFsxLCAxLCAxXSwgICAgIC8vIGRlZmF1bHQ6IGZsb2F0MygxLjApXHJcblxyXG4gICAgdXZTY2FsZTogWzEsIDFdLFxyXG4gICAgdXZPZmZzZXQ6IFswLCAwXVxyXG59O1xyXG5cclxuY2xhc3MgQ2xvdGhNYXRlcmlhbCQxIGV4dGVuZHMgTWF0ZXJpYWwkMSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih1bmlmb3Jtcykge1xyXG4gICAgICAgIHN1cGVyKHVuaWZvcm1zLCBERUZBVUxUX1VOSUZPUk1TJDIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZURlZmluZXMoKSB7XHJcbiAgICAgICAgY29uc3QgdW5pZm9ybXMgPSB0aGlzLnVuaWZvcm1zO1xyXG4gICAgICAgIGNvbnN0IGRlZmluZXMgPSB7XHJcbiAgICAgICAgICAgICdTSEFESU5HX01PREVMX1NVQlNVUkZBQ0UnOiAxLFxyXG4gICAgICAgICAgICAnQkxFTkRfTU9ERV9UUkFOU1BBUkVOVCc6IDFcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snYmFzZUNvbG9yVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19CQVNFQ09MT1JfTUFQJ10gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodW5pZm9ybXNbJ21ldGFsbGljUm91Z2huZXNzVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19NRVRBTExJQ1JPVUdITkVTU19NQVAnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snb2NjbHVzaW9uVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19BT19NQVAnXSA9IDE7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19BTUJJRU5UX09DQ0xVU0lPTiddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVuaWZvcm1zWydlbWlzc2l2ZVRleHR1cmUnXSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfRU1JU1NJVkVfTUFQJ10gPSAxO1xyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfRU1JU1NJVkUnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snbm9ybWFsVGV4dHVyZSddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19OT1JNQUwnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1sncG9zdExpZ2h0aW5nQ29sb3InXSkge1xyXG4gICAgICAgICAgICBkZWZpbmVzWydNQVRFUklBTF9IQVNfUE9TVF9MSUdIVElOR19DT0xPUiddID0gMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRlZmluZXNbJ01BVEVSSUFMX0hBU19CQVNFQ09MT1JfTUFQJ10gfHxcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX01FVEFMTElDUk9VR0hORVNTX01BUCddIHx8XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19NRVRNQVRFUklBTF9IQVNfQU9fTUFQQUxMSUNST1VHSE5FU1NfTUFQJ10gfHxcclxuICAgICAgICAgICAgZGVmaW5lc1snTUFURVJJQUxfSEFTX0VNSVNTSVZFX01BUCddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ01BVEVSSUFMX0hBU19NQVAnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1bmlmb3Jtc1snSEFTX1RPTkVfTUFQUElORyddKSB7XHJcbiAgICAgICAgICAgIGRlZmluZXNbJ0hBU19UT05FX01BUFBJTkcnXSA9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkZWZpbmVzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFVuaWZvcm1zKHJlZ2wpIHtcclxuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IHN1cGVyLmdldFVuaWZvcm1zKHJlZ2wpO1xyXG4gICAgICAgIHJldHVybiB7IG1hdGVyaWFsOiB1bmlmb3JtcywgdXZTY2FsZTogdW5pZm9ybXMudXZTY2FsZSwgdXZPZmZzZXQ6IHVuaWZvcm1zLnV2T2Zmc2V0IH07XHJcbiAgICB9XHJcbn1cblxudmFyIHN1YnN1cmZhY2VGcmFnID0gXCIjaW5jbHVkZSA8ZmxfaGVhZGVyX2ZyYWc+XFxuXFxuXFxuXFxuI2lmIGRlZmluZWQoSEFTX1NIQURPV0lORylcXG5cXG4jaW5jbHVkZSA8dnNtX3NoYWRvd19mcmFnPlxcblxcbiNlbmRpZlxcblxcblxcblxcbi8vd2ViZ2wgMi4w5Lit55qE5Ye95pWw5a6e546wXFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9tYXRoX2dsc2w+XFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9ncmFwaGljc19nbHNsPlxcblxcbi8vaW5pdGlhbGl6ZSBmcmFtZVVuaWZvcm1zXFxuXFxuI2luY2x1ZGUgPGZsX3VuaWZvcm1zX2dsc2w+XFxuXFxuLy92YXJ5aW5nc1xcblxcbiNpbmNsdWRlIDxmbF9pbnB1dHNfZnJhZz5cXG5cXG4vL2JyZGYgZnVuY3Rpb25zXFxuXFxuI2luY2x1ZGUgPGZsX2JyZGZfZnJhZz5cXG5cXG4vL01hdGVyaWFsSW5wdXRz57uT5p6E5a6a5LmJXFxuXFxuLy9tYXBhdGFsa3NnbOeahE1hdGVyaWFsID0+IE1hdGVyaWFsSW5wdXRzXFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9zaGFkaW5nX2ZyYWc+XFxuXFxuI2luY2x1ZGUgPGZsX2dldHRlcnNfZnJhZz5cXG5cXG4jaW5jbHVkZSA8ZmxfbWF0ZXJpYWxfaW5wdXRzX2ZyYWc+XFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9tYXRlcmlhbF9mcmFnPlxcblxcbiNpbmNsdWRlIDxmbF9zaGFkaW5nX3BhcmFtcz5cXG5cXG4vL1BpeGVsUGFyYW1z57uT5p6E5a6a5LmJXFxuXFxuI2luY2x1ZGUgPGZsX2NvbW1vbl9saWdodGluZ19mcmFnPlxcblxcblxcblxcbiNpbmNsdWRlIDxmbF9tYXRlcmlhbF91bmlmb3Jtc19mcmFnPlxcblxcbi8v5Yid5aeL5YyWbGlnaHTnm7jlhbPnmoR1bmlmb3Jtc++8jOWmgmxpZ2h0X2libERGR+etiVxcblxcbiNpbmNsdWRlIDxmbF9saWdodF91bmlmb3Jtc19mcmFnPlxcblxcblxcblxcbiNpbmNsdWRlIDxmbF9hbWJpZW50X29jY2x1c2lvbl9mcmFnPlxcblxcbi8vSUJM54Gv5YWJ55qE6K6h566X6YC76L6RXFxuXFxuI2luY2x1ZGUgPGZsX2xpZ2h0X2luZGlyZWN0PlxcblxcbiNpbmNsdWRlIDxmbF9zaGFkaW5nX21vZGVsX3N1YnN1cmZhY2VfZnJhZz5cXG5cXG4vL+acieWQkeWFieeahOiuoeeul+mAu+i+kVxcblxcbiNpbmNsdWRlIDxmbF9saWdodF9kaXJlY3Rpb25hbD5cXG5cXG5cXG5cXG4vL2xpdOadkOi0qOeahOmAu+i+kVxcblxcbiNpbmNsdWRlIDxmbF9zaGFkaW5nX2xpdD5cXG5cXG5cXG5cXG4jaW5jbHVkZSA8ZmxfbWFpbj5cXG5cXG5cIjtcblxuY29uc3QgVU5JRk9STVMkMiA9IFtcclxuICAgICdtYXRlcmlhbC5iYXNlQ29sb3JUZXh0dXJlJyxcclxuICAgICdtYXRlcmlhbC5iYXNlQ29sb3JGYWN0b3InLFxyXG5cclxuICAgICdtYXRlcmlhbC5tZXRhbGxpY1JvdWdobmVzc1RleHR1cmUnLFxyXG4gICAgJ21hdGVyaWFsLnJvdWdobmVzc0ZhY3RvcicsXHJcblxyXG4gICAgJ21hdGVyaWFsLm9jY2x1c2lvblRleHR1cmUnLCAgICAvLyBkZWZhdWx0OiAwLjBcclxuICAgICdtYXRlcmlhbC5vY2NsdXNpb24nLFxyXG4gICAgJ21hdGVyaWFsLm9jY2x1c2lvblN0cmVuZ3RoJyxcclxuXHJcbiAgICAnbWF0ZXJpYWwuZW1pc3NpdmVUZXh0dXJlJyxcclxuICAgICdtYXRlcmlhbC5lbWlzc2l2ZUZhY3RvcicsXHJcblxyXG4gICAgJ21hdGVyaWFsLnBvc3RMaWdodGluZ0NvbG9yJywgICAvLyBkZWZhdWx0OiB2ZWM0KDAuMClcclxuXHJcbiAgICAnbWF0ZXJpYWwubm9ybWFsVGV4dHVyZScsICAgICAgICAgICAgICAvLyBkZWZhdWx0OiB2ZWMzKDAuMCwgMC4wLCAxLjApXHJcblxyXG4gICAgJ21hdGVyaWFsLnRoaWNrbmVzcycsXHJcbiAgICAnbWF0ZXJpYWwuc3Vic3VyZmFjZVBvd2VyJyxcclxuICAgICdtYXRlcmlhbC5zdWJzdXJmYWNlQ29sb3InXHJcbl07XHJcblxyXG4vL2h0dHA6Ly9jb2RlZmxvdy5vcmcvZW50cmllcy8yMDEyL2F1Zy8wMi9lYXN5LXdpcmVmcmFtZS1kaXNwbGF5LXdpdGgtYmFyeWNlbnRyaWMtY29vcmRpbmF0ZXMvXHJcbmNsYXNzIENsb3RoU2hhZGVyJDEgZXh0ZW5kcyBTdGFuZGFyZFNoYWRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb25maWcgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGNvbmZpZywgc3Vic3VyZmFjZUZyYWcsIFVOSUZPUk1TJDIpO1xyXG4gICAgfVxyXG59XG5cbnZhciB2c21GcmFnID0gXCIjZGVmaW5lIFNIQURFUl9OQU1FIHZzbV9tYXBwaW5nXFxuXFxuLy8gI2V4dGVuc2lvbiBHTF9PRVNfc3RhbmRhcmRfZGVyaXZhdGl2ZXMgOiBlbmFibGVcXG5cXG5cXG5cXG4vLyBwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5cXG5cXG4vLyB2YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcblxcblxcblxcbi8vVlNNXFxuXFxudm9pZCBtYWluKClcXG5cXG57XFxuXFxuICAgIC8vIGZsb2F0IGRlcHRoID0gZ2xfRnJhZ0Nvb3JkLno7Ly92UG9zaXRpb24ueiAvIHZQb3NpdGlvbi53O1xcblxcbiAgICAvLyBkZXB0aCA9IGRlcHRoICogMC41ICsgMC41O1xcblxcbiAgICAvLyBmbG9hdCBtb21lbnQxID0gZGVwdGg7XFxuXFxuICAgIC8vIGZsb2F0IG1vbWVudDIgPSBkZXB0aCAqIGRlcHRoO1xcblxcblxcblxcbiAgICAvLyAvLyBBZGp1c3RpbmcgbW9tZW50cyB1c2luZyBwYXJ0aWFsIGRlcml2YXRpdmVcXG5cXG4gICAgLy8gZmxvYXQgZHggPSBkRmR4KGRlcHRoKTtcXG5cXG4gICAgLy8gZmxvYXQgZHkgPSBkRmR5KGRlcHRoKTtcXG5cXG4gICAgLy8gLy8gUmVzb3ZsZSBzaGFkb3cgYWNuZVxcblxcbiAgICAvLyBtb21lbnQyICs9IDAuMjUgKiAoZHggKiBkeCArIGR5ICogZHkpO1xcblxcbiAgICAvLyBnbF9GcmFnQ29sb3IgPSB2ZWM0KG1vbWVudDEsIG1vbWVudDIsIGRlcHRoLCAwLjApO1xcblxcblxcblxcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGdsX0ZyYWdDb29yZC56LCAwLjAsIDAuMCwgMS4wKTtcXG5cXG59XFxuXFxuXCI7XG5cbnZhciB2c21WZXJ0ID0gXCJhdHRyaWJ1dGUgdmVjMyBhUG9zaXRpb247XFxuXFxuXFxuXFxudW5pZm9ybSBtYXQ0IGxpZ2h0UHJvalZpZXdNb2RlbE1hdHJpeDtcXG5cXG5cXG5cXG52YXJ5aW5nIHZlYzQgdlBvc2l0aW9uO1xcblxcblxcblxcbnZvaWQgbWFpbigpXFxuXFxue1xcblxcbiAgICBnbF9Qb3NpdGlvbiA9IGxpZ2h0UHJvalZpZXdNb2RlbE1hdHJpeCAqIHZlYzQoYVBvc2l0aW9uLCAxLik7XFxuXFxuICAgIHZQb3NpdGlvbiA9IGdsX1Bvc2l0aW9uO1xcblxcbn1cXG5cXG5cIjtcblxuY2xhc3MgU2hhZG93TWFwU2hhZGVyIGV4dGVuZHMgTWVzaFNoYWRlciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICB2ZXJ0IDogdnNtVmVydCxcclxuICAgICAgICAgICAgZnJhZyA6IHZzbUZyYWcsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zIDogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgOiAnbGlnaHRQcm9qVmlld01vZGVsTWF0cml4JyxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlIDogJ2Z1bmN0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICBmbiA6IGZ1bmN0aW9uIChjb250ZXh0LCBwcm9wcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF0NC5tdWx0aXBseShbXSwgcHJvcHNbJ2xpZ2h0UHJvalZpZXdNYXRyaXgnXSwgcHJvcHNbJ21vZGVsTWF0cml4J10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZXh0cmFDb21tYW5kUHJvcHM6IHtcclxuICAgICAgICAgICAgICAgIC8vIGN1bGw6IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBlbmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgZmFjZTogJ2JhY2snXHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXIobWVzaCkge1xyXG4gICAgICAgIHJldHVybiBtZXNoLmNhc3RTaGFkb3c7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWVzaENvbW1hbmQocmVnbCwgbWVzaCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb21tYW5kc1snc2hhZG93bWFwJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kc1snc2hhZG93bWFwJ10gPSB0aGlzLmNyZWF0ZVJFR0xDb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgcmVnbCxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZXNoLmdldEF0dHJpYnV0ZXMoKSxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZXNoLmdldEVsZW1lbnRzKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZHNbJ3NoYWRvd21hcCddO1xyXG4gICAgfVxyXG59XG5cbnZhciBib3hCbHVyRnJhZyA9IFwicHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuXFxuXFxuXFxudmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG5cXG5cXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlU291cmNlO1xcblxcbnVuaWZvcm0gdmVjMiB0ZXh0dXJlU2l6ZTtcXG5cXG5cXG5cXG52b2lkIG1haW4oKVxcblxcbntcXG5cXG4gICAgZmxvYXQgYyA9IDAuMDtcXG5cXG4gICAgZm9yIChpbnQgeCA9IC1CT1hCTFVSX09GRlNFVDsgeCA8PSBCT1hCTFVSX09GRlNFVDsgKyt4KVxcblxcbiAgICBmb3IgKGludCB5ID0gLUJPWEJMVVJfT0ZGU0VUOyB5IDw9IEJPWEJMVVJfT0ZGU0VUOyArK3kpXFxuXFxuXHR7XFxuXFxuICAgICAgICBjICs9IHRleHR1cmUyRCh0ZXh0dXJlU291cmNlLCB2VGV4Q29vcmQuc3QgKyB2ZWMyKGZsb2F0KHgpIC8gdGV4dHVyZVNpemUueCwgZmxvYXQoeSkgLyB0ZXh0dXJlU2l6ZS55KSkucjtcXG5cXG5cdH1cXG5cXG4gICAgZmxvYXQgY29sb3IgPSBjIC8gZmxvYXQoKDIgKiBCT1hCTFVSX09GRlNFVCArIDEpICogKDIgKiBCT1hCTFVSX09GRlNFVCArIDEpKTtcXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgMC4wLCAwLjAsIDEuMCk7XFxuXFxufVxcblxcblwiO1xuXG52YXIgYm94Qmx1clZlcnQgPSBcImF0dHJpYnV0ZSB2ZWMzIGFQb3NpdGlvbjtcXG5cXG5hdHRyaWJ1dGUgdmVjMiBhVGV4Q29vcmQ7XFxuXFxuXFxuXFxudmFyeWluZyB2ZWMyIHZUZXhDb29yZDtcXG5cXG5cXG5cXG52b2lkIG1haW4oKVxcblxcbntcXG5cXG4gIGdsX1Bvc2l0aW9uID0gdmVjNChhUG9zaXRpb24sIDEuKTtcXG5cXG4gIHZUZXhDb29yZCA9IGFUZXhDb29yZDtcXG5cXG59XFxuXFxuXCI7XG5cbmNvbnN0IHF1YWRWZXJ0aWNlcyQxID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAvLyBwb3NpdGlvbnNcclxuICAgIC0xLjAsICAxLjAsIDAuMCxcclxuICAgIC0xLjAsIC0xLjAsIDAuMCxcclxuICAgIDEuMCwgIDEuMCwgMC4wLFxyXG4gICAgMS4wLCAtMS4wLCAwLjAsXHJcbl0pO1xyXG5jb25zdCBxdWFkVGV4Y29vcmRzJDEgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgIDAuMCwgMS4wLFxyXG4gICAgMC4wLCAwLjAsXHJcbiAgICAxLjAsIDEuMCxcclxuICAgIDEuMCwgMC4wLFxyXG5dKTtcclxuXHJcbmNsYXNzIFF1YWRTaGFkZXIgZXh0ZW5kcyBNZXNoU2hhZGVyIHtcclxuICAgIGRyYXcocmVnbCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fcXVhZE1lc2gpIHtcclxuICAgICAgICAgICAgdGhpcy5fY3JlYXRlUXVhZE1lc2gocmVnbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdXBlci5kcmF3KHJlZ2wsIHRoaXMuX3F1YWRNZXNoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNZXNoQ29tbWFuZChyZWdsKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNvbW1hbmRzWydxdWFkJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kc1sncXVhZCddID0gdGhpcy5jcmVhdGVSRUdMQ29tbWFuZChcclxuICAgICAgICAgICAgICAgIHJlZ2wsXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcXVhZE1lc2hbMF0uZ2V0QXR0cmlidXRlcygpLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIHRoaXMuX3F1YWRNZXNoWzBdLmdldEVsZW1lbnRzKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZHNbJ3F1YWQnXTtcclxuICAgIH1cclxuXHJcbiAgICBfY3JlYXRlUXVhZE1lc2gocmVnbCkge1xyXG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gbmV3IEdlb21ldHJ5KFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBhUG9zaXRpb24gOiBxdWFkVmVydGljZXMkMSxcclxuICAgICAgICAgICAgICAgIGFUZXhDb29yZCA6IHF1YWRUZXhjb29yZHMkMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICBxdWFkVmVydGljZXMkMS5sZW5ndGggLyAzLFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBwcmltaXRpdmUgOiAndHJpYW5nbGUgc3RyaXAnXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApO1xyXG4gICAgICAgIGdlb21ldHJ5LmdlbmVyYXRlQnVmZmVycyhyZWdsKTtcclxuICAgICAgICB0aGlzLl9xdWFkTWVzaCA9IFtuZXcgTWVzaChnZW9tZXRyeSldO1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX3F1YWRNZXNoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1lc2ggPSB0aGlzLl9xdWFkTWVzaFswXTtcclxuICAgICAgICAgICAgbWVzaC5nZW9tZXRyeS5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIG1lc2guZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkZWxldGUgdGhpcy5fcXVhZE1lc2g7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLmRpc3Bvc2UoKTtcclxuICAgIH1cclxufVxuXG5jbGFzcyBCb3hCbHVyU2hhZGVyIGV4dGVuZHMgUXVhZFNoYWRlciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoeyBibHVyT2Zmc2V0IH0pIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHZlcnQgOiBib3hCbHVyVmVydCwgZnJhZyA6IGJveEJsdXJGcmFnLFxyXG4gICAgICAgICAgICB1bmlmb3JtcyA6IFsndGV4dHVyZVNvdXJjZScsICd0ZXh0dXJlU2l6ZSddLFxyXG4gICAgICAgICAgICBkZWZpbmVzIDoge1xyXG4gICAgICAgICAgICAgICAgJ0JPWEJMVVJfT0ZGU0VUJyA6IGJsdXJPZmZzZXQgfHwgMlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWVzaENvbW1hbmQocmVnbCwgbWVzaCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jb21tYW5kc1snc2hhZG93J10pIHtcclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kc1snc2hhZG93J10gPSB0aGlzLmNyZWF0ZVJFR0xDb21tYW5kKFxyXG4gICAgICAgICAgICAgICAgcmVnbCxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZXNoLmdldEF0dHJpYnV0ZXMoKSxcclxuICAgICAgICAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZXNoLmdldEVsZW1lbnRzKClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbWFuZHNbJ3NoYWRvdyddO1xyXG4gICAgfVxyXG59XG5cbmxldCBnZXRGcnVzdHVtV29ybGRTcGFjZSwgZ2V0RGlyTGlnaHRDYW1lcmFQcm9qVmlldztcclxuXHJcbmNsYXNzIFNoYWRvd1Bhc3Mge1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyZXIsIHsgd2lkdGgsIGhlaWdodCwgYmx1ck9mZnNldCB9KSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCB8fCA1MTI7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgfHwgNTEyO1xyXG4gICAgICAgIHRoaXMuYmx1ck9mZnNldCA9IGlzTmlsKGJsdXJPZmZzZXQpID8gMiA6IGJsdXJPZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5faW5pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbmRlcihzY2VuZSwgeyBjYW1lcmFQcm9qVmlld01hdHJpeCwgbGlnaHREaXIsIGZhclBsYW5lIH0pIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNTdXBwb3J0ZWQoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbGlnaHRQcm9qVmlld01hdHJpeCA9IHRoaXMuX3JlbmRlclNoYWRvdyhzY2VuZSwgY2FtZXJhUHJvalZpZXdNYXRyaXgsIGxpZ2h0RGlyLCBmYXJQbGFuZSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGlnaHRQcm9qVmlld01hdHJpeCxcclxuICAgICAgICAgICAgc2hhZG93TWFwIDogdGhpcy5ibHVyVGV4IHx8IHRoaXMuZGVwdGhUZXgsXHJcbiAgICAgICAgICAgIGRlcHRoRkJPIDogdGhpcy5kZXB0aEZCTyxcclxuICAgICAgICAgICAgYmx1ckZCTyA6IHRoaXMuYmx1ckZCT1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmVzaXplKHdpZHRoLCBoZWlnaHQpIHtcclxuICAgICAgICBpZiAodGhpcy5kZXB0aFRleCkge1xyXG4gICAgICAgICAgICB0aGlzLmRlcHRoVGV4LnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5kZXB0aEZCTy5yZXNpemUod2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJsdXJGQk8pIHtcclxuICAgICAgICAgICAgdGhpcy5ibHVyVGV4LnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5ibHVyRkJPLnJlc2l6ZSh3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cHBvcnRlZDtcclxuICAgIH1cclxuXHJcbiAgICBfcmVuZGVyU2hhZG93KHNjZW5lLCBjYW1lcmFQcm9qVmlld01hdHJpeCwgbGlnaHREaXIsIGZhclBsYW5lKSB7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xyXG4gICAgICAgIGlmICghdGhpcy52c21TaGFkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy52c21TaGFkZXIgPSBuZXcgU2hhZG93TWFwU2hhZGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGZydXN0dW0gPSBnZXRGcnVzdHVtV29ybGRTcGFjZShjYW1lcmFQcm9qVmlld01hdHJpeCk7XHJcbiAgICAgICAgaWYgKGZhclBsYW5lKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSA0OyBpIDwgODsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBmcnVzdHVtW2ldID0gZmFyUGxhbmVbaSAtIDRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vVE9ETyDorqHnrpdGcnVzdHVt5ZKMc2NlbmXnmoTnm7jkuqTpg6jliIbvvIzkvZzkuLrlhYnmupDnmoRmcnVzdHVtXHJcbiAgICAgICAgLy9UT0RPIOmBjeWOhnNjZW5l5Lit55qE5Zu+5b2i77yM5aaC5p6cYWFiYuS4jeWSjGZydXN0dW3nm7jkuqTvvIzlsLHkuI3nu5jliLZcclxuICAgICAgICBjb25zdCBsaWdodFByb2pWaWV3TWF0cml4ID0gZ2V0RGlyTGlnaHRDYW1lcmFQcm9qVmlldyhmcnVzdHVtLCBsaWdodERpcik7XHJcbiAgICAgICAgcmVuZGVyZXIuY2xlYXIoe1xyXG4gICAgICAgICAgICBjb2xvciA6IFswLCAwLCAwLCAxXSxcclxuICAgICAgICAgICAgZGVwdGggOiAxLFxyXG4gICAgICAgICAgICBmcmFtZWJ1ZmZlciA6IHRoaXMuZGVwdGhGQk9cclxuICAgICAgICB9KTtcclxuICAgICAgICByZW5kZXJlci5yZW5kZXIodGhpcy52c21TaGFkZXIsIHsgbGlnaHRQcm9qVmlld01hdHJpeCB9LCBzY2VuZSwgdGhpcy5kZXB0aEZCTyk7XHJcbiAgICAgICAgaWYgKHRoaXMuYmx1ckZCTykge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYm94Qmx1clNoYWRlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3hCbHVyU2hhZGVyID0gbmV3IEJveEJsdXJTaGFkZXIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGJsdXJPZmZzZXQgOiB0aGlzLmJsdXJPZmZzZXRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLmNsZWFyKHtcclxuICAgICAgICAgICAgICAgIGNvbG9yIDogWzAsIDAsIDAsIDFdLFxyXG4gICAgICAgICAgICAgICAgZGVwdGggOiAxLFxyXG4gICAgICAgICAgICAgICAgZnJhbWVidWZmZXIgOiB0aGlzLmJsdXJGQk9cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLnJlbmRlcihcclxuICAgICAgICAgICAgICAgIHRoaXMuYm94Qmx1clNoYWRlcixcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlU2l6ZSA6IFt0aGlzLmRlcHRoVGV4LndpZHRoLCB0aGlzLmRlcHRoVGV4LmhlaWdodF0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dHVyZVNvdXJjZSA6IHRoaXMuZGVwdGhUZXhcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5ibHVyRkJPXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaWdodFByb2pWaWV3TWF0cml4O1xyXG4gICAgfVxyXG5cclxuICAgIF9pbml0KCkge1xyXG4gICAgICAgIGNvbnN0IHJlZ2wgPSB0aGlzLnJlbmRlcmVyLnJlZ2w7XHJcbiAgICAgICAgdGhpcy5fc3VwcG9ydGVkID0gcmVnbC5oYXNFeHRlbnNpb24oJ29lc190ZXh0dXJlX2Zsb2F0X2xpbmVhcicpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc1N1cHBvcnRlZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignV2ViR0wgb2VzX3RleHR1cmVfZmxvYXRfbGluZWFyIGV4dGVuc2lvbiBpcyBub3Qgc3VwcG9ydGVkLCBzaGFkb3cgcmVuZGVyaW5nIGlzIGRpc2FibGVkLicpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5kZXB0aFRleCA9IHJlZ2wudGV4dHVyZSh7XHJcbiAgICAgICAgICAgIHdpZHRoLCBoZWlnaHQsXHJcbiAgICAgICAgICAgIGZvcm1hdCA6ICdyZ2InLFxyXG4gICAgICAgICAgICB0eXBlIDogJ2Zsb2F0JyxcclxuICAgICAgICAgICAgbWluIDogJ2xpbmVhcicsXHJcbiAgICAgICAgICAgIG1hZyA6ICdsaW5lYXInLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRlcHRoRkJPID0gcmVnbC5mcmFtZWJ1ZmZlcih7XHJcbiAgICAgICAgICAgIGNvbG9yIDogdGhpcy5kZXB0aFRleFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5ibHVyT2Zmc2V0IDw9IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ibHVyVGV4ID0gcmVnbC50ZXh0dXJlKHtcclxuICAgICAgICAgICAgd2lkdGgsIGhlaWdodCxcclxuICAgICAgICAgICAgZm9ybWF0IDogJ3JnYicsXHJcbiAgICAgICAgICAgIHR5cGUgOiAnZmxvYXQnLFxyXG4gICAgICAgICAgICBtaW4gOiAnbGluZWFyJyxcclxuICAgICAgICAgICAgbWFnIDogJ2xpbmVhcidcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5ibHVyRkJPID0gcmVnbC5mcmFtZWJ1ZmZlcih7XHJcbiAgICAgICAgICAgIGNvbG9yIDogdGhpcy5ibHVyVGV4XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGVwdGhUZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXB0aFRleC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGVwdGhGQk8uZGVzdHJveSgpO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kZXB0aFRleDtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGVwdGhGQk87XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmJsdXJUZXgpIHtcclxuICAgICAgICAgICAgdGhpcy5ibHVyVGV4LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5ibHVyRkJPLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYmx1clRleDtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYmx1ckZCTztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMudnNtU2hhZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMudnNtU2hhZGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMudnNtU2hhZGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5ib3hCbHVyU2hhZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYm94Qmx1clNoYWRlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJveEJsdXJTaGFkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXQgY2FtZXJhJ3MgZnJ1c3R1bSdzIGNvb3JkaW5hdGVzIGluIHdvcmxkIHNwYWNlIHdpdGggZ2l2ZW4gcHJvamVjdGlvbiB2aWV3IG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcltdfSBjYW1lcmFQcm9qVmlldyBjYW1lcmEncyBwcm9qZWN0aW9uICogdmlldyBtYXRyaXhcclxuICovXHJcbmdldEZydXN0dW1Xb3JsZFNwYWNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgY2xpcFBsYW5lcyA9IFtcclxuICAgICAgICAvLyBuZWFyXHJcbiAgICAgICAgWy0xLCAtMSwgLTEsIDFdLCBbMSwgLTEsIC0xLCAxXSwgWzEsICAxLCAtMSwgMV0sICBbLTEsICAxLCAtMSwgMV0sXHJcbiAgICAgICAgLy8gZmFyXHJcbiAgICAgICAgWy0xLCAtMSwgMSwgMV0sXHRbMSwgLTEsIDEsIDFdLFx0WzEsICAxLCAxLCAxXSwgIFstMSwgIDEsIDEsIDFdXHJcbiAgICBdO1xyXG4gICAgY29uc3QgaW52ZXJzZVByb2plY3Rpb25NYXRyaXggPSBuZXcgQXJyYXkoMTYpO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjYW1lcmFQcm9qVmlldykge1xyXG4gICAgICAgIG1hdDQuaW52ZXJ0KGludmVyc2VQcm9qZWN0aW9uTWF0cml4LCBjYW1lcmFQcm9qVmlldyk7XHJcbiAgICAgICAgY29uc3QgZnJ1c3R1bSA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNsaXBQbGFuZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvaldvcmxkU3BhY2VQb3NpdGlvbiA9IHZlYzQudHJhbnNmb3JtTWF0NChbXSwgY2xpcFBsYW5lc1tpXSwgaW52ZXJzZVByb2plY3Rpb25NYXRyaXgpO1xyXG4gICAgICAgICAgICB2ZWM0LnNjYWxlKHByb2pXb3JsZFNwYWNlUG9zaXRpb24sICBwcm9qV29ybGRTcGFjZVBvc2l0aW9uLCAxIC8gcHJvaldvcmxkU3BhY2VQb3NpdGlvblszXSk7XHJcbiAgICAgICAgICAgIGZydXN0dW0ucHVzaChwcm9qV29ybGRTcGFjZVBvc2l0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc3QgY2FtZXJhUG9zID0gdmVjNC50cmFuc2Zvcm1NYXQ0KFtdLCBbMCwgMCwgLTEsIDFdLCBpbnZlcnNlUHJvamVjdGlvbk1hdHJpeCk7XHJcbiAgICAgICAgLy8gdmVjNC5zY2FsZShjYW1lcmFQb3MsIGNhbWVyYVBvcywgMSAvIGNhbWVyYVBvc1szXSk7XHJcbiAgICAgICAgcmV0dXJuIGZydXN0dW07XHJcbiAgICB9O1xyXG59KCk7XHJcblxyXG5cclxuLy9odHRwczovL3d3dy5nYW1lZGV2Lm5ldC9mb3J1bXMvdG9waWMvNjcyNjY0LWZpdHRpbmctZGlyZWN0aW9uYWwtbGlnaHQtaW4tdmlldy1mcnVzdHVtLz9wYWdlPTJcclxuLyoqXHJcbiAqIEdldCBkaXJlY3Rpb25hbCBsaWdodCdzIGNhbWVyYSBwcm9qZWN0aW9uICogdmlldyBtYXRyaXggaW4gc2hhZG93IG1hcHBpbmdcclxuICogQHBhcmFtIHtOdW1iZXJbXVtdfSBmcnVzdHVtIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJbXX0gbGlnaHREaXIgIGxpZ2h0IGRpcmVjdGlvblxyXG4gKi9cclxuZ2V0RGlyTGlnaHRDYW1lcmFQcm9qVmlldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGxldCB0cmFuc2YgPSBuZXcgQXJyYXkoNCk7XHJcbiAgICBjb25zdCBmcnVzdHVtQ2VudGVyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgY29uc3QgY2FtZXJhVXAgPSBbMCwgMSwgMF07XHJcbiAgICBjb25zdCB2MyA9IG5ldyBBcnJheSgzKTtcclxuICAgIGxldCBsdk1hdHJpeCA9IG5ldyBBcnJheSgxNik7XHJcbiAgICBsZXQgbHBNYXRyaXggPSBuZXcgQXJyYXkoMTYpO1xyXG4gICAgbGV0IGNyb3BNYXRyaXggPSBuZXcgQXJyYXkoMTYpO1xyXG4gICAgY29uc3Qgc2NhbGVWID0gWzEsIDEsIDFdO1xyXG4gICAgY29uc3Qgb2Zmc2V0ViA9IFswLCAwLCAwXTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoZnJ1c3R1bSwgbGlnaHREaXIpIHtcclxuXHJcbiAgICAgICAgdmVjNC5zY2FsZShmcnVzdHVtQ2VudGVyLCBmcnVzdHVtQ2VudGVyLCAwKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gNDsgaSA8IGZydXN0dW0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmVjNC5hZGQoZnJ1c3R1bUNlbnRlciwgZnJ1c3R1bUNlbnRlciwgZnJ1c3R1bVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZlYzQuc2NhbGUoZnJ1c3R1bUNlbnRlciwgZnJ1c3R1bUNlbnRlciwgMSAvIDQpO1xyXG5cclxuICAgICAgICBsdk1hdHJpeCA9IG1hdDQubG9va0F0KGx2TWF0cml4LCB2ZWMzLmFkZCh2MywgZnJ1c3R1bUNlbnRlciwgdmVjMy5ub3JtYWxpemUodjMsIGxpZ2h0RGlyKSksIGZydXN0dW1DZW50ZXIsIGNhbWVyYVVwKTtcclxuICAgICAgICB2ZWM0LnRyYW5zZm9ybU1hdDQodHJhbnNmLCBmcnVzdHVtWzBdLCBsdk1hdHJpeCk7XHJcbiAgICAgICAgbGV0IG1pblogPSB0cmFuc2ZbMl0sIG1heFogPSB0cmFuc2ZbMl0sXHJcbiAgICAgICAgICAgIG1pblggPSB0cmFuc2ZbMF0sIG1heFggPSB0cmFuc2ZbMF0sXHJcbiAgICAgICAgICAgIG1pblkgPSB0cmFuc2ZbMV0sIG1heFkgPSB0cmFuc2ZbMV07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICAgICAgdHJhbnNmID0gdmVjNC50cmFuc2Zvcm1NYXQ0KHRyYW5zZiwgZnJ1c3R1bVtpXSwgbHZNYXRyaXgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZlsyXSA+IG1heFopIG1heFogPSB0cmFuc2ZbMl07XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2ZbMl0gPCBtaW5aKSBtaW5aID0gdHJhbnNmWzJdO1xyXG4gICAgICAgICAgICBpZiAodHJhbnNmWzBdID4gbWF4WCkgbWF4WCA9IHRyYW5zZlswXTtcclxuICAgICAgICAgICAgaWYgKHRyYW5zZlswXSA8IG1pblgpIG1pblggPSB0cmFuc2ZbMF07XHJcbiAgICAgICAgICAgIGlmICh0cmFuc2ZbMV0gPiBtYXhZKSBtYXhZID0gdHJhbnNmWzFdO1xyXG4gICAgICAgICAgICBpZiAodHJhbnNmWzFdIDwgbWluWSkgbWluWSA9IHRyYW5zZlsxXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOWPr+iDveWboOS4uuWcsOWbvuepuumXtOS4rXnovbTmmK/lj43lkJHnmoTvvIzmiYDku6XkuI7ljp/otLTkuI3lkIzvvIzpnIDopoHkuqTmjaJtaW5a5ZKMbWF4Wu+8jOWNs+S7pS1tYXha5L2c5Li66L+R6KOB6Z2i77yMLW1pblrkvZzkuLrov5zoo4HpnaJcclxuICAgICAgICBscE1hdHJpeCA9IG1hdDQub3J0aG8obHBNYXRyaXgsIC0xLCAxLCAtMSwgMSwgLW1heFosIC1taW5aKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2NhbGVYID0gc2NhbGVWWzBdID0gMiAvIChtYXhYIC0gbWluWCk7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVZID0gc2NhbGVWWzFdID0gLTIgLyAobWF4WSAtIG1pblkpO1xyXG4gICAgICAgIG9mZnNldFZbMF0gPSAtMC41ICogKG1pblggKyBtYXhYKSAqIHNjYWxlWDtcclxuICAgICAgICBvZmZzZXRWWzFdID0gLTAuNSAqIChtaW5ZICsgbWF4WSkgKiBzY2FsZVk7XHJcblxyXG4gICAgICAgIG1hdDQuaWRlbnRpdHkoY3JvcE1hdHJpeCk7XHJcbiAgICAgICAgbWF0NC50cmFuc2xhdGUoY3JvcE1hdHJpeCwgY3JvcE1hdHJpeCwgb2Zmc2V0Vik7XHJcbiAgICAgICAgbWF0NC5zY2FsZShjcm9wTWF0cml4LCBjcm9wTWF0cml4LCBzY2FsZVYpO1xyXG5cclxuICAgICAgICBjb25zdCBwcm9qTWF0cml4ID0gbWF0NC5tdWx0aXBseShscE1hdHJpeCwgY3JvcE1hdHJpeCwgbHBNYXRyaXgpO1xyXG4gICAgICAgIHJldHVybiBtYXQ0Lm11bHRpcGx5KG5ldyBBcnJheSgxNiksIHByb2pNYXRyaXgsIGx2TWF0cml4KTtcclxuICAgIH07XHJcbn0oKTtcblxudmFyIHNoYWRvd0Rpc3BsYXlGcmFnID0gXCJwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG5cXG5cXG5cXG51bmlmb3JtIHZlYzMgY29sb3I7XFxuXFxuXFxuXFxuI2luY2x1ZGUgPHZzbV9zaGFkb3dfZnJhZz5cXG5cXG5cXG5cXG52b2lkIG1haW4oKSB7XFxuXFxuICAgIGZsb2F0IHNoYWRvdyA9IHNoYWRvd19jb21wdXRlU2hhZG93KCk7XFxuXFxuICAgIGZsb2F0IGFscGhhID0gMS4wIC0gc2hhZG93O1xcblxcblx0Z2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvciwgYWxwaGEpO1xcblxcbn1cXG5cXG5cIjtcblxudmFyIHNoYWRvd0Rpc3BsYXlWZXJ0ID0gXCJhdHRyaWJ1dGUgdmVjMyBhUG9zaXRpb247XFxuXFxuXFxuXFxudW5pZm9ybSBtYXQ0IHByb2pWaWV3TW9kZWxNYXRyaXg7XFxuXFxuXFxuXFxudmFyeWluZyB2ZWM0IHZQb3NpdGlvbjtcXG5cXG5cXG5cXG4jaW5jbHVkZSA8dnNtX3NoYWRvd192ZXJ0PlxcblxcblxcblxcbnZvaWQgbWFpbigpIHtcXG5cXG4gICAgdmVjNCBwb3MgPSB2ZWM0KGFQb3NpdGlvbiwgMS4pO1xcblxcblxcblxcbiAgICBnbF9Qb3NpdGlvbiA9IHByb2pWaWV3TW9kZWxNYXRyaXggKiBwb3M7XFxuXFxuICAgIHZQb3NpdGlvbiA9IGdsX1Bvc2l0aW9uO1xcblxcblxcblxcbiAgICBzaGFkb3dfY29tcHV0ZVNoYWRvd1BhcnMocG9zKTtcXG5cXG59XFxuXFxuXCI7XG5cbmNsYXNzIFNoYWRvd0Rpc3BsYXlTaGFkZXIgZXh0ZW5kcyBNZXNoU2hhZGVyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih2aWV3cG9ydCwgZGVmaW5lcykge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgdmVydCA6IHNoYWRvd0Rpc3BsYXlWZXJ0LFxyXG4gICAgICAgICAgICBmcmFnIDogc2hhZG93RGlzcGxheUZyYWcsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zIDogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWUgOiAncHJvalZpZXdNb2RlbE1hdHJpeCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZSA6ICdmdW5jdGlvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgZm4gOiBmdW5jdGlvbiAoY29udGV4dCwgcHJvcHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJvalZpZXdNb2RlbE1hdHJpeCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXQ0Lm11bHRpcGx5KHByb2pWaWV3TW9kZWxNYXRyaXgsIHByb3BzWyd2aWV3TWF0cml4J10sIHByb3BzWydtb2RlbE1hdHJpeCddKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0NC5tdWx0aXBseShwcm9qVmlld01vZGVsTWF0cml4LCBwcm9wc1sncHJvak1hdHJpeCddLCBwcm9qVmlld01vZGVsTWF0cml4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2pWaWV3TW9kZWxNYXRyaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICd2c21fc2hhZG93X2xpZ2h0UHJvalZpZXdNb2RlbE1hdHJpeCcsXHJcbiAgICAgICAgICAgICAgICAndnNtX3NoYWRvd19zaGFkb3dNYXAnLFxyXG4gICAgICAgICAgICAgICAgJ3ZzbV9zaGFkb3dfdGhyZXNob2xkJywgLy/pu5jorqQwLjVcclxuICAgICAgICAgICAgICAgICdjb2xvcicsICd2c21fc2hhZG93X29wYWNpdHknXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGRlZmluZXMgOiBkZWZpbmVzIHx8IHtcclxuICAgICAgICAgICAgICAgICdVU0VfRVNNJzogMVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBleHRyYUNvbW1hbmRQcm9wczoge1xyXG4gICAgICAgICAgICAgICAgdmlld3BvcnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1lc2hDb21tYW5kKHJlZ2wsIG1lc2gpIHtcclxuICAgICAgICBpZiAoIXRoaXMuY29tbWFuZHNbJ3NoYWRvd19kaXNwbGF5J10pIHtcclxuICAgICAgICAgICAgdGhpcy5jb21tYW5kc1snc2hhZG93X2Rpc3BsYXknXSA9IHRoaXMuY3JlYXRlUkVHTENvbW1hbmQoXHJcbiAgICAgICAgICAgICAgICByZWdsLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIG1lc2guZ2V0QXR0cmlidXRlcygpLFxyXG4gICAgICAgICAgICAgICAgbnVsbCxcclxuICAgICAgICAgICAgICAgIG1lc2guZ2V0RWxlbWVudHMoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb21tYW5kc1snc2hhZG93X2Rpc3BsYXknXTtcclxuICAgIH1cclxufVxuXG5mdW5jdGlvbiBwYWNrMyhhcnJheSkge1xyXG4gICAgcmV0dXJuIGFycmF5WzJdICogMjU2ICogMjU2ICsgYXJyYXlbMV0gKiAyNTYgKyBhcnJheVswXTtcclxufVxyXG5cclxuY29uc3QgVUlOVDhfVklFVyA9IG5ldyBVaW50OEFycmF5KDQpO1xyXG5jb25zdCBGTE9BVF9WSUVXID0gbmV3IEZsb2F0MzJBcnJheShVSU5UOF9WSUVXLmJ1ZmZlcik7XHJcblxyXG5mdW5jdGlvbiBwYWNrRGVwdGgoYXJyYXkpIHtcclxuICAgIFVJTlQ4X1ZJRVdbMF0gPSBhcnJheVszXTtcclxuICAgIFVJTlQ4X1ZJRVdbMV0gPSBhcnJheVsyXTtcclxuICAgIFVJTlQ4X1ZJRVdbMl0gPSBhcnJheVsxXTtcclxuICAgIFVJTlQ4X1ZJRVdbM10gPSBhcnJheVswXTtcclxuICAgIHJldHVybiBGTE9BVF9WSUVXWzBdO1xyXG59XG5cbmNvbnN0IHVucGFja0Z1biA9IGBcclxuICAgIHZlYzMgdW5wYWNrKGhpZ2hwIGZsb2F0IGYpIHtcclxuICAgICAgICBoaWdocCB2ZWMzIGNvbG9yO1xyXG4gICAgICAgIGNvbG9yLmIgPSBmbG9vcihmIC8gNjU1MzYuMCk7XHJcbiAgICAgICAgY29sb3IuZyA9IGZsb29yKChmIC0gY29sb3IuYiAqIDY1NTM2LjApIC8gMjU2LjApO1xyXG4gICAgICAgIGNvbG9yLnIgPSBmIC0gZmxvb3IoY29sb3IuYiAqIDY1NTM2LjApIC0gZmxvb3IoY29sb3IuZyAqIDI1Ni4wKTtcclxuICAgICAgICAvLyBub3cgd2UgaGF2ZSBhIHZlYzMgd2l0aCB0aGUgMyBjb21wb25lbnRzIGluIHJhbmdlIFswLi4yNTVdLiBMZXQncyBub3JtYWxpemUgaXQhXHJcbiAgICAgICAgcmV0dXJuIGNvbG9yIC8gMjU1LjA7XHJcbiAgICB9XHJcbmA7XHJcblxyXG4vLyBwaWNraW5nIGlkIGFuZCBtZXNoIGlkLCBvbmx5IHdoZW4gbWVzaCdzIGNvdW50IGlzIDwgMjU2XHJcbmNvbnN0IGZyYWcwID0gYFxyXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xyXG5cclxuICAgIHZhcnlpbmcgZmxvYXQgdlBpY2tpbmdJZDtcclxuICAgIHZhcnlpbmcgZmxvYXQgdkZib19waWNraW5nX3Zpc2libGU7XHJcblxyXG4gICAgdW5pZm9ybSBmbG9hdCBmYm9fcGlja2luZ19tZXNoSWQ7XHJcblxyXG4gICAgJHt1bnBhY2tGdW59XHJcblxyXG4gICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgIGlmICh2RmJvX3BpY2tpbmdfdmlzaWJsZSA9PSAwLjApIHtcclxuICAgICAgICAgICAgZGlzY2FyZDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVucGFjayh2UGlja2luZ0lkKSwgZmJvX3BpY2tpbmdfbWVzaElkIC8gMjU1LjApO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuLy8gb25seSBtZXNoIGlkXHJcbmNvbnN0IGZyYWcxID0gYFxyXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xyXG5cclxuICAgIHVuaWZvcm0gaW50IGZib19waWNraW5nX21lc2hJZDtcclxuICAgIHZhcnlpbmcgZmxvYXQgdkZib19waWNraW5nX3Zpc2libGU7XHJcblxyXG4gICAgJHt1bnBhY2tGdW59XHJcblxyXG4gICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgIGlmICh2RmJvX3BpY2tpbmdfdmlzaWJsZSA9PSAwLjApIHtcclxuICAgICAgICAgICAgZGlzY2FyZDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVucGFjayhmbG9hdChmYm9fcGlja2luZ19tZXNoSWQpKSwgMS4wKTtcclxuICAgICAgICAvLyBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVucGFjayhmbG9hdCgzNSkpLCAxLjApO1xyXG4gICAgfVxyXG5gO1xyXG5cclxuLy8gb25seSBwaWNraW5nIGlkXHJcbmNvbnN0IGZyYWcyID0gYFxyXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xyXG5cclxuICAgIHZhcnlpbmcgZmxvYXQgdlBpY2tpbmdJZDtcclxuICAgIHZhcnlpbmcgZmxvYXQgdkZib19waWNraW5nX3Zpc2libGU7XHJcblxyXG4gICAgJHt1bnBhY2tGdW59XHJcblxyXG4gICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgIGlmICh2RmJvX3BpY2tpbmdfdmlzaWJsZSA9PSAwLjApIHtcclxuICAgICAgICAgICAgZGlzY2FyZDtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KHVucGFjayh2UGlja2luZ0lkKSwgMS4wKTtcclxuICAgIH1cclxuYDtcclxuXHJcbi8vZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbWlrb2xhbHlzZW5rby9nbHNsLXJlYWQtZmxvYXRcclxuY29uc3QgZGVwdGhGcmFnID0gYFxyXG4gICAgI2RlZmluZSBTSEFERVJfTkFNRSBkZXB0aFxyXG4gICAgI2RlZmluZSBGTE9BVF9NQVggIDEuNzAxNDExODRlMzhcclxuICAgICNkZWZpbmUgRkxPQVRfTUlOICAxLjE3NTQ5NDM1ZS0zOFxyXG5cclxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcclxuICAgIHZhcnlpbmcgZmxvYXQgdkZib19waWNraW5nX3ZpZXdaO1xyXG5cclxuICAgIGxvd3AgdmVjNCB1bnBhY2soaGlnaHAgZmxvYXQgdikge1xyXG4gICAgICAgIGhpZ2hwIGZsb2F0IGF2ID0gYWJzKHYpO1xyXG5cclxuICAgICAgICAvL0hhbmRsZSBzcGVjaWFsIGNhc2VzXHJcbiAgICAgICAgaWYoYXYgPCBGTE9BVF9NSU4pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcclxuICAgICAgICB9IGVsc2UgaWYodiA+IEZMT0FUX01BWCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmVjNCgxMjcuMCwgMTI4LjAsIDAuMCwgMC4wKSAvIDI1NS4wO1xyXG4gICAgICAgIH0gZWxzZSBpZih2IDwgLUZMT0FUX01BWCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmVjNCgyNTUuMCwgMTI4LjAsIDAuMCwgMC4wKSAvIDI1NS4wO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGlnaHAgdmVjNCBjID0gdmVjNCgwLDAsMCwwKTtcclxuXHJcbiAgICAgICAgLy9Db21wdXRlIGV4cG9uZW50IGFuZCBtYW50aXNzYVxyXG4gICAgICAgIGhpZ2hwIGZsb2F0IGUgPSBmbG9vcihsb2cyKGF2KSk7XHJcbiAgICAgICAgaGlnaHAgZmxvYXQgbSA9IGF2ICogcG93KDIuMCwgLWUpIC0gMS4wO1xyXG5cclxuICAgICAgICAvL1VucGFjayBtYW50aXNzYVxyXG4gICAgICAgIGNbMV0gPSBmbG9vcigxMjguMCAqIG0pO1xyXG4gICAgICAgIG0gLT0gY1sxXSAvIDEyOC4wO1xyXG4gICAgICAgIGNbMl0gPSBmbG9vcigzMjc2OC4wICogbSk7XHJcbiAgICAgICAgbSAtPSBjWzJdIC8gMzI3NjguMDtcclxuICAgICAgICBjWzNdID0gZmxvb3IoODM4ODYwOC4wICogbSk7XHJcblxyXG4gICAgICAgIC8vVW5wYWNrIGV4cG9uZW50XHJcbiAgICAgICAgaGlnaHAgZmxvYXQgZWJpYXMgPSBlICsgMTI3LjA7XHJcbiAgICAgICAgY1swXSA9IGZsb29yKGViaWFzIC8gMi4wKTtcclxuICAgICAgICBlYmlhcyAtPSBjWzBdICogMi4wO1xyXG4gICAgICAgIGNbMV0gKz0gZmxvb3IoZWJpYXMpICogMTI4LjA7XHJcblxyXG4gICAgICAgIC8vVW5wYWNrIHNpZ24gYml0XHJcbiAgICAgICAgY1swXSArPSAxMjguMCAqIHN0ZXAoMC4wLCAtdik7XHJcblxyXG4gICAgICAgIC8vU2NhbGUgYmFjayB0byByYW5nZVxyXG4gICAgICAgIHJldHVybiBjIC8gMjU1LjA7XHJcbiAgICB9XHJcblxyXG4gICAgdm9pZCBtYWluKCkge1xyXG4gICAgICAgIGdsX0ZyYWdDb2xvciA9IHVucGFjayh2RmJvX3BpY2tpbmdfdmlld1opO1xyXG4gICAgICAgIC8vIGdsX0ZyYWdDb2xvciA9IHVucGFjaygzNDY3OC4zNDU2Nzg5KTtcclxuICAgIH1cclxuYDtcclxuXHJcblxyXG5jbGFzcyBGQk9SYXlQaWNraW5nIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXJlciwgeyB2ZXJ0LCB1bmlmb3JtcywgZGVmaW5lcywgZXh0cmFDb21tYW5kUHJvcHMgfSwgZmJvKSB7XHJcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgICAgICB0aGlzLl9mYm8gPSBmYm87XHJcbiAgICAgICAgdGhpcy5fY2xlYXJGYm8oZmJvKTtcclxuICAgICAgICB0aGlzLl92ZXJ0ID0gdmVydDtcclxuICAgICAgICB0aGlzLl91bmlmb3JtcyA9IHVuaWZvcm1zO1xyXG4gICAgICAgIHRoaXMuX2RlZmluZXMgPSBkZWZpbmVzO1xyXG4gICAgICAgIHRoaXMuX2V4dHJhQ29tbWFuZFByb3BzID0gZXh0cmFDb21tYW5kUHJvcHM7XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lc2hlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2luaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdCgpIHtcclxuICAgICAgICBjb25zdCB1bmlmb3JtcyA9IFsnZmJvX3BpY2tpbmdfbWVzaElkJ107XHJcbiAgICAgICAgaWYgKHRoaXMuX3VuaWZvcm1zKSB7XHJcbiAgICAgICAgICAgIHVuaWZvcm1zLnB1c2goLi4udGhpcy5fdW5pZm9ybXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkZWZpbmVzID0ge1xyXG4gICAgICAgICAgICAnRU5BQkxFX1BJQ0tJTkcnIDogMSxcclxuICAgICAgICAgICAgJ1VTRV9QSUNLSU5HX0lEJyA6IDFcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmICh0aGlzLl9kZWZpbmVzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcCBpbiB0aGlzLl9kZWZpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICBkZWZpbmVzW3BdID0gdGhpcy5fZGVmaW5lc1twXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2ZXJ0ID0gdGhpcy5fdmVydCxcclxuICAgICAgICAgICAgZXh0cmFDb21tYW5kUHJvcHMgPSB0aGlzLl9leHRyYUNvbW1hbmRQcm9wcztcclxuICAgICAgICB0aGlzLl9zaGFkZXIwID0gbmV3IE1lc2hTaGFkZXIoe1xyXG4gICAgICAgICAgICB2ZXJ0LFxyXG4gICAgICAgICAgICBmcmFnIDogZnJhZzAsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zLFxyXG4gICAgICAgICAgICBkZWZpbmVzLFxyXG4gICAgICAgICAgICBleHRyYUNvbW1hbmRQcm9wc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuX3NoYWRlcjIgPSBuZXcgTWVzaFNoYWRlcih7XHJcbiAgICAgICAgICAgIHZlcnQsXHJcbiAgICAgICAgICAgIGZyYWcgOiBmcmFnMixcclxuICAgICAgICAgICAgdW5pZm9ybXMsXHJcbiAgICAgICAgICAgIGRlZmluZXMsXHJcbiAgICAgICAgICAgIGV4dHJhQ29tbWFuZFByb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lczEgPSB7XHJcbiAgICAgICAgICAgICdFTkFCTEVfUElDS0lORycgOiAxLFxyXG4gICAgICAgICAgICAnVVNFX1BJQ0tJTkdfSUQnIDogMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKHRoaXMuX2RlZmluZXMpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwIGluIHRoaXMuX2RlZmluZXMpIHtcclxuICAgICAgICAgICAgICAgIGRlZmluZXMxW3BdID0gdGhpcy5fZGVmaW5lc1twXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9zaGFkZXIxID0gbmV3IE1lc2hTaGFkZXIoe1xyXG4gICAgICAgICAgICB2ZXJ0LFxyXG4gICAgICAgICAgICBmcmFnIDogZnJhZzEsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zLFxyXG4gICAgICAgICAgICBkZWZpbmVzIDogZGVmaW5lczEsXHJcbiAgICAgICAgICAgIGV4dHJhQ29tbWFuZFByb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fZGVwdGhTaGFkZXIgPSBuZXcgTWVzaFNoYWRlcih7XHJcbiAgICAgICAgICAgIHZlcnQsXHJcbiAgICAgICAgICAgIGZyYWcgOiBkZXB0aEZyYWcsXHJcbiAgICAgICAgICAgIHVuaWZvcm1zLFxyXG4gICAgICAgICAgICBkZWZpbmVzIDogZGVmaW5lczEsXHJcbiAgICAgICAgICAgIGV4dHJhQ29tbWFuZFByb3BzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5fc2NlbmUgPSBuZXcgU2NlbmUoKTtcclxuICAgICAgICB0aGlzLl9zY2VuZTEgPSBuZXcgU2NlbmUoKTtcclxuICAgIH1cclxuXHJcbiAgICBmaWx0ZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgbWVzaGVzIHRvIGZibyBmb3IgZnVydGhlciBwaWNraW5nXHJcbiAgICAgKiBAcGFyYW0ge01lc2hbXX0gbWVzaGVzIC0gbWVzaGVzIHRvIHJlbmRlclxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHVuaWZvcm1zIC0gdW5pZm9ybSB2YWx1ZXNcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb25jZSAtIGlmIGl0J3MgYW4gb25lIHRpbWUgcmVuZGVyaW5nIHdoaWNoIGNhbiBnYWluIHNvbWUgcGVyZm9ybWFuY2UgaW1wcm92ZW1lbnRcclxuICAgICAqL1xyXG4gICAgcmVuZGVyKG1lc2hlcywgdW5pZm9ybXMsIG9uY2UgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICghbWVzaGVzIHx8ICFtZXNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBmYm8gPSB0aGlzLl9mYm87XHJcblxyXG4gICAgICAgIGlmIChvbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3NjZW5lLnNldE1lc2hlcyhtZXNoZXMpO1xyXG4gICAgICAgIGNvbnN0IHNoYWRlciA9IHRoaXMuX2dldFNoYWRlcihtZXNoZXMsIG9uY2UpO1xyXG4gICAgICAgIHNoYWRlci5maWx0ZXIgPSB0aGlzLmZpbHRlcjtcclxuICAgICAgICBpZiAodGhpcy5fY3VycmVudFNoYWRlciAmJiBzaGFkZXIgIT09IHRoaXMuX2N1cnJlbnRTaGFkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jdXJyZW50U2hhZGVyID0gc2hhZGVyO1xyXG4gICAgICAgIG1lc2hlcy5mb3JFYWNoKChtLCBpZHgpID0+IHtcclxuICAgICAgICAgICAgbS5zZXRVbmlmb3JtKCdmYm9fcGlja2luZ19tZXNoSWQnLCBpZHggKyB0aGlzLl9jdXJyZW50TWVzaGVzLmxlbmd0aCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudE1lc2hlcy5wdXNoKG1lc2hlc1tpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbmRlcihzaGFkZXIsIHVuaWZvcm1zLCB0aGlzLl9zY2VuZSwgZmJvKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBwaWNrKHgsIHksIHRvbGVyYW5jZSwgdW5pZm9ybXMsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IHNoYWRlciA9IHRoaXMuX2N1cnJlbnRTaGFkZXI7XHJcbiAgICAgICAgY29uc3QgbWVzaGVzID0gdGhpcy5fY3VycmVudE1lc2hlcztcclxuICAgICAgICBpZiAoIXNoYWRlciB8fCAhbWVzaGVzIHx8ICFtZXNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBwaWNraW5nSWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgbWVzaElkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHBvaW50IDogbnVsbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgeCA9IE1hdGgucm91bmQoeCk7XHJcbiAgICAgICAgeSA9IE1hdGgucm91bmQoeSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZibyA9IHRoaXMuX2ZibztcclxuXHJcbiAgICAgICAgaWYgKHggPCAwIHx8IHggPiBmYm8ud2lkdGggfHxcclxuICAgICAgICAgICAgeSA8IDAgfHwgeSA+IGZiby5oZWlnaHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHBpY2tpbmdJZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBtZXNoSWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgcG9pbnQgOiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IHB4LCBweSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5fZ2V0UGFyYW1zKHgsIHksIHRvbGVyYW5jZSwgZmJvKTtcclxuICAgICAgICBjb25zdCBwaXhlbHMgPSBuZXcgVWludDhBcnJheSg0ICogd2lkdGggKiBoZWlnaHQpO1xyXG5cclxuICAgICAgICBjb25zdCByZWdsID0gdGhpcy5fcmVuZGVyZXIucmVnbDtcclxuICAgICAgICBjb25zdCBkYXRhID0gcmVnbC5yZWFkKHtcclxuICAgICAgICAgICAgZGF0YTogcGl4ZWxzLFxyXG4gICAgICAgICAgICB4OiBweCxcclxuICAgICAgICAgICAgeTogcHksXHJcbiAgICAgICAgICAgIGZyYW1lYnVmZmVyIDogZmJvLFxyXG4gICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IG1lc2hJZHMgPSBbXTtcclxuICAgICAgICBsZXQgcGlja2luZ0lkcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHBpY2tpbmdJZCwgbWVzaElkIH0gPSB0aGlzLl9wYWNrRGF0YShkYXRhLnN1YmFycmF5KGksIGkgKyA0KSwgc2hhZGVyKTtcclxuICAgICAgICAgICAgbWVzaElkcy5wdXNoKG1lc2hJZCk7XHJcbiAgICAgICAgICAgIHBpY2tpbmdJZHMucHVzaChwaWNraW5nSWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdmlzaXRlZCA9IHt9O1xyXG4gICAgICAgIGNvbnN0IHBpY2tlZE1lc2hlcyA9IG1lc2hJZHMuZmlsdGVyKGlkID0+IHtcclxuICAgICAgICAgICAgaWYgKGlkICE9IG51bGwgJiYgIXZpc2l0ZWRbaWRdKSB7XHJcbiAgICAgICAgICAgICAgICB2aXNpdGVkW2lkXSA9IDE7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfSkubWFwKGlkID0+IG1lc2hlc1tpZF0pO1xyXG5cclxuICAgICAgICBpZiAobWVzaElkcy5sZW5ndGggJiYgc2hhZGVyID09PSB0aGlzLl9zaGFkZXIxICYmIG1lc2hlc1swXS5nZW9tZXRyeS5kYXRhWydhUGlja2luZ0lkJ10pIHtcclxuICAgICAgICAgICAgcGlja2luZ0lkcyA9IHRoaXMuX2dldFBpY2tpbmdJZChweCwgcHksIHdpZHRoLCBoZWlnaHQsIHBpeGVscywgcGlja2VkTWVzaGVzLCB1bmlmb3Jtcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgICAgICBpZiAobWVzaElkcy5sZW5ndGggJiYgb3B0aW9uc1sncmV0dXJuUG9pbnQnXSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IHZpZXdNYXRyaXgsIHByb2pNYXRyaXggfSA9IG9wdGlvbnM7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlcHRocyA9IHRoaXMuX3BpY2tEZXB0aChweCwgcHksIHdpZHRoLCBoZWlnaHQsIHBpeGVscywgcGlja2VkTWVzaGVzLCB1bmlmb3Jtcyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwdGhzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVwdGhzW2ldICYmIG1lc2hJZHNbaV0gIT0gbnVsbCAmJiBwaWNraW5nSWRzW2ldICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludCA9IHRoaXMuX2dldFdvcmxkUG9zKHgsIHksIGRlcHRoc1tpXSwgdmlld01hdHJpeCwgcHJvak1hdHJpeCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwb2ludHMucHVzaChudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/ku454LHnlvIDlp4vku47lhoXlvoDlpJbpgY3ljobvvIzkvJjlhYjmtYvor5Xnprt4LHnovoPov5HnmoTngrlcclxuICAgICAgICBjb25zdCBpdGVyRGlzdHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSB0b2xlcmFuY2U7IGkrKykge1xyXG4gICAgICAgICAgICBpdGVyRGlzdHMucHVzaChpKTtcclxuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVyRGlzdHMucHVzaCgtaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyRGlzdHMubGVuZ3RoOyBpKyspIHsgLy/ooYxcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBpdGVyRGlzdHMubGVuZ3RoOyBqKyspIHsgLy/liJdcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlpID0gKGl0ZXJEaXN0c1tqXSArIHRvbGVyYW5jZSkgKiB3aWR0aCArIChpdGVyRGlzdHNbaV0gKyB0b2xlcmFuY2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1lc2hJZHNbaWldICE9IG51bGwgJiYgcGlja2luZ0lkc1tpaV0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc2hJZDogbWVzaElkc1tpaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBpY2tpbmdJZDogcGlja2luZ0lkc1tpaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50OiBwb2ludHNbaWldIHx8IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBwaWNraW5nSWQ6IG51bGwsXHJcbiAgICAgICAgICAgIG1lc2hJZDogbnVsbCxcclxuICAgICAgICAgICAgcG9pbnQ6IG51bGxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9mYm8pIHtcclxuICAgICAgICAgICAgdGhpcy5fY2xlYXJGYm8odGhpcy5fZmJvKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY3VycmVudE1lc2hlcyA9IFtdO1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9jdXJyZW50U2hhZGVyO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE1lc2hBdChpZHgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2N1cnJlbnRNZXNoZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9jdXJyZW50TWVzaGVzW2lkeF07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVuZGVyZWRNZXNoZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2N1cnJlbnRNZXNoZXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuX3NoYWRlcjApIHtcclxuICAgICAgICAgICAgdGhpcy5fc2hhZGVyMC5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9zaGFkZXIxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlcjEuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5fc2hhZGVyMikge1xyXG4gICAgICAgICAgICB0aGlzLl9zaGFkZXIyLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuX3NjZW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NjZW5lLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLl9zY2VuZTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2NlbmUxLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9nZXRXb3JsZFBvcyh4LCB5LCBkZXB0aCwgdmlld01hdHJpeCwgcHJvak1hdHJpeCkge1xyXG4gICAgICAgIGNvbnN0IGZibyA9IHRoaXMuX2ZibztcclxuICAgICAgICBjb25zdCBtYXQgPSBbXTtcclxuXHJcbiAgICAgICAgY29uc3QgdzIgPSBmYm8ud2lkdGggLyAyIHx8IDEsIGgyID0gZmJvLmhlaWdodCAvIDIgfHwgMTtcclxuICAgICAgICBjb25zdCBjcDAgPSBbKHggLSB3MikgLyB3MiwgKGgyIC0geSkgLyBoMiwgMCwgMV0sXHJcbiAgICAgICAgICAgIGNwMSA9IFsoeCAtIHcyKSAvIHcyLCAoaDIgLSB5KSAvIGgyLCAxLCAxXTtcclxuXHJcbiAgICAgICAgY29uc3QgaW52ZXJzZVByb2pNYXRyaXggPSBtYXQ0LmludmVydChtYXQsIHByb2pNYXRyaXgpO1xyXG4gICAgICAgIGNvbnN0IHZjcDAgPSBbXSwgdmNwMSA9IFtdO1xyXG4gICAgICAgIGFwcGx5TWF0cml4KHZjcDAsIGNwMCwgaW52ZXJzZVByb2pNYXRyaXgpO1xyXG4gICAgICAgIGFwcGx5TWF0cml4KHZjcDEsIGNwMSwgaW52ZXJzZVByb2pNYXRyaXgpO1xyXG4gICAgICAgIGNvbnN0IG4gPSAtdmNwMFsyXSwgZiA9IC12Y3AxWzJdO1xyXG4gICAgICAgIGNvbnN0IHQgPSAoZGVwdGggLSBuKSAvIChmIC0gbik7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb2pWaWV3TWF0cml4ID0gbWF0NC5tdWx0aXBseShtYXQsIHByb2pNYXRyaXgsIHZpZXdNYXRyaXgpO1xyXG4gICAgICAgIGNvbnN0IGludmVyc2VQcm9qVmlld01hdHJpeCA9IG1hdDQuaW52ZXJ0KG1hdCwgcHJvalZpZXdNYXRyaXgpO1xyXG4gICAgICAgIGNvbnN0IG5lYXIgPSBhcHBseU1hdHJpeChjcDAsIGNwMCwgaW52ZXJzZVByb2pWaWV3TWF0cml4KSxcclxuICAgICAgICAgICAgZmFyID0gYXBwbHlNYXRyaXgoY3AxLCBjcDEsIGludmVyc2VQcm9qVmlld01hdHJpeCk7XHJcblxyXG4gICAgICAgIHJldHVybiBbaW50ZXJwb2xhdGUobmVhclswXSwgZmFyWzBdLCB0KSwgaW50ZXJwb2xhdGUobmVhclsxXSwgZmFyWzFdLCB0KSwgaW50ZXJwb2xhdGUobmVhclsyXSwgZmFyWzJdLCB0KV07XHJcbiAgICB9XHJcblxyXG4gICAgX2dldFBpY2tpbmdJZCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBwaXhlbHMsIG1lc2hlcywgdW5pZm9ybXMpIHtcclxuICAgICAgICBjb25zdCByZWdsID0gdGhpcy5fcmVuZGVyZXIucmVnbDtcclxuICAgICAgICBjb25zdCBmYm8xID0gdGhpcy5fZ2V0RkJPMSgpO1xyXG4gICAgICAgIHRoaXMuX2NsZWFyRmJvKGZibzEpO1xyXG4gICAgICAgIHRoaXMuX3NjZW5lMS5zZXRNZXNoZXMobWVzaGVzKTtcclxuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXIodGhpcy5fc2hhZGVyMiwgdW5pZm9ybXMsIHRoaXMuX3NjZW5lMSwgZmJvMSk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHJlZ2wucmVhZCh7XHJcbiAgICAgICAgICAgIGRhdGE6IHBpeGVscyxcclxuICAgICAgICAgICAgeCwgeSxcclxuICAgICAgICAgICAgZnJhbWVidWZmZXIgOiBmYm8xLFxyXG4gICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgaWRzID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIGlkcy5wdXNoKHBhY2szKGRhdGEuc3ViYXJyYXkoaSwgaSArIDQpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpZHM7XHJcbiAgICB9XHJcblxyXG4gICAgX3BpY2tEZXB0aCh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBwaXhlbHMsIG1lc2hlcywgdW5pZm9ybXMpIHtcclxuICAgICAgICBjb25zdCByZWdsID0gdGhpcy5fcmVuZGVyZXIucmVnbDtcclxuICAgICAgICBjb25zdCBmYm8xID0gdGhpcy5fZ2V0RkJPMSgpO1xyXG4gICAgICAgIC8vc2Vjb25kIHJlbmRlciB0byBmaW5kIGRlcHRoIHZhbHVlIG9mIHBvaW50XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IHsgY291bnQsIG9mZnNldCB9ID0gdGhpcy5fZ2V0UGFydGlhbE1lc2hGb3JQaWNraW5nKG1lc2gsIHBpY2tpbmdJZCk7XHJcblxyXG4gICAgICAgIC8vIGNvbnN0IGdlb21ldHJ5ID0gbWVzaC5nZW9tZXRyeTtcclxuICAgICAgICAvLyBnZW9tZXRyeS5zZXREcmF3Q291bnQoY291bnQpO1xyXG4gICAgICAgIC8vIGdlb21ldHJ5LnNldERyYXdPZmZzZXQob2Zmc2V0KTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2NlbmUxLnNldE1lc2hlcyhtZXNoZXMpO1xyXG4gICAgICAgIHRoaXMuX2NsZWFyRmJvKGZibzEpO1xyXG5cclxuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXIodGhpcy5fZGVwdGhTaGFkZXIsIHVuaWZvcm1zLCB0aGlzLl9zY2VuZTEsIGZibzEpO1xyXG5cclxuICAgICAgICAvLyBnZW9tZXRyeS5zZXREcmF3Q291bnQobnVsbCk7XHJcbiAgICAgICAgLy8gZ2VvbWV0cnkuc2V0RHJhd09mZnNldCgwKTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHJlZ2wucmVhZCh7XHJcbiAgICAgICAgICAgIGRhdGE6IHBpeGVscyxcclxuICAgICAgICAgICAgeCwgeSxcclxuICAgICAgICAgICAgZnJhbWVidWZmZXIgOiBmYm8xLFxyXG4gICAgICAgICAgICB3aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGRlcHRocyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gNCkge1xyXG4gICAgICAgICAgICBkZXB0aHMucHVzaChwYWNrRGVwdGgoZGF0YS5zdWJhcnJheShpLCBpICsgNCkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGRlcHRocztcclxuICAgIH1cclxuXHJcbiAgICBfcGFja0RhdGEoZGF0YSwgc2hhZGVyKSB7XHJcbiAgICAgICAgaWYgKGRhdGFbMF0gPT09IDI1NSAmJiBkYXRhWzFdID09PSAyNTUgJiZcclxuICAgICAgICAgICAgZGF0YVsyXSA9PT0gMjU1ICYmIGRhdGFbM10gPT09IDI1NSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbWVzaElkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgIHBpY2tpbmdJZCA6IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBpY2tpbmdJZCA9IG51bGw7XHJcbiAgICAgICAgbGV0IG1lc2hJZCA9IG51bGw7XHJcbiAgICAgICAgaWYgKHNoYWRlciA9PT0gdGhpcy5fc2hhZGVyMSkge1xyXG4gICAgICAgICAgICAvL29ubHkgZmJvX3BpY2tpbmdfbWVzaElkXHJcbiAgICAgICAgICAgIG1lc2hJZCA9IHBhY2szKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc2hhZGVyID09PSB0aGlzLl9zaGFkZXIwKSB7XHJcbiAgICAgICAgICAgIG1lc2hJZCA9IGRhdGFbM107XHJcbiAgICAgICAgICAgIHBpY2tpbmdJZCA9IHBhY2szKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG1lc2hJZCA9IG51bGw7XHJcbiAgICAgICAgICAgIHBpY2tpbmdJZCA9IHBhY2szKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBtZXNoSWQsIHBpY2tpbmdJZCB9O1xyXG4gICAgfVxyXG5cclxuICAgIF9jbGVhckZibyhmcmFtZWJ1ZmZlcikge1xyXG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlZ2wuY2xlYXIoe1xyXG4gICAgICAgICAgICBjb2xvcjogWzEsIDEsIDEsIDFdLFxyXG4gICAgICAgICAgICBkZXB0aDogMSxcclxuICAgICAgICAgICAgc3RlbmNpbDogMCxcclxuICAgICAgICAgICAgZnJhbWVidWZmZXJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0U2hhZGVyKG1lc2hlcywgb25jZSkge1xyXG4gICAgICAgIGlmIChvbmNlICYmIG1lc2hlcy5sZW5ndGggPCAyNTYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoYWRlcjA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9zaGFkZXIxO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRGQk8xKCkge1xyXG4gICAgICAgIGNvbnN0IHJlZ2wgPSB0aGlzLl9yZW5kZXJlci5yZWdsO1xyXG4gICAgICAgIGNvbnN0IGZibyA9IHRoaXMuX2ZibztcclxuICAgICAgICBpZiAoIXRoaXMuX2ZibzEpIHtcclxuICAgICAgICAgICAgdGhpcy5fZmJvMSA9IHJlZ2wuZnJhbWVidWZmZXIoZmJvLndpZHRoLCBmYm8uaGVpZ2h0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2ZibzEud2lkdGggIT09IGZiby53aWR0aCB8fCB0aGlzLl9mYm8xLmhlaWdodCAhPT0gZmJvLmhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLl9mYm8xLnJlc2l6ZShmYm8ud2lkdGgsIGZiby5oZWlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fZmJvMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBfZ2V0UGFydGlhbE1lc2hGb3JQaWNraW5nKG1lc2gsIHBpY2tpbmdJZCkge1xyXG4gICAgLy8gICAgIGlmICghbWVzaC5nZW9tZXRyeS5yYXdEYXRhIHx8ICFtZXNoLmdlb21ldHJ5LnJhd0RhdGEuYVBpY2tpbmdJZCkge1xyXG4gICAgLy8gICAgICAgICByZXR1cm4geyBjb3VudCA6IG51bGwsIG9mZnNldCA6IDAgfTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyAgICAgbGV0IHBpY2tpbmdNYXAgPSBtZXNoLl9waWNraW5nSWRNYXA7XHJcbiAgICAvLyAgICAgaWYgKCFwaWNraW5nTWFwKSB7XHJcbiAgICAvLyAgICAgICAgIGNvbnN0IHBpY2tpbmdJZHMgPSBtZXNoLmdlb21ldHJ5LnJhd0RhdGEuYVBpY2tpbmdJZDtcclxuICAgIC8vICAgICAgICAgY29uc3QgbWFwID0ge307XHJcbiAgICAvLyAgICAgICAgIGxldCBvZmZzZXQgPSAwO1xyXG4gICAgLy8gICAgICAgICBsZXQgcHJldiA9IHBpY2tpbmdJZHNbMF07XHJcbiAgICAvLyAgICAgICAgIGZvciAobGV0IGkgPSAxLCBsID0gcGlja2luZ0lkcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIC8vICAgICAgICAgICAgIGlmIChwaWNraW5nSWRzW2ldICE9PSBwcmV2IHx8IGkgPT09IGwgLSAxKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgbWFwW3ByZXZdID0ge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICBvZmZzZXQsXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNvdW50IDogaSA9PT0gbCAtIDEgPyBsIC0gb2Zmc2V0IDogaSAtIG9mZnNldFxyXG4gICAgLy8gICAgICAgICAgICAgICAgIH07XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gaTtcclxuICAgIC8vICAgICAgICAgICAgICAgICBwcmV2ID0gcGlja2luZ0lkc1tpXTtcclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICBwaWNraW5nTWFwID0gbWVzaC5fcGlja2luZ0lkTWFwID0gbWFwO1xyXG4gICAgLy8gICAgIH1cclxuXHJcbiAgICAvLyAgICAgcmV0dXJuIHBpY2tpbmdNYXBbcGlja2luZ0lkXTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBfZ2V0UGFyYW1zKHB4LCBweSwgdG9sZXJhbmNlLCBmYm8pIHtcclxuICAgICAgICBweCAtPSB0b2xlcmFuY2U7XHJcbiAgICAgICAgcHkgPSBmYm8uaGVpZ2h0IC0gcHk7XHJcbiAgICAgICAgcHkgLT0gdG9sZXJhbmNlO1xyXG5cclxuICAgICAgICBsZXQgd2lkdGggPSAyICogdG9sZXJhbmNlICsgMTtcclxuICAgICAgICBsZXQgaGVpZ2h0ID0gMiAqIHRvbGVyYW5jZSArIDE7XHJcblxyXG4gICAgICAgIC8vICAgICAgICBfX19fXHJcbiAgICAgICAgLy8gICAgICB8ICAgICAgfFxyXG4gICAgICAgIC8vaGVpZ2h0fCAgeCx5IHxcclxuICAgICAgICAvLyAgICAgIHwgX19fXyB8IHdpZHRoXHJcbiAgICAgICAgLy8gKHB4LCBweSlcclxuXHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBweCArIHdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHRvcCA9IHB5ICsgaGVpZ2h0O1xyXG4gICAgICAgIGlmIChyaWdodCA+IGZiby53aWR0aCkge1xyXG4gICAgICAgICAgICB3aWR0aCAtPSByaWdodCAtIGZiby53aWR0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRvcCA+IGZiby5oZWlnaHQpIHtcclxuICAgICAgICAgICAgaGVpZ2h0IC09IHRvcCAtIGZiby5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBweCA9IHB4IDwgMCA/IDAgOiBweDtcclxuICAgICAgICBweSA9IHB5IDwgMCA/IDAgOiBweTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHsgcHgsIHB5LCB3aWR0aCwgaGVpZ2h0IH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFwcGx5TWF0cml4KG91dCwgdiwgZSkge1xyXG4gICAgY29uc3QgeCA9IHZbMF0sIHkgPSB2WzFdLCB6ID0gdlsyXTtcclxuICAgIC8vIGNvbnN0IGUgPSBpbjtcclxuXHJcbiAgICBjb25zdCB3ID0gMSAvIChlWyAzIF0gKiB4ICsgZVsgNyBdICogeSArIGVbIDExIF0gKiB6ICsgZVsgMTUgXSk7XHJcblxyXG4gICAgb3V0WzBdID0gKGVbIDAgXSAqIHggKyBlWyA0IF0gKiB5ICsgZVsgOCBdICogeiArIGVbIDEyIF0pICogdztcclxuICAgIG91dFsxXSA9IChlWyAxIF0gKiB4ICsgZVsgNSBdICogeSArIGVbIDkgXSAqIHogKyBlWyAxMyBdKSAqIHc7XHJcbiAgICBvdXRbMl0gPSAoZVsgMiBdICogeCArIGVbIDYgXSAqIHkgKyBlWyAxMCBdICogeiArIGVbIDE0IF0pICogdztcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG59XG5cbmNvbnN0IEhEUiA9IHsgcGFyc2VIRFI6IHBhcnNlUkdCRSB9O1xyXG5cclxuY29uc3QgcGJyID0ge1xyXG4gICAgUEJSSGVscGVyLFxyXG4gICAgTGl0U2hhZGVyLFxyXG4gICAgTGl0TWF0ZXJpYWwsXHJcbiAgICBDbG90aFNoYWRlcixcclxuICAgIENsb3RoTWF0ZXJpYWwsXHJcbiAgICBTdWJzdXJmYWNlU2hhZGVyOiBDbG90aFNoYWRlciQxLFxyXG4gICAgU3Vic3VyZmFjZU1hdGVyaWFsOiBDbG90aE1hdGVyaWFsJDFcclxufTtcblxuZXhwb3J0IHsgVGV4dHVyZSBhcyBBYnN0cmFjdFRleHR1cmUsIERlZmVycmVkUmVuZGVyZXIsIEZCT1JheVBpY2tpbmcsIEdlb21ldHJ5LCBIRFIsIEluc3RhbmNlZE1lc2gsIE1hdGVyaWFsJDEgYXMgTWF0ZXJpYWwsIE1lc2gsIE1lc2hTaGFkZXIsIFBob25nTWF0ZXJpYWwsIFBob25nU2hhZGVyLCBQbGFuZSwgUmVuZGVyZXIsIFJlc291cmNlTG9hZGVyJDEgYXMgUmVzb3VyY2VMb2FkZXIsIFNjZW5lLCBTaGFkZXIsIFNoYWRvd0Rpc3BsYXlTaGFkZXIsIFNoYWRvd1Bhc3MsIFNreWJveEhlbHBlciwgVGV4dHVyZTJELCBUZXh0dXJlQ3ViZSwgVXRpbCwgV2lyZUZyYW1lTWF0ZXJpYWwsIFdpcmVmcmFtZVNoYWRlciwgcGJyIH07XG4iLCIvKipcclxuICogQ29tbW9uIHV0aWxpdGllc1xyXG4gKiBAbW9kdWxlIGdsTWF0cml4XHJcbiAqL1xyXG5cclxuLy8gQ29uZmlndXJhdGlvbiBDb25zdGFudHNcclxuZXhwb3J0IHZhciBFUFNJTE9OID0gMC4wMDAwMDE7XHJcbmV4cG9ydCB2YXIgQVJSQVlfVFlQRSA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgIT09ICd1bmRlZmluZWQnID8gRmxvYXQzMkFycmF5IDogQXJyYXk7XHJcbmV4cG9ydCB2YXIgUkFORE9NID0gTWF0aC5yYW5kb207XHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgdHlwZSBvZiBhcnJheSB1c2VkIHdoZW4gY3JlYXRpbmcgbmV3IHZlY3RvcnMgYW5kIG1hdHJpY2VzXHJcbiAqXHJcbiAqIEBwYXJhbSB7VHlwZX0gdHlwZSBBcnJheSB0eXBlLCBzdWNoIGFzIEZsb2F0MzJBcnJheSBvciBBcnJheVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldE1hdHJpeEFycmF5VHlwZSh0eXBlKSB7XHJcbiAgQVJSQVlfVFlQRSA9IHR5cGU7XHJcbn1cclxuXHJcbnZhciBkZWdyZWUgPSBNYXRoLlBJIC8gMTgwO1xyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgRGVncmVlIFRvIFJhZGlhblxyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBBbmdsZSBpbiBEZWdyZWVzXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdG9SYWRpYW4oYSkge1xyXG4gIHJldHVybiBhICogZGVncmVlO1xyXG59XHJcblxyXG4vKipcclxuICogVGVzdHMgd2hldGhlciBvciBub3QgdGhlIGFyZ3VtZW50cyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgdmFsdWUsIHdpdGhpbiBhbiBhYnNvbHV0ZVxyXG4gKiBvciByZWxhdGl2ZSB0b2xlcmFuY2Ugb2YgZ2xNYXRyaXguRVBTSUxPTiAoYW4gYWJzb2x1dGUgdG9sZXJhbmNlIGlzIHVzZWQgZm9yIHZhbHVlcyBsZXNzXHJcbiAqIHRoYW4gb3IgZXF1YWwgdG8gMS4wLCBhbmQgYSByZWxhdGl2ZSB0b2xlcmFuY2UgaXMgdXNlZCBmb3IgbGFyZ2VyIHZhbHVlcylcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgVGhlIGZpcnN0IG51bWJlciB0byB0ZXN0LlxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBUaGUgc2Vjb25kIG51bWJlciB0byB0ZXN0LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbnVtYmVycyBhcmUgYXBwcm94aW1hdGVseSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgcmV0dXJuIE1hdGguYWJzKGEgLSBiKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xyXG59IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XHJcblxyXG4vKipcclxuICogMngyIE1hdHJpeFxyXG4gKiBAbW9kdWxlIG1hdDJcclxuICovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQyXHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcclxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gIH1cclxuICBvdXRbMF0gPSAxO1xyXG4gIG91dFszXSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0MiBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IGEgbWF0cml4IHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHttYXQyfSBhIG5ldyAyeDIgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MiB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgYSBtYXQyIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQyIHdpdGggdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXQgQSBuZXcgMngyIG1hdHJpeFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMobTAwLCBtMDEsIG0xMCwgbTExKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xyXG4gIG91dFswXSA9IG0wMDtcclxuICBvdXRbMV0gPSBtMDE7XHJcbiAgb3V0WzJdID0gbTEwO1xyXG4gIG91dFszXSA9IG0xMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgbWF0MiB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIG0wMCwgbTAxLCBtMTAsIG0xMSkge1xyXG4gIG91dFswXSA9IG0wMDtcclxuICBvdXRbMV0gPSBtMDE7XHJcbiAgb3V0WzJdID0gbTEwO1xyXG4gIG91dFszXSA9IG0xMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNwb3NlIHRoZSB2YWx1ZXMgb2YgYSBtYXQyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xyXG4gIC8vIElmIHdlIGFyZSB0cmFuc3Bvc2luZyBvdXJzZWx2ZXMgd2UgY2FuIHNraXAgYSBmZXcgc3RlcHMgYnV0IGhhdmUgdG8gY2FjaGVcclxuICAvLyBzb21lIHZhbHVlc1xyXG4gIGlmIChvdXQgPT09IGEpIHtcclxuICAgIHZhciBhMSA9IGFbMV07XHJcbiAgICBvdXRbMV0gPSBhWzJdO1xyXG4gICAgb3V0WzJdID0gYTE7XHJcbiAgfSBlbHNlIHtcclxuICAgIG91dFswXSA9IGFbMF07XHJcbiAgICBvdXRbMV0gPSBhWzJdO1xyXG4gICAgb3V0WzJdID0gYVsxXTtcclxuICAgIG91dFszXSA9IGFbM107XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogSW52ZXJ0cyBhIG1hdDJcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXTtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxyXG4gIHZhciBkZXQgPSBhMCAqIGEzIC0gYTIgKiBhMTtcclxuXHJcbiAgaWYgKCFkZXQpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBkZXQgPSAxLjAgLyBkZXQ7XHJcblxyXG4gIG91dFswXSA9IGEzICogZGV0O1xyXG4gIG91dFsxXSA9IC1hMSAqIGRldDtcclxuICBvdXRbMl0gPSAtYTIgKiBkZXQ7XHJcbiAgb3V0WzNdID0gYTAgKiBkZXQ7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBhZGp1Z2F0ZSBvZiBhIG1hdDJcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xyXG4gIC8vIENhY2hpbmcgdGhpcyB2YWx1ZSBpcyBuZXNzZWNhcnkgaWYgb3V0ID09IGFcclxuICB2YXIgYTAgPSBhWzBdO1xyXG4gIG91dFswXSA9IGFbM107XHJcbiAgb3V0WzFdID0gLWFbMV07XHJcbiAgb3V0WzJdID0gLWFbMl07XHJcbiAgb3V0WzNdID0gYTA7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDJcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XHJcbiAgcmV0dXJuIGFbMF0gKiBhWzNdIC0gYVsyXSAqIGFbMV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQyJ3NcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7bWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM107XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICBiMiA9IGJbMl0sXHJcbiAgICAgIGIzID0gYlszXTtcclxuICBvdXRbMF0gPSBhMCAqIGIwICsgYTIgKiBiMTtcclxuICBvdXRbMV0gPSBhMSAqIGIwICsgYTMgKiBiMTtcclxuICBvdXRbMl0gPSBhMCAqIGIyICsgYTIgKiBiMztcclxuICBvdXRbM10gPSBhMSAqIGIyICsgYTMgKiBiMztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIG1hdDIgYnkgdGhlIGdpdmVuIGFuZ2xlXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXTtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gIG91dFswXSA9IGEwICogYyArIGEyICogcztcclxuICBvdXRbMV0gPSBhMSAqIGMgKyBhMyAqIHM7XHJcbiAgb3V0WzJdID0gYTAgKiAtcyArIGEyICogYztcclxuICBvdXRbM10gPSBhMSAqIC1zICsgYTMgKiBjO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTY2FsZXMgdGhlIG1hdDIgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byBzY2FsZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXTtcclxuICB2YXIgdjAgPSB2WzBdLFxyXG4gICAgICB2MSA9IHZbMV07XHJcbiAgb3V0WzBdID0gYTAgKiB2MDtcclxuICBvdXRbMV0gPSBhMSAqIHYwO1xyXG4gIG91dFsyXSA9IGEyICogdjE7XHJcbiAgb3V0WzNdID0gYTMgKiB2MTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0Mi5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgbWF0MiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcclxuICBvdXRbMF0gPSBjO1xyXG4gIG91dFsxXSA9IHM7XHJcbiAgb3V0WzJdID0gLXM7XHJcbiAgb3V0WzNdID0gYztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0Mi5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCBtYXQyIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7dmVjMn0gdiBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVNjYWxpbmcob3V0LCB2KSB7XHJcbiAgb3V0WzBdID0gdlswXTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gdlsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIG1hdDJcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xyXG4gIHJldHVybiAnbWF0MignICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgYVszXSArICcpJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0Mn0gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xyXG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coYVswXSwgMikgKyBNYXRoLnBvdyhhWzFdLCAyKSArIE1hdGgucG93KGFbMl0sIDIpICsgTWF0aC5wb3coYVszXSwgMikpO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBMLCBEIGFuZCBVIG1hdHJpY2VzIChMb3dlciB0cmlhbmd1bGFyLCBEaWFnb25hbCBhbmQgVXBwZXIgdHJpYW5ndWxhcikgYnkgZmFjdG9yaXppbmcgdGhlIGlucHV0IG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDJ9IEwgdGhlIGxvd2VyIHRyaWFuZ3VsYXIgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0Mn0gRCB0aGUgZGlhZ29uYWwgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0Mn0gVSB0aGUgdXBwZXIgdHJpYW5ndWxhciBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBpbnB1dCBtYXRyaXggdG8gZmFjdG9yaXplXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIExEVShMLCBELCBVLCBhKSB7XHJcbiAgTFsyXSA9IGFbMl0gLyBhWzBdO1xyXG4gIFVbMF0gPSBhWzBdO1xyXG4gIFVbMV0gPSBhWzFdO1xyXG4gIFVbM10gPSBhWzNdIC0gTFsyXSAqIFVbMV07XHJcbiAgcmV0dXJuIFtMLCBELCBVXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHttYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7bWF0Mn0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcclxuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHttYXQyfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7bWF0Mn0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXTtcclxuICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICBiMSA9IGJbMV0sXHJcbiAgICAgIGIyID0gYlsyXSxcclxuICAgICAgYjMgPSBiWzNdO1xyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgdGhlIG1hdHJpeCBieSBhIHNjYWxhci5cclxuICpcclxuICogQHBhcmFtIHttYXQyfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXIob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAqIGI7XHJcbiAgb3V0WzFdID0gYVsxXSAqIGI7XHJcbiAgb3V0WzJdID0gYVsyXSAqIGI7XHJcbiAgb3V0WzNdID0gYVszXSAqIGI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDIncyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge21hdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiJ3MgZWxlbWVudHMgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XHJcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0Mi5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIDJ4MyBNYXRyaXhcclxuICogQG1vZHVsZSBtYXQyZFxyXG4gKlxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogQSBtYXQyZCBjb250YWlucyBzaXggZWxlbWVudHMgZGVmaW5lZCBhczpcclxuICogPHByZT5cclxuICogW2EsIGMsIHR4LFxyXG4gKiAgYiwgZCwgdHldXHJcbiAqIDwvcHJlPlxyXG4gKiBUaGlzIGlzIGEgc2hvcnQgZm9ybSBmb3IgdGhlIDN4MyBtYXRyaXg6XHJcbiAqIDxwcmU+XHJcbiAqIFthLCBjLCB0eCxcclxuICogIGIsIGQsIHR5LFxyXG4gKiAgMCwgMCwgMV1cclxuICogPC9wcmU+XHJcbiAqIFRoZSBsYXN0IHJvdyBpcyBpZ25vcmVkIHNvIHRoZSBhcnJheSBpcyBzaG9ydGVyIGFuZCBvcGVyYXRpb25zIGFyZSBmYXN0ZXIuXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgaWRlbnRpdHkgbWF0MmRcclxuICpcclxuICogQHJldHVybnMge21hdDJkfSBhIG5ldyAyeDMgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcclxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzRdID0gMDtcclxuICAgIG91dFs1XSA9IDA7XHJcbiAgfVxyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzNdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBtYXQyZCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IGEgbmV3IDJ4MyBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDYpO1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICBvdXRbMl0gPSBhWzJdO1xyXG4gIG91dFszXSA9IGFbM107XHJcbiAgb3V0WzRdID0gYVs0XTtcclxuICBvdXRbNV0gPSBhWzVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgbWF0MmQgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICBvdXRbNF0gPSBhWzRdO1xyXG4gIG91dFs1XSA9IGFbNV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBhIG1hdDJkIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaWRlbnRpdHkob3V0KSB7XHJcbiAgb3V0WzBdID0gMTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMTtcclxuICBvdXRbNF0gPSAwO1xyXG4gIG91dFs1XSA9IDA7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIG5ldyBtYXQyZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IGEgQ29tcG9uZW50IEEgKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIENvbXBvbmVudCBCIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYyBDb21wb25lbnQgQyAoaW5kZXggMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IGQgQ29tcG9uZW50IEQgKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eCBDb21wb25lbnQgVFggKGluZGV4IDQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eSBDb21wb25lbnQgVFkgKGluZGV4IDUpXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gQSBuZXcgbWF0MmRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKGEsIGIsIGMsIGQsIHR4LCB0eSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg2KTtcclxuICBvdXRbMF0gPSBhO1xyXG4gIG91dFsxXSA9IGI7XHJcbiAgb3V0WzJdID0gYztcclxuICBvdXRbM10gPSBkO1xyXG4gIG91dFs0XSA9IHR4O1xyXG4gIG91dFs1XSA9IHR5O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQyZCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcn0gYSBDb21wb25lbnQgQSAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgQ29tcG9uZW50IEIgKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIENvbXBvbmVudCBDIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gZCBDb21wb25lbnQgRCAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR4IENvbXBvbmVudCBUWCAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR5IENvbXBvbmVudCBUWSAoaW5kZXggNSlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCBhLCBiLCBjLCBkLCB0eCwgdHkpIHtcclxuICBvdXRbMF0gPSBhO1xyXG4gIG91dFsxXSA9IGI7XHJcbiAgb3V0WzJdID0gYztcclxuICBvdXRbM10gPSBkO1xyXG4gIG91dFs0XSA9IHR4O1xyXG4gIG91dFs1XSA9IHR5O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBJbnZlcnRzIGEgbWF0MmRcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnQob3V0LCBhKSB7XHJcbiAgdmFyIGFhID0gYVswXSxcclxuICAgICAgYWIgPSBhWzFdLFxyXG4gICAgICBhYyA9IGFbMl0sXHJcbiAgICAgIGFkID0gYVszXTtcclxuICB2YXIgYXR4ID0gYVs0XSxcclxuICAgICAgYXR5ID0gYVs1XTtcclxuXHJcbiAgdmFyIGRldCA9IGFhICogYWQgLSBhYiAqIGFjO1xyXG4gIGlmICghZGV0KSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgZGV0ID0gMS4wIC8gZGV0O1xyXG5cclxuICBvdXRbMF0gPSBhZCAqIGRldDtcclxuICBvdXRbMV0gPSAtYWIgKiBkZXQ7XHJcbiAgb3V0WzJdID0gLWFjICogZGV0O1xyXG4gIG91dFszXSA9IGFhICogZGV0O1xyXG4gIG91dFs0XSA9IChhYyAqIGF0eSAtIGFkICogYXR4KSAqIGRldDtcclxuICBvdXRbNV0gPSAoYWIgKiBhdHggLSBhYSAqIGF0eSkgKiBkZXQ7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0MmRcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xyXG4gIHJldHVybiBhWzBdICogYVszXSAtIGFbMV0gKiBhWzJdO1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbGllcyB0d28gbWF0MmQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM10sXHJcbiAgICAgIGE0ID0gYVs0XSxcclxuICAgICAgYTUgPSBhWzVdO1xyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM10sXHJcbiAgICAgIGI0ID0gYls0XSxcclxuICAgICAgYjUgPSBiWzVdO1xyXG4gIG91dFswXSA9IGEwICogYjAgKyBhMiAqIGIxO1xyXG4gIG91dFsxXSA9IGExICogYjAgKyBhMyAqIGIxO1xyXG4gIG91dFsyXSA9IGEwICogYjIgKyBhMiAqIGIzO1xyXG4gIG91dFszXSA9IGExICogYjIgKyBhMyAqIGIzO1xyXG4gIG91dFs0XSA9IGEwICogYjQgKyBhMiAqIGI1ICsgYTQ7XHJcbiAgb3V0WzVdID0gYTEgKiBiNCArIGEzICogYjUgKyBhNTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIG1hdDJkIGJ5IHRoZSBnaXZlbiBhbmdsZVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCkge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM10sXHJcbiAgICAgIGE0ID0gYVs0XSxcclxuICAgICAgYTUgPSBhWzVdO1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgb3V0WzBdID0gYTAgKiBjICsgYTIgKiBzO1xyXG4gIG91dFsxXSA9IGExICogYyArIGEzICogcztcclxuICBvdXRbMl0gPSBhMCAqIC1zICsgYTIgKiBjO1xyXG4gIG91dFszXSA9IGExICogLXMgKyBhMyAqIGM7XHJcbiAgb3V0WzRdID0gYTQ7XHJcbiAgb3V0WzVdID0gYTU7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNjYWxlcyB0aGUgbWF0MmQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzJcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHt2ZWMyfSB2IHRoZSB2ZWMyIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCB2KSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXSxcclxuICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICBhNSA9IGFbNV07XHJcbiAgdmFyIHYwID0gdlswXSxcclxuICAgICAgdjEgPSB2WzFdO1xyXG4gIG91dFswXSA9IGEwICogdjA7XHJcbiAgb3V0WzFdID0gYTEgKiB2MDtcclxuICBvdXRbMl0gPSBhMiAqIHYxO1xyXG4gIG91dFszXSA9IGEzICogdjE7XHJcbiAgb3V0WzRdID0gYTQ7XHJcbiAgb3V0WzVdID0gYTU7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zbGF0ZXMgdGhlIG1hdDJkIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gdHJhbnNsYXRlXHJcbiAqIEBwYXJhbSB7dmVjMn0gdiB0aGUgdmVjMiB0byB0cmFuc2xhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKiovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXSxcclxuICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICBhNSA9IGFbNV07XHJcbiAgdmFyIHYwID0gdlswXSxcclxuICAgICAgdjEgPSB2WzFdO1xyXG4gIG91dFswXSA9IGEwO1xyXG4gIG91dFsxXSA9IGExO1xyXG4gIG91dFsyXSA9IGEyO1xyXG4gIG91dFszXSA9IGEzO1xyXG4gIG91dFs0XSA9IGEwICogdjAgKyBhMiAqIHYxICsgYTQ7XHJcbiAgb3V0WzVdID0gYTEgKiB2MCArIGEzICogdjEgKyBhNTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDJkLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgbWF0MmQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUm90YXRpb24ob3V0LCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gIG91dFswXSA9IGM7XHJcbiAgb3V0WzFdID0gcztcclxuICBvdXRbMl0gPSAtcztcclxuICBvdXRbM10gPSBjO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gMDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHNjYWxpbmdcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQyZC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDJkLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCBtYXQyZCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tU2NhbGluZyhvdXQsIHYpIHtcclxuICBvdXRbMF0gPSB2WzBdO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSB2WzFdO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gMDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgdmVjdG9yIHRyYW5zbGF0aW9uXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0MmQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQyZC50cmFuc2xhdGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IG1hdDJkIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7dmVjMn0gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB2KSB7XHJcbiAgb3V0WzBdID0gMTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMTtcclxuICBvdXRbNF0gPSB2WzBdO1xyXG4gIG91dFs1XSA9IHZbMV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQyZFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBhIG1hdHJpeCB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xyXG4gIHJldHVybiAnbWF0MmQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnLCAnICsgYVs0XSArICcsICcgKyBhWzVdICsgJyknO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdDJkXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcclxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9iKGEpIHtcclxuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGFbMF0sIDIpICsgTWF0aC5wb3coYVsxXSwgMikgKyBNYXRoLnBvdyhhWzJdLCAyKSArIE1hdGgucG93KGFbM10sIDIpICsgTWF0aC5wb3coYVs0XSwgMikgKyBNYXRoLnBvdyhhWzVdLCAyKSArIDEpO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gbWF0MmQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDJkfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQyZH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDJkfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcclxuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGFcclxuICpcclxuICogQHBhcmFtIHttYXQyZH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQyZH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge21hdDJkfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdWJ0cmFjdChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC0gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC0gYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdIC0gYlsyXTtcclxuICBvdXRbM10gPSBhWzNdIC0gYlszXTtcclxuICBvdXRbNF0gPSBhWzRdIC0gYls0XTtcclxuICBvdXRbNV0gPSBhWzVdIC0gYls1XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbHkgZWFjaCBlbGVtZW50IG9mIHRoZSBtYXRyaXggYnkgYSBzY2FsYXIuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSBtYXRyaXgncyBlbGVtZW50cyBieVxyXG4gKiBAcmV0dXJucyB7bWF0MmR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gIG91dFszXSA9IGFbM10gKiBiO1xyXG4gIG91dFs0XSA9IGFbNF0gKiBiO1xyXG4gIG91dFs1XSA9IGFbNV0gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byBtYXQyZCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7bWF0MmR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHttYXQyZH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XHJcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XHJcbiAgb3V0WzRdID0gYVs0XSArIGJbNF0gKiBzY2FsZTtcclxuICBvdXRbNV0gPSBhWzVdICsgYls1XSAqIHNjYWxlO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHttYXQyZH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcclxuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0MmR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHttYXQyZH0gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXSxcclxuICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICBhNSA9IGFbNV07XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICBiMiA9IGJbMl0sXHJcbiAgICAgIGIzID0gYlszXSxcclxuICAgICAgYjQgPSBiWzRdLFxyXG4gICAgICBiNSA9IGJbNV07XHJcbiAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJiBNYXRoLmFicyhhMSAtIGIxKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiYgTWF0aC5hYnMoYTIgLSBiMikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKSAmJiBNYXRoLmFicyhhNCAtIGI0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNCksIE1hdGguYWJzKGI0KSkgJiYgTWF0aC5hYnMoYTUgLSBiNSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTUpLCBNYXRoLmFicyhiNSkpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQyZC5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0MmQuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcclxuXHJcbi8qKlxyXG4gKiAzeDMgTWF0cml4XHJcbiAqIEBtb2R1bGUgbWF0M1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IGlkZW50aXR5IG1hdDNcclxuICpcclxuICogQHJldHVybnMge21hdDN9IGEgbmV3IDN4MyBtYXRyaXhcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDkpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgb3V0WzFdID0gMDtcclxuICAgIG91dFsyXSA9IDA7XHJcbiAgICBvdXRbM10gPSAwO1xyXG4gICAgb3V0WzVdID0gMDtcclxuICAgIG91dFs2XSA9IDA7XHJcbiAgICBvdXRbN10gPSAwO1xyXG4gIH1cclxuICBvdXRbMF0gPSAxO1xyXG4gIG91dFs0XSA9IDE7XHJcbiAgb3V0WzhdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ29waWVzIHRoZSB1cHBlci1sZWZ0IDN4MyB2YWx1ZXMgaW50byB0aGUgZ2l2ZW4gbWF0My5cclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyAzeDMgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSAgIHRoZSBzb3VyY2UgNHg0IG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbU1hdDQob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVs0XTtcclxuICBvdXRbNF0gPSBhWzVdO1xyXG4gIG91dFs1XSA9IGFbNl07XHJcbiAgb3V0WzZdID0gYVs4XTtcclxuICBvdXRbN10gPSBhWzldO1xyXG4gIG91dFs4XSA9IGFbMTBdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IG1hdDMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBhIG1hdHJpeCB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7bWF0M30gYSBuZXcgM3gzIG1hdHJpeFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGEpIHtcclxuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICBvdXRbNF0gPSBhWzRdO1xyXG4gIG91dFs1XSA9IGFbNV07XHJcbiAgb3V0WzZdID0gYVs2XTtcclxuICBvdXRbN10gPSBhWzddO1xyXG4gIG91dFs4XSA9IGFbOF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBtYXQzIHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICBvdXRbMl0gPSBhWzJdO1xyXG4gIG91dFszXSA9IGFbM107XHJcbiAgb3V0WzRdID0gYVs0XTtcclxuICBvdXRbNV0gPSBhWzVdO1xyXG4gIG91dFs2XSA9IGFbNl07XHJcbiAgb3V0WzddID0gYVs3XTtcclxuICBvdXRbOF0gPSBhWzhdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgYSBuZXcgbWF0MyB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMCBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIxIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDEgcG9zaXRpb24gKGluZGV4IDcpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjIgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggOClcclxuICogQHJldHVybnMge21hdDN9IEEgbmV3IG1hdDNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKG0wMCwgbTAxLCBtMDIsIG0xMCwgbTExLCBtMTIsIG0yMCwgbTIxLCBtMjIpIHtcclxuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOSk7XHJcbiAgb3V0WzBdID0gbTAwO1xyXG4gIG91dFsxXSA9IG0wMTtcclxuICBvdXRbMl0gPSBtMDI7XHJcbiAgb3V0WzNdID0gbTEwO1xyXG4gIG91dFs0XSA9IG0xMTtcclxuICBvdXRbNV0gPSBtMTI7XHJcbiAgb3V0WzZdID0gbTIwO1xyXG4gIG91dFs3XSA9IG0yMTtcclxuICBvdXRbOF0gPSBtMjI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIG1hdDMgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAwIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDAgcG9zaXRpb24gKGluZGV4IDApXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMiBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDMpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA1KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDYpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA4KVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTEwLCBtMTEsIG0xMiwgbTIwLCBtMjEsIG0yMikge1xyXG4gIG91dFswXSA9IG0wMDtcclxuICBvdXRbMV0gPSBtMDE7XHJcbiAgb3V0WzJdID0gbTAyO1xyXG4gIG91dFszXSA9IG0xMDtcclxuICBvdXRbNF0gPSBtMTE7XHJcbiAgb3V0WzVdID0gbTEyO1xyXG4gIG91dFs2XSA9IG0yMDtcclxuICBvdXRbN10gPSBtMjE7XHJcbiAgb3V0WzhdID0gbTIyO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgYSBtYXQzIHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMTtcclxuICBvdXRbNV0gPSAwO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcmFuc3Bvc2UgdGhlIHZhbHVlcyBvZiBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc3Bvc2Uob3V0LCBhKSB7XHJcbiAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xyXG4gIGlmIChvdXQgPT09IGEpIHtcclxuICAgIHZhciBhMDEgPSBhWzFdLFxyXG4gICAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgICAgYTEyID0gYVs1XTtcclxuICAgIG91dFsxXSA9IGFbM107XHJcbiAgICBvdXRbMl0gPSBhWzZdO1xyXG4gICAgb3V0WzNdID0gYTAxO1xyXG4gICAgb3V0WzVdID0gYVs3XTtcclxuICAgIG91dFs2XSA9IGEwMjtcclxuICAgIG91dFs3XSA9IGExMjtcclxuICB9IGVsc2Uge1xyXG4gICAgb3V0WzBdID0gYVswXTtcclxuICAgIG91dFsxXSA9IGFbM107XHJcbiAgICBvdXRbMl0gPSBhWzZdO1xyXG4gICAgb3V0WzNdID0gYVsxXTtcclxuICAgIG91dFs0XSA9IGFbNF07XHJcbiAgICBvdXRbNV0gPSBhWzddO1xyXG4gICAgb3V0WzZdID0gYVsyXTtcclxuICAgIG91dFs3XSA9IGFbNV07XHJcbiAgICBvdXRbOF0gPSBhWzhdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEludmVydHMgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xyXG4gIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICBhMDIgPSBhWzJdO1xyXG4gIHZhciBhMTAgPSBhWzNdLFxyXG4gICAgICBhMTEgPSBhWzRdLFxyXG4gICAgICBhMTIgPSBhWzVdO1xyXG4gIHZhciBhMjAgPSBhWzZdLFxyXG4gICAgICBhMjEgPSBhWzddLFxyXG4gICAgICBhMjIgPSBhWzhdO1xyXG5cclxuICB2YXIgYjAxID0gYTIyICogYTExIC0gYTEyICogYTIxO1xyXG4gIHZhciBiMTEgPSAtYTIyICogYTEwICsgYTEyICogYTIwO1xyXG4gIHZhciBiMjEgPSBhMjEgKiBhMTAgLSBhMTEgKiBhMjA7XHJcblxyXG4gIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcclxuICB2YXIgZGV0ID0gYTAwICogYjAxICsgYTAxICogYjExICsgYTAyICogYjIxO1xyXG5cclxuICBpZiAoIWRldCkge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG4gIGRldCA9IDEuMCAvIGRldDtcclxuXHJcbiAgb3V0WzBdID0gYjAxICogZGV0O1xyXG4gIG91dFsxXSA9ICgtYTIyICogYTAxICsgYTAyICogYTIxKSAqIGRldDtcclxuICBvdXRbMl0gPSAoYTEyICogYTAxIC0gYTAyICogYTExKSAqIGRldDtcclxuICBvdXRbM10gPSBiMTEgKiBkZXQ7XHJcbiAgb3V0WzRdID0gKGEyMiAqIGEwMCAtIGEwMiAqIGEyMCkgKiBkZXQ7XHJcbiAgb3V0WzVdID0gKC1hMTIgKiBhMDAgKyBhMDIgKiBhMTApICogZGV0O1xyXG4gIG91dFs2XSA9IGIyMSAqIGRldDtcclxuICBvdXRbN10gPSAoLWEyMSAqIGEwMCArIGEwMSAqIGEyMCkgKiBkZXQ7XHJcbiAgb3V0WzhdID0gKGExMSAqIGEwMCAtIGEwMSAqIGExMCkgKiBkZXQ7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkam9pbnQob3V0LCBhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl07XHJcbiAgdmFyIGExMCA9IGFbM10sXHJcbiAgICAgIGExMSA9IGFbNF0sXHJcbiAgICAgIGExMiA9IGFbNV07XHJcbiAgdmFyIGEyMCA9IGFbNl0sXHJcbiAgICAgIGEyMSA9IGFbN10sXHJcbiAgICAgIGEyMiA9IGFbOF07XHJcblxyXG4gIG91dFswXSA9IGExMSAqIGEyMiAtIGExMiAqIGEyMTtcclxuICBvdXRbMV0gPSBhMDIgKiBhMjEgLSBhMDEgKiBhMjI7XHJcbiAgb3V0WzJdID0gYTAxICogYTEyIC0gYTAyICogYTExO1xyXG4gIG91dFszXSA9IGExMiAqIGEyMCAtIGExMCAqIGEyMjtcclxuICBvdXRbNF0gPSBhMDAgKiBhMjIgLSBhMDIgKiBhMjA7XHJcbiAgb3V0WzVdID0gYTAyICogYTEwIC0gYTAwICogYTEyO1xyXG4gIG91dFs2XSA9IGExMCAqIGEyMSAtIGExMSAqIGEyMDtcclxuICBvdXRbN10gPSBhMDEgKiBhMjAgLSBhMDAgKiBhMjE7XHJcbiAgb3V0WzhdID0gYTAwICogYTExIC0gYTAxICogYTEwO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkZXRlcm1pbmFudCBvZiBhIG1hdDNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBzb3VyY2UgbWF0cml4XHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRldGVybWluYW50IG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl07XHJcbiAgdmFyIGExMCA9IGFbM10sXHJcbiAgICAgIGExMSA9IGFbNF0sXHJcbiAgICAgIGExMiA9IGFbNV07XHJcbiAgdmFyIGEyMCA9IGFbNl0sXHJcbiAgICAgIGEyMSA9IGFbN10sXHJcbiAgICAgIGEyMiA9IGFbOF07XHJcblxyXG4gIHJldHVybiBhMDAgKiAoYTIyICogYTExIC0gYTEyICogYTIxKSArIGEwMSAqICgtYTIyICogYTEwICsgYTEyICogYTIwKSArIGEwMiAqIChhMjEgKiBhMTAgLSBhMTEgKiBhMjApO1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbGllcyB0d28gbWF0MydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXTtcclxuICB2YXIgYTEwID0gYVszXSxcclxuICAgICAgYTExID0gYVs0XSxcclxuICAgICAgYTEyID0gYVs1XTtcclxuICB2YXIgYTIwID0gYVs2XSxcclxuICAgICAgYTIxID0gYVs3XSxcclxuICAgICAgYTIyID0gYVs4XTtcclxuXHJcbiAgdmFyIGIwMCA9IGJbMF0sXHJcbiAgICAgIGIwMSA9IGJbMV0sXHJcbiAgICAgIGIwMiA9IGJbMl07XHJcbiAgdmFyIGIxMCA9IGJbM10sXHJcbiAgICAgIGIxMSA9IGJbNF0sXHJcbiAgICAgIGIxMiA9IGJbNV07XHJcbiAgdmFyIGIyMCA9IGJbNl0sXHJcbiAgICAgIGIyMSA9IGJbN10sXHJcbiAgICAgIGIyMiA9IGJbOF07XHJcblxyXG4gIG91dFswXSA9IGIwMCAqIGEwMCArIGIwMSAqIGExMCArIGIwMiAqIGEyMDtcclxuICBvdXRbMV0gPSBiMDAgKiBhMDEgKyBiMDEgKiBhMTEgKyBiMDIgKiBhMjE7XHJcbiAgb3V0WzJdID0gYjAwICogYTAyICsgYjAxICogYTEyICsgYjAyICogYTIyO1xyXG5cclxuICBvdXRbM10gPSBiMTAgKiBhMDAgKyBiMTEgKiBhMTAgKyBiMTIgKiBhMjA7XHJcbiAgb3V0WzRdID0gYjEwICogYTAxICsgYjExICogYTExICsgYjEyICogYTIxO1xyXG4gIG91dFs1XSA9IGIxMCAqIGEwMiArIGIxMSAqIGExMiArIGIxMiAqIGEyMjtcclxuXHJcbiAgb3V0WzZdID0gYjIwICogYTAwICsgYjIxICogYTEwICsgYjIyICogYTIwO1xyXG4gIG91dFs3XSA9IGIyMCAqIGEwMSArIGIyMSAqIGExMSArIGIyMiAqIGEyMTtcclxuICBvdXRbOF0gPSBiMjAgKiBhMDIgKyBiMjEgKiBhMTIgKyBiMjIgKiBhMjI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zbGF0ZSBhIG1hdDMgYnkgdGhlIGdpdmVuIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHt2ZWMyfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgYTEwID0gYVszXSxcclxuICAgICAgYTExID0gYVs0XSxcclxuICAgICAgYTEyID0gYVs1XSxcclxuICAgICAgYTIwID0gYVs2XSxcclxuICAgICAgYTIxID0gYVs3XSxcclxuICAgICAgYTIyID0gYVs4XSxcclxuICAgICAgeCA9IHZbMF0sXHJcbiAgICAgIHkgPSB2WzFdO1xyXG5cclxuICBvdXRbMF0gPSBhMDA7XHJcbiAgb3V0WzFdID0gYTAxO1xyXG4gIG91dFsyXSA9IGEwMjtcclxuXHJcbiAgb3V0WzNdID0gYTEwO1xyXG4gIG91dFs0XSA9IGExMTtcclxuICBvdXRbNV0gPSBhMTI7XHJcblxyXG4gIG91dFs2XSA9IHggKiBhMDAgKyB5ICogYTEwICsgYTIwO1xyXG4gIG91dFs3XSA9IHggKiBhMDEgKyB5ICogYTExICsgYTIxO1xyXG4gIG91dFs4XSA9IHggKiBhMDIgKyB5ICogYTEyICsgYTIyO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0MyBieSB0aGUgZ2l2ZW4gYW5nbGVcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQzfSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGUob3V0LCBhLCByYWQpIHtcclxuICB2YXIgYTAwID0gYVswXSxcclxuICAgICAgYTAxID0gYVsxXSxcclxuICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgYTEwID0gYVszXSxcclxuICAgICAgYTExID0gYVs0XSxcclxuICAgICAgYTEyID0gYVs1XSxcclxuICAgICAgYTIwID0gYVs2XSxcclxuICAgICAgYTIxID0gYVs3XSxcclxuICAgICAgYTIyID0gYVs4XSxcclxuICAgICAgcyA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICBvdXRbMF0gPSBjICogYTAwICsgcyAqIGExMDtcclxuICBvdXRbMV0gPSBjICogYTAxICsgcyAqIGExMTtcclxuICBvdXRbMl0gPSBjICogYTAyICsgcyAqIGExMjtcclxuXHJcbiAgb3V0WzNdID0gYyAqIGExMCAtIHMgKiBhMDA7XHJcbiAgb3V0WzRdID0gYyAqIGExMSAtIHMgKiBhMDE7XHJcbiAgb3V0WzVdID0gYyAqIGExMiAtIHMgKiBhMDI7XHJcblxyXG4gIG91dFs2XSA9IGEyMDtcclxuICBvdXRbN10gPSBhMjE7XHJcbiAgb3V0WzhdID0gYTIyO1xyXG4gIHJldHVybiBvdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogU2NhbGVzIHRoZSBtYXQzIGJ5IHRoZSBkaW1lbnNpb25zIGluIHRoZSBnaXZlbiB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgdGhlIHZlYzIgdG8gc2NhbGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xyXG4gIHZhciB4ID0gdlswXSxcclxuICAgICAgeSA9IHZbMV07XHJcblxyXG4gIG91dFswXSA9IHggKiBhWzBdO1xyXG4gIG91dFsxXSA9IHggKiBhWzFdO1xyXG4gIG91dFsyXSA9IHggKiBhWzJdO1xyXG5cclxuICBvdXRbM10gPSB5ICogYVszXTtcclxuICBvdXRbNF0gPSB5ICogYVs0XTtcclxuICBvdXRbNV0gPSB5ICogYVs1XTtcclxuXHJcbiAgb3V0WzZdID0gYVs2XTtcclxuICBvdXRbN10gPSBhWzddO1xyXG4gIG91dFs4XSA9IGFbOF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDMuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQzLnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCBtYXQzIHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7dmVjMn0gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHYpIHtcclxuICBvdXRbMF0gPSAxO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IDE7XHJcbiAgb3V0WzVdID0gMDtcclxuICBvdXRbNl0gPSB2WzBdO1xyXG4gIG91dFs3XSA9IHZbMV07XHJcbiAgb3V0WzhdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgZ2l2ZW4gYW5nbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQzLmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0My5yb3RhdGUoZGVzdCwgZGVzdCwgcmFkKTtcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICBjID0gTWF0aC5jb3MocmFkKTtcclxuXHJcbiAgb3V0WzBdID0gYztcclxuICBvdXRbMV0gPSBzO1xyXG4gIG91dFsyXSA9IDA7XHJcblxyXG4gIG91dFszXSA9IC1zO1xyXG4gIG91dFs0XSA9IGM7XHJcbiAgb3V0WzVdID0gMDtcclxuXHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciBzY2FsaW5nXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0My5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDMuc2NhbGUoZGVzdCwgZGVzdCwgdmVjKTtcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3ZlYzJ9IHYgU2NhbGluZyB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xyXG4gIG91dFswXSA9IHZbMF07XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG5cclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IHZbMV07XHJcbiAgb3V0WzVdID0gMDtcclxuXHJcbiAgb3V0WzZdID0gMDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcGllcyB0aGUgdmFsdWVzIGZyb20gYSBtYXQyZCBpbnRvIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDJkfSBhIHRoZSBtYXRyaXggdG8gY29weVxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQyZChvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gMDtcclxuXHJcbiAgb3V0WzNdID0gYVsyXTtcclxuICBvdXRbNF0gPSBhWzNdO1xyXG4gIG91dFs1XSA9IDA7XHJcblxyXG4gIG91dFs2XSA9IGFbNF07XHJcbiAgb3V0WzddID0gYVs1XTtcclxuICBvdXRbOF0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4qIENhbGN1bGF0ZXMgYSAzeDMgbWF0cml4IGZyb20gdGhlIGdpdmVuIHF1YXRlcm5pb25cclxuKlxyXG4qIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuKiBAcGFyYW0ge3F1YXR9IHEgUXVhdGVybmlvbiB0byBjcmVhdGUgbWF0cml4IGZyb21cclxuKlxyXG4qIEByZXR1cm5zIHttYXQzfSBvdXRcclxuKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21RdWF0KG91dCwgcSkge1xyXG4gIHZhciB4ID0gcVswXSxcclxuICAgICAgeSA9IHFbMV0sXHJcbiAgICAgIHogPSBxWzJdLFxyXG4gICAgICB3ID0gcVszXTtcclxuICB2YXIgeDIgPSB4ICsgeDtcclxuICB2YXIgeTIgPSB5ICsgeTtcclxuICB2YXIgejIgPSB6ICsgejtcclxuXHJcbiAgdmFyIHh4ID0geCAqIHgyO1xyXG4gIHZhciB5eCA9IHkgKiB4MjtcclxuICB2YXIgeXkgPSB5ICogeTI7XHJcbiAgdmFyIHp4ID0geiAqIHgyO1xyXG4gIHZhciB6eSA9IHogKiB5MjtcclxuICB2YXIgenogPSB6ICogejI7XHJcbiAgdmFyIHd4ID0gdyAqIHgyO1xyXG4gIHZhciB3eSA9IHcgKiB5MjtcclxuICB2YXIgd3ogPSB3ICogejI7XHJcblxyXG4gIG91dFswXSA9IDEgLSB5eSAtIHp6O1xyXG4gIG91dFszXSA9IHl4IC0gd3o7XHJcbiAgb3V0WzZdID0genggKyB3eTtcclxuXHJcbiAgb3V0WzFdID0geXggKyB3ejtcclxuICBvdXRbNF0gPSAxIC0geHggLSB6ejtcclxuICBvdXRbN10gPSB6eSAtIHd4O1xyXG5cclxuICBvdXRbMl0gPSB6eCAtIHd5O1xyXG4gIG91dFs1XSA9IHp5ICsgd3g7XHJcbiAgb3V0WzhdID0gMSAtIHh4IC0geXk7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4qIENhbGN1bGF0ZXMgYSAzeDMgbm9ybWFsIG1hdHJpeCAodHJhbnNwb3NlIGludmVyc2UpIGZyb20gdGhlIDR4NCBtYXRyaXhcclxuKlxyXG4qIEBwYXJhbSB7bWF0M30gb3V0IG1hdDMgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuKiBAcGFyYW0ge21hdDR9IGEgTWF0NCB0byBkZXJpdmUgdGhlIG5vcm1hbCBtYXRyaXggZnJvbVxyXG4qXHJcbiogQHJldHVybnMge21hdDN9IG91dFxyXG4qL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsRnJvbU1hdDQob3V0LCBhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgdmFyIGExMCA9IGFbNF0sXHJcbiAgICAgIGExMSA9IGFbNV0sXHJcbiAgICAgIGExMiA9IGFbNl0sXHJcbiAgICAgIGExMyA9IGFbN107XHJcbiAgdmFyIGEyMCA9IGFbOF0sXHJcbiAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICBhMjMgPSBhWzExXTtcclxuICB2YXIgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gIHZhciBiMDAgPSBhMDAgKiBhMTEgLSBhMDEgKiBhMTA7XHJcbiAgdmFyIGIwMSA9IGEwMCAqIGExMiAtIGEwMiAqIGExMDtcclxuICB2YXIgYjAyID0gYTAwICogYTEzIC0gYTAzICogYTEwO1xyXG4gIHZhciBiMDMgPSBhMDEgKiBhMTIgLSBhMDIgKiBhMTE7XHJcbiAgdmFyIGIwNCA9IGEwMSAqIGExMyAtIGEwMyAqIGExMTtcclxuICB2YXIgYjA1ID0gYTAyICogYTEzIC0gYTAzICogYTEyO1xyXG4gIHZhciBiMDYgPSBhMjAgKiBhMzEgLSBhMjEgKiBhMzA7XHJcbiAgdmFyIGIwNyA9IGEyMCAqIGEzMiAtIGEyMiAqIGEzMDtcclxuICB2YXIgYjA4ID0gYTIwICogYTMzIC0gYTIzICogYTMwO1xyXG4gIHZhciBiMDkgPSBhMjEgKiBhMzIgLSBhMjIgKiBhMzE7XHJcbiAgdmFyIGIxMCA9IGEyMSAqIGEzMyAtIGEyMyAqIGEzMTtcclxuICB2YXIgYjExID0gYTIyICogYTMzIC0gYTIzICogYTMyO1xyXG5cclxuICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XHJcbiAgdmFyIGRldCA9IGIwMCAqIGIxMSAtIGIwMSAqIGIxMCArIGIwMiAqIGIwOSArIGIwMyAqIGIwOCAtIGIwNCAqIGIwNyArIGIwNSAqIGIwNjtcclxuXHJcbiAgaWYgKCFkZXQpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuICBkZXQgPSAxLjAgLyBkZXQ7XHJcblxyXG4gIG91dFswXSA9IChhMTEgKiBiMTEgLSBhMTIgKiBiMTAgKyBhMTMgKiBiMDkpICogZGV0O1xyXG4gIG91dFsxXSA9IChhMTIgKiBiMDggLSBhMTAgKiBiMTEgLSBhMTMgKiBiMDcpICogZGV0O1xyXG4gIG91dFsyXSA9IChhMTAgKiBiMTAgLSBhMTEgKiBiMDggKyBhMTMgKiBiMDYpICogZGV0O1xyXG5cclxuICBvdXRbM10gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcclxuICBvdXRbNF0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcclxuICBvdXRbNV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcclxuXHJcbiAgb3V0WzZdID0gKGEzMSAqIGIwNSAtIGEzMiAqIGIwNCArIGEzMyAqIGIwMykgKiBkZXQ7XHJcbiAgb3V0WzddID0gKGEzMiAqIGIwMiAtIGEzMCAqIGIwNSAtIGEzMyAqIGIwMSkgKiBkZXQ7XHJcbiAgb3V0WzhdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSAyRCBwcm9qZWN0aW9uIG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBib3VuZHNcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBvdXQgbWF0MyBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge251bWJlcn0gd2lkdGggV2lkdGggb2YgeW91ciBnbCBjb250ZXh0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgSGVpZ2h0IG9mIGdsIGNvbnRleHRcclxuICogQHJldHVybnMge21hdDN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb24ob3V0LCB3aWR0aCwgaGVpZ2h0KSB7XHJcbiAgb3V0WzBdID0gMiAvIHdpZHRoO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IC0yIC8gaGVpZ2h0O1xyXG4gIG91dFs1XSA9IDA7XHJcbiAgb3V0WzZdID0gLTE7XHJcbiAgb3V0WzddID0gMTtcclxuICBvdXRbOF0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0M1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IGEgbWF0cml4IHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG1hdHJpeFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XHJcbiAgcmV0dXJuICdtYXQzKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJywgJyArIGFbNF0gKyAnLCAnICsgYVs1XSArICcsICcgKyBhWzZdICsgJywgJyArIGFbN10gKyAnLCAnICsgYVs4XSArICcpJztcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXQzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgbWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBGcm9iZW5pdXMgbm9ybVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb2IoYSkge1xyXG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coYVswXSwgMikgKyBNYXRoLnBvdyhhWzFdLCAyKSArIE1hdGgucG93KGFbMl0sIDIpICsgTWF0aC5wb3coYVszXSwgMikgKyBNYXRoLnBvdyhhWzRdLCAyKSArIE1hdGgucG93KGFbNV0sIDIpICsgTWF0aC5wb3coYVs2XSwgMikgKyBNYXRoLnBvdyhhWzddLCAyKSArIE1hdGgucG93KGFbOF0sIDIpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xyXG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xyXG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xyXG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xyXG4gIG91dFs3XSA9IGFbN10gKyBiWzddO1xyXG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0M30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XHJcbiAgb3V0WzVdID0gYVs1XSAtIGJbNV07XHJcbiAgb3V0WzZdID0gYVs2XSAtIGJbNl07XHJcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XHJcbiAgb3V0WzhdID0gYVs4XSAtIGJbOF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDN9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDN9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICogYjtcclxuICBvdXRbMV0gPSBhWzFdICogYjtcclxuICBvdXRbMl0gPSBhWzJdICogYjtcclxuICBvdXRbM10gPSBhWzNdICogYjtcclxuICBvdXRbNF0gPSBhWzRdICogYjtcclxuICBvdXRbNV0gPSBhWzVdICogYjtcclxuICBvdXRbNl0gPSBhWzZdICogYjtcclxuICBvdXRbN10gPSBhWzddICogYjtcclxuICBvdXRbOF0gPSBhWzhdICogYjtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gbWF0MydzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7bWF0M30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHttYXQzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XHJcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcclxuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xyXG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdICogc2NhbGU7XHJcbiAgb3V0WzZdID0gYVs2XSArIGJbNl0gKiBzY2FsZTtcclxuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xyXG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdICogc2NhbGU7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIG1hdHJpY2VzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHttYXQzfSBhIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAqIEBwYXJhbSB7bWF0M30gYiBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcclxuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXSAmJiBhWzRdID09PSBiWzRdICYmIGFbNV0gPT09IGJbNV0gJiYgYVs2XSA9PT0gYls2XSAmJiBhWzddID09PSBiWzddICYmIGFbOF0gPT09IGJbOF07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBtYXRyaWNlcyBoYXZlIGFwcHJveGltYXRlbHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0M30gYSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gKiBAcGFyYW0ge21hdDN9IGIgVGhlIHNlY29uZCBtYXRyaXguXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM10sXHJcbiAgICAgIGE0ID0gYVs0XSxcclxuICAgICAgYTUgPSBhWzVdLFxyXG4gICAgICBhNiA9IGFbNl0sXHJcbiAgICAgIGE3ID0gYVs3XSxcclxuICAgICAgYTggPSBhWzhdO1xyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM10sXHJcbiAgICAgIGI0ID0gYls0XSxcclxuICAgICAgYjUgPSBiWzVdLFxyXG4gICAgICBiNiA9IGJbNl0sXHJcbiAgICAgIGI3ID0gYls3XSxcclxuICAgICAgYjggPSBiWzhdO1xyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKSAmJiBNYXRoLmFicyhhMyAtIGIzKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSkgJiYgTWF0aC5hYnMoYTQgLSBiNCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTQpLCBNYXRoLmFicyhiNCkpICYmIE1hdGguYWJzKGE1IC0gYjUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE1KSwgTWF0aC5hYnMoYjUpKSAmJiBNYXRoLmFicyhhNiAtIGI2KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNiksIE1hdGguYWJzKGI2KSkgJiYgTWF0aC5hYnMoYTcgLSBiNykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTcpLCBNYXRoLmFicyhiNykpICYmIE1hdGguYWJzKGE4IC0gYjgpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE4KSwgTWF0aC5hYnMoYjgpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0My5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgbWF0My5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0OyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIDR4NCBNYXRyaXg8YnI+Rm9ybWF0OiBjb2x1bW4tbWFqb3IsIHdoZW4gdHlwZWQgb3V0IGl0IGxvb2tzIGxpa2Ugcm93LW1ham9yPGJyPlRoZSBtYXRyaWNlcyBhcmUgYmVpbmcgcG9zdCBtdWx0aXBsaWVkLlxyXG4gKiBAbW9kdWxlIG1hdDRcclxuICovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBtYXQ0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XHJcbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICAgIG91dFszXSA9IDA7XHJcbiAgICBvdXRbNF0gPSAwO1xyXG4gICAgb3V0WzZdID0gMDtcclxuICAgIG91dFs3XSA9IDA7XHJcbiAgICBvdXRbOF0gPSAwO1xyXG4gICAgb3V0WzldID0gMDtcclxuICAgIG91dFsxMV0gPSAwO1xyXG4gICAgb3V0WzEyXSA9IDA7XHJcbiAgICBvdXRbMTNdID0gMDtcclxuICAgIG91dFsxNF0gPSAwO1xyXG4gIH1cclxuICBvdXRbMF0gPSAxO1xyXG4gIG91dFs1XSA9IDE7XHJcbiAgb3V0WzEwXSA9IDE7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIG1hdHJpeFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IGEgbWF0cml4IHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBhIG5ldyA0eDQgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICBvdXRbNF0gPSBhWzRdO1xyXG4gIG91dFs1XSA9IGFbNV07XHJcbiAgb3V0WzZdID0gYVs2XTtcclxuICBvdXRbN10gPSBhWzddO1xyXG4gIG91dFs4XSA9IGFbOF07XHJcbiAgb3V0WzldID0gYVs5XTtcclxuICBvdXRbMTBdID0gYVsxMF07XHJcbiAgb3V0WzExXSA9IGFbMTFdO1xyXG4gIG91dFsxMl0gPSBhWzEyXTtcclxuICBvdXRbMTNdID0gYVsxM107XHJcbiAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gIG91dFsxNV0gPSBhWzE1XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIG1hdDQgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICBvdXRbNF0gPSBhWzRdO1xyXG4gIG91dFs1XSA9IGFbNV07XHJcbiAgb3V0WzZdID0gYVs2XTtcclxuICBvdXRbN10gPSBhWzddO1xyXG4gIG91dFs4XSA9IGFbOF07XHJcbiAgb3V0WzldID0gYVs5XTtcclxuICBvdXRbMTBdID0gYVsxMF07XHJcbiAgb3V0WzExXSA9IGFbMTFdO1xyXG4gIG91dFsxMl0gPSBhWzEyXTtcclxuICBvdXRbMTNdID0gYVsxM107XHJcbiAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gIG91dFsxNV0gPSBhWzE1XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlIGEgbmV3IG1hdDQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMSBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAyIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDIgcG9zaXRpb24gKGluZGV4IDIpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMyBwb3NpdGlvbiAoaW5kZXggMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMCBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAwIHBvc2l0aW9uIChpbmRleCA0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTExIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDEgcG9zaXRpb24gKGluZGV4IDUpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTIgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggNilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMyBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAzIHBvc2l0aW9uIChpbmRleCA3KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIwIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDAgcG9zaXRpb24gKGluZGV4IDgpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjEgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggOSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMiBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxMClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMyBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxMSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMCBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAxMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMSBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAxIHBvc2l0aW9uIChpbmRleCAxMylcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMiBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAyIHBvc2l0aW9uIChpbmRleCAxNClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0zMyBDb21wb25lbnQgaW4gY29sdW1uIDMsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAxNSlcclxuICogQHJldHVybnMge21hdDR9IEEgbmV3IG1hdDRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tVmFsdWVzKG0wMCwgbTAxLCBtMDIsIG0wMywgbTEwLCBtMTEsIG0xMiwgbTEzLCBtMjAsIG0yMSwgbTIyLCBtMjMsIG0zMCwgbTMxLCBtMzIsIG0zMykge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgxNik7XHJcbiAgb3V0WzBdID0gbTAwO1xyXG4gIG91dFsxXSA9IG0wMTtcclxuICBvdXRbMl0gPSBtMDI7XHJcbiAgb3V0WzNdID0gbTAzO1xyXG4gIG91dFs0XSA9IG0xMDtcclxuICBvdXRbNV0gPSBtMTE7XHJcbiAgb3V0WzZdID0gbTEyO1xyXG4gIG91dFs3XSA9IG0xMztcclxuICBvdXRbOF0gPSBtMjA7XHJcbiAgb3V0WzldID0gbTIxO1xyXG4gIG91dFsxMF0gPSBtMjI7XHJcbiAgb3V0WzExXSA9IG0yMztcclxuICBvdXRbMTJdID0gbTMwO1xyXG4gIG91dFsxM10gPSBtMzE7XHJcbiAgb3V0WzE0XSA9IG0zMjtcclxuICBvdXRbMTVdID0gbTMzO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBtYXQ0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMCBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAwIHBvc2l0aW9uIChpbmRleCAwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTAxIENvbXBvbmVudCBpbiBjb2x1bW4gMCwgcm93IDEgcG9zaXRpb24gKGluZGV4IDEpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgQ29tcG9uZW50IGluIGNvbHVtbiAwLCByb3cgMiBwb3NpdGlvbiAoaW5kZXggMilcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0wMyBDb21wb25lbnQgaW4gY29sdW1uIDAsIHJvdyAzIHBvc2l0aW9uIChpbmRleCAzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEwIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDAgcG9zaXRpb24gKGluZGV4IDQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMTEgQ29tcG9uZW50IGluIGNvbHVtbiAxLCByb3cgMSBwb3NpdGlvbiAoaW5kZXggNSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0xMiBDb21wb25lbnQgaW4gY29sdW1uIDEsIHJvdyAyIHBvc2l0aW9uIChpbmRleCA2KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTEzIENvbXBvbmVudCBpbiBjb2x1bW4gMSwgcm93IDMgcG9zaXRpb24gKGluZGV4IDcpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBtMjAgQ29tcG9uZW50IGluIGNvbHVtbiAyLCByb3cgMCBwb3NpdGlvbiAoaW5kZXggOClcclxuICogQHBhcmFtIHtOdW1iZXJ9IG0yMSBDb21wb25lbnQgaW4gY29sdW1uIDIsIHJvdyAxIHBvc2l0aW9uIChpbmRleCA5KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIyIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDIgcG9zaXRpb24gKGluZGV4IDEwKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTIzIENvbXBvbmVudCBpbiBjb2x1bW4gMiwgcm93IDMgcG9zaXRpb24gKGluZGV4IDExKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMwIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDAgcG9zaXRpb24gKGluZGV4IDEyKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMxIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDEgcG9zaXRpb24gKGluZGV4IDEzKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMyIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDIgcG9zaXRpb24gKGluZGV4IDE0KVxyXG4gKiBAcGFyYW0ge051bWJlcn0gbTMzIENvbXBvbmVudCBpbiBjb2x1bW4gMywgcm93IDMgcG9zaXRpb24gKGluZGV4IDE1KVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0wMiwgbTAzLCBtMTAsIG0xMSwgbTEyLCBtMTMsIG0yMCwgbTIxLCBtMjIsIG0yMywgbTMwLCBtMzEsIG0zMiwgbTMzKSB7XHJcbiAgb3V0WzBdID0gbTAwO1xyXG4gIG91dFsxXSA9IG0wMTtcclxuICBvdXRbMl0gPSBtMDI7XHJcbiAgb3V0WzNdID0gbTAzO1xyXG4gIG91dFs0XSA9IG0xMDtcclxuICBvdXRbNV0gPSBtMTE7XHJcbiAgb3V0WzZdID0gbTEyO1xyXG4gIG91dFs3XSA9IG0xMztcclxuICBvdXRbOF0gPSBtMjA7XHJcbiAgb3V0WzldID0gbTIxO1xyXG4gIG91dFsxMF0gPSBtMjI7XHJcbiAgb3V0WzExXSA9IG0yMztcclxuICBvdXRbMTJdID0gbTMwO1xyXG4gIG91dFsxM10gPSBtMzE7XHJcbiAgb3V0WzE0XSA9IG0zMjtcclxuICBvdXRbMTVdID0gbTMzO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgYSBtYXQ0IHRvIHRoZSBpZGVudGl0eSBtYXRyaXhcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xyXG4gIG91dFswXSA9IDE7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSAxO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAwO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzEwXSA9IDE7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IDA7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zcG9zZSB0aGUgdmFsdWVzIG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zcG9zZShvdXQsIGEpIHtcclxuICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXHJcbiAgaWYgKG91dCA9PT0gYSkge1xyXG4gICAgdmFyIGEwMSA9IGFbMV0sXHJcbiAgICAgICAgYTAyID0gYVsyXSxcclxuICAgICAgICBhMDMgPSBhWzNdO1xyXG4gICAgdmFyIGExMiA9IGFbNl0sXHJcbiAgICAgICAgYTEzID0gYVs3XTtcclxuICAgIHZhciBhMjMgPSBhWzExXTtcclxuXHJcbiAgICBvdXRbMV0gPSBhWzRdO1xyXG4gICAgb3V0WzJdID0gYVs4XTtcclxuICAgIG91dFszXSA9IGFbMTJdO1xyXG4gICAgb3V0WzRdID0gYTAxO1xyXG4gICAgb3V0WzZdID0gYVs5XTtcclxuICAgIG91dFs3XSA9IGFbMTNdO1xyXG4gICAgb3V0WzhdID0gYTAyO1xyXG4gICAgb3V0WzldID0gYTEyO1xyXG4gICAgb3V0WzExXSA9IGFbMTRdO1xyXG4gICAgb3V0WzEyXSA9IGEwMztcclxuICAgIG91dFsxM10gPSBhMTM7XHJcbiAgICBvdXRbMTRdID0gYTIzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgb3V0WzFdID0gYVs0XTtcclxuICAgIG91dFsyXSA9IGFbOF07XHJcbiAgICBvdXRbM10gPSBhWzEyXTtcclxuICAgIG91dFs0XSA9IGFbMV07XHJcbiAgICBvdXRbNV0gPSBhWzVdO1xyXG4gICAgb3V0WzZdID0gYVs5XTtcclxuICAgIG91dFs3XSA9IGFbMTNdO1xyXG4gICAgb3V0WzhdID0gYVsyXTtcclxuICAgIG91dFs5XSA9IGFbNl07XHJcbiAgICBvdXRbMTBdID0gYVsxMF07XHJcbiAgICBvdXRbMTFdID0gYVsxNF07XHJcbiAgICBvdXRbMTJdID0gYVszXTtcclxuICAgIG91dFsxM10gPSBhWzddO1xyXG4gICAgb3V0WzE0XSA9IGFbMTFdO1xyXG4gICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEludmVydHMgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xyXG4gIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICBhMDMgPSBhWzNdO1xyXG4gIHZhciBhMTAgPSBhWzRdLFxyXG4gICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICBhMTMgPSBhWzddO1xyXG4gIHZhciBhMjAgPSBhWzhdLFxyXG4gICAgICBhMjEgPSBhWzldLFxyXG4gICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgYTIzID0gYVsxMV07XHJcbiAgdmFyIGEzMCA9IGFbMTJdLFxyXG4gICAgICBhMzEgPSBhWzEzXSxcclxuICAgICAgYTMyID0gYVsxNF0sXHJcbiAgICAgIGEzMyA9IGFbMTVdO1xyXG5cclxuICB2YXIgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xyXG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XHJcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcclxuICB2YXIgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xyXG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XHJcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcclxuICB2YXIgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xyXG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XHJcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcclxuICB2YXIgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xyXG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XHJcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxyXG4gIHZhciBkZXQgPSBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XHJcblxyXG4gIGlmICghZGV0KSB7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbiAgZGV0ID0gMS4wIC8gZGV0O1xyXG5cclxuICBvdXRbMF0gPSAoYTExICogYjExIC0gYTEyICogYjEwICsgYTEzICogYjA5KSAqIGRldDtcclxuICBvdXRbMV0gPSAoYTAyICogYjEwIC0gYTAxICogYjExIC0gYTAzICogYjA5KSAqIGRldDtcclxuICBvdXRbMl0gPSAoYTMxICogYjA1IC0gYTMyICogYjA0ICsgYTMzICogYjAzKSAqIGRldDtcclxuICBvdXRbM10gPSAoYTIyICogYjA0IC0gYTIxICogYjA1IC0gYTIzICogYjAzKSAqIGRldDtcclxuICBvdXRbNF0gPSAoYTEyICogYjA4IC0gYTEwICogYjExIC0gYTEzICogYjA3KSAqIGRldDtcclxuICBvdXRbNV0gPSAoYTAwICogYjExIC0gYTAyICogYjA4ICsgYTAzICogYjA3KSAqIGRldDtcclxuICBvdXRbNl0gPSAoYTMyICogYjAyIC0gYTMwICogYjA1IC0gYTMzICogYjAxKSAqIGRldDtcclxuICBvdXRbN10gPSAoYTIwICogYjA1IC0gYTIyICogYjAyICsgYTIzICogYjAxKSAqIGRldDtcclxuICBvdXRbOF0gPSAoYTEwICogYjEwIC0gYTExICogYjA4ICsgYTEzICogYjA2KSAqIGRldDtcclxuICBvdXRbOV0gPSAoYTAxICogYjA4IC0gYTAwICogYjEwIC0gYTAzICogYjA2KSAqIGRldDtcclxuICBvdXRbMTBdID0gKGEzMCAqIGIwNCAtIGEzMSAqIGIwMiArIGEzMyAqIGIwMCkgKiBkZXQ7XHJcbiAgb3V0WzExXSA9IChhMjEgKiBiMDIgLSBhMjAgKiBiMDQgLSBhMjMgKiBiMDApICogZGV0O1xyXG4gIG91dFsxMl0gPSAoYTExICogYjA3IC0gYTEwICogYjA5IC0gYTEyICogYjA2KSAqIGRldDtcclxuICBvdXRbMTNdID0gKGEwMCAqIGIwOSAtIGEwMSAqIGIwNyArIGEwMiAqIGIwNikgKiBkZXQ7XHJcbiAgb3V0WzE0XSA9IChhMzEgKiBiMDEgLSBhMzAgKiBiMDMgLSBhMzIgKiBiMDApICogZGV0O1xyXG4gIG91dFsxNV0gPSAoYTIwICogYjAzIC0gYTIxICogYjAxICsgYTIyICogYjAwKSAqIGRldDtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIHNvdXJjZSBtYXRyaXhcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkam9pbnQob3V0LCBhKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgdmFyIGExMCA9IGFbNF0sXHJcbiAgICAgIGExMSA9IGFbNV0sXHJcbiAgICAgIGExMiA9IGFbNl0sXHJcbiAgICAgIGExMyA9IGFbN107XHJcbiAgdmFyIGEyMCA9IGFbOF0sXHJcbiAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICBhMjMgPSBhWzExXTtcclxuICB2YXIgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gIG91dFswXSA9IGExMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzEgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKTtcclxuICBvdXRbMV0gPSAtKGEwMSAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIxICogKGEwMiAqIGEzMyAtIGEwMyAqIGEzMikgKyBhMzEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSk7XHJcbiAgb3V0WzJdID0gYTAxICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTEgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpO1xyXG4gIG91dFszXSA9IC0oYTAxICogKGExMiAqIGEyMyAtIGExMyAqIGEyMikgLSBhMTEgKiAoYTAyICogYTIzIC0gYTAzICogYTIyKSArIGEyMSAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcclxuICBvdXRbNF0gPSAtKGExMCAqIChhMjIgKiBhMzMgLSBhMjMgKiBhMzIpIC0gYTIwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgKyBhMzAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSk7XHJcbiAgb3V0WzVdID0gYTAwICogKGEyMiAqIGEzMyAtIGEyMyAqIGEzMikgLSBhMjAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpO1xyXG4gIG91dFs2XSA9IC0oYTAwICogKGExMiAqIGEzMyAtIGExMyAqIGEzMikgLSBhMTAgKiAoYTAyICogYTMzIC0gYTAzICogYTMyKSArIGEzMCAqIChhMDIgKiBhMTMgLSBhMDMgKiBhMTIpKTtcclxuICBvdXRbN10gPSBhMDAgKiAoYTEyICogYTIzIC0gYTEzICogYTIyKSAtIGExMCAqIChhMDIgKiBhMjMgLSBhMDMgKiBhMjIpICsgYTIwICogKGEwMiAqIGExMyAtIGEwMyAqIGExMik7XHJcbiAgb3V0WzhdID0gYTEwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMzIC0gYTEzICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjMgLSBhMTMgKiBhMjEpO1xyXG4gIG91dFs5XSA9IC0oYTAwICogKGEyMSAqIGEzMyAtIGEyMyAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjMgLSBhMDMgKiBhMjEpKTtcclxuICBvdXRbMTBdID0gYTAwICogKGExMSAqIGEzMyAtIGExMyAqIGEzMSkgLSBhMTAgKiAoYTAxICogYTMzIC0gYTAzICogYTMxKSArIGEzMCAqIChhMDEgKiBhMTMgLSBhMDMgKiBhMTEpO1xyXG4gIG91dFsxMV0gPSAtKGEwMCAqIChhMTEgKiBhMjMgLSBhMTMgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMyAtIGEwMyAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEzIC0gYTAzICogYTExKSk7XHJcbiAgb3V0WzEyXSA9IC0oYTEwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTExICogYTMyIC0gYTEyICogYTMxKSArIGEzMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpKTtcclxuICBvdXRbMTNdID0gYTAwICogKGEyMSAqIGEzMiAtIGEyMiAqIGEzMSkgLSBhMjAgKiAoYTAxICogYTMyIC0gYTAyICogYTMxKSArIGEzMCAqIChhMDEgKiBhMjIgLSBhMDIgKiBhMjEpO1xyXG4gIG91dFsxNF0gPSAtKGEwMCAqIChhMTEgKiBhMzIgLSBhMTIgKiBhMzEpIC0gYTEwICogKGEwMSAqIGEzMiAtIGEwMiAqIGEzMSkgKyBhMzAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKSk7XHJcbiAgb3V0WzE1XSA9IGEwMCAqIChhMTEgKiBhMjIgLSBhMTIgKiBhMjEpIC0gYTEwICogKGEwMSAqIGEyMiAtIGEwMiAqIGEyMSkgKyBhMjAgKiAoYTAxICogYTEyIC0gYTAyICogYTExKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgc291cmNlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkZXRlcm1pbmFudCBvZiBhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xyXG4gIHZhciBhMDAgPSBhWzBdLFxyXG4gICAgICBhMDEgPSBhWzFdLFxyXG4gICAgICBhMDIgPSBhWzJdLFxyXG4gICAgICBhMDMgPSBhWzNdO1xyXG4gIHZhciBhMTAgPSBhWzRdLFxyXG4gICAgICBhMTEgPSBhWzVdLFxyXG4gICAgICBhMTIgPSBhWzZdLFxyXG4gICAgICBhMTMgPSBhWzddO1xyXG4gIHZhciBhMjAgPSBhWzhdLFxyXG4gICAgICBhMjEgPSBhWzldLFxyXG4gICAgICBhMjIgPSBhWzEwXSxcclxuICAgICAgYTIzID0gYVsxMV07XHJcbiAgdmFyIGEzMCA9IGFbMTJdLFxyXG4gICAgICBhMzEgPSBhWzEzXSxcclxuICAgICAgYTMyID0gYVsxNF0sXHJcbiAgICAgIGEzMyA9IGFbMTVdO1xyXG5cclxuICB2YXIgYjAwID0gYTAwICogYTExIC0gYTAxICogYTEwO1xyXG4gIHZhciBiMDEgPSBhMDAgKiBhMTIgLSBhMDIgKiBhMTA7XHJcbiAgdmFyIGIwMiA9IGEwMCAqIGExMyAtIGEwMyAqIGExMDtcclxuICB2YXIgYjAzID0gYTAxICogYTEyIC0gYTAyICogYTExO1xyXG4gIHZhciBiMDQgPSBhMDEgKiBhMTMgLSBhMDMgKiBhMTE7XHJcbiAgdmFyIGIwNSA9IGEwMiAqIGExMyAtIGEwMyAqIGExMjtcclxuICB2YXIgYjA2ID0gYTIwICogYTMxIC0gYTIxICogYTMwO1xyXG4gIHZhciBiMDcgPSBhMjAgKiBhMzIgLSBhMjIgKiBhMzA7XHJcbiAgdmFyIGIwOCA9IGEyMCAqIGEzMyAtIGEyMyAqIGEzMDtcclxuICB2YXIgYjA5ID0gYTIxICogYTMyIC0gYTIyICogYTMxO1xyXG4gIHZhciBiMTAgPSBhMjEgKiBhMzMgLSBhMjMgKiBhMzE7XHJcbiAgdmFyIGIxMSA9IGEyMiAqIGEzMyAtIGEyMyAqIGEzMjtcclxuXHJcbiAgLy8gQ2FsY3VsYXRlIHRoZSBkZXRlcm1pbmFudFxyXG4gIHJldHVybiBiMDAgKiBiMTEgLSBiMDEgKiBiMTAgKyBiMDIgKiBiMDkgKyBiMDMgKiBiMDggLSBiMDQgKiBiMDcgKyBiMDUgKiBiMDY7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byBtYXQ0c1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XHJcbiAgdmFyIGEwMCA9IGFbMF0sXHJcbiAgICAgIGEwMSA9IGFbMV0sXHJcbiAgICAgIGEwMiA9IGFbMl0sXHJcbiAgICAgIGEwMyA9IGFbM107XHJcbiAgdmFyIGExMCA9IGFbNF0sXHJcbiAgICAgIGExMSA9IGFbNV0sXHJcbiAgICAgIGExMiA9IGFbNl0sXHJcbiAgICAgIGExMyA9IGFbN107XHJcbiAgdmFyIGEyMCA9IGFbOF0sXHJcbiAgICAgIGEyMSA9IGFbOV0sXHJcbiAgICAgIGEyMiA9IGFbMTBdLFxyXG4gICAgICBhMjMgPSBhWzExXTtcclxuICB2YXIgYTMwID0gYVsxMl0sXHJcbiAgICAgIGEzMSA9IGFbMTNdLFxyXG4gICAgICBhMzIgPSBhWzE0XSxcclxuICAgICAgYTMzID0gYVsxNV07XHJcblxyXG4gIC8vIENhY2hlIG9ubHkgdGhlIGN1cnJlbnQgbGluZSBvZiB0aGUgc2Vjb25kIG1hdHJpeFxyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM107XHJcbiAgb3V0WzBdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgb3V0WzFdID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgb3V0WzJdID0gYjAgKiBhMDIgKyBiMSAqIGExMiArIGIyICogYTIyICsgYjMgKiBhMzI7XHJcbiAgb3V0WzNdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcblxyXG4gIGIwID0gYls0XTtiMSA9IGJbNV07YjIgPSBiWzZdO2IzID0gYls3XTtcclxuICBvdXRbNF0gPSBiMCAqIGEwMCArIGIxICogYTEwICsgYjIgKiBhMjAgKyBiMyAqIGEzMDtcclxuICBvdXRbNV0gPSBiMCAqIGEwMSArIGIxICogYTExICsgYjIgKiBhMjEgKyBiMyAqIGEzMTtcclxuICBvdXRbNl0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcclxuICBvdXRbN10gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuXHJcbiAgYjAgPSBiWzhdO2IxID0gYls5XTtiMiA9IGJbMTBdO2IzID0gYlsxMV07XHJcbiAgb3V0WzhdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgb3V0WzldID0gYjAgKiBhMDEgKyBiMSAqIGExMSArIGIyICogYTIxICsgYjMgKiBhMzE7XHJcbiAgb3V0WzEwXSA9IGIwICogYTAyICsgYjEgKiBhMTIgKyBiMiAqIGEyMiArIGIzICogYTMyO1xyXG4gIG91dFsxMV0gPSBiMCAqIGEwMyArIGIxICogYTEzICsgYjIgKiBhMjMgKyBiMyAqIGEzMztcclxuXHJcbiAgYjAgPSBiWzEyXTtiMSA9IGJbMTNdO2IyID0gYlsxNF07YjMgPSBiWzE1XTtcclxuICBvdXRbMTJdID0gYjAgKiBhMDAgKyBiMSAqIGExMCArIGIyICogYTIwICsgYjMgKiBhMzA7XHJcbiAgb3V0WzEzXSA9IGIwICogYTAxICsgYjEgKiBhMTEgKyBiMiAqIGEyMSArIGIzICogYTMxO1xyXG4gIG91dFsxNF0gPSBiMCAqIGEwMiArIGIxICogYTEyICsgYjIgKiBhMjIgKyBiMyAqIGEzMjtcclxuICBvdXRbMTVdID0gYjAgKiBhMDMgKyBiMSAqIGExMyArIGIyICogYTIzICsgYjMgKiBhMzM7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zbGF0ZSBhIG1hdDQgYnkgdGhlIGdpdmVuIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZShvdXQsIGEsIHYpIHtcclxuICB2YXIgeCA9IHZbMF0sXHJcbiAgICAgIHkgPSB2WzFdLFxyXG4gICAgICB6ID0gdlsyXTtcclxuICB2YXIgYTAwID0gdm9pZCAwLFxyXG4gICAgICBhMDEgPSB2b2lkIDAsXHJcbiAgICAgIGEwMiA9IHZvaWQgMCxcclxuICAgICAgYTAzID0gdm9pZCAwO1xyXG4gIHZhciBhMTAgPSB2b2lkIDAsXHJcbiAgICAgIGExMSA9IHZvaWQgMCxcclxuICAgICAgYTEyID0gdm9pZCAwLFxyXG4gICAgICBhMTMgPSB2b2lkIDA7XHJcbiAgdmFyIGEyMCA9IHZvaWQgMCxcclxuICAgICAgYTIxID0gdm9pZCAwLFxyXG4gICAgICBhMjIgPSB2b2lkIDAsXHJcbiAgICAgIGEyMyA9IHZvaWQgMDtcclxuXHJcbiAgaWYgKGEgPT09IG91dCkge1xyXG4gICAgb3V0WzEyXSA9IGFbMF0gKiB4ICsgYVs0XSAqIHkgKyBhWzhdICogeiArIGFbMTJdO1xyXG4gICAgb3V0WzEzXSA9IGFbMV0gKiB4ICsgYVs1XSAqIHkgKyBhWzldICogeiArIGFbMTNdO1xyXG4gICAgb3V0WzE0XSA9IGFbMl0gKiB4ICsgYVs2XSAqIHkgKyBhWzEwXSAqIHogKyBhWzE0XTtcclxuICAgIG91dFsxNV0gPSBhWzNdICogeCArIGFbN10gKiB5ICsgYVsxMV0gKiB6ICsgYVsxNV07XHJcbiAgfSBlbHNlIHtcclxuICAgIGEwMCA9IGFbMF07YTAxID0gYVsxXTthMDIgPSBhWzJdO2EwMyA9IGFbM107XHJcbiAgICBhMTAgPSBhWzRdO2ExMSA9IGFbNV07YTEyID0gYVs2XTthMTMgPSBhWzddO1xyXG4gICAgYTIwID0gYVs4XTthMjEgPSBhWzldO2EyMiA9IGFbMTBdO2EyMyA9IGFbMTFdO1xyXG5cclxuICAgIG91dFswXSA9IGEwMDtvdXRbMV0gPSBhMDE7b3V0WzJdID0gYTAyO291dFszXSA9IGEwMztcclxuICAgIG91dFs0XSA9IGExMDtvdXRbNV0gPSBhMTE7b3V0WzZdID0gYTEyO291dFs3XSA9IGExMztcclxuICAgIG91dFs4XSA9IGEyMDtvdXRbOV0gPSBhMjE7b3V0WzEwXSA9IGEyMjtvdXRbMTFdID0gYTIzO1xyXG5cclxuICAgIG91dFsxMl0gPSBhMDAgKiB4ICsgYTEwICogeSArIGEyMCAqIHogKyBhWzEyXTtcclxuICAgIG91dFsxM10gPSBhMDEgKiB4ICsgYTExICogeSArIGEyMSAqIHogKyBhWzEzXTtcclxuICAgIG91dFsxNF0gPSBhMDIgKiB4ICsgYTEyICogeSArIGEyMiAqIHogKyBhWzE0XTtcclxuICAgIG91dFsxNV0gPSBhMDMgKiB4ICsgYTEzICogeSArIGEyMyAqIHogKyBhWzE1XTtcclxuICB9XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTY2FsZXMgdGhlIG1hdDQgYnkgdGhlIGRpbWVuc2lvbnMgaW4gdGhlIGdpdmVuIHZlYzMgbm90IHVzaW5nIHZlY3Rvcml6YXRpb25cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gc2NhbGVcclxuICogQHBhcmFtIHt2ZWMzfSB2IHRoZSB2ZWMzIHRvIHNjYWxlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKiovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIHYpIHtcclxuICB2YXIgeCA9IHZbMF0sXHJcbiAgICAgIHkgPSB2WzFdLFxyXG4gICAgICB6ID0gdlsyXTtcclxuXHJcbiAgb3V0WzBdID0gYVswXSAqIHg7XHJcbiAgb3V0WzFdID0gYVsxXSAqIHg7XHJcbiAgb3V0WzJdID0gYVsyXSAqIHg7XHJcbiAgb3V0WzNdID0gYVszXSAqIHg7XHJcbiAgb3V0WzRdID0gYVs0XSAqIHk7XHJcbiAgb3V0WzVdID0gYVs1XSAqIHk7XHJcbiAgb3V0WzZdID0gYVs2XSAqIHk7XHJcbiAgb3V0WzddID0gYVs3XSAqIHk7XHJcbiAgb3V0WzhdID0gYVs4XSAqIHo7XHJcbiAgb3V0WzldID0gYVs5XSAqIHo7XHJcbiAgb3V0WzEwXSA9IGFbMTBdICogejtcclxuICBvdXRbMTFdID0gYVsxMV0gKiB6O1xyXG4gIG91dFsxMl0gPSBhWzEyXTtcclxuICBvdXRbMTNdID0gYVsxM107XHJcbiAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gIG91dFsxNV0gPSBhWzE1XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIG1hdDQgYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgZ2l2ZW4gYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZShvdXQsIGEsIHJhZCwgYXhpcykge1xyXG4gIHZhciB4ID0gYXhpc1swXSxcclxuICAgICAgeSA9IGF4aXNbMV0sXHJcbiAgICAgIHogPSBheGlzWzJdO1xyXG4gIHZhciBsZW4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcclxuICB2YXIgcyA9IHZvaWQgMCxcclxuICAgICAgYyA9IHZvaWQgMCxcclxuICAgICAgdCA9IHZvaWQgMDtcclxuICB2YXIgYTAwID0gdm9pZCAwLFxyXG4gICAgICBhMDEgPSB2b2lkIDAsXHJcbiAgICAgIGEwMiA9IHZvaWQgMCxcclxuICAgICAgYTAzID0gdm9pZCAwO1xyXG4gIHZhciBhMTAgPSB2b2lkIDAsXHJcbiAgICAgIGExMSA9IHZvaWQgMCxcclxuICAgICAgYTEyID0gdm9pZCAwLFxyXG4gICAgICBhMTMgPSB2b2lkIDA7XHJcbiAgdmFyIGEyMCA9IHZvaWQgMCxcclxuICAgICAgYTIxID0gdm9pZCAwLFxyXG4gICAgICBhMjIgPSB2b2lkIDAsXHJcbiAgICAgIGEyMyA9IHZvaWQgMDtcclxuICB2YXIgYjAwID0gdm9pZCAwLFxyXG4gICAgICBiMDEgPSB2b2lkIDAsXHJcbiAgICAgIGIwMiA9IHZvaWQgMDtcclxuICB2YXIgYjEwID0gdm9pZCAwLFxyXG4gICAgICBiMTEgPSB2b2lkIDAsXHJcbiAgICAgIGIxMiA9IHZvaWQgMDtcclxuICB2YXIgYjIwID0gdm9pZCAwLFxyXG4gICAgICBiMjEgPSB2b2lkIDAsXHJcbiAgICAgIGIyMiA9IHZvaWQgMDtcclxuXHJcbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgbGVuID0gMSAvIGxlbjtcclxuICB4ICo9IGxlbjtcclxuICB5ICo9IGxlbjtcclxuICB6ICo9IGxlbjtcclxuXHJcbiAgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgdCA9IDEgLSBjO1xyXG5cclxuICBhMDAgPSBhWzBdO2EwMSA9IGFbMV07YTAyID0gYVsyXTthMDMgPSBhWzNdO1xyXG4gIGExMCA9IGFbNF07YTExID0gYVs1XTthMTIgPSBhWzZdO2ExMyA9IGFbN107XHJcbiAgYTIwID0gYVs4XTthMjEgPSBhWzldO2EyMiA9IGFbMTBdO2EyMyA9IGFbMTFdO1xyXG5cclxuICAvLyBDb25zdHJ1Y3QgdGhlIGVsZW1lbnRzIG9mIHRoZSByb3RhdGlvbiBtYXRyaXhcclxuICBiMDAgPSB4ICogeCAqIHQgKyBjO2IwMSA9IHkgKiB4ICogdCArIHogKiBzO2IwMiA9IHogKiB4ICogdCAtIHkgKiBzO1xyXG4gIGIxMCA9IHggKiB5ICogdCAtIHogKiBzO2IxMSA9IHkgKiB5ICogdCArIGM7YjEyID0geiAqIHkgKiB0ICsgeCAqIHM7XHJcbiAgYjIwID0geCAqIHogKiB0ICsgeSAqIHM7YjIxID0geSAqIHogKiB0IC0geCAqIHM7YjIyID0geiAqIHogKiB0ICsgYztcclxuXHJcbiAgLy8gUGVyZm9ybSByb3RhdGlvbi1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuICBvdXRbMF0gPSBhMDAgKiBiMDAgKyBhMTAgKiBiMDEgKyBhMjAgKiBiMDI7XHJcbiAgb3V0WzFdID0gYTAxICogYjAwICsgYTExICogYjAxICsgYTIxICogYjAyO1xyXG4gIG91dFsyXSA9IGEwMiAqIGIwMCArIGExMiAqIGIwMSArIGEyMiAqIGIwMjtcclxuICBvdXRbM10gPSBhMDMgKiBiMDAgKyBhMTMgKiBiMDEgKyBhMjMgKiBiMDI7XHJcbiAgb3V0WzRdID0gYTAwICogYjEwICsgYTEwICogYjExICsgYTIwICogYjEyO1xyXG4gIG91dFs1XSA9IGEwMSAqIGIxMCArIGExMSAqIGIxMSArIGEyMSAqIGIxMjtcclxuICBvdXRbNl0gPSBhMDIgKiBiMTAgKyBhMTIgKiBiMTEgKyBhMjIgKiBiMTI7XHJcbiAgb3V0WzddID0gYTAzICogYjEwICsgYTEzICogYjExICsgYTIzICogYjEyO1xyXG4gIG91dFs4XSA9IGEwMCAqIGIyMCArIGExMCAqIGIyMSArIGEyMCAqIGIyMjtcclxuICBvdXRbOV0gPSBhMDEgKiBiMjAgKyBhMTEgKiBiMjEgKyBhMjEgKiBiMjI7XHJcbiAgb3V0WzEwXSA9IGEwMiAqIGIyMCArIGExMiAqIGIyMSArIGEyMiAqIGIyMjtcclxuICBvdXRbMTFdID0gYTAzICogYjIwICsgYTEzICogYjIxICsgYTIzICogYjIyO1xyXG5cclxuICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xyXG4gICAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gICAgb3V0WzEzXSA9IGFbMTNdO1xyXG4gICAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIH1cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgdGhlIHJlY2VpdmluZyBtYXRyaXhcclxuICogQHBhcmFtIHttYXQ0fSBhIHRoZSBtYXRyaXggdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYWQgdGhlIGFuZ2xlIHRvIHJvdGF0ZSB0aGUgbWF0cml4IGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQpO1xyXG4gIHZhciBjID0gTWF0aC5jb3MocmFkKTtcclxuICB2YXIgYTEwID0gYVs0XTtcclxuICB2YXIgYTExID0gYVs1XTtcclxuICB2YXIgYTEyID0gYVs2XTtcclxuICB2YXIgYTEzID0gYVs3XTtcclxuICB2YXIgYTIwID0gYVs4XTtcclxuICB2YXIgYTIxID0gYVs5XTtcclxuICB2YXIgYTIyID0gYVsxMF07XHJcbiAgdmFyIGEyMyA9IGFbMTFdO1xyXG5cclxuICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCByb3dzXHJcbiAgICBvdXRbMF0gPSBhWzBdO1xyXG4gICAgb3V0WzFdID0gYVsxXTtcclxuICAgIG91dFsyXSA9IGFbMl07XHJcbiAgICBvdXRbM10gPSBhWzNdO1xyXG4gICAgb3V0WzEyXSA9IGFbMTJdO1xyXG4gICAgb3V0WzEzXSA9IGFbMTNdO1xyXG4gICAgb3V0WzE0XSA9IGFbMTRdO1xyXG4gICAgb3V0WzE1XSA9IGFbMTVdO1xyXG4gIH1cclxuXHJcbiAgLy8gUGVyZm9ybSBheGlzLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG4gIG91dFs0XSA9IGExMCAqIGMgKyBhMjAgKiBzO1xyXG4gIG91dFs1XSA9IGExMSAqIGMgKyBhMjEgKiBzO1xyXG4gIG91dFs2XSA9IGExMiAqIGMgKyBhMjIgKiBzO1xyXG4gIG91dFs3XSA9IGExMyAqIGMgKyBhMjMgKiBzO1xyXG4gIG91dFs4XSA9IGEyMCAqIGMgLSBhMTAgKiBzO1xyXG4gIG91dFs5XSA9IGEyMSAqIGMgLSBhMTEgKiBzO1xyXG4gIG91dFsxMF0gPSBhMjIgKiBjIC0gYTEyICogcztcclxuICBvdXRbMTFdID0gYTIzICogYyAtIGExMyAqIHM7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBtYXRyaXggYnkgdGhlIGdpdmVuIGFuZ2xlIGFyb3VuZCB0aGUgWSBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgbWF0cml4XHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgbWF0cml4IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSB0byByb3RhdGUgdGhlIG1hdHJpeCBieVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIHJhZCkge1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICB2YXIgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgdmFyIGEwMCA9IGFbMF07XHJcbiAgdmFyIGEwMSA9IGFbMV07XHJcbiAgdmFyIGEwMiA9IGFbMl07XHJcbiAgdmFyIGEwMyA9IGFbM107XHJcbiAgdmFyIGEyMCA9IGFbOF07XHJcbiAgdmFyIGEyMSA9IGFbOV07XHJcbiAgdmFyIGEyMiA9IGFbMTBdO1xyXG4gIHZhciBhMjMgPSBhWzExXTtcclxuXHJcbiAgaWYgKGEgIT09IG91dCkge1xyXG4gICAgLy8gSWYgdGhlIHNvdXJjZSBhbmQgZGVzdGluYXRpb24gZGlmZmVyLCBjb3B5IHRoZSB1bmNoYW5nZWQgcm93c1xyXG4gICAgb3V0WzRdID0gYVs0XTtcclxuICAgIG91dFs1XSA9IGFbNV07XHJcbiAgICBvdXRbNl0gPSBhWzZdO1xyXG4gICAgb3V0WzddID0gYVs3XTtcclxuICAgIG91dFsxMl0gPSBhWzEyXTtcclxuICAgIG91dFsxM10gPSBhWzEzXTtcclxuICAgIG91dFsxNF0gPSBhWzE0XTtcclxuICAgIG91dFsxNV0gPSBhWzE1XTtcclxuICB9XHJcblxyXG4gIC8vIFBlcmZvcm0gYXhpcy1zcGVjaWZpYyBtYXRyaXggbXVsdGlwbGljYXRpb25cclxuICBvdXRbMF0gPSBhMDAgKiBjIC0gYTIwICogcztcclxuICBvdXRbMV0gPSBhMDEgKiBjIC0gYTIxICogcztcclxuICBvdXRbMl0gPSBhMDIgKiBjIC0gYTIyICogcztcclxuICBvdXRbM10gPSBhMDMgKiBjIC0gYTIzICogcztcclxuICBvdXRbOF0gPSBhMDAgKiBzICsgYTIwICogYztcclxuICBvdXRbOV0gPSBhMDEgKiBzICsgYTIxICogYztcclxuICBvdXRbMTBdID0gYTAyICogcyArIGEyMiAqIGM7XHJcbiAgb3V0WzExXSA9IGEwMyAqIHMgKyBhMjMgKiBjO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIGEgbWF0cml4IGJ5IHRoZSBnaXZlbiBhbmdsZSBhcm91bmQgdGhlIFogYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byByb3RhdGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVoob3V0LCBhLCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gIHZhciBhMDAgPSBhWzBdO1xyXG4gIHZhciBhMDEgPSBhWzFdO1xyXG4gIHZhciBhMDIgPSBhWzJdO1xyXG4gIHZhciBhMDMgPSBhWzNdO1xyXG4gIHZhciBhMTAgPSBhWzRdO1xyXG4gIHZhciBhMTEgPSBhWzVdO1xyXG4gIHZhciBhMTIgPSBhWzZdO1xyXG4gIHZhciBhMTMgPSBhWzddO1xyXG5cclxuICBpZiAoYSAhPT0gb3V0KSB7XHJcbiAgICAvLyBJZiB0aGUgc291cmNlIGFuZCBkZXN0aW5hdGlvbiBkaWZmZXIsIGNvcHkgdGhlIHVuY2hhbmdlZCBsYXN0IHJvd1xyXG4gICAgb3V0WzhdID0gYVs4XTtcclxuICAgIG91dFs5XSA9IGFbOV07XHJcbiAgICBvdXRbMTBdID0gYVsxMF07XHJcbiAgICBvdXRbMTFdID0gYVsxMV07XHJcbiAgICBvdXRbMTJdID0gYVsxMl07XHJcbiAgICBvdXRbMTNdID0gYVsxM107XHJcbiAgICBvdXRbMTRdID0gYVsxNF07XHJcbiAgICBvdXRbMTVdID0gYVsxNV07XHJcbiAgfVxyXG5cclxuICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgb3V0WzBdID0gYTAwICogYyArIGExMCAqIHM7XHJcbiAgb3V0WzFdID0gYTAxICogYyArIGExMSAqIHM7XHJcbiAgb3V0WzJdID0gYTAyICogYyArIGExMiAqIHM7XHJcbiAgb3V0WzNdID0gYTAzICogYyArIGExMyAqIHM7XHJcbiAgb3V0WzRdID0gYTEwICogYyAtIGEwMCAqIHM7XHJcbiAgb3V0WzVdID0gYTExICogYyAtIGEwMSAqIHM7XHJcbiAgb3V0WzZdID0gYTEyICogYyAtIGEwMiAqIHM7XHJcbiAgb3V0WzddID0gYTEzICogYyAtIGEwMyAqIHM7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21UcmFuc2xhdGlvbihvdXQsIHYpIHtcclxuICBvdXRbMF0gPSAxO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gMTtcclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gMDtcclxuICBvdXRbOV0gPSAwO1xyXG4gIG91dFsxMF0gPSAxO1xyXG4gIG91dFsxMV0gPSAwO1xyXG4gIG91dFsxMl0gPSB2WzBdO1xyXG4gIG91dFsxM10gPSB2WzFdO1xyXG4gIG91dFsxNF0gPSB2WzJdO1xyXG4gIG91dFsxNV0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSB2ZWN0b3Igc2NhbGluZ1xyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHt2ZWMzfSB2IFNjYWxpbmcgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tU2NhbGluZyhvdXQsIHYpIHtcclxuICBvdXRbMF0gPSB2WzBdO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gdlsxXTtcclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gMDtcclxuICBvdXRbOV0gPSAwO1xyXG4gIG91dFsxMF0gPSB2WzJdO1xyXG4gIG91dFsxMV0gPSAwO1xyXG4gIG91dFsxMl0gPSAwO1xyXG4gIG91dFsxM10gPSAwO1xyXG4gIG91dFsxNF0gPSAwO1xyXG4gIG91dFsxNV0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZSBhcm91bmQgYSBnaXZlbiBheGlzXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQucm90YXRlKGRlc3QsIGRlc3QsIHJhZCwgYXhpcyk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCwgYXhpcykge1xyXG4gIHZhciB4ID0gYXhpc1swXSxcclxuICAgICAgeSA9IGF4aXNbMV0sXHJcbiAgICAgIHogPSBheGlzWzJdO1xyXG4gIHZhciBsZW4gPSBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcclxuICB2YXIgcyA9IHZvaWQgMCxcclxuICAgICAgYyA9IHZvaWQgMCxcclxuICAgICAgdCA9IHZvaWQgMDtcclxuXHJcbiAgaWYgKGxlbiA8IGdsTWF0cml4LkVQU0lMT04pIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgbGVuID0gMSAvIGxlbjtcclxuICB4ICo9IGxlbjtcclxuICB5ICo9IGxlbjtcclxuICB6ICo9IGxlbjtcclxuXHJcbiAgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgYyA9IE1hdGguY29zKHJhZCk7XHJcbiAgdCA9IDEgLSBjO1xyXG5cclxuICAvLyBQZXJmb3JtIHJvdGF0aW9uLXNwZWNpZmljIG1hdHJpeCBtdWx0aXBsaWNhdGlvblxyXG4gIG91dFswXSA9IHggKiB4ICogdCArIGM7XHJcbiAgb3V0WzFdID0geSAqIHggKiB0ICsgeiAqIHM7XHJcbiAgb3V0WzJdID0geiAqIHggKiB0IC0geSAqIHM7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSB4ICogeSAqIHQgLSB6ICogcztcclxuICBvdXRbNV0gPSB5ICogeSAqIHQgKyBjO1xyXG4gIG91dFs2XSA9IHogKiB5ICogdCArIHggKiBzO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0geCAqIHogKiB0ICsgeSAqIHM7XHJcbiAgb3V0WzldID0geSAqIHogKiB0IC0geCAqIHM7XHJcbiAgb3V0WzEwXSA9IHogKiB6ICogdCArIGM7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IDA7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBYIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGVYKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21YUm90YXRpb24ob3V0LCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgb3V0WzBdID0gMTtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSAwO1xyXG4gIG91dFs1XSA9IGM7XHJcbiAgb3V0WzZdID0gcztcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IDA7XHJcbiAgb3V0WzldID0gLXM7XHJcbiAgb3V0WzEwXSA9IGM7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IDA7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBZIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGVZKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21ZUm90YXRpb24ob3V0LCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgb3V0WzBdID0gYztcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IC1zO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSAxO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSBzO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzEwXSA9IGM7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IDA7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gYW5nbGUgYXJvdW5kIHRoZSBaIGF4aXNcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC5yb3RhdGVaKGRlc3QsIGRlc3QsIHJhZCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCB0aGUgYW5nbGUgdG8gcm90YXRlIHRoZSBtYXRyaXggYnlcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21aUm90YXRpb24ob3V0LCByYWQpIHtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICAvLyBQZXJmb3JtIGF4aXMtc3BlY2lmaWMgbWF0cml4IG11bHRpcGxpY2F0aW9uXHJcbiAgb3V0WzBdID0gYztcclxuICBvdXRbMV0gPSBzO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSAtcztcclxuICBvdXRbNV0gPSBjO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAwO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzEwXSA9IDE7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IDA7XHJcbiAgb3V0WzE1XSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHF1YXRlcm5pb24gcm90YXRpb24gYW5kIHZlY3RvciB0cmFuc2xhdGlvblxyXG4gKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICpcclxuICogICAgIG1hdDQuaWRlbnRpdHkoZGVzdCk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCB2ZWMpO1xyXG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXQ0fSBxIFJvdGF0aW9uIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHt2ZWMzfSB2IFRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB2KSB7XHJcbiAgLy8gUXVhdGVybmlvbiBtYXRoXHJcbiAgdmFyIHggPSBxWzBdLFxyXG4gICAgICB5ID0gcVsxXSxcclxuICAgICAgeiA9IHFbMl0sXHJcbiAgICAgIHcgPSBxWzNdO1xyXG4gIHZhciB4MiA9IHggKyB4O1xyXG4gIHZhciB5MiA9IHkgKyB5O1xyXG4gIHZhciB6MiA9IHogKyB6O1xyXG5cclxuICB2YXIgeHggPSB4ICogeDI7XHJcbiAgdmFyIHh5ID0geCAqIHkyO1xyXG4gIHZhciB4eiA9IHggKiB6MjtcclxuICB2YXIgeXkgPSB5ICogeTI7XHJcbiAgdmFyIHl6ID0geSAqIHoyO1xyXG4gIHZhciB6eiA9IHogKiB6MjtcclxuICB2YXIgd3ggPSB3ICogeDI7XHJcbiAgdmFyIHd5ID0gdyAqIHkyO1xyXG4gIHZhciB3eiA9IHcgKiB6MjtcclxuXHJcbiAgb3V0WzBdID0gMSAtICh5eSArIHp6KTtcclxuICBvdXRbMV0gPSB4eSArIHd6O1xyXG4gIG91dFsyXSA9IHh6IC0gd3k7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSB4eSAtIHd6O1xyXG4gIG91dFs1XSA9IDEgLSAoeHggKyB6eik7XHJcbiAgb3V0WzZdID0geXogKyB3eDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IHh6ICsgd3k7XHJcbiAgb3V0WzldID0geXogLSB3eDtcclxuICBvdXRbMTBdID0gMSAtICh4eCArIHl5KTtcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gdlswXTtcclxuICBvdXRbMTNdID0gdlsxXTtcclxuICBvdXRbMTRdID0gdlsyXTtcclxuICBvdXRbMTVdID0gMTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgbWF0NCBmcm9tIGEgZHVhbCBxdWF0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBNYXRyaXhcclxuICogQHBhcmFtIHtxdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb25cclxuICogQHJldHVybnMge21hdDR9IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tUXVhdDIob3V0LCBhKSB7XHJcbiAgdmFyIHRyYW5zbGF0aW9uID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddO1xyXG5cclxuICB2YXIgbWFnbml0dWRlID0gYnggKiBieCArIGJ5ICogYnkgKyBieiAqIGJ6ICsgYncgKiBidztcclxuICAvL09ubHkgc2NhbGUgaWYgaXQgbWFrZXMgc2Vuc2VcclxuICBpZiAobWFnbml0dWRlID4gMCkge1xyXG4gICAgdHJhbnNsYXRpb25bMF0gPSAoYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieSkgKiAyIC8gbWFnbml0dWRlO1xyXG4gICAgdHJhbnNsYXRpb25bMV0gPSAoYXkgKiBidyArIGF3ICogYnkgKyBheiAqIGJ4IC0gYXggKiBieikgKiAyIC8gbWFnbml0dWRlO1xyXG4gICAgdHJhbnNsYXRpb25bMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyIC8gbWFnbml0dWRlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB0cmFuc2xhdGlvblswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDI7XHJcbiAgICB0cmFuc2xhdGlvblsxXSA9IChheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6KSAqIDI7XHJcbiAgICB0cmFuc2xhdGlvblsyXSA9IChheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4KSAqIDI7XHJcbiAgfVxyXG4gIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgYSwgdHJhbnNsYXRpb24pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB2ZWN0b3IgY29tcG9uZW50IG9mIGEgdHJhbnNmb3JtYXRpb25cclxuICogIG1hdHJpeC4gSWYgYSBtYXRyaXggaXMgYnVpbHQgd2l0aCBmcm9tUm90YXRpb25UcmFuc2xhdGlvbixcclxuICogIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgdHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxyXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgdHJhbnNsYXRpb24gY29tcG9uZW50XHJcbiAqIEBwYXJhbSAge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXHJcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uKG91dCwgbWF0KSB7XHJcbiAgb3V0WzBdID0gbWF0WzEyXTtcclxuICBvdXRbMV0gPSBtYXRbMTNdO1xyXG4gIG91dFsyXSA9IG1hdFsxNF07XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBzY2FsaW5nIGZhY3RvciBjb21wb25lbnQgb2YgYSB0cmFuc2Zvcm1hdGlvblxyXG4gKiAgbWF0cml4LiBJZiBhIG1hdHJpeCBpcyBidWlsdCB3aXRoIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uU2NhbGVcclxuICogIHdpdGggYSBub3JtYWxpemVkIFF1YXRlcm5pb24gcGFyYW10ZXIsIHRoZSByZXR1cm5lZCB2ZWN0b3Igd2lsbCBiZVxyXG4gKiAgdGhlIHNhbWUgYXMgdGhlIHNjYWxpbmcgdmVjdG9yXHJcbiAqICBvcmlnaW5hbGx5IHN1cHBsaWVkLlxyXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXQgVmVjdG9yIHRvIHJlY2VpdmUgc2NhbGluZyBmYWN0b3IgY29tcG9uZW50XHJcbiAqIEBwYXJhbSAge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXHJcbiAqIEByZXR1cm4ge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxpbmcob3V0LCBtYXQpIHtcclxuICB2YXIgbTExID0gbWF0WzBdO1xyXG4gIHZhciBtMTIgPSBtYXRbMV07XHJcbiAgdmFyIG0xMyA9IG1hdFsyXTtcclxuICB2YXIgbTIxID0gbWF0WzRdO1xyXG4gIHZhciBtMjIgPSBtYXRbNV07XHJcbiAgdmFyIG0yMyA9IG1hdFs2XTtcclxuICB2YXIgbTMxID0gbWF0WzhdO1xyXG4gIHZhciBtMzIgPSBtYXRbOV07XHJcbiAgdmFyIG0zMyA9IG1hdFsxMF07XHJcblxyXG4gIG91dFswXSA9IE1hdGguc3FydChtMTEgKiBtMTEgKyBtMTIgKiBtMTIgKyBtMTMgKiBtMTMpO1xyXG4gIG91dFsxXSA9IE1hdGguc3FydChtMjEgKiBtMjEgKyBtMjIgKiBtMjIgKyBtMjMgKiBtMjMpO1xyXG4gIG91dFsyXSA9IE1hdGguc3FydChtMzEgKiBtMzEgKyBtMzIgKiBtMzIgKyBtMzMgKiBtMzMpO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHF1YXRlcm5pb24gcmVwcmVzZW50aW5nIHRoZSByb3RhdGlvbmFsIGNvbXBvbmVudFxyXG4gKiAgb2YgYSB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguIElmIGEgbWF0cml4IGlzIGJ1aWx0IHdpdGhcclxuICogIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uLCB0aGUgcmV0dXJuZWQgcXVhdGVybmlvbiB3aWxsIGJlIHRoZVxyXG4gKiAgc2FtZSBhcyB0aGUgcXVhdGVybmlvbiBvcmlnaW5hbGx5IHN1cHBsaWVkLlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBRdWF0ZXJuaW9uIHRvIHJlY2VpdmUgdGhlIHJvdGF0aW9uIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge21hdDR9IG1hdCBNYXRyaXggdG8gYmUgZGVjb21wb3NlZCAoaW5wdXQpXHJcbiAqIEByZXR1cm4ge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFJvdGF0aW9uKG91dCwgbWF0KSB7XHJcbiAgLy8gQWxnb3JpdGhtIHRha2VuIGZyb20gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL21hdHJpeFRvUXVhdGVybmlvbi9pbmRleC5odG1cclxuICB2YXIgdHJhY2UgPSBtYXRbMF0gKyBtYXRbNV0gKyBtYXRbMTBdO1xyXG4gIHZhciBTID0gMDtcclxuXHJcbiAgaWYgKHRyYWNlID4gMCkge1xyXG4gICAgUyA9IE1hdGguc3FydCh0cmFjZSArIDEuMCkgKiAyO1xyXG4gICAgb3V0WzNdID0gMC4yNSAqIFM7XHJcbiAgICBvdXRbMF0gPSAobWF0WzZdIC0gbWF0WzldKSAvIFM7XHJcbiAgICBvdXRbMV0gPSAobWF0WzhdIC0gbWF0WzJdKSAvIFM7XHJcbiAgICBvdXRbMl0gPSAobWF0WzFdIC0gbWF0WzRdKSAvIFM7XHJcbiAgfSBlbHNlIGlmIChtYXRbMF0gPiBtYXRbNV0gJiYgbWF0WzBdID4gbWF0WzEwXSkge1xyXG4gICAgUyA9IE1hdGguc3FydCgxLjAgKyBtYXRbMF0gLSBtYXRbNV0gLSBtYXRbMTBdKSAqIDI7XHJcbiAgICBvdXRbM10gPSAobWF0WzZdIC0gbWF0WzldKSAvIFM7XHJcbiAgICBvdXRbMF0gPSAwLjI1ICogUztcclxuICAgIG91dFsxXSA9IChtYXRbMV0gKyBtYXRbNF0pIC8gUztcclxuICAgIG91dFsyXSA9IChtYXRbOF0gKyBtYXRbMl0pIC8gUztcclxuICB9IGVsc2UgaWYgKG1hdFs1XSA+IG1hdFsxMF0pIHtcclxuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgbWF0WzVdIC0gbWF0WzBdIC0gbWF0WzEwXSkgKiAyO1xyXG4gICAgb3V0WzNdID0gKG1hdFs4XSAtIG1hdFsyXSkgLyBTO1xyXG4gICAgb3V0WzBdID0gKG1hdFsxXSArIG1hdFs0XSkgLyBTO1xyXG4gICAgb3V0WzFdID0gMC4yNSAqIFM7XHJcbiAgICBvdXRbMl0gPSAobWF0WzZdICsgbWF0WzldKSAvIFM7XHJcbiAgfSBlbHNlIHtcclxuICAgIFMgPSBNYXRoLnNxcnQoMS4wICsgbWF0WzEwXSAtIG1hdFswXSAtIG1hdFs1XSkgKiAyO1xyXG4gICAgb3V0WzNdID0gKG1hdFsxXSAtIG1hdFs0XSkgLyBTO1xyXG4gICAgb3V0WzBdID0gKG1hdFs4XSArIG1hdFsyXSkgLyBTO1xyXG4gICAgb3V0WzFdID0gKG1hdFs2XSArIG1hdFs5XSkgLyBTO1xyXG4gICAgb3V0WzJdID0gMC4yNSAqIFM7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGVcclxuICogVGhpcyBpcyBlcXVpdmFsZW50IHRvIChidXQgbXVjaCBmYXN0ZXIgdGhhbik6XHJcbiAqXHJcbiAqICAgICBtYXQ0LmlkZW50aXR5KGRlc3QpO1xyXG4gKiAgICAgbWF0NC50cmFuc2xhdGUoZGVzdCwgdmVjKTtcclxuICogICAgIGxldCBxdWF0TWF0ID0gbWF0NC5jcmVhdGUoKTtcclxuICogICAgIHF1YXQ0LnRvTWF0NChxdWF0LCBxdWF0TWF0KTtcclxuICogICAgIG1hdDQubXVsdGlwbHkoZGVzdCwgcXVhdE1hdCk7XHJcbiAqICAgICBtYXQ0LnNjYWxlKGRlc3QsIHNjYWxlKVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdDR9IHEgUm90YXRpb24gcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3ZlYzN9IHYgVHJhbnNsYXRpb24gdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gcyBTY2FsaW5nIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZShvdXQsIHEsIHYsIHMpIHtcclxuICAvLyBRdWF0ZXJuaW9uIG1hdGhcclxuICB2YXIgeCA9IHFbMF0sXHJcbiAgICAgIHkgPSBxWzFdLFxyXG4gICAgICB6ID0gcVsyXSxcclxuICAgICAgdyA9IHFbM107XHJcbiAgdmFyIHgyID0geCArIHg7XHJcbiAgdmFyIHkyID0geSArIHk7XHJcbiAgdmFyIHoyID0geiArIHo7XHJcblxyXG4gIHZhciB4eCA9IHggKiB4MjtcclxuICB2YXIgeHkgPSB4ICogeTI7XHJcbiAgdmFyIHh6ID0geCAqIHoyO1xyXG4gIHZhciB5eSA9IHkgKiB5MjtcclxuICB2YXIgeXogPSB5ICogejI7XHJcbiAgdmFyIHp6ID0geiAqIHoyO1xyXG4gIHZhciB3eCA9IHcgKiB4MjtcclxuICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgdmFyIHd6ID0gdyAqIHoyO1xyXG4gIHZhciBzeCA9IHNbMF07XHJcbiAgdmFyIHN5ID0gc1sxXTtcclxuICB2YXIgc3ogPSBzWzJdO1xyXG5cclxuICBvdXRbMF0gPSAoMSAtICh5eSArIHp6KSkgKiBzeDtcclxuICBvdXRbMV0gPSAoeHkgKyB3eikgKiBzeDtcclxuICBvdXRbMl0gPSAoeHogLSB3eSkgKiBzeDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9ICh4eSAtIHd6KSAqIHN5O1xyXG4gIG91dFs1XSA9ICgxIC0gKHh4ICsgenopKSAqIHN5O1xyXG4gIG91dFs2XSA9ICh5eiArIHd4KSAqIHN5O1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gKHh6ICsgd3kpICogc3o7XHJcbiAgb3V0WzldID0gKHl6IC0gd3gpICogc3o7XHJcbiAgb3V0WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6O1xyXG4gIG91dFsxMV0gPSAwO1xyXG4gIG91dFsxMl0gPSB2WzBdO1xyXG4gIG91dFsxM10gPSB2WzFdO1xyXG4gIG91dFsxNF0gPSB2WzJdO1xyXG4gIG91dFsxNV0gPSAxO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG1hdHJpeCBmcm9tIGEgcXVhdGVybmlvbiByb3RhdGlvbiwgdmVjdG9yIHRyYW5zbGF0aW9uIGFuZCB2ZWN0b3Igc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4gb3JpZ2luXHJcbiAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gKlxyXG4gKiAgICAgbWF0NC5pZGVudGl0eShkZXN0KTtcclxuICogICAgIG1hdDQudHJhbnNsYXRlKGRlc3QsIHZlYyk7XHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBvcmlnaW4pO1xyXG4gKiAgICAgbGV0IHF1YXRNYXQgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gKiAgICAgcXVhdDQudG9NYXQ0KHF1YXQsIHF1YXRNYXQpO1xyXG4gKiAgICAgbWF0NC5tdWx0aXBseShkZXN0LCBxdWF0TWF0KTtcclxuICogICAgIG1hdDQuc2NhbGUoZGVzdCwgc2NhbGUpXHJcbiAqICAgICBtYXQ0LnRyYW5zbGF0ZShkZXN0LCBuZWdhdGl2ZU9yaWdpbik7XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtxdWF0NH0gcSBSb3RhdGlvbiBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7dmVjM30gdiBUcmFuc2xhdGlvbiB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBzIFNjYWxpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gbyBUaGUgb3JpZ2luIHZlY3RvciBhcm91bmQgd2hpY2ggdG8gc2NhbGUgYW5kIHJvdGF0ZVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZU9yaWdpbihvdXQsIHEsIHYsIHMsIG8pIHtcclxuICAvLyBRdWF0ZXJuaW9uIG1hdGhcclxuICB2YXIgeCA9IHFbMF0sXHJcbiAgICAgIHkgPSBxWzFdLFxyXG4gICAgICB6ID0gcVsyXSxcclxuICAgICAgdyA9IHFbM107XHJcbiAgdmFyIHgyID0geCArIHg7XHJcbiAgdmFyIHkyID0geSArIHk7XHJcbiAgdmFyIHoyID0geiArIHo7XHJcblxyXG4gIHZhciB4eCA9IHggKiB4MjtcclxuICB2YXIgeHkgPSB4ICogeTI7XHJcbiAgdmFyIHh6ID0geCAqIHoyO1xyXG4gIHZhciB5eSA9IHkgKiB5MjtcclxuICB2YXIgeXogPSB5ICogejI7XHJcbiAgdmFyIHp6ID0geiAqIHoyO1xyXG4gIHZhciB3eCA9IHcgKiB4MjtcclxuICB2YXIgd3kgPSB3ICogeTI7XHJcbiAgdmFyIHd6ID0gdyAqIHoyO1xyXG5cclxuICB2YXIgc3ggPSBzWzBdO1xyXG4gIHZhciBzeSA9IHNbMV07XHJcbiAgdmFyIHN6ID0gc1syXTtcclxuXHJcbiAgdmFyIG94ID0gb1swXTtcclxuICB2YXIgb3kgPSBvWzFdO1xyXG4gIHZhciBveiA9IG9bMl07XHJcblxyXG4gIHZhciBvdXQwID0gKDEgLSAoeXkgKyB6eikpICogc3g7XHJcbiAgdmFyIG91dDEgPSAoeHkgKyB3eikgKiBzeDtcclxuICB2YXIgb3V0MiA9ICh4eiAtIHd5KSAqIHN4O1xyXG4gIHZhciBvdXQ0ID0gKHh5IC0gd3opICogc3k7XHJcbiAgdmFyIG91dDUgPSAoMSAtICh4eCArIHp6KSkgKiBzeTtcclxuICB2YXIgb3V0NiA9ICh5eiArIHd4KSAqIHN5O1xyXG4gIHZhciBvdXQ4ID0gKHh6ICsgd3kpICogc3o7XHJcbiAgdmFyIG91dDkgPSAoeXogLSB3eCkgKiBzejtcclxuICB2YXIgb3V0MTAgPSAoMSAtICh4eCArIHl5KSkgKiBzejtcclxuXHJcbiAgb3V0WzBdID0gb3V0MDtcclxuICBvdXRbMV0gPSBvdXQxO1xyXG4gIG91dFsyXSA9IG91dDI7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSBvdXQ0O1xyXG4gIG91dFs1XSA9IG91dDU7XHJcbiAgb3V0WzZdID0gb3V0NjtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IG91dDg7XHJcbiAgb3V0WzldID0gb3V0OTtcclxuICBvdXRbMTBdID0gb3V0MTA7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IHZbMF0gKyBveCAtIChvdXQwICogb3ggKyBvdXQ0ICogb3kgKyBvdXQ4ICogb3opO1xyXG4gIG91dFsxM10gPSB2WzFdICsgb3kgLSAob3V0MSAqIG94ICsgb3V0NSAqIG95ICsgb3V0OSAqIG96KTtcclxuICBvdXRbMTRdID0gdlsyXSArIG96IC0gKG91dDIgKiBveCArIG91dDYgKiBveSArIG91dDEwICogb3opO1xyXG4gIG91dFsxNV0gPSAxO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyBhIDR4NCBtYXRyaXggZnJvbSB0aGUgZ2l2ZW4gcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdH0gcSBRdWF0ZXJuaW9uIHRvIGNyZWF0ZSBtYXRyaXggZnJvbVxyXG4gKlxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVF1YXQob3V0LCBxKSB7XHJcbiAgdmFyIHggPSBxWzBdLFxyXG4gICAgICB5ID0gcVsxXSxcclxuICAgICAgeiA9IHFbMl0sXHJcbiAgICAgIHcgPSBxWzNdO1xyXG4gIHZhciB4MiA9IHggKyB4O1xyXG4gIHZhciB5MiA9IHkgKyB5O1xyXG4gIHZhciB6MiA9IHogKyB6O1xyXG5cclxuICB2YXIgeHggPSB4ICogeDI7XHJcbiAgdmFyIHl4ID0geSAqIHgyO1xyXG4gIHZhciB5eSA9IHkgKiB5MjtcclxuICB2YXIgenggPSB6ICogeDI7XHJcbiAgdmFyIHp5ID0geiAqIHkyO1xyXG4gIHZhciB6eiA9IHogKiB6MjtcclxuICB2YXIgd3ggPSB3ICogeDI7XHJcbiAgdmFyIHd5ID0gdyAqIHkyO1xyXG4gIHZhciB3eiA9IHcgKiB6MjtcclxuXHJcbiAgb3V0WzBdID0gMSAtIHl5IC0geno7XHJcbiAgb3V0WzFdID0geXggKyB3ejtcclxuICBvdXRbMl0gPSB6eCAtIHd5O1xyXG4gIG91dFszXSA9IDA7XHJcblxyXG4gIG91dFs0XSA9IHl4IC0gd3o7XHJcbiAgb3V0WzVdID0gMSAtIHh4IC0geno7XHJcbiAgb3V0WzZdID0genkgKyB3eDtcclxuICBvdXRbN10gPSAwO1xyXG5cclxuICBvdXRbOF0gPSB6eCArIHd5O1xyXG4gIG91dFs5XSA9IHp5IC0gd3g7XHJcbiAgb3V0WzEwXSA9IDEgLSB4eCAtIHl5O1xyXG4gIG91dFsxMV0gPSAwO1xyXG5cclxuICBvdXRbMTJdID0gMDtcclxuICBvdXRbMTNdID0gMDtcclxuICBvdXRbMTRdID0gMDtcclxuICBvdXRbMTVdID0gMTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIGZydXN0dW0gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCBtYXQ0IGZydXN0dW0gbWF0cml4IHdpbGwgYmUgd3JpdHRlbiBpbnRvXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBsZWZ0IExlZnQgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJpZ2h0IFJpZ2h0IGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBib3R0b20gQm90dG9tIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0b3AgVG9wIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtOdW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZydXN0dW0ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xyXG4gIHZhciBybCA9IDEgLyAocmlnaHQgLSBsZWZ0KTtcclxuICB2YXIgdGIgPSAxIC8gKHRvcCAtIGJvdHRvbSk7XHJcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcclxuICBvdXRbMF0gPSBuZWFyICogMiAqIHJsO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gbmVhciAqIDIgKiB0YjtcclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gKHJpZ2h0ICsgbGVmdCkgKiBybDtcclxuICBvdXRbOV0gPSAodG9wICsgYm90dG9tKSAqIHRiO1xyXG4gIG91dFsxMF0gPSAoZmFyICsgbmVhcikgKiBuZjtcclxuICBvdXRbMTFdID0gLTE7XHJcbiAgb3V0WzEyXSA9IDA7XHJcbiAgb3V0WzEzXSA9IDA7XHJcbiAgb3V0WzE0XSA9IGZhciAqIG5lYXIgKiAyICogbmY7XHJcbiAgb3V0WzE1XSA9IDA7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGJvdW5kcy5cclxuICogUGFzc2luZyBudWxsL3VuZGVmaW5lZC9ubyB2YWx1ZSBmb3IgZmFyIHdpbGwgZ2VuZXJhdGUgaW5maW5pdGUgcHJvamVjdGlvbiBtYXRyaXguXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtudW1iZXJ9IGZvdnkgVmVydGljYWwgZmllbGQgb2YgdmlldyBpbiByYWRpYW5zXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBhc3BlY3QgQXNwZWN0IHJhdGlvLiB0eXBpY2FsbHkgdmlld3BvcnQgd2lkdGgvaGVpZ2h0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuZWFyIE5lYXIgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGZhciBGYXIgYm91bmQgb2YgdGhlIGZydXN0dW0sIGNhbiBiZSBudWxsIG9yIEluZmluaXR5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZShvdXQsIGZvdnksIGFzcGVjdCwgbmVhciwgZmFyKSB7XHJcbiAgdmFyIGYgPSAxLjAgLyBNYXRoLnRhbihmb3Z5IC8gMiksXHJcbiAgICAgIG5mID0gdm9pZCAwO1xyXG4gIG91dFswXSA9IGYgLyBhc3BlY3Q7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDA7XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSBmO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICBvdXRbOF0gPSAwO1xyXG4gIG91dFs5XSA9IDA7XHJcbiAgb3V0WzExXSA9IC0xO1xyXG4gIG91dFsxMl0gPSAwO1xyXG4gIG91dFsxM10gPSAwO1xyXG4gIG91dFsxNV0gPSAwO1xyXG4gIGlmIChmYXIgIT0gbnVsbCAmJiBmYXIgIT09IEluZmluaXR5KSB7XHJcbiAgICBuZiA9IDEgLyAobmVhciAtIGZhcik7XHJcbiAgICBvdXRbMTBdID0gKGZhciArIG5lYXIpICogbmY7XHJcbiAgICBvdXRbMTRdID0gMiAqIGZhciAqIG5lYXIgKiBuZjtcclxuICB9IGVsc2Uge1xyXG4gICAgb3V0WzEwXSA9IC0xO1xyXG4gICAgb3V0WzE0XSA9IC0yICogbmVhcjtcclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHBlcnNwZWN0aXZlIHByb2plY3Rpb24gbWF0cml4IHdpdGggdGhlIGdpdmVuIGZpZWxkIG9mIHZpZXcuXHJcbiAqIFRoaXMgaXMgcHJpbWFyaWx5IHVzZWZ1bCBmb3IgZ2VuZXJhdGluZyBwcm9qZWN0aW9uIG1hdHJpY2VzIHRvIGJlIHVzZWRcclxuICogd2l0aCB0aGUgc3RpbGwgZXhwZXJpZW1lbnRhbCBXZWJWUiBBUEkuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtPYmplY3R9IGZvdiBPYmplY3QgY29udGFpbmluZyB0aGUgZm9sbG93aW5nIHZhbHVlczogdXBEZWdyZWVzLCBkb3duRGVncmVlcywgbGVmdERlZ3JlZXMsIHJpZ2h0RGVncmVlc1xyXG4gKiBAcGFyYW0ge251bWJlcn0gbmVhciBOZWFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBmYXIgRmFyIGJvdW5kIG9mIHRoZSBmcnVzdHVtXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyhvdXQsIGZvdiwgbmVhciwgZmFyKSB7XHJcbiAgdmFyIHVwVGFuID0gTWF0aC50YW4oZm92LnVwRGVncmVlcyAqIE1hdGguUEkgLyAxODAuMCk7XHJcbiAgdmFyIGRvd25UYW4gPSBNYXRoLnRhbihmb3YuZG93bkRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwLjApO1xyXG4gIHZhciBsZWZ0VGFuID0gTWF0aC50YW4oZm92LmxlZnREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcclxuICB2YXIgcmlnaHRUYW4gPSBNYXRoLnRhbihmb3YucmlnaHREZWdyZWVzICogTWF0aC5QSSAvIDE4MC4wKTtcclxuICB2YXIgeFNjYWxlID0gMi4wIC8gKGxlZnRUYW4gKyByaWdodFRhbik7XHJcbiAgdmFyIHlTY2FsZSA9IDIuMCAvICh1cFRhbiArIGRvd25UYW4pO1xyXG5cclxuICBvdXRbMF0gPSB4U2NhbGU7XHJcbiAgb3V0WzFdID0gMC4wO1xyXG4gIG91dFsyXSA9IDAuMDtcclxuICBvdXRbM10gPSAwLjA7XHJcbiAgb3V0WzRdID0gMC4wO1xyXG4gIG91dFs1XSA9IHlTY2FsZTtcclxuICBvdXRbNl0gPSAwLjA7XHJcbiAgb3V0WzddID0gMC4wO1xyXG4gIG91dFs4XSA9IC0oKGxlZnRUYW4gLSByaWdodFRhbikgKiB4U2NhbGUgKiAwLjUpO1xyXG4gIG91dFs5XSA9ICh1cFRhbiAtIGRvd25UYW4pICogeVNjYWxlICogMC41O1xyXG4gIG91dFsxMF0gPSBmYXIgLyAobmVhciAtIGZhcik7XHJcbiAgb3V0WzExXSA9IC0xLjA7XHJcbiAgb3V0WzEyXSA9IDAuMDtcclxuICBvdXRbMTNdID0gMC4wO1xyXG4gIG91dFsxNF0gPSBmYXIgKiBuZWFyIC8gKG5lYXIgLSBmYXIpO1xyXG4gIG91dFsxNV0gPSAwLjA7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG9ydGhvZ29uYWwgcHJvamVjdGlvbiBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gYm91bmRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHtudW1iZXJ9IGxlZnQgTGVmdCBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmlnaHQgUmlnaHQgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IGJvdHRvbSBCb3R0b20gYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IHRvcCBUb3AgYm91bmQgb2YgdGhlIGZydXN0dW1cclxuICogQHBhcmFtIHtudW1iZXJ9IG5lYXIgTmVhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gZmFyIEZhciBib3VuZCBvZiB0aGUgZnJ1c3R1bVxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gb3J0aG8ob3V0LCBsZWZ0LCByaWdodCwgYm90dG9tLCB0b3AsIG5lYXIsIGZhcikge1xyXG4gIHZhciBsciA9IDEgLyAobGVmdCAtIHJpZ2h0KTtcclxuICB2YXIgYnQgPSAxIC8gKGJvdHRvbSAtIHRvcCk7XHJcbiAgdmFyIG5mID0gMSAvIChuZWFyIC0gZmFyKTtcclxuICBvdXRbMF0gPSAtMiAqIGxyO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gLTIgKiBidDtcclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0gMDtcclxuICBvdXRbOV0gPSAwO1xyXG4gIG91dFsxMF0gPSAyICogbmY7XHJcbiAgb3V0WzExXSA9IDA7XHJcbiAgb3V0WzEyXSA9IChsZWZ0ICsgcmlnaHQpICogbHI7XHJcbiAgb3V0WzEzXSA9ICh0b3AgKyBib3R0b20pICogYnQ7XHJcbiAgb3V0WzE0XSA9IChmYXIgKyBuZWFyKSAqIG5mO1xyXG4gIG91dFsxNV0gPSAxO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSBsb29rLWF0IG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBleWUgcG9zaXRpb24sIGZvY2FsIHBvaW50LCBhbmQgdXAgYXhpcy5cclxuICogSWYgeW91IHdhbnQgYSBtYXRyaXggdGhhdCBhY3R1YWxseSBtYWtlcyBhbiBvYmplY3QgbG9vayBhdCBhbm90aGVyIG9iamVjdCwgeW91IHNob3VsZCB1c2UgdGFyZ2V0VG8gaW5zdGVhZC5cclxuICpcclxuICogQHBhcmFtIHttYXQ0fSBvdXQgbWF0NCBmcnVzdHVtIG1hdHJpeCB3aWxsIGJlIHdyaXR0ZW4gaW50b1xyXG4gKiBAcGFyYW0ge3ZlYzN9IGV5ZSBQb3NpdGlvbiBvZiB0aGUgdmlld2VyXHJcbiAqIEBwYXJhbSB7dmVjM30gY2VudGVyIFBvaW50IHRoZSB2aWV3ZXIgaXMgbG9va2luZyBhdFxyXG4gKiBAcGFyYW0ge3ZlYzN9IHVwIHZlYzMgcG9pbnRpbmcgdXBcclxuICogQHJldHVybnMge21hdDR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGxvb2tBdChvdXQsIGV5ZSwgY2VudGVyLCB1cCkge1xyXG4gIHZhciB4MCA9IHZvaWQgMCxcclxuICAgICAgeDEgPSB2b2lkIDAsXHJcbiAgICAgIHgyID0gdm9pZCAwLFxyXG4gICAgICB5MCA9IHZvaWQgMCxcclxuICAgICAgeTEgPSB2b2lkIDAsXHJcbiAgICAgIHkyID0gdm9pZCAwLFxyXG4gICAgICB6MCA9IHZvaWQgMCxcclxuICAgICAgejEgPSB2b2lkIDAsXHJcbiAgICAgIHoyID0gdm9pZCAwLFxyXG4gICAgICBsZW4gPSB2b2lkIDA7XHJcbiAgdmFyIGV5ZXggPSBleWVbMF07XHJcbiAgdmFyIGV5ZXkgPSBleWVbMV07XHJcbiAgdmFyIGV5ZXogPSBleWVbMl07XHJcbiAgdmFyIHVweCA9IHVwWzBdO1xyXG4gIHZhciB1cHkgPSB1cFsxXTtcclxuICB2YXIgdXB6ID0gdXBbMl07XHJcbiAgdmFyIGNlbnRlcnggPSBjZW50ZXJbMF07XHJcbiAgdmFyIGNlbnRlcnkgPSBjZW50ZXJbMV07XHJcbiAgdmFyIGNlbnRlcnogPSBjZW50ZXJbMl07XHJcblxyXG4gIGlmIChNYXRoLmFicyhleWV4IC0gY2VudGVyeCkgPCBnbE1hdHJpeC5FUFNJTE9OICYmIE1hdGguYWJzKGV5ZXkgLSBjZW50ZXJ5KSA8IGdsTWF0cml4LkVQU0lMT04gJiYgTWF0aC5hYnMoZXlleiAtIGNlbnRlcnopIDwgZ2xNYXRyaXguRVBTSUxPTikge1xyXG4gICAgcmV0dXJuIGlkZW50aXR5KG91dCk7XHJcbiAgfVxyXG5cclxuICB6MCA9IGV5ZXggLSBjZW50ZXJ4O1xyXG4gIHoxID0gZXlleSAtIGNlbnRlcnk7XHJcbiAgejIgPSBleWV6IC0gY2VudGVyejtcclxuXHJcbiAgbGVuID0gMSAvIE1hdGguc3FydCh6MCAqIHowICsgejEgKiB6MSArIHoyICogejIpO1xyXG4gIHowICo9IGxlbjtcclxuICB6MSAqPSBsZW47XHJcbiAgejIgKj0gbGVuO1xyXG5cclxuICB4MCA9IHVweSAqIHoyIC0gdXB6ICogejE7XHJcbiAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyO1xyXG4gIHgyID0gdXB4ICogejEgLSB1cHkgKiB6MDtcclxuICBsZW4gPSBNYXRoLnNxcnQoeDAgKiB4MCArIHgxICogeDEgKyB4MiAqIHgyKTtcclxuICBpZiAoIWxlbikge1xyXG4gICAgeDAgPSAwO1xyXG4gICAgeDEgPSAwO1xyXG4gICAgeDIgPSAwO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBsZW4gPSAxIC8gbGVuO1xyXG4gICAgeDAgKj0gbGVuO1xyXG4gICAgeDEgKj0gbGVuO1xyXG4gICAgeDIgKj0gbGVuO1xyXG4gIH1cclxuXHJcbiAgeTAgPSB6MSAqIHgyIC0gejIgKiB4MTtcclxuICB5MSA9IHoyICogeDAgLSB6MCAqIHgyO1xyXG4gIHkyID0gejAgKiB4MSAtIHoxICogeDA7XHJcblxyXG4gIGxlbiA9IE1hdGguc3FydCh5MCAqIHkwICsgeTEgKiB5MSArIHkyICogeTIpO1xyXG4gIGlmICghbGVuKSB7XHJcbiAgICB5MCA9IDA7XHJcbiAgICB5MSA9IDA7XHJcbiAgICB5MiA9IDA7XHJcbiAgfSBlbHNlIHtcclxuICAgIGxlbiA9IDEgLyBsZW47XHJcbiAgICB5MCAqPSBsZW47XHJcbiAgICB5MSAqPSBsZW47XHJcbiAgICB5MiAqPSBsZW47XHJcbiAgfVxyXG5cclxuICBvdXRbMF0gPSB4MDtcclxuICBvdXRbMV0gPSB5MDtcclxuICBvdXRbMl0gPSB6MDtcclxuICBvdXRbM10gPSAwO1xyXG4gIG91dFs0XSA9IHgxO1xyXG4gIG91dFs1XSA9IHkxO1xyXG4gIG91dFs2XSA9IHoxO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgb3V0WzhdID0geDI7XHJcbiAgb3V0WzldID0geTI7XHJcbiAgb3V0WzEwXSA9IHoyO1xyXG4gIG91dFsxMV0gPSAwO1xyXG4gIG91dFsxMl0gPSAtKHgwICogZXlleCArIHgxICogZXlleSArIHgyICogZXlleik7XHJcbiAgb3V0WzEzXSA9IC0oeTAgKiBleWV4ICsgeTEgKiBleWV5ICsgeTIgKiBleWV6KTtcclxuICBvdXRbMTRdID0gLSh6MCAqIGV5ZXggKyB6MSAqIGV5ZXkgKyB6MiAqIGV5ZXopO1xyXG4gIG91dFsxNV0gPSAxO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2VuZXJhdGVzIGEgbWF0cml4IHRoYXQgbWFrZXMgc29tZXRoaW5nIGxvb2sgYXQgc29tZXRoaW5nIGVsc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IG1hdDQgZnJ1c3R1bSBtYXRyaXggd2lsbCBiZSB3cml0dGVuIGludG9cclxuICogQHBhcmFtIHt2ZWMzfSBleWUgUG9zaXRpb24gb2YgdGhlIHZpZXdlclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGNlbnRlciBQb2ludCB0aGUgdmlld2VyIGlzIGxvb2tpbmcgYXRcclxuICogQHBhcmFtIHt2ZWMzfSB1cCB2ZWMzIHBvaW50aW5nIHVwXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0YXJnZXRUbyhvdXQsIGV5ZSwgdGFyZ2V0LCB1cCkge1xyXG4gIHZhciBleWV4ID0gZXllWzBdLFxyXG4gICAgICBleWV5ID0gZXllWzFdLFxyXG4gICAgICBleWV6ID0gZXllWzJdLFxyXG4gICAgICB1cHggPSB1cFswXSxcclxuICAgICAgdXB5ID0gdXBbMV0sXHJcbiAgICAgIHVweiA9IHVwWzJdO1xyXG5cclxuICB2YXIgejAgPSBleWV4IC0gdGFyZ2V0WzBdLFxyXG4gICAgICB6MSA9IGV5ZXkgLSB0YXJnZXRbMV0sXHJcbiAgICAgIHoyID0gZXlleiAtIHRhcmdldFsyXTtcclxuXHJcbiAgdmFyIGxlbiA9IHowICogejAgKyB6MSAqIHoxICsgejIgKiB6MjtcclxuICBpZiAobGVuID4gMCkge1xyXG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xyXG4gICAgejAgKj0gbGVuO1xyXG4gICAgejEgKj0gbGVuO1xyXG4gICAgejIgKj0gbGVuO1xyXG4gIH1cclxuXHJcbiAgdmFyIHgwID0gdXB5ICogejIgLSB1cHogKiB6MSxcclxuICAgICAgeDEgPSB1cHogKiB6MCAtIHVweCAqIHoyLFxyXG4gICAgICB4MiA9IHVweCAqIHoxIC0gdXB5ICogejA7XHJcblxyXG4gIGxlbiA9IHgwICogeDAgKyB4MSAqIHgxICsgeDIgKiB4MjtcclxuICBpZiAobGVuID4gMCkge1xyXG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xyXG4gICAgeDAgKj0gbGVuO1xyXG4gICAgeDEgKj0gbGVuO1xyXG4gICAgeDIgKj0gbGVuO1xyXG4gIH1cclxuXHJcbiAgb3V0WzBdID0geDA7XHJcbiAgb3V0WzFdID0geDE7XHJcbiAgb3V0WzJdID0geDI7XHJcbiAgb3V0WzNdID0gMDtcclxuICBvdXRbNF0gPSB6MSAqIHgyIC0gejIgKiB4MTtcclxuICBvdXRbNV0gPSB6MiAqIHgwIC0gejAgKiB4MjtcclxuICBvdXRbNl0gPSB6MCAqIHgxIC0gejEgKiB4MDtcclxuICBvdXRbN10gPSAwO1xyXG4gIG91dFs4XSA9IHowO1xyXG4gIG91dFs5XSA9IHoxO1xyXG4gIG91dFsxMF0gPSB6MjtcclxuICBvdXRbMTFdID0gMDtcclxuICBvdXRbMTJdID0gZXlleDtcclxuICBvdXRbMTNdID0gZXlleTtcclxuICBvdXRbMTRdID0gZXllejtcclxuICBvdXRbMTVdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXQ0XHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSBtYXRyaXggdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgbWF0cml4XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcclxuICByZXR1cm4gJ21hdDQoJyArIGFbMF0gKyAnLCAnICsgYVsxXSArICcsICcgKyBhWzJdICsgJywgJyArIGFbM10gKyAnLCAnICsgYVs0XSArICcsICcgKyBhWzVdICsgJywgJyArIGFbNl0gKyAnLCAnICsgYVs3XSArICcsICcgKyBhWzhdICsgJywgJyArIGFbOV0gKyAnLCAnICsgYVsxMF0gKyAnLCAnICsgYVsxMV0gKyAnLCAnICsgYVsxMl0gKyAnLCAnICsgYVsxM10gKyAnLCAnICsgYVsxNF0gKyAnLCAnICsgYVsxNV0gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZyb2Jlbml1cyBub3JtIG9mIGEgbWF0NFxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2ZcclxuICogQHJldHVybnMge051bWJlcn0gRnJvYmVuaXVzIG5vcm1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9iKGEpIHtcclxuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGFbMF0sIDIpICsgTWF0aC5wb3coYVsxXSwgMikgKyBNYXRoLnBvdyhhWzJdLCAyKSArIE1hdGgucG93KGFbM10sIDIpICsgTWF0aC5wb3coYVs0XSwgMikgKyBNYXRoLnBvdyhhWzVdLCAyKSArIE1hdGgucG93KGFbNl0sIDIpICsgTWF0aC5wb3coYVs3XSwgMikgKyBNYXRoLnBvdyhhWzhdLCAyKSArIE1hdGgucG93KGFbOV0sIDIpICsgTWF0aC5wb3coYVsxMF0sIDIpICsgTWF0aC5wb3coYVsxMV0sIDIpICsgTWF0aC5wb3coYVsxMl0sIDIpICsgTWF0aC5wb3coYVsxM10sIDIpICsgTWF0aC5wb3coYVsxNF0sIDIpICsgTWF0aC5wb3coYVsxNV0sIDIpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIG1hdDQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdO1xyXG4gIG91dFs0XSA9IGFbNF0gKyBiWzRdO1xyXG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdO1xyXG4gIG91dFs2XSA9IGFbNl0gKyBiWzZdO1xyXG4gIG91dFs3XSA9IGFbN10gKyBiWzddO1xyXG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdO1xyXG4gIG91dFs5XSA9IGFbOV0gKyBiWzldO1xyXG4gIG91dFsxMF0gPSBhWzEwXSArIGJbMTBdO1xyXG4gIG91dFsxMV0gPSBhWzExXSArIGJbMTFdO1xyXG4gIG91dFsxMl0gPSBhWzEyXSArIGJbMTJdO1xyXG4gIG91dFsxM10gPSBhWzEzXSArIGJbMTNdO1xyXG4gIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdO1xyXG4gIG91dFsxNV0gPSBhWzE1XSArIGJbMTVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTdWJ0cmFjdHMgbWF0cml4IGIgZnJvbSBtYXRyaXggYVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHttYXQ0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7bWF0NH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAtIGJbMF07XHJcbiAgb3V0WzFdID0gYVsxXSAtIGJbMV07XHJcbiAgb3V0WzJdID0gYVsyXSAtIGJbMl07XHJcbiAgb3V0WzNdID0gYVszXSAtIGJbM107XHJcbiAgb3V0WzRdID0gYVs0XSAtIGJbNF07XHJcbiAgb3V0WzVdID0gYVs1XSAtIGJbNV07XHJcbiAgb3V0WzZdID0gYVs2XSAtIGJbNl07XHJcbiAgb3V0WzddID0gYVs3XSAtIGJbN107XHJcbiAgb3V0WzhdID0gYVs4XSAtIGJbOF07XHJcbiAgb3V0WzldID0gYVs5XSAtIGJbOV07XHJcbiAgb3V0WzEwXSA9IGFbMTBdIC0gYlsxMF07XHJcbiAgb3V0WzExXSA9IGFbMTFdIC0gYlsxMV07XHJcbiAgb3V0WzEyXSA9IGFbMTJdIC0gYlsxMl07XHJcbiAgb3V0WzEzXSA9IGFbMTNdIC0gYlsxM107XHJcbiAgb3V0WzE0XSA9IGFbMTRdIC0gYlsxNF07XHJcbiAgb3V0WzE1XSA9IGFbMTVdIC0gYlsxNV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiB0aGUgbWF0cml4IGJ5IGEgc2NhbGFyLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IG91dCB0aGUgcmVjZWl2aW5nIG1hdHJpeFxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeCB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIG1hdHJpeCdzIGVsZW1lbnRzIGJ5XHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhcihvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICogYjtcclxuICBvdXRbMV0gPSBhWzFdICogYjtcclxuICBvdXRbMl0gPSBhWzJdICogYjtcclxuICBvdXRbM10gPSBhWzNdICogYjtcclxuICBvdXRbNF0gPSBhWzRdICogYjtcclxuICBvdXRbNV0gPSBhWzVdICogYjtcclxuICBvdXRbNl0gPSBhWzZdICogYjtcclxuICBvdXRbN10gPSBhWzddICogYjtcclxuICBvdXRbOF0gPSBhWzhdICogYjtcclxuICBvdXRbOV0gPSBhWzldICogYjtcclxuICBvdXRbMTBdID0gYVsxMF0gKiBiO1xyXG4gIG91dFsxMV0gPSBhWzExXSAqIGI7XHJcbiAgb3V0WzEyXSA9IGFbMTJdICogYjtcclxuICBvdXRbMTNdID0gYVsxM10gKiBiO1xyXG4gIG91dFsxNF0gPSBhWzE0XSAqIGI7XHJcbiAgb3V0WzE1XSA9IGFbMTVdICogYjtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gbWF0NCdzIGFmdGVyIG11bHRpcGx5aW5nIGVhY2ggZWxlbWVudCBvZiB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7bWF0NH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7bWF0NH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge21hdDR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIncyBlbGVtZW50cyBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHttYXQ0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xyXG4gIG91dFsyXSA9IGFbMl0gKyBiWzJdICogc2NhbGU7XHJcbiAgb3V0WzNdID0gYVszXSArIGJbM10gKiBzY2FsZTtcclxuICBvdXRbNF0gPSBhWzRdICsgYls0XSAqIHNjYWxlO1xyXG4gIG91dFs1XSA9IGFbNV0gKyBiWzVdICogc2NhbGU7XHJcbiAgb3V0WzZdID0gYVs2XSArIGJbNl0gKiBzY2FsZTtcclxuICBvdXRbN10gPSBhWzddICsgYls3XSAqIHNjYWxlO1xyXG4gIG91dFs4XSA9IGFbOF0gKyBiWzhdICogc2NhbGU7XHJcbiAgb3V0WzldID0gYVs5XSArIGJbOV0gKiBzY2FsZTtcclxuICBvdXRbMTBdID0gYVsxMF0gKyBiWzEwXSAqIHNjYWxlO1xyXG4gIG91dFsxMV0gPSBhWzExXSArIGJbMTFdICogc2NhbGU7XHJcbiAgb3V0WzEyXSA9IGFbMTJdICsgYlsxMl0gKiBzY2FsZTtcclxuICBvdXRbMTNdID0gYVsxM10gKyBiWzEzXSAqIHNjYWxlO1xyXG4gIG91dFsxNF0gPSBhWzE0XSArIGJbMTRdICogc2NhbGU7XHJcbiAgb3V0WzE1XSA9IGFbMTVdICsgYlsxNV0gKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHttYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXSAmJiBhWzNdID09PSBiWzNdICYmIGFbNF0gPT09IGJbNF0gJiYgYVs1XSA9PT0gYls1XSAmJiBhWzZdID09PSBiWzZdICYmIGFbN10gPT09IGJbN10gJiYgYVs4XSA9PT0gYls4XSAmJiBhWzldID09PSBiWzldICYmIGFbMTBdID09PSBiWzEwXSAmJiBhWzExXSA9PT0gYlsxMV0gJiYgYVsxMl0gPT09IGJbMTJdICYmIGFbMTNdID09PSBiWzEzXSAmJiBhWzE0XSA9PT0gYlsxNF0gJiYgYVsxNV0gPT09IGJbMTVdO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgbWF0cmljZXMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge21hdDR9IGEgVGhlIGZpcnN0IG1hdHJpeC5cclxuICogQHBhcmFtIHttYXQ0fSBiIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcclxuICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICBhMSA9IGFbMV0sXHJcbiAgICAgIGEyID0gYVsyXSxcclxuICAgICAgYTMgPSBhWzNdO1xyXG4gIHZhciBhNCA9IGFbNF0sXHJcbiAgICAgIGE1ID0gYVs1XSxcclxuICAgICAgYTYgPSBhWzZdLFxyXG4gICAgICBhNyA9IGFbN107XHJcbiAgdmFyIGE4ID0gYVs4XSxcclxuICAgICAgYTkgPSBhWzldLFxyXG4gICAgICBhMTAgPSBhWzEwXSxcclxuICAgICAgYTExID0gYVsxMV07XHJcbiAgdmFyIGExMiA9IGFbMTJdLFxyXG4gICAgICBhMTMgPSBhWzEzXSxcclxuICAgICAgYTE0ID0gYVsxNF0sXHJcbiAgICAgIGExNSA9IGFbMTVdO1xyXG5cclxuICB2YXIgYjAgPSBiWzBdLFxyXG4gICAgICBiMSA9IGJbMV0sXHJcbiAgICAgIGIyID0gYlsyXSxcclxuICAgICAgYjMgPSBiWzNdO1xyXG4gIHZhciBiNCA9IGJbNF0sXHJcbiAgICAgIGI1ID0gYls1XSxcclxuICAgICAgYjYgPSBiWzZdLFxyXG4gICAgICBiNyA9IGJbN107XHJcbiAgdmFyIGI4ID0gYls4XSxcclxuICAgICAgYjkgPSBiWzldLFxyXG4gICAgICBiMTAgPSBiWzEwXSxcclxuICAgICAgYjExID0gYlsxMV07XHJcbiAgdmFyIGIxMiA9IGJbMTJdLFxyXG4gICAgICBiMTMgPSBiWzEzXSxcclxuICAgICAgYjE0ID0gYlsxNF0sXHJcbiAgICAgIGIxNSA9IGJbMTVdO1xyXG5cclxuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKSAmJiBNYXRoLmFicyhhOCAtIGI4KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhOCksIE1hdGguYWJzKGI4KSkgJiYgTWF0aC5hYnMoYTkgLSBiOSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTkpLCBNYXRoLmFicyhiOSkpICYmIE1hdGguYWJzKGExMCAtIGIxMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEwKSwgTWF0aC5hYnMoYjEwKSkgJiYgTWF0aC5hYnMoYTExIC0gYjExKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTEpLCBNYXRoLmFicyhiMTEpKSAmJiBNYXRoLmFicyhhMTIgLSBiMTIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExMiksIE1hdGguYWJzKGIxMikpICYmIE1hdGguYWJzKGExMyAtIGIxMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEzKSwgTWF0aC5hYnMoYjEzKSkgJiYgTWF0aC5hYnMoYTE0IC0gYjE0KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMTQpLCBNYXRoLmFicyhiMTQpKSAmJiBNYXRoLmFicyhhMTUgLSBiMTUpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExNSksIE1hdGguYWJzKGIxNSkpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0Lm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBtYXQ0LnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XHJcblxyXG4vKipcclxuICogMyBEaW1lbnNpb25hbCBWZWN0b3JcclxuICogQG1vZHVsZSB2ZWMzXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcsIGVtcHR5IHZlYzNcclxuICpcclxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcclxuICB2YXIgb3V0ID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoMyk7XHJcbiAgaWYgKGdsTWF0cml4LkFSUkFZX1RZUEUgIT0gRmxvYXQzMkFycmF5KSB7XHJcbiAgICBvdXRbMF0gPSAwO1xyXG4gICAgb3V0WzFdID0gMDtcclxuICAgIG91dFsyXSA9IDA7XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzMgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7dmVjM30gYSBuZXcgM0QgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xyXG4gIHZhciB4ID0gYVswXTtcclxuICB2YXIgeSA9IGFbMV07XHJcbiAgdmFyIHogPSBhWzJdO1xyXG4gIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSArIHogKiB6KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMyBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzN9IGEgbmV3IDNEIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSwgeikge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcclxuICBvdXRbMF0gPSB4O1xyXG4gIG91dFsxXSA9IHk7XHJcbiAgb3V0WzJdID0gejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ29weSB0aGUgdmFsdWVzIGZyb20gb25lIHZlYzMgdG8gYW5vdGhlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHNvdXJjZSB2ZWN0b3JcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvcHkob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gYVswXTtcclxuICBvdXRbMV0gPSBhWzFdO1xyXG4gIG91dFsyXSA9IGFbMl07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzMgdG8gdGhlIGdpdmVuIHZhbHVlc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0geCBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geiBaIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0KG91dCwgeCwgeSwgeikge1xyXG4gIG91dFswXSA9IHg7XHJcbiAgb3V0WzFdID0geTtcclxuICBvdXRbMl0gPSB6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXZpZGVzIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjM1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdmVjdG9yIHRvIGNlaWxcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hdGguZmxvb3IgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gZmxvb3JcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKG91dCwgYSkge1xyXG4gIG91dFswXSA9IE1hdGguZmxvb3IoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5mbG9vcihhWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMzJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XHJcbiAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gcm91bmRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xyXG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTY2FsZXMgYSB2ZWMzIGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIHZlY3RvciB0byBzY2FsZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYiBhbW91bnQgdG8gc2NhbGUgdGhlIHZlY3RvciBieVxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGUob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gYVswXSAqIGI7XHJcbiAgb3V0WzFdID0gYVsxXSAqIGI7XHJcbiAgb3V0WzJdID0gYVsyXSAqIGI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIHZlYzMncyBhZnRlciBzY2FsaW5nIHRoZSBzZWNvbmQgb3BlcmFuZCBieSBhIHNjYWxhciB2YWx1ZVxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIGFtb3VudCB0byBzY2FsZSBiIGJ5IGJlZm9yZSBhZGRpbmdcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQW5kQWRkKG91dCwgYSwgYiwgc2NhbGUpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXSAqIHNjYWxlO1xyXG4gIG91dFsxXSA9IGFbMV0gKyBiWzFdICogc2NhbGU7XHJcbiAgb3V0WzJdID0gYVsyXSArIGJbMl0gKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XHJcbiAgdmFyIHggPSBiWzBdIC0gYVswXTtcclxuICB2YXIgeSA9IGJbMV0gLSBhWzFdO1xyXG4gIHZhciB6ID0gYlsyXSAtIGFbMl07XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHopO1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMydzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZERpc3RhbmNlKGEsIGIpIHtcclxuICB2YXIgeCA9IGJbMF0gLSBhWzBdO1xyXG4gIHZhciB5ID0gYlsxXSAtIGFbMV07XHJcbiAgdmFyIHogPSBiWzJdIC0gYVsyXTtcclxuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgc3F1YXJlZCBsZW5ndGggb2YgYSB2ZWMzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIHNxdWFyZWQgbGVuZ3RoIG9mXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHNxdWFyZWQgbGVuZ3RoIG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkTGVuZ3RoKGEpIHtcclxuICB2YXIgeCA9IGFbMF07XHJcbiAgdmFyIHkgPSBhWzFdO1xyXG4gIHZhciB6ID0gYVsyXTtcclxuICByZXR1cm4geCAqIHggKyB5ICogeSArIHogKiB6O1xyXG59XHJcblxyXG4vKipcclxuICogTmVnYXRlcyB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBuZWdhdGVcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5lZ2F0ZShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSAtYVswXTtcclxuICBvdXRbMV0gPSAtYVsxXTtcclxuICBvdXRbMl0gPSAtYVsyXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgaW52ZXJzZSBvZiB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBpbnZlcnRcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2Uob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gMS4wIC8gYVswXTtcclxuICBvdXRbMV0gPSAxLjAgLyBhWzFdO1xyXG4gIG91dFsyXSA9IDEuMCAvIGFbMl07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHZlYzNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcclxuICB2YXIgeCA9IGFbMF07XHJcbiAgdmFyIHkgPSBhWzFdO1xyXG4gIHZhciB6ID0gYVsyXTtcclxuICB2YXIgbGVuID0geCAqIHggKyB5ICogeSArIHogKiB6O1xyXG4gIGlmIChsZW4gPiAwKSB7XHJcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xyXG4gICAgbGVuID0gMSAvIE1hdGguc3FydChsZW4pO1xyXG4gICAgb3V0WzBdID0gYVswXSAqIGxlbjtcclxuICAgIG91dFsxXSA9IGFbMV0gKiBsZW47XHJcbiAgICBvdXRbMl0gPSBhWzJdICogbGVuO1xyXG4gIH1cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcclxuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xyXG59XHJcblxyXG4vKipcclxuICogQ29tcHV0ZXMgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XHJcbiAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl07XHJcbiAgdmFyIGJ4ID0gYlswXSxcclxuICAgICAgYnkgPSBiWzFdLFxyXG4gICAgICBieiA9IGJbMl07XHJcblxyXG4gIG91dFswXSA9IGF5ICogYnogLSBheiAqIGJ5O1xyXG4gIG91dFsxXSA9IGF6ICogYnggLSBheCAqIGJ6O1xyXG4gIG91dFsyXSA9IGF4ICogYnkgLSBheSAqIGJ4O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzMnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xyXG4gIHZhciBheCA9IGFbMF07XHJcbiAgdmFyIGF5ID0gYVsxXTtcclxuICB2YXIgYXogPSBhWzJdO1xyXG4gIG91dFswXSA9IGF4ICsgdCAqIChiWzBdIC0gYXgpO1xyXG4gIG91dFsxXSA9IGF5ICsgdCAqIChiWzFdIC0gYXkpO1xyXG4gIG91dFsyXSA9IGF6ICsgdCAqIChiWzJdIC0gYXopO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGhlcm1pdGUgaW50ZXJwb2xhdGlvbiB3aXRoIHR3byBjb250cm9sIHBvaW50c1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGMgdGhlIHRoaXJkIG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBkIHRoZSBmb3VydGggb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBoZXJtaXRlKG91dCwgYSwgYiwgYywgZCwgdCkge1xyXG4gIHZhciBmYWN0b3JUaW1lczIgPSB0ICogdDtcclxuICB2YXIgZmFjdG9yMSA9IGZhY3RvclRpbWVzMiAqICgyICogdCAtIDMpICsgMTtcclxuICB2YXIgZmFjdG9yMiA9IGZhY3RvclRpbWVzMiAqICh0IC0gMikgKyB0O1xyXG4gIHZhciBmYWN0b3IzID0gZmFjdG9yVGltZXMyICogKHQgLSAxKTtcclxuICB2YXIgZmFjdG9yNCA9IGZhY3RvclRpbWVzMiAqICgzIC0gMiAqIHQpO1xyXG5cclxuICBvdXRbMF0gPSBhWzBdICogZmFjdG9yMSArIGJbMF0gKiBmYWN0b3IyICsgY1swXSAqIGZhY3RvcjMgKyBkWzBdICogZmFjdG9yNDtcclxuICBvdXRbMV0gPSBhWzFdICogZmFjdG9yMSArIGJbMV0gKiBmYWN0b3IyICsgY1sxXSAqIGZhY3RvcjMgKyBkWzFdICogZmFjdG9yNDtcclxuICBvdXRbMl0gPSBhWzJdICogZmFjdG9yMSArIGJbMl0gKiBmYWN0b3IyICsgY1syXSAqIGZhY3RvcjMgKyBkWzJdICogZmFjdG9yNDtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgYmV6aWVyIGludGVycG9sYXRpb24gd2l0aCB0d28gY29udHJvbCBwb2ludHNcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMzfSBjIHRoZSB0aGlyZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjM30gZCB0aGUgZm91cnRoIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYmV6aWVyKG91dCwgYSwgYiwgYywgZCwgdCkge1xyXG4gIHZhciBpbnZlcnNlRmFjdG9yID0gMSAtIHQ7XHJcbiAgdmFyIGludmVyc2VGYWN0b3JUaW1lc1R3byA9IGludmVyc2VGYWN0b3IgKiBpbnZlcnNlRmFjdG9yO1xyXG4gIHZhciBmYWN0b3JUaW1lczIgPSB0ICogdDtcclxuICB2YXIgZmFjdG9yMSA9IGludmVyc2VGYWN0b3JUaW1lc1R3byAqIGludmVyc2VGYWN0b3I7XHJcbiAgdmFyIGZhY3RvcjIgPSAzICogdCAqIGludmVyc2VGYWN0b3JUaW1lc1R3bztcclxuICB2YXIgZmFjdG9yMyA9IDMgKiBmYWN0b3JUaW1lczIgKiBpbnZlcnNlRmFjdG9yO1xyXG4gIHZhciBmYWN0b3I0ID0gZmFjdG9yVGltZXMyICogdDtcclxuXHJcbiAgb3V0WzBdID0gYVswXSAqIGZhY3RvcjEgKyBiWzBdICogZmFjdG9yMiArIGNbMF0gKiBmYWN0b3IzICsgZFswXSAqIGZhY3RvcjQ7XHJcbiAgb3V0WzFdID0gYVsxXSAqIGZhY3RvcjEgKyBiWzFdICogZmFjdG9yMiArIGNbMV0gKiBmYWN0b3IzICsgZFsxXSAqIGZhY3RvcjQ7XHJcbiAgb3V0WzJdID0gYVsyXSAqIGZhY3RvcjEgKyBiWzJdICogZmFjdG9yMiArIGNbMl0gKiBmYWN0b3IzICsgZFsyXSAqIGZhY3RvcjQ7XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSByYW5kb20gdmVjdG9yIHdpdGggdGhlIGdpdmVuIHNjYWxlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbc2NhbGVdIExlbmd0aCBvZiB0aGUgcmVzdWx0aW5nIHZlY3Rvci4gSWYgb21taXR0ZWQsIGEgdW5pdCB2ZWN0b3Igd2lsbCBiZSByZXR1cm5lZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCwgc2NhbGUpIHtcclxuICBzY2FsZSA9IHNjYWxlIHx8IDEuMDtcclxuXHJcbiAgdmFyIHIgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAqIE1hdGguUEk7XHJcbiAgdmFyIHogPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIuMCAtIDEuMDtcclxuICB2YXIgelNjYWxlID0gTWF0aC5zcXJ0KDEuMCAtIHogKiB6KSAqIHNjYWxlO1xyXG5cclxuICBvdXRbMF0gPSBNYXRoLmNvcyhyKSAqIHpTY2FsZTtcclxuICBvdXRbMV0gPSBNYXRoLnNpbihyKSAqIHpTY2FsZTtcclxuICBvdXRbMl0gPSB6ICogc2NhbGU7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDQuXHJcbiAqIDR0aCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV0sXHJcbiAgICAgIHogPSBhWzJdO1xyXG4gIHZhciB3ID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdO1xyXG4gIHcgPSB3IHx8IDEuMDtcclxuICBvdXRbMF0gPSAobVswXSAqIHggKyBtWzRdICogeSArIG1bOF0gKiB6ICsgbVsxMl0pIC8gdztcclxuICBvdXRbMV0gPSAobVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10pIC8gdztcclxuICBvdXRbMl0gPSAobVsyXSAqIHggKyBtWzZdICogeSArIG1bMTBdICogeiArIG1bMTRdKSAvIHc7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIG1hdDMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge21hdDN9IG0gdGhlIDN4MyBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDMob3V0LCBhLCBtKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXSxcclxuICAgICAgeiA9IGFbMl07XHJcbiAgb3V0WzBdID0geCAqIG1bMF0gKyB5ICogbVszXSArIHogKiBtWzZdO1xyXG4gIG91dFsxXSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcclxuICBvdXRbMl0gPSB4ICogbVsyXSArIHkgKiBtWzVdICsgeiAqIG1bOF07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzMgd2l0aCBhIHF1YXRcclxuICogQ2FuIGFsc28gYmUgdXNlZCBmb3IgZHVhbCBxdWF0ZXJuaW9ucy4gKE11bHRpcGx5IGl0IHdpdGggdGhlIHJlYWwgcGFydClcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7cXVhdH0gcSBxdWF0ZXJuaW9uIHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1RdWF0KG91dCwgYSwgcSkge1xyXG4gIC8vIGJlbmNobWFya3M6IGh0dHBzOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXRyYW5zZm9ybS12ZWMzLWltcGxlbWVudGF0aW9ucy1maXhlZFxyXG4gIHZhciBxeCA9IHFbMF0sXHJcbiAgICAgIHF5ID0gcVsxXSxcclxuICAgICAgcXogPSBxWzJdLFxyXG4gICAgICBxdyA9IHFbM107XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXSxcclxuICAgICAgeiA9IGFbMl07XHJcbiAgLy8gdmFyIHF2ZWMgPSBbcXgsIHF5LCBxel07XHJcbiAgLy8gdmFyIHV2ID0gdmVjMy5jcm9zcyhbXSwgcXZlYywgYSk7XHJcbiAgdmFyIHV2eCA9IHF5ICogeiAtIHF6ICogeSxcclxuICAgICAgdXZ5ID0gcXogKiB4IC0gcXggKiB6LFxyXG4gICAgICB1dnogPSBxeCAqIHkgLSBxeSAqIHg7XHJcbiAgLy8gdmFyIHV1diA9IHZlYzMuY3Jvc3MoW10sIHF2ZWMsIHV2KTtcclxuICB2YXIgdXV2eCA9IHF5ICogdXZ6IC0gcXogKiB1dnksXHJcbiAgICAgIHV1dnkgPSBxeiAqIHV2eCAtIHF4ICogdXZ6LFxyXG4gICAgICB1dXZ6ID0gcXggKiB1dnkgLSBxeSAqIHV2eDtcclxuICAvLyB2ZWMzLnNjYWxlKHV2LCB1diwgMiAqIHcpO1xyXG4gIHZhciB3MiA9IHF3ICogMjtcclxuICB1dnggKj0gdzI7XHJcbiAgdXZ5ICo9IHcyO1xyXG4gIHV2eiAqPSB3MjtcclxuICAvLyB2ZWMzLnNjYWxlKHV1diwgdXV2LCAyKTtcclxuICB1dXZ4ICo9IDI7XHJcbiAgdXV2eSAqPSAyO1xyXG4gIHV1dnogKj0gMjtcclxuICAvLyByZXR1cm4gdmVjMy5hZGQob3V0LCBhLCB2ZWMzLmFkZChvdXQsIHV2LCB1dXYpKTtcclxuICBvdXRbMF0gPSB4ICsgdXZ4ICsgdXV2eDtcclxuICBvdXRbMV0gPSB5ICsgdXZ5ICsgdXV2eTtcclxuICBvdXRbMl0gPSB6ICsgdXZ6ICsgdXV2ejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlIGEgM0QgdmVjdG9yIGFyb3VuZCB0aGUgeC1heGlzXHJcbiAqIEBwYXJhbSB7dmVjM30gb3V0IFRoZSByZWNlaXZpbmcgdmVjM1xyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIHZlYzMgcG9pbnQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgb3JpZ2luIG9mIHRoZSByb3RhdGlvblxyXG4gKiBAcGFyYW0ge051bWJlcn0gYyBUaGUgYW5nbGUgb2Ygcm90YXRpb25cclxuICogQHJldHVybnMge3ZlYzN9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVgob3V0LCBhLCBiLCBjKSB7XHJcbiAgdmFyIHAgPSBbXSxcclxuICAgICAgciA9IFtdO1xyXG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cclxuICBwWzBdID0gYVswXSAtIGJbMF07XHJcbiAgcFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gIHBbMl0gPSBhWzJdIC0gYlsyXTtcclxuXHJcbiAgLy9wZXJmb3JtIHJvdGF0aW9uXHJcbiAgclswXSA9IHBbMF07XHJcbiAgclsxXSA9IHBbMV0gKiBNYXRoLmNvcyhjKSAtIHBbMl0gKiBNYXRoLnNpbihjKTtcclxuICByWzJdID0gcFsxXSAqIE1hdGguc2luKGMpICsgcFsyXSAqIE1hdGguY29zKGMpO1xyXG5cclxuICAvL3RyYW5zbGF0ZSB0byBjb3JyZWN0IHBvc2l0aW9uXHJcbiAgb3V0WzBdID0gclswXSArIGJbMF07XHJcbiAgb3V0WzFdID0gclsxXSArIGJbMV07XHJcbiAgb3V0WzJdID0gclsyXSArIGJbMl07XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGUgYSAzRCB2ZWN0b3IgYXJvdW5kIHRoZSB5LWF4aXNcclxuICogQHBhcmFtIHt2ZWMzfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMzXHJcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgdmVjMyBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWShvdXQsIGEsIGIsIGMpIHtcclxuICB2YXIgcCA9IFtdLFxyXG4gICAgICByID0gW107XHJcbiAgLy9UcmFuc2xhdGUgcG9pbnQgdG8gdGhlIG9yaWdpblxyXG4gIHBbMF0gPSBhWzBdIC0gYlswXTtcclxuICBwWzFdID0gYVsxXSAtIGJbMV07XHJcbiAgcFsyXSA9IGFbMl0gLSBiWzJdO1xyXG5cclxuICAvL3BlcmZvcm0gcm90YXRpb25cclxuICByWzBdID0gcFsyXSAqIE1hdGguc2luKGMpICsgcFswXSAqIE1hdGguY29zKGMpO1xyXG4gIHJbMV0gPSBwWzFdO1xyXG4gIHJbMl0gPSBwWzJdICogTWF0aC5jb3MoYykgLSBwWzBdICogTWF0aC5zaW4oYyk7XHJcblxyXG4gIC8vdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICBvdXRbMF0gPSByWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSByWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSByWzJdICsgYlsyXTtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZSBhIDNEIHZlY3RvciBhcm91bmQgdGhlIHotYXhpc1xyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCBUaGUgcmVjZWl2aW5nIHZlYzNcclxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSB2ZWMzIHBvaW50IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIG9yaWdpbiBvZiB0aGUgcm90YXRpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IGMgVGhlIGFuZ2xlIG9mIHJvdGF0aW9uXHJcbiAqIEByZXR1cm5zIHt2ZWMzfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgYiwgYykge1xyXG4gIHZhciBwID0gW10sXHJcbiAgICAgIHIgPSBbXTtcclxuICAvL1RyYW5zbGF0ZSBwb2ludCB0byB0aGUgb3JpZ2luXHJcbiAgcFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gIHBbMV0gPSBhWzFdIC0gYlsxXTtcclxuICBwWzJdID0gYVsyXSAtIGJbMl07XHJcblxyXG4gIC8vcGVyZm9ybSByb3RhdGlvblxyXG4gIHJbMF0gPSBwWzBdICogTWF0aC5jb3MoYykgLSBwWzFdICogTWF0aC5zaW4oYyk7XHJcbiAgclsxXSA9IHBbMF0gKiBNYXRoLnNpbihjKSArIHBbMV0gKiBNYXRoLmNvcyhjKTtcclxuICByWzJdID0gcFsyXTtcclxuXHJcbiAgLy90cmFuc2xhdGUgdG8gY29ycmVjdCBwb3NpdGlvblxyXG4gIG91dFswXSA9IHJbMF0gKyBiWzBdO1xyXG4gIG91dFsxXSA9IHJbMV0gKyBiWzFdO1xyXG4gIG91dFsyXSA9IHJbMl0gKyBiWzJdO1xyXG5cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IHRoZSBhbmdsZSBiZXR3ZWVuIHR3byAzRCB2ZWN0b3JzXHJcbiAqIEBwYXJhbSB7dmVjM30gYSBUaGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzN9IGIgVGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYW5nbGUoYSwgYikge1xyXG4gIHZhciB0ZW1wQSA9IGZyb21WYWx1ZXMoYVswXSwgYVsxXSwgYVsyXSk7XHJcbiAgdmFyIHRlbXBCID0gZnJvbVZhbHVlcyhiWzBdLCBiWzFdLCBiWzJdKTtcclxuXHJcbiAgbm9ybWFsaXplKHRlbXBBLCB0ZW1wQSk7XHJcbiAgbm9ybWFsaXplKHRlbXBCLCB0ZW1wQik7XHJcblxyXG4gIHZhciBjb3NpbmUgPSBkb3QodGVtcEEsIHRlbXBCKTtcclxuXHJcbiAgaWYgKGNvc2luZSA+IDEuMCkge1xyXG4gICAgcmV0dXJuIDA7XHJcbiAgfSBlbHNlIGlmIChjb3NpbmUgPCAtMS4wKSB7XHJcbiAgICByZXR1cm4gTWF0aC5QSTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIE1hdGguYWNvcyhjb3NpbmUpO1xyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xyXG4gIHJldHVybiAndmVjMygnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHt2ZWMzfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7dmVjM30gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV0gJiYgYVsyXSA9PT0gYlsyXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHt2ZWMzfSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdO1xyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdO1xyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpICYmIE1hdGguYWJzKGEyIC0gYjIpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEyKSwgTWF0aC5hYnMoYjIpKTtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zdWJ0cmFjdH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHN1YiA9IHN1YnRyYWN0O1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5tdWx0aXBseX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIG11bCA9IG11bHRpcGx5O1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5kaXZpZGV9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBkaXYgPSBkaXZpZGU7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLmRpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZGlzdCA9IGRpc3RhbmNlO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5zcXVhcmVkRGlzdGFuY2V9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzcXJEaXN0ID0gc3F1YXJlZERpc3RhbmNlO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMy5sZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBsZW4gPSBsZW5ndGg7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMzLnNxdWFyZWRMZW5ndGh9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzcXJMZW4gPSBzcXVhcmVkTGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm0gc29tZSBvcGVyYXRpb24gb3ZlciBhbiBhcnJheSBvZiB2ZWMzcy5cclxuICpcclxuICogQHBhcmFtIHtBcnJheX0gYSB0aGUgYXJyYXkgb2YgdmVjdG9ycyB0byBpdGVyYXRlIG92ZXJcclxuICogQHBhcmFtIHtOdW1iZXJ9IHN0cmlkZSBOdW1iZXIgb2YgZWxlbWVudHMgYmV0d2VlbiB0aGUgc3RhcnQgb2YgZWFjaCB2ZWMzLiBJZiAwIGFzc3VtZXMgdGlnaHRseSBwYWNrZWRcclxuICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gc2tpcCBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge051bWJlcn0gY291bnQgTnVtYmVyIG9mIHZlYzNzIHRvIGl0ZXJhdGUgb3Zlci4gSWYgMCBpdGVyYXRlcyBvdmVyIGVudGlyZSBhcnJheVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBGdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIHZlY3RvciBpbiB0aGUgYXJyYXlcclxuICogQHBhcmFtIHtPYmplY3R9IFthcmddIGFkZGl0aW9uYWwgYXJndW1lbnQgdG8gcGFzcyB0byBmblxyXG4gKiBAcmV0dXJucyB7QXJyYXl9IGFcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGZvckVhY2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHZlYyA9IGNyZWF0ZSgpO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKGEsIHN0cmlkZSwgb2Zmc2V0LCBjb3VudCwgZm4sIGFyZykge1xyXG4gICAgdmFyIGkgPSB2b2lkIDAsXHJcbiAgICAgICAgbCA9IHZvaWQgMDtcclxuICAgIGlmICghc3RyaWRlKSB7XHJcbiAgICAgIHN0cmlkZSA9IDM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgb2Zmc2V0ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoY291bnQpIHtcclxuICAgICAgbCA9IE1hdGgubWluKGNvdW50ICogc3RyaWRlICsgb2Zmc2V0LCBhLmxlbmd0aCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsID0gYS5sZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChpID0gb2Zmc2V0OyBpIDwgbDsgaSArPSBzdHJpZGUpIHtcclxuICAgICAgdmVjWzBdID0gYVtpXTt2ZWNbMV0gPSBhW2kgKyAxXTt2ZWNbMl0gPSBhW2kgKyAyXTtcclxuICAgICAgZm4odmVjLCB2ZWMsIGFyZyk7XHJcbiAgICAgIGFbaV0gPSB2ZWNbMF07YVtpICsgMV0gPSB2ZWNbMV07YVtpICsgMl0gPSB2ZWNbMl07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGE7XHJcbiAgfTtcclxufSgpOyIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIDQgRGltZW5zaW9uYWwgVmVjdG9yXHJcbiAqIEBtb2R1bGUgdmVjNFxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWM0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgb3V0WzBdID0gMDtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgICBvdXRbMl0gPSAwO1xyXG4gICAgb3V0WzNdID0gMDtcclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjNCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNsb25lXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBhIG5ldyA0RCB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjbG9uZShhKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDQpO1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICBvdXRbMl0gPSBhWzJdO1xyXG4gIG91dFszXSA9IGFbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjNCBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzR9IGEgbmV3IDREIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSwgeiwgdykge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcclxuICBvdXRbMF0gPSB4O1xyXG4gIG91dFsxXSA9IHk7XHJcbiAgb3V0WzJdID0gejtcclxuICBvdXRbM10gPSB3O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgdmVjNCB0byBhbm90aGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgc291cmNlIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHogWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNldChvdXQsIHgsIHksIHosIHcpIHtcclxuICBvdXRbMF0gPSB4O1xyXG4gIG91dFsxXSA9IHk7XHJcbiAgb3V0WzJdID0gejtcclxuICBvdXRbM10gPSB3O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gLSBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gLSBiWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiWzJdO1xyXG4gIG91dFszXSA9IGFbM10gKiBiWzNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXZpZGVzIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdIC8gYlsyXTtcclxuICBvdXRbM10gPSBhWzNdIC8gYlszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNlaWxcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLmNlaWwoYVsyXSk7XHJcbiAgb3V0WzNdID0gTWF0aC5jZWlsKGFbM10pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNYXRoLmZsb29yIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGZsb29yXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmbG9vcihvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XHJcbiAgb3V0WzJdID0gTWF0aC5mbG9vcihhWzJdKTtcclxuICBvdXRbM10gPSBNYXRoLmZsb29yKGFbM10pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLm1pbihhWzJdLCBiWzJdKTtcclxuICBvdXRbM10gPSBNYXRoLm1pbihhWzNdLCBiWzNdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjNCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XHJcbiAgb3V0WzJdID0gTWF0aC5tYXgoYVsyXSwgYlsyXSk7XHJcbiAgb3V0WzNdID0gTWF0aC5tYXgoYVszXSwgYlszXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gcm91bmRcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xyXG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcclxuICBvdXRbMl0gPSBNYXRoLnJvdW5kKGFbMl0pO1xyXG4gIG91dFszXSA9IE1hdGgucm91bmQoYVszXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNjYWxlcyBhIHZlYzQgYnkgYSBzY2FsYXIgbnVtYmVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgdmVjdG9yIGJ5XHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZShvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICogYjtcclxuICBvdXRbMV0gPSBhWzFdICogYjtcclxuICBvdXRbMl0gPSBhWzJdICogYjtcclxuICBvdXRbM10gPSBhWzNdICogYjtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkcyB0d28gdmVjNCdzIGFmdGVyIHNjYWxpbmcgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIHZhbHVlXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgYW1vdW50IHRvIHNjYWxlIGIgYnkgYmVmb3JlIGFkZGluZ1xyXG4gKiBAcmV0dXJucyB7dmVjNH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2NhbGVBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xyXG4gIG91dFswXSA9IGFbMF0gKyBiWzBdICogc2NhbGU7XHJcbiAgb3V0WzFdID0gYVsxXSArIGJbMV0gKiBzY2FsZTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXSAqIHNjYWxlO1xyXG4gIG91dFszXSA9IGFbM10gKyBiWzNdICogc2NhbGU7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZGlzdGFuY2UgYmV0d2VlbiBhIGFuZCBiXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xyXG4gIHZhciB4ID0gYlswXSAtIGFbMF07XHJcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcclxuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xyXG4gIHZhciB3ID0gYlszXSAtIGFbM107XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmVkIGV1Y2xpZGlhbiBkaXN0YW5jZSBiZXR3ZWVuIHR3byB2ZWM0J3NcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjNH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gc3F1YXJlZCBkaXN0YW5jZSBiZXR3ZWVuIGEgYW5kIGJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzcXVhcmVkRGlzdGFuY2UoYSwgYikge1xyXG4gIHZhciB4ID0gYlswXSAtIGFbMF07XHJcbiAgdmFyIHkgPSBiWzFdIC0gYVsxXTtcclxuICB2YXIgeiA9IGJbMl0gLSBhWzJdO1xyXG4gIHZhciB3ID0gYlszXSAtIGFbM107XHJcbiAgcmV0dXJuIHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xyXG4gIHZhciB4ID0gYVswXTtcclxuICB2YXIgeSA9IGFbMV07XHJcbiAgdmFyIHogPSBhWzJdO1xyXG4gIHZhciB3ID0gYVszXTtcclxuICByZXR1cm4gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjNFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XHJcbiAgdmFyIHggPSBhWzBdO1xyXG4gIHZhciB5ID0gYVsxXTtcclxuICB2YXIgeiA9IGFbMl07XHJcbiAgdmFyIHcgPSBhWzNdO1xyXG4gIHJldHVybiB4ICogeCArIHkgKiB5ICsgeiAqIHogKyB3ICogdztcclxufVxyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gLWFbMF07XHJcbiAgb3V0WzFdID0gLWFbMV07XHJcbiAgb3V0WzJdID0gLWFbMl07XHJcbiAgb3V0WzNdID0gLWFbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWM0XHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB2ZWN0b3IgdG8gaW52ZXJ0XHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xyXG4gIG91dFswXSA9IDEuMCAvIGFbMF07XHJcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcclxuICBvdXRbMl0gPSAxLjAgLyBhWzJdO1xyXG4gIG91dFszXSA9IDEuMCAvIGFbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhIHZlYzRcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWM0fSBhIHZlY3RvciB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShvdXQsIGEpIHtcclxuICB2YXIgeCA9IGFbMF07XHJcbiAgdmFyIHkgPSBhWzFdO1xyXG4gIHZhciB6ID0gYVsyXTtcclxuICB2YXIgdyA9IGFbM107XHJcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHkgKyB6ICogeiArIHcgKiB3O1xyXG4gIGlmIChsZW4gPiAwKSB7XHJcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICBvdXRbMF0gPSB4ICogbGVuO1xyXG4gICAgb3V0WzFdID0geSAqIGxlbjtcclxuICAgIG91dFsyXSA9IHogKiBsZW47XHJcbiAgICBvdXRbM10gPSB3ICogbGVuO1xyXG4gIH1cclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZG90KGEsIGIpIHtcclxuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdICsgYVszXSAqIGJbM107XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIHZlYzQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWM0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsZXJwKG91dCwgYSwgYiwgdCkge1xyXG4gIHZhciBheCA9IGFbMF07XHJcbiAgdmFyIGF5ID0gYVsxXTtcclxuICB2YXIgYXogPSBhWzJdO1xyXG4gIHZhciBhdyA9IGFbM107XHJcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XHJcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XHJcbiAgb3V0WzJdID0gYXogKyB0ICogKGJbMl0gLSBheik7XHJcbiAgb3V0WzNdID0gYXcgKyB0ICogKGJbM10gLSBhdyk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWM0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xyXG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xyXG5cclxuICAvLyBNYXJzYWdsaWEsIEdlb3JnZS4gQ2hvb3NpbmcgYSBQb2ludCBmcm9tIHRoZSBTdXJmYWNlIG9mIGFcclxuICAvLyBTcGhlcmUuIEFubi4gTWF0aC4gU3RhdGlzdC4gNDMgKDE5NzIpLCBuby4gMiwgNjQ1LS02NDYuXHJcbiAgLy8gaHR0cDovL3Byb2plY3RldWNsaWQub3JnL2V1Y2xpZC5hb21zLzExNzc2OTI2NDQ7XHJcbiAgdmFyIHYxLCB2MiwgdjMsIHY0O1xyXG4gIHZhciBzMSwgczI7XHJcbiAgZG8ge1xyXG4gICAgdjEgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIgLSAxO1xyXG4gICAgdjIgPSBnbE1hdHJpeC5SQU5ET00oKSAqIDIgLSAxO1xyXG4gICAgczEgPSB2MSAqIHYxICsgdjIgKiB2MjtcclxuICB9IHdoaWxlIChzMSA+PSAxKTtcclxuICBkbyB7XHJcbiAgICB2MyA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XHJcbiAgICB2NCA9IGdsTWF0cml4LlJBTkRPTSgpICogMiAtIDE7XHJcbiAgICBzMiA9IHYzICogdjMgKyB2NCAqIHY0O1xyXG4gIH0gd2hpbGUgKHMyID49IDEpO1xyXG5cclxuICB2YXIgZCA9IE1hdGguc3FydCgoMSAtIHMxKSAvIHMyKTtcclxuICBvdXRbMF0gPSBzY2FsZSAqIHYxO1xyXG4gIG91dFsxXSA9IHNjYWxlICogdjI7XHJcbiAgb3V0WzJdID0gc2NhbGUgKiB2MyAqIGQ7XHJcbiAgb3V0WzNdID0gc2NhbGUgKiB2NCAqIGQ7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzQgd2l0aCBhIG1hdDQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge21hdDR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWM0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQ0KG91dCwgYSwgbSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV0sXHJcbiAgICAgIHogPSBhWzJdLFxyXG4gICAgICB3ID0gYVszXTtcclxuICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVs4XSAqIHogKyBtWzEyXSAqIHc7XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bOV0gKiB6ICsgbVsxM10gKiB3O1xyXG4gIG91dFsyXSA9IG1bMl0gKiB4ICsgbVs2XSAqIHkgKyBtWzEwXSAqIHogKyBtWzE0XSAqIHc7XHJcbiAgb3V0WzNdID0gbVszXSAqIHggKyBtWzddICogeSArIG1bMTFdICogeiArIG1bMTVdICogdztcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjNCB3aXRoIGEgcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVF1YXQob3V0LCBhLCBxKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXSxcclxuICAgICAgeiA9IGFbMl07XHJcbiAgdmFyIHF4ID0gcVswXSxcclxuICAgICAgcXkgPSBxWzFdLFxyXG4gICAgICBxeiA9IHFbMl0sXHJcbiAgICAgIHF3ID0gcVszXTtcclxuXHJcbiAgLy8gY2FsY3VsYXRlIHF1YXQgKiB2ZWNcclxuICB2YXIgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHk7XHJcbiAgdmFyIGl5ID0gcXcgKiB5ICsgcXogKiB4IC0gcXggKiB6O1xyXG4gIHZhciBpeiA9IHF3ICogeiArIHF4ICogeSAtIHF5ICogeDtcclxuICB2YXIgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6O1xyXG5cclxuICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XHJcbiAgb3V0WzBdID0gaXggKiBxdyArIGl3ICogLXF4ICsgaXkgKiAtcXogLSBpeiAqIC1xeTtcclxuICBvdXRbMV0gPSBpeSAqIHF3ICsgaXcgKiAtcXkgKyBpeiAqIC1xeCAtIGl4ICogLXF6O1xyXG4gIG91dFsyXSA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXg7XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XHJcbiAgcmV0dXJuICd2ZWM0KCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJyknO1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgdmVjdG9ycyBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgZWxlbWVudHMgaW4gdGhlIHNhbWUgcG9zaXRpb24gKHdoZW4gY29tcGFyZWQgd2l0aCA9PT0pXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjNH0gYSBUaGUgZmlyc3QgdmVjdG9yLlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGIgVGhlIHNlY29uZCB2ZWN0b3IuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGV4YWN0RXF1YWxzKGEsIGIpIHtcclxuICByZXR1cm4gYVswXSA9PT0gYlswXSAmJiBhWzFdID09PSBiWzFdICYmIGFbMl0gPT09IGJbMl0gJiYgYVszXSA9PT0gYlszXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIHZlY3RvcnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHt2ZWM0fSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBlcXVhbHMoYSwgYikge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM107XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdLFxyXG4gICAgICBiMiA9IGJbMl0sXHJcbiAgICAgIGIzID0gYlszXTtcclxuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnN1YnRyYWN0fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3ViID0gc3VidHJhY3Q7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LmRpdmlkZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRpdiA9IGRpdmlkZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuZGlzdGFuY2V9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBkaXN0ID0gZGlzdGFuY2U7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0LnNxdWFyZWREaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckRpc3QgPSBzcXVhcmVkRGlzdGFuY2U7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWM0Lmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzQuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzRzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzQuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjNHMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgdmVjID0gY3JlYXRlKCk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XHJcbiAgICB2YXIgaSA9IHZvaWQgMCxcclxuICAgICAgICBsID0gdm9pZCAwO1xyXG4gICAgaWYgKCFzdHJpZGUpIHtcclxuICAgICAgc3RyaWRlID0gNDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICBvZmZzZXQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3VudCkge1xyXG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGwgPSBhLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xyXG4gICAgICB2ZWNbMF0gPSBhW2ldO3ZlY1sxXSA9IGFbaSArIDFdO3ZlY1syXSA9IGFbaSArIDJdO3ZlY1szXSA9IGFbaSArIDNdO1xyXG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcclxuICAgICAgYVtpXSA9IHZlY1swXTthW2kgKyAxXSA9IHZlY1sxXTthW2kgKyAyXSA9IHZlY1syXTthW2kgKyAzXSA9IHZlY1szXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYTtcclxuICB9O1xyXG59KCk7IiwiaW1wb3J0ICogYXMgZ2xNYXRyaXggZnJvbSBcIi4vY29tbW9uLmpzXCI7XHJcbmltcG9ydCAqIGFzIG1hdDMgZnJvbSBcIi4vbWF0My5qc1wiO1xyXG5pbXBvcnQgKiBhcyB2ZWMzIGZyb20gXCIuL3ZlYzMuanNcIjtcclxuaW1wb3J0ICogYXMgdmVjNCBmcm9tIFwiLi92ZWM0LmpzXCI7XHJcblxyXG4vKipcclxuICogUXVhdGVybmlvblxyXG4gKiBAbW9kdWxlIHF1YXRcclxuICovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBxdWF0XHJcbiAqXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg0KTtcclxuICBpZiAoZ2xNYXRyaXguQVJSQVlfVFlQRSAhPSBGbG9hdDMyQXJyYXkpIHtcclxuICAgIG91dFswXSA9IDA7XHJcbiAgICBvdXRbMV0gPSAwO1xyXG4gICAgb3V0WzJdID0gMDtcclxuICB9XHJcbiAgb3V0WzNdID0gMTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IGEgcXVhdCB0byB0aGUgaWRlbnRpdHkgcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xyXG4gIG91dFswXSA9IDA7XHJcbiAgb3V0WzFdID0gMDtcclxuICBvdXRbMl0gPSAwO1xyXG4gIG91dFszXSA9IDE7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldHMgYSBxdWF0IGZyb20gdGhlIGdpdmVuIGFuZ2xlIGFuZCByb3RhdGlvbiBheGlzLFxyXG4gKiB0aGVuIHJldHVybnMgaXQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3ZlYzN9IGF4aXMgdGhlIGF4aXMgYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmFkIHRoZSBhbmdsZSBpbiByYWRpYW5zXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICoqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2V0QXhpc0FuZ2xlKG91dCwgYXhpcywgcmFkKSB7XHJcbiAgcmFkID0gcmFkICogMC41O1xyXG4gIHZhciBzID0gTWF0aC5zaW4ocmFkKTtcclxuICBvdXRbMF0gPSBzICogYXhpc1swXTtcclxuICBvdXRbMV0gPSBzICogYXhpc1sxXTtcclxuICBvdXRbMl0gPSBzICogYXhpc1syXTtcclxuICBvdXRbM10gPSBNYXRoLmNvcyhyYWQpO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSByb3RhdGlvbiBheGlzIGFuZCBhbmdsZSBmb3IgYSBnaXZlblxyXG4gKiAgcXVhdGVybmlvbi4gSWYgYSBxdWF0ZXJuaW9uIGlzIGNyZWF0ZWQgd2l0aFxyXG4gKiAgc2V0QXhpc0FuZ2xlLCB0aGlzIG1ldGhvZCB3aWxsIHJldHVybiB0aGUgc2FtZVxyXG4gKiAgdmFsdWVzIGFzIHByb3ZpZGllZCBpbiB0aGUgb3JpZ2luYWwgcGFyYW1ldGVyIGxpc3RcclxuICogIE9SIGZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHZhbHVlcy5cclxuICogRXhhbXBsZTogVGhlIHF1YXRlcm5pb24gZm9ybWVkIGJ5IGF4aXMgWzAsIDAsIDFdIGFuZFxyXG4gKiAgYW5nbGUgLTkwIGlzIHRoZSBzYW1lIGFzIHRoZSBxdWF0ZXJuaW9uIGZvcm1lZCBieVxyXG4gKiAgWzAsIDAsIDFdIGFuZCAyNzAuIFRoaXMgbWV0aG9kIGZhdm9ycyB0aGUgbGF0dGVyLlxyXG4gKiBAcGFyYW0gIHt2ZWMzfSBvdXRfYXhpcyAgVmVjdG9yIHJlY2VpdmluZyB0aGUgYXhpcyBvZiByb3RhdGlvblxyXG4gKiBAcGFyYW0gIHtxdWF0fSBxICAgICBRdWF0ZXJuaW9uIHRvIGJlIGRlY29tcG9zZWRcclxuICogQHJldHVybiB7TnVtYmVyfSAgICAgQW5nbGUsIGluIHJhZGlhbnMsIG9mIHRoZSByb3RhdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEF4aXNBbmdsZShvdXRfYXhpcywgcSkge1xyXG4gIHZhciByYWQgPSBNYXRoLmFjb3MocVszXSkgKiAyLjA7XHJcbiAgdmFyIHMgPSBNYXRoLnNpbihyYWQgLyAyLjApO1xyXG4gIGlmIChzID4gZ2xNYXRyaXguRVBTSUxPTikge1xyXG4gICAgb3V0X2F4aXNbMF0gPSBxWzBdIC8gcztcclxuICAgIG91dF9heGlzWzFdID0gcVsxXSAvIHM7XHJcbiAgICBvdXRfYXhpc1syXSA9IHFbMl0gLyBzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyBJZiBzIGlzIHplcm8sIHJldHVybiBhbnkgYXhpcyAobm8gcm90YXRpb24gLSBheGlzIGRvZXMgbm90IG1hdHRlcilcclxuICAgIG91dF9heGlzWzBdID0gMTtcclxuICAgIG91dF9heGlzWzFdID0gMDtcclxuICAgIG91dF9heGlzWzJdID0gMDtcclxuICB9XHJcbiAgcmV0dXJuIHJhZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE11bHRpcGxpZXMgdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIHZhciBheCA9IGFbMF0sXHJcbiAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgYXogPSBhWzJdLFxyXG4gICAgICBhdyA9IGFbM107XHJcbiAgdmFyIGJ4ID0gYlswXSxcclxuICAgICAgYnkgPSBiWzFdLFxyXG4gICAgICBieiA9IGJbMl0sXHJcbiAgICAgIGJ3ID0gYlszXTtcclxuXHJcbiAgb3V0WzBdID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcclxuICBvdXRbMV0gPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xyXG4gIG91dFsyXSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XHJcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIHF1YXRlcm5pb24gYnkgdGhlIGdpdmVuIGFuZ2xlIGFib3V0IHRoZSBYIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XHJcbiAgcmFkICo9IDAuNTtcclxuXHJcbiAgdmFyIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl0sXHJcbiAgICAgIGF3ID0gYVszXTtcclxuICB2YXIgYnggPSBNYXRoLnNpbihyYWQpLFxyXG4gICAgICBidyA9IE1hdGguY29zKHJhZCk7XHJcblxyXG4gIG91dFswXSA9IGF4ICogYncgKyBhdyAqIGJ4O1xyXG4gIG91dFsxXSA9IGF5ICogYncgKyBheiAqIGJ4O1xyXG4gIG91dFsyXSA9IGF6ICogYncgLSBheSAqIGJ4O1xyXG4gIG91dFszXSA9IGF3ICogYncgLSBheCAqIGJ4O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGVzIGEgcXVhdGVybmlvbiBieSB0aGUgZ2l2ZW4gYW5nbGUgYWJvdXQgdGhlIFkgYXhpc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCBxdWF0IHJlY2VpdmluZyBvcGVyYXRpb24gcmVzdWx0XHJcbiAqIEBwYXJhbSB7cXVhdH0gYSBxdWF0IHRvIHJvdGF0ZVxyXG4gKiBAcGFyYW0ge251bWJlcn0gcmFkIGFuZ2xlIChpbiByYWRpYW5zKSB0byByb3RhdGVcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVkob3V0LCBhLCByYWQpIHtcclxuICByYWQgKj0gMC41O1xyXG5cclxuICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICBheSA9IGFbMV0sXHJcbiAgICAgIGF6ID0gYVsyXSxcclxuICAgICAgYXcgPSBhWzNdO1xyXG4gIHZhciBieSA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGJ3ID0gTWF0aC5jb3MocmFkKTtcclxuXHJcbiAgb3V0WzBdID0gYXggKiBidyAtIGF6ICogYnk7XHJcbiAgb3V0WzFdID0gYXkgKiBidyArIGF3ICogYnk7XHJcbiAgb3V0WzJdID0gYXogKiBidyArIGF4ICogYnk7XHJcbiAgb3V0WzNdID0gYXcgKiBidyAtIGF5ICogYnk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBxdWF0ZXJuaW9uIGJ5IHRoZSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgWiBheGlzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHF1YXQgcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXQgdG8gcm90YXRlXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSByYWQgYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlWihvdXQsIGEsIHJhZCkge1xyXG4gIHJhZCAqPSAwLjU7XHJcblxyXG4gIHZhciBheCA9IGFbMF0sXHJcbiAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgYXogPSBhWzJdLFxyXG4gICAgICBhdyA9IGFbM107XHJcbiAgdmFyIGJ6ID0gTWF0aC5zaW4ocmFkKSxcclxuICAgICAgYncgPSBNYXRoLmNvcyhyYWQpO1xyXG5cclxuICBvdXRbMF0gPSBheCAqIGJ3ICsgYXkgKiBiejtcclxuICBvdXRbMV0gPSBheSAqIGJ3IC0gYXggKiBiejtcclxuICBvdXRbMl0gPSBheiAqIGJ3ICsgYXcgKiBiejtcclxuICBvdXRbM10gPSBhdyAqIGJ3IC0gYXogKiBiejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgVyBjb21wb25lbnQgb2YgYSBxdWF0IGZyb20gdGhlIFgsIFksIGFuZCBaIGNvbXBvbmVudHMuXHJcbiAqIEFzc3VtZXMgdGhhdCBxdWF0ZXJuaW9uIGlzIDEgdW5pdCBpbiBsZW5ndGguXHJcbiAqIEFueSBleGlzdGluZyBXIGNvbXBvbmVudCB3aWxsIGJlIGlnbm9yZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgVyBjb21wb25lbnQgb2ZcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVcob3V0LCBhKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXSxcclxuICAgICAgeiA9IGFbMl07XHJcblxyXG4gIG91dFswXSA9IHg7XHJcbiAgb3V0WzFdID0geTtcclxuICBvdXRbMl0gPSB6O1xyXG4gIG91dFszXSA9IE1hdGguc3FydChNYXRoLmFicygxLjAgLSB4ICogeCAtIHkgKiB5IC0geiAqIHopKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgYSBzcGhlcmljYWwgbGluZWFyIGludGVycG9sYXRpb24gYmV0d2VlbiB0d28gcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2xlcnAob3V0LCBhLCBiLCB0KSB7XHJcbiAgLy8gYmVuY2htYXJrczpcclxuICAvLyAgICBodHRwOi8vanNwZXJmLmNvbS9xdWF0ZXJuaW9uLXNsZXJwLWltcGxlbWVudGF0aW9uc1xyXG4gIHZhciBheCA9IGFbMF0sXHJcbiAgICAgIGF5ID0gYVsxXSxcclxuICAgICAgYXogPSBhWzJdLFxyXG4gICAgICBhdyA9IGFbM107XHJcbiAgdmFyIGJ4ID0gYlswXSxcclxuICAgICAgYnkgPSBiWzFdLFxyXG4gICAgICBieiA9IGJbMl0sXHJcbiAgICAgIGJ3ID0gYlszXTtcclxuXHJcbiAgdmFyIG9tZWdhID0gdm9pZCAwLFxyXG4gICAgICBjb3NvbSA9IHZvaWQgMCxcclxuICAgICAgc2lub20gPSB2b2lkIDAsXHJcbiAgICAgIHNjYWxlMCA9IHZvaWQgMCxcclxuICAgICAgc2NhbGUxID0gdm9pZCAwO1xyXG5cclxuICAvLyBjYWxjIGNvc2luZVxyXG4gIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcclxuICAvLyBhZGp1c3Qgc2lnbnMgKGlmIG5lY2Vzc2FyeSlcclxuICBpZiAoY29zb20gPCAwLjApIHtcclxuICAgIGNvc29tID0gLWNvc29tO1xyXG4gICAgYnggPSAtYng7XHJcbiAgICBieSA9IC1ieTtcclxuICAgIGJ6ID0gLWJ6O1xyXG4gICAgYncgPSAtYnc7XHJcbiAgfVxyXG4gIC8vIGNhbGN1bGF0ZSBjb2VmZmljaWVudHNcclxuICBpZiAoMS4wIC0gY29zb20gPiBnbE1hdHJpeC5FUFNJTE9OKSB7XHJcbiAgICAvLyBzdGFuZGFyZCBjYXNlIChzbGVycClcclxuICAgIG9tZWdhID0gTWF0aC5hY29zKGNvc29tKTtcclxuICAgIHNpbm9tID0gTWF0aC5zaW4ob21lZ2EpO1xyXG4gICAgc2NhbGUwID0gTWF0aC5zaW4oKDEuMCAtIHQpICogb21lZ2EpIC8gc2lub207XHJcbiAgICBzY2FsZTEgPSBNYXRoLnNpbih0ICogb21lZ2EpIC8gc2lub207XHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIFwiZnJvbVwiIGFuZCBcInRvXCIgcXVhdGVybmlvbnMgYXJlIHZlcnkgY2xvc2VcclxuICAgIC8vICAuLi4gc28gd2UgY2FuIGRvIGEgbGluZWFyIGludGVycG9sYXRpb25cclxuICAgIHNjYWxlMCA9IDEuMCAtIHQ7XHJcbiAgICBzY2FsZTEgPSB0O1xyXG4gIH1cclxuICAvLyBjYWxjdWxhdGUgZmluYWwgdmFsdWVzXHJcbiAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcclxuICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xyXG4gIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XHJcbiAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmFuZG9tKG91dCkge1xyXG4gIC8vIEltcGxlbWVudGF0aW9uIG9mIGh0dHA6Ly9wbGFubmluZy5jcy51aXVjLmVkdS9ub2RlMTk4Lmh0bWxcclxuICAvLyBUT0RPOiBDYWxsaW5nIHJhbmRvbSAzIHRpbWVzIGlzIHByb2JhYmx5IG5vdCB0aGUgZmFzdGVzdCBzb2x1dGlvblxyXG4gIHZhciB1MSA9IGdsTWF0cml4LlJBTkRPTSgpO1xyXG4gIHZhciB1MiA9IGdsTWF0cml4LlJBTkRPTSgpO1xyXG4gIHZhciB1MyA9IGdsTWF0cml4LlJBTkRPTSgpO1xyXG5cclxuICB2YXIgc3FydDFNaW51c1UxID0gTWF0aC5zcXJ0KDEgLSB1MSk7XHJcbiAgdmFyIHNxcnRVMSA9IE1hdGguc3FydCh1MSk7XHJcblxyXG4gIG91dFswXSA9IHNxcnQxTWludXNVMSAqIE1hdGguc2luKDIuMCAqIE1hdGguUEkgKiB1Mik7XHJcbiAgb3V0WzFdID0gc3FydDFNaW51c1UxICogTWF0aC5jb3MoMi4wICogTWF0aC5QSSAqIHUyKTtcclxuICBvdXRbMl0gPSBzcXJ0VTEgKiBNYXRoLnNpbigyLjAgKiBNYXRoLlBJICogdTMpO1xyXG4gIG91dFszXSA9IHNxcnRVMSAqIE1hdGguY29zKDIuMCAqIE1hdGguUEkgKiB1Myk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaW52ZXJ0KG91dCwgYSkge1xyXG4gIHZhciBhMCA9IGFbMF0sXHJcbiAgICAgIGExID0gYVsxXSxcclxuICAgICAgYTIgPSBhWzJdLFxyXG4gICAgICBhMyA9IGFbM107XHJcbiAgdmFyIGRvdCA9IGEwICogYTAgKyBhMSAqIGExICsgYTIgKiBhMiArIGEzICogYTM7XHJcbiAgdmFyIGludkRvdCA9IGRvdCA/IDEuMCAvIGRvdCA6IDA7XHJcblxyXG4gIC8vIFRPRE86IFdvdWxkIGJlIGZhc3RlciB0byByZXR1cm4gWzAsMCwwLDBdIGltbWVkaWF0ZWx5IGlmIGRvdCA9PSAwXHJcblxyXG4gIG91dFswXSA9IC1hMCAqIGludkRvdDtcclxuICBvdXRbMV0gPSAtYTEgKiBpbnZEb3Q7XHJcbiAgb3V0WzJdID0gLWEyICogaW52RG90O1xyXG4gIG91dFszXSA9IGEzICogaW52RG90O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBjb25qdWdhdGUgb2YgYSBxdWF0XHJcbiAqIElmIHRoZSBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdC5pbnZlcnNlIGFuZCBwcm9kdWNlcyB0aGUgc2FtZSByZXN1bHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb25qdWdhdGUob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gLWFbMF07XHJcbiAgb3V0WzFdID0gLWFbMV07XHJcbiAgb3V0WzJdID0gLWFbMl07XHJcbiAgb3V0WzNdID0gYVszXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIHF1YXRlcm5pb24gZnJvbSB0aGUgZ2l2ZW4gM3gzIHJvdGF0aW9uIG1hdHJpeC5cclxuICpcclxuICogTk9URTogVGhlIHJlc3VsdGFudCBxdWF0ZXJuaW9uIGlzIG5vdCBub3JtYWxpemVkLCBzbyB5b3Ugc2hvdWxkIGJlIHN1cmVcclxuICogdG8gcmVub3JtYWxpemUgdGhlIHF1YXRlcm5pb24geW91cnNlbGYgd2hlcmUgbmVjZXNzYXJ5LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHttYXQzfSBtIHJvdGF0aW9uIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7cXVhdH0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21NYXQzKG91dCwgbSkge1xyXG4gIC8vIEFsZ29yaXRobSBpbiBLZW4gU2hvZW1ha2UncyBhcnRpY2xlIGluIDE5ODcgU0lHR1JBUEggY291cnNlIG5vdGVzXHJcbiAgLy8gYXJ0aWNsZSBcIlF1YXRlcm5pb24gQ2FsY3VsdXMgYW5kIEZhc3QgQW5pbWF0aW9uXCIuXHJcbiAgdmFyIGZUcmFjZSA9IG1bMF0gKyBtWzRdICsgbVs4XTtcclxuICB2YXIgZlJvb3QgPSB2b2lkIDA7XHJcblxyXG4gIGlmIChmVHJhY2UgPiAwLjApIHtcclxuICAgIC8vIHx3fCA+IDEvMiwgbWF5IGFzIHdlbGwgY2hvb3NlIHcgPiAxLzJcclxuICAgIGZSb290ID0gTWF0aC5zcXJ0KGZUcmFjZSArIDEuMCk7IC8vIDJ3XHJcbiAgICBvdXRbM10gPSAwLjUgKiBmUm9vdDtcclxuICAgIGZSb290ID0gMC41IC8gZlJvb3Q7IC8vIDEvKDR3KVxyXG4gICAgb3V0WzBdID0gKG1bNV0gLSBtWzddKSAqIGZSb290O1xyXG4gICAgb3V0WzFdID0gKG1bNl0gLSBtWzJdKSAqIGZSb290O1xyXG4gICAgb3V0WzJdID0gKG1bMV0gLSBtWzNdKSAqIGZSb290O1xyXG4gIH0gZWxzZSB7XHJcbiAgICAvLyB8d3wgPD0gMS8yXHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICBpZiAobVs0XSA+IG1bMF0pIGkgPSAxO1xyXG4gICAgaWYgKG1bOF0gPiBtW2kgKiAzICsgaV0pIGkgPSAyO1xyXG4gICAgdmFyIGogPSAoaSArIDEpICUgMztcclxuICAgIHZhciBrID0gKGkgKyAyKSAlIDM7XHJcblxyXG4gICAgZlJvb3QgPSBNYXRoLnNxcnQobVtpICogMyArIGldIC0gbVtqICogMyArIGpdIC0gbVtrICogMyArIGtdICsgMS4wKTtcclxuICAgIG91dFtpXSA9IDAuNSAqIGZSb290O1xyXG4gICAgZlJvb3QgPSAwLjUgLyBmUm9vdDtcclxuICAgIG91dFszXSA9IChtW2ogKiAzICsga10gLSBtW2sgKiAzICsgal0pICogZlJvb3Q7XHJcbiAgICBvdXRbal0gPSAobVtqICogMyArIGldICsgbVtpICogMyArIGpdKSAqIGZSb290O1xyXG4gICAgb3V0W2tdID0gKG1bayAqIDMgKyBpXSArIG1baSAqIDMgKyBrXSkgKiBmUm9vdDtcclxuICB9XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcXVhdGVybmlvbiBmcm9tIHRoZSBnaXZlbiBldWxlciBhbmdsZSB4LCB5LCB6LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHt4fSBBbmdsZSB0byByb3RhdGUgYXJvdW5kIFggYXhpcyBpbiBkZWdyZWVzLlxyXG4gKiBAcGFyYW0ge3l9IEFuZ2xlIHRvIHJvdGF0ZSBhcm91bmQgWSBheGlzIGluIGRlZ3JlZXMuXHJcbiAqIEBwYXJhbSB7en0gQW5nbGUgdG8gcm90YXRlIGFyb3VuZCBaIGF4aXMgaW4gZGVncmVlcy5cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXVsZXIob3V0LCB4LCB5LCB6KSB7XHJcbiAgdmFyIGhhbGZUb1JhZCA9IDAuNSAqIE1hdGguUEkgLyAxODAuMDtcclxuICB4ICo9IGhhbGZUb1JhZDtcclxuICB5ICo9IGhhbGZUb1JhZDtcclxuICB6ICo9IGhhbGZUb1JhZDtcclxuXHJcbiAgdmFyIHN4ID0gTWF0aC5zaW4oeCk7XHJcbiAgdmFyIGN4ID0gTWF0aC5jb3MoeCk7XHJcbiAgdmFyIHN5ID0gTWF0aC5zaW4oeSk7XHJcbiAgdmFyIGN5ID0gTWF0aC5jb3MoeSk7XHJcbiAgdmFyIHN6ID0gTWF0aC5zaW4oeik7XHJcbiAgdmFyIGN6ID0gTWF0aC5jb3Moeik7XHJcblxyXG4gIG91dFswXSA9IHN4ICogY3kgKiBjeiAtIGN4ICogc3kgKiBzejtcclxuICBvdXRbMV0gPSBjeCAqIHN5ICogY3ogKyBzeCAqIGN5ICogc3o7XHJcbiAgb3V0WzJdID0gY3ggKiBjeSAqIHN6IC0gc3ggKiBzeSAqIGN6O1xyXG4gIG91dFszXSA9IGN4ICogY3kgKiBjeiArIHN4ICogc3kgKiBzejtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBxdWF0ZW5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBhIHZlY3RvciB0byByZXByZXNlbnQgYXMgYSBzdHJpbmdcclxuICogQHJldHVybnMge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHIoYSkge1xyXG4gIHJldHVybiAncXVhdCgnICsgYVswXSArICcsICcgKyBhWzFdICsgJywgJyArIGFbMl0gKyAnLCAnICsgYVszXSArICcpJztcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgcXVhdCBpbml0aWFsaXplZCB3aXRoIHZhbHVlcyBmcm9tIGFuIGV4aXN0aW5nIHF1YXRlcm5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBhIHF1YXRlcm5pb24gdG8gY2xvbmVcclxuICogQHJldHVybnMge3F1YXR9IGEgbmV3IHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGNsb25lID0gdmVjNC5jbG9uZTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHtxdWF0fSBhIG5ldyBxdWF0ZXJuaW9uXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBmcm9tVmFsdWVzID0gdmVjNC5mcm9tVmFsdWVzO1xyXG5cclxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSBxdWF0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgc291cmNlIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgY29weSA9IHZlYzQuY29weTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGNvbXBvbmVudHMgb2YgYSBxdWF0IHRvIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6IFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3IFcgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNldCA9IHZlYzQuc2V0O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIHF1YXQnc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgYWRkID0gdmVjNC5hZGQ7XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayBxdWF0Lm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogU2NhbGVzIGEgcXVhdCBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc2NhbGUgPSB2ZWM0LnNjYWxlO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byBxdWF0J3NcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdH0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZG90ID0gdmVjNC5kb3Q7XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byBxdWF0J3NcclxuICpcclxuICogQHBhcmFtIHtxdWF0fSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXR9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0IGludGVycG9sYXRpb24gYW1vdW50LCBpbiB0aGUgcmFuZ2UgWzAtMV0sIGJldHdlZW4gdGhlIHR3byBpbnB1dHNcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbGVycCA9IHZlYzQubGVycDtcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBsZW5ndGggb2YgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gYSB2ZWN0b3IgdG8gY2FsY3VsYXRlIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBsZW5ndGggb2YgYVxyXG4gKi9cclxuZXhwb3J0IHZhciBsZW5ndGggPSB2ZWM0Lmxlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgcXVhdFxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzcXVhcmVkTGVuZ3RoID0gdmVjNC5zcXVhcmVkTGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdC5zcXVhcmVkTGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3FyTGVuID0gc3F1YXJlZExlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBOb3JtYWxpemUgYSBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgcXVhdGVybmlvbiB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbm9ybWFsaXplID0gdmVjNC5ub3JtYWxpemU7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcXVhdGVybmlvbnMgaGF2ZSBleGFjdGx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uICh3aGVuIGNvbXBhcmVkIHdpdGggPT09KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgVGhlIGZpcnN0IHF1YXRlcm5pb24uXHJcbiAqIEBwYXJhbSB7cXVhdH0gYiBUaGUgc2Vjb25kIHF1YXRlcm5pb24uXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBUcnVlIGlmIHRoZSB2ZWN0b3JzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IHZhciBleGFjdEVxdWFscyA9IHZlYzQuZXhhY3RFcXVhbHM7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgVGhlIGZpcnN0IHZlY3Rvci5cclxuICogQHBhcmFtIHtxdWF0fSBiIFRoZSBzZWNvbmQgdmVjdG9yLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVjdG9ycyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCB2YXIgZXF1YWxzID0gdmVjNC5lcXVhbHM7XHJcblxyXG4vKipcclxuICogU2V0cyBhIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IHRoZSBzaG9ydGVzdCByb3RhdGlvbiBmcm9tIG9uZVxyXG4gKiB2ZWN0b3IgdG8gYW5vdGhlci5cclxuICpcclxuICogQm90aCB2ZWN0b3JzIGFyZSBhc3N1bWVkIHRvIGJlIHVuaXQgbGVuZ3RoLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXR9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb24uXHJcbiAqIEBwYXJhbSB7dmVjM30gYSB0aGUgaW5pdGlhbCB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMzfSBiIHRoZSBkZXN0aW5hdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IHZhciByb3RhdGlvblRvID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB0bXB2ZWMzID0gdmVjMy5jcmVhdGUoKTtcclxuICB2YXIgeFVuaXRWZWMzID0gdmVjMy5mcm9tVmFsdWVzKDEsIDAsIDApO1xyXG4gIHZhciB5VW5pdFZlYzMgPSB2ZWMzLmZyb21WYWx1ZXMoMCwgMSwgMCk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAob3V0LCBhLCBiKSB7XHJcbiAgICB2YXIgZG90ID0gdmVjMy5kb3QoYSwgYik7XHJcbiAgICBpZiAoZG90IDwgLTAuOTk5OTk5KSB7XHJcbiAgICAgIHZlYzMuY3Jvc3ModG1wdmVjMywgeFVuaXRWZWMzLCBhKTtcclxuICAgICAgaWYgKHZlYzMubGVuKHRtcHZlYzMpIDwgMC4wMDAwMDEpIHZlYzMuY3Jvc3ModG1wdmVjMywgeVVuaXRWZWMzLCBhKTtcclxuICAgICAgdmVjMy5ub3JtYWxpemUodG1wdmVjMywgdG1wdmVjMyk7XHJcbiAgICAgIHNldEF4aXNBbmdsZShvdXQsIHRtcHZlYzMsIE1hdGguUEkpO1xyXG4gICAgICByZXR1cm4gb3V0O1xyXG4gICAgfSBlbHNlIGlmIChkb3QgPiAwLjk5OTk5OSkge1xyXG4gICAgICBvdXRbMF0gPSAwO1xyXG4gICAgICBvdXRbMV0gPSAwO1xyXG4gICAgICBvdXRbMl0gPSAwO1xyXG4gICAgICBvdXRbM10gPSAxO1xyXG4gICAgICByZXR1cm4gb3V0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmVjMy5jcm9zcyh0bXB2ZWMzLCBhLCBiKTtcclxuICAgICAgb3V0WzBdID0gdG1wdmVjM1swXTtcclxuICAgICAgb3V0WzFdID0gdG1wdmVjM1sxXTtcclxuICAgICAgb3V0WzJdID0gdG1wdmVjM1syXTtcclxuICAgICAgb3V0WzNdID0gMSArIGRvdDtcclxuICAgICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIG91dCk7XHJcbiAgICB9XHJcbiAgfTtcclxufSgpO1xyXG5cclxuLyoqXHJcbiAqIFBlcmZvcm1zIGEgc3BoZXJpY2FsIGxpbmVhciBpbnRlcnBvbGF0aW9uIHdpdGggdHdvIGNvbnRyb2wgcG9pbnRzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdH0gb3V0IHRoZSByZWNlaXZpbmcgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXR9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0fSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXR9IGMgdGhlIHRoaXJkIG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0fSBkIHRoZSBmb3VydGggb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHtxdWF0fSBvdXRcclxuICovXHJcbmV4cG9ydCB2YXIgc3FsZXJwID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB0ZW1wMSA9IGNyZWF0ZSgpO1xyXG4gIHZhciB0ZW1wMiA9IGNyZWF0ZSgpO1xyXG5cclxuICByZXR1cm4gZnVuY3Rpb24gKG91dCwgYSwgYiwgYywgZCwgdCkge1xyXG4gICAgc2xlcnAodGVtcDEsIGEsIGQsIHQpO1xyXG4gICAgc2xlcnAodGVtcDIsIGIsIGMsIHQpO1xyXG4gICAgc2xlcnAob3V0LCB0ZW1wMSwgdGVtcDIsIDIgKiB0ICogKDEgLSB0KSk7XHJcblxyXG4gICAgcmV0dXJuIG91dDtcclxuICB9O1xyXG59KCk7XHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgc3BlY2lmaWVkIHF1YXRlcm5pb24gd2l0aCB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW5cclxuICogYXhlcy4gRWFjaCBheGlzIGlzIGEgdmVjMyBhbmQgaXMgZXhwZWN0ZWQgdG8gYmUgdW5pdCBsZW5ndGggYW5kXHJcbiAqIHBlcnBlbmRpY3VsYXIgdG8gYWxsIG90aGVyIHNwZWNpZmllZCBheGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IHZpZXcgIHRoZSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSB2aWV3aW5nIGRpcmVjdGlvblxyXG4gKiBAcGFyYW0ge3ZlYzN9IHJpZ2h0IHRoZSB2ZWN0b3IgcmVwcmVzZW50aW5nIHRoZSBsb2NhbCBcInJpZ2h0XCIgZGlyZWN0aW9uXHJcbiAqIEBwYXJhbSB7dmVjM30gdXAgICAgdGhlIHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2FsIFwidXBcIiBkaXJlY3Rpb25cclxuICogQHJldHVybnMge3F1YXR9IG91dFxyXG4gKi9cclxuZXhwb3J0IHZhciBzZXRBeGVzID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBtYXRyID0gbWF0My5jcmVhdGUoKTtcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChvdXQsIHZpZXcsIHJpZ2h0LCB1cCkge1xyXG4gICAgbWF0clswXSA9IHJpZ2h0WzBdO1xyXG4gICAgbWF0clszXSA9IHJpZ2h0WzFdO1xyXG4gICAgbWF0cls2XSA9IHJpZ2h0WzJdO1xyXG5cclxuICAgIG1hdHJbMV0gPSB1cFswXTtcclxuICAgIG1hdHJbNF0gPSB1cFsxXTtcclxuICAgIG1hdHJbN10gPSB1cFsyXTtcclxuXHJcbiAgICBtYXRyWzJdID0gLXZpZXdbMF07XHJcbiAgICBtYXRyWzVdID0gLXZpZXdbMV07XHJcbiAgICBtYXRyWzhdID0gLXZpZXdbMl07XHJcblxyXG4gICAgcmV0dXJuIG5vcm1hbGl6ZShvdXQsIGZyb21NYXQzKG91dCwgbWF0cikpO1xyXG4gIH07XHJcbn0oKTsiLCJpbXBvcnQgKiBhcyBnbE1hdHJpeCBmcm9tIFwiLi9jb21tb24uanNcIjtcclxuaW1wb3J0ICogYXMgcXVhdCBmcm9tIFwiLi9xdWF0LmpzXCI7XHJcbmltcG9ydCAqIGFzIG1hdDQgZnJvbSBcIi4vbWF0NC5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIER1YWwgUXVhdGVybmlvbjxicj5cclxuICogRm9ybWF0OiBbcmVhbCwgZHVhbF08YnI+XHJcbiAqIFF1YXRlcm5pb24gZm9ybWF0OiBYWVpXPGJyPlxyXG4gKiBNYWtlIHN1cmUgdG8gaGF2ZSBub3JtYWxpemVkIGR1YWwgcXVhdGVybmlvbnMsIG90aGVyd2lzZSB0aGUgZnVuY3Rpb25zIG1heSBub3Qgd29yayBhcyBpbnRlbmRlZC48YnI+XHJcbiAqIEBtb2R1bGUgcXVhdDJcclxuICovXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBpZGVudGl0eSBkdWFsIHF1YXRcclxuICpcclxuICogQHJldHVybnMge3F1YXQyfSBhIG5ldyBkdWFsIHF1YXRlcm5pb24gW3JlYWwgLT4gcm90YXRpb24sIGR1YWwgLT4gdHJhbnNsYXRpb25dXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKCkge1xyXG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgZHFbMF0gPSAwO1xyXG4gICAgZHFbMV0gPSAwO1xyXG4gICAgZHFbMl0gPSAwO1xyXG4gICAgZHFbNF0gPSAwO1xyXG4gICAgZHFbNV0gPSAwO1xyXG4gICAgZHFbNl0gPSAwO1xyXG4gICAgZHFbN10gPSAwO1xyXG4gIH1cclxuICBkcVszXSA9IDE7XHJcbiAgcmV0dXJuIGRxO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBxdWF0IGluaXRpYWxpemVkIHdpdGggdmFsdWVzIGZyb20gYW4gZXhpc3RpbmcgcXVhdGVybmlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBkcSA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDgpO1xyXG4gIGRxWzBdID0gYVswXTtcclxuICBkcVsxXSA9IGFbMV07XHJcbiAgZHFbMl0gPSBhWzJdO1xyXG4gIGRxWzNdID0gYVszXTtcclxuICBkcVs0XSA9IGFbNF07XHJcbiAgZHFbNV0gPSBhWzVdO1xyXG4gIGRxWzZdID0gYVs2XTtcclxuICBkcVs3XSA9IGFbN107XHJcbiAgcmV0dXJuIGRxO1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkyIFkgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB6MiBaIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdzIgVyBjb21wb25lbnRcclxuICogQHJldHVybnMge3F1YXQyfSBuZXcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIsIHcyKSB7XHJcbiAgdmFyIGRxID0gbmV3IGdsTWF0cml4LkFSUkFZX1RZUEUoOCk7XHJcbiAgZHFbMF0gPSB4MTtcclxuICBkcVsxXSA9IHkxO1xyXG4gIGRxWzJdID0gejE7XHJcbiAgZHFbM10gPSB3MTtcclxuICBkcVs0XSA9IHgyO1xyXG4gIGRxWzVdID0geTI7XHJcbiAgZHFbNl0gPSB6MjtcclxuICBkcVs3XSA9IHcyO1xyXG4gIHJldHVybiBkcTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgZHVhbCBxdWF0IGZyb20gdGhlIGdpdmVuIHZhbHVlcyAocXVhdCBhbmQgdHJhbnNsYXRpb24pXHJcbiAqXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MSBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTEgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoxIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MSBXIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geDIgWCBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gejIgWiBjb21wb25lbnQgKHRyYW5zbGF0aW9uKVxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG5ldyBkdWFsIHF1YXRlcm5pb25cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25WYWx1ZXMoeDEsIHkxLCB6MSwgdzEsIHgyLCB5MiwgejIpIHtcclxuICB2YXIgZHEgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSg4KTtcclxuICBkcVswXSA9IHgxO1xyXG4gIGRxWzFdID0geTE7XHJcbiAgZHFbMl0gPSB6MTtcclxuICBkcVszXSA9IHcxO1xyXG4gIHZhciBheCA9IHgyICogMC41LFxyXG4gICAgICBheSA9IHkyICogMC41LFxyXG4gICAgICBheiA9IHoyICogMC41O1xyXG4gIGRxWzRdID0gYXggKiB3MSArIGF5ICogejEgLSBheiAqIHkxO1xyXG4gIGRxWzVdID0gYXkgKiB3MSArIGF6ICogeDEgLSBheCAqIHoxO1xyXG4gIGRxWzZdID0gYXogKiB3MSArIGF4ICogeTEgLSBheSAqIHgxO1xyXG4gIGRxWzddID0gLWF4ICogeDEgLSBheSAqIHkxIC0gYXogKiB6MTtcclxuICByZXR1cm4gZHE7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSBxdWF0ZXJuaW9uIGFuZCBhIHRyYW5zbGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXR9IHEgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3ZlYzN9IHQgdHJhbmxhdGlvbiB2ZWN0b3JcclxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24ob3V0LCBxLCB0KSB7XHJcbiAgdmFyIGF4ID0gdFswXSAqIDAuNSxcclxuICAgICAgYXkgPSB0WzFdICogMC41LFxyXG4gICAgICBheiA9IHRbMl0gKiAwLjUsXHJcbiAgICAgIGJ4ID0gcVswXSxcclxuICAgICAgYnkgPSBxWzFdLFxyXG4gICAgICBieiA9IHFbMl0sXHJcbiAgICAgIGJ3ID0gcVszXTtcclxuICBvdXRbMF0gPSBieDtcclxuICBvdXRbMV0gPSBieTtcclxuICBvdXRbMl0gPSBiejtcclxuICBvdXRbM10gPSBidztcclxuICBvdXRbNF0gPSBheCAqIGJ3ICsgYXkgKiBieiAtIGF6ICogYnk7XHJcbiAgb3V0WzVdID0gYXkgKiBidyArIGF6ICogYnggLSBheCAqIGJ6O1xyXG4gIG91dFs2XSA9IGF6ICogYncgKyBheCAqIGJ5IC0gYXkgKiBieDtcclxuICBvdXRbN10gPSAtYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSB0cmFuc2xhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQHBhcmFtIHt2ZWMzfSB0IHRyYW5zbGF0aW9uIHZlY3RvclxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tVHJhbnNsYXRpb24ob3V0LCB0KSB7XHJcbiAgb3V0WzBdID0gMDtcclxuICBvdXRbMV0gPSAwO1xyXG4gIG91dFsyXSA9IDA7XHJcbiAgb3V0WzNdID0gMTtcclxuICBvdXRbNF0gPSB0WzBdICogMC41O1xyXG4gIG91dFs1XSA9IHRbMV0gKiAwLjU7XHJcbiAgb3V0WzZdID0gdFsyXSAqIDAuNTtcclxuICBvdXRbN10gPSAwO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgZHVhbCBxdWF0IGZyb20gYSBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGR1YWwgcXVhdGVybmlvbiByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAcGFyYW0ge3F1YXR9IHEgdGhlIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBkdWFsIHF1YXRlcm5pb24gcmVjZWl2aW5nIG9wZXJhdGlvbiByZXN1bHRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZnJvbVJvdGF0aW9uKG91dCwgcSkge1xyXG4gIG91dFswXSA9IHFbMF07XHJcbiAgb3V0WzFdID0gcVsxXTtcclxuICBvdXRbMl0gPSBxWzJdO1xyXG4gIG91dFszXSA9IHFbM107XHJcbiAgb3V0WzRdID0gMDtcclxuICBvdXRbNV0gPSAwO1xyXG4gIG91dFs2XSA9IDA7XHJcbiAgb3V0WzddID0gMDtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBhIG5ldyBkdWFsIHF1YXQgZnJvbSBhIG1hdHJpeCAoNHg0KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge21hdDR9IGEgdGhlIG1hdHJpeFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IGR1YWwgcXVhdCByZWNlaXZpbmcgb3BlcmF0aW9uIHJlc3VsdFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tTWF0NChvdXQsIGEpIHtcclxuICAvL1RPRE8gT3B0aW1pemUgdGhpc1xyXG4gIHZhciBvdXRlciA9IHF1YXQuY3JlYXRlKCk7XHJcbiAgbWF0NC5nZXRSb3RhdGlvbihvdXRlciwgYSk7XHJcbiAgdmFyIHQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgzKTtcclxuICBtYXQ0LmdldFRyYW5zbGF0aW9uKHQsIGEpO1xyXG4gIGZyb21Sb3RhdGlvblRyYW5zbGF0aW9uKG91dCwgb3V0ZXIsIHQpO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3B5IHRoZSB2YWx1ZXMgZnJvbSBvbmUgZHVhbCBxdWF0IHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIHNvdXJjZSBkdWFsIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29weShvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgb3V0WzJdID0gYVsyXTtcclxuICBvdXRbM10gPSBhWzNdO1xyXG4gIG91dFs0XSA9IGFbNF07XHJcbiAgb3V0WzVdID0gYVs1XTtcclxuICBvdXRbNl0gPSBhWzZdO1xyXG4gIG91dFs3XSA9IGFbN107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBhIGR1YWwgcXVhdCB0byB0aGUgaWRlbnRpdHkgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eShvdXQpIHtcclxuICBvdXRbMF0gPSAwO1xyXG4gIG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gMDtcclxuICBvdXRbM10gPSAxO1xyXG4gIG91dFs0XSA9IDA7XHJcbiAgb3V0WzVdID0gMDtcclxuICBvdXRbNl0gPSAwO1xyXG4gIG91dFs3XSA9IDA7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCB0aGUgY29tcG9uZW50cyBvZiBhIGR1YWwgcXVhdCB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHgxIFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5MSBZIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0gejEgWiBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHcxIFcgY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4MiBYIGNvbXBvbmVudFxyXG4gKiBAcGFyYW0ge051bWJlcn0geTIgWSBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHoyIFogY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB3MiBXIGNvbXBvbmVudFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4MSwgeTEsIHoxLCB3MSwgeDIsIHkyLCB6MiwgdzIpIHtcclxuICBvdXRbMF0gPSB4MTtcclxuICBvdXRbMV0gPSB5MTtcclxuICBvdXRbMl0gPSB6MTtcclxuICBvdXRbM10gPSB3MTtcclxuXHJcbiAgb3V0WzRdID0geDI7XHJcbiAgb3V0WzVdID0geTI7XHJcbiAgb3V0WzZdID0gejI7XHJcbiAgb3V0WzddID0gdzI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHJlYWwgcGFydCBvZiBhIGR1YWwgcXVhdFxyXG4gKiBAcGFyYW0gIHtxdWF0fSBvdXQgcmVhbCBwYXJ0XHJcbiAqIEBwYXJhbSAge3F1YXQyfSBhIER1YWwgUXVhdGVybmlvblxyXG4gKiBAcmV0dXJuIHtxdWF0fSByZWFsIHBhcnRcclxuICovXHJcbmV4cG9ydCB2YXIgZ2V0UmVhbCA9IHF1YXQuY29weTtcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBkdWFsIHBhcnQgb2YgYSBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7cXVhdH0gb3V0IGR1YWwgcGFydFxyXG4gKiBAcGFyYW0gIHtxdWF0Mn0gYSBEdWFsIFF1YXRlcm5pb25cclxuICogQHJldHVybiB7cXVhdH0gZHVhbCBwYXJ0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHVhbChvdXQsIGEpIHtcclxuICBvdXRbMF0gPSBhWzRdO1xyXG4gIG91dFsxXSA9IGFbNV07XHJcbiAgb3V0WzJdID0gYVs2XTtcclxuICBvdXRbM10gPSBhWzddO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIHJlYWwgY29tcG9uZW50IG9mIGEgZHVhbCBxdWF0IHRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIHJlYWwgcGFydFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc2V0UmVhbCA9IHF1YXQuY29weTtcclxuXHJcbi8qKlxyXG4gKiBTZXQgdGhlIGR1YWwgY29tcG9uZW50IG9mIGEgZHVhbCBxdWF0IHRvIHRoZSBnaXZlbiBxdWF0ZXJuaW9uXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBxIGEgcXVhdGVybmlvbiByZXByZXNlbnRpbmcgdGhlIGR1YWwgcGFydFxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXREdWFsKG91dCwgcSkge1xyXG4gIG91dFs0XSA9IHFbMF07XHJcbiAgb3V0WzVdID0gcVsxXTtcclxuICBvdXRbNl0gPSBxWzJdO1xyXG4gIG91dFs3XSA9IHFbM107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHRyYW5zbGF0aW9uIG9mIGEgbm9ybWFsaXplZCBkdWFsIHF1YXRcclxuICogQHBhcmFtICB7dmVjM30gb3V0IHRyYW5zbGF0aW9uXHJcbiAqIEBwYXJhbSAge3F1YXQyfSBhIER1YWwgUXVhdGVybmlvbiB0byBiZSBkZWNvbXBvc2VkXHJcbiAqIEByZXR1cm4ge3ZlYzN9IHRyYW5zbGF0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNsYXRpb24ob3V0LCBhKSB7XHJcbiAgdmFyIGF4ID0gYVs0XSxcclxuICAgICAgYXkgPSBhWzVdLFxyXG4gICAgICBheiA9IGFbNl0sXHJcbiAgICAgIGF3ID0gYVs3XSxcclxuICAgICAgYnggPSAtYVswXSxcclxuICAgICAgYnkgPSAtYVsxXSxcclxuICAgICAgYnogPSAtYVsyXSxcclxuICAgICAgYncgPSBhWzNdO1xyXG4gIG91dFswXSA9IChheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5KSAqIDI7XHJcbiAgb3V0WzFdID0gKGF5ICogYncgKyBhdyAqIGJ5ICsgYXogKiBieCAtIGF4ICogYnopICogMjtcclxuICBvdXRbMl0gPSAoYXogKiBidyArIGF3ICogYnogKyBheCAqIGJ5IC0gYXkgKiBieCkgKiAyO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcmFuc2xhdGVzIGEgZHVhbCBxdWF0IGJ5IHRoZSBnaXZlbiB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byB0cmFuc2xhdGVcclxuICogQHBhcmFtIHt2ZWMzfSB2IHZlY3RvciB0byB0cmFuc2xhdGUgYnlcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGUob3V0LCBhLCB2KSB7XHJcbiAgdmFyIGF4MSA9IGFbMF0sXHJcbiAgICAgIGF5MSA9IGFbMV0sXHJcbiAgICAgIGF6MSA9IGFbMl0sXHJcbiAgICAgIGF3MSA9IGFbM10sXHJcbiAgICAgIGJ4MSA9IHZbMF0gKiAwLjUsXHJcbiAgICAgIGJ5MSA9IHZbMV0gKiAwLjUsXHJcbiAgICAgIGJ6MSA9IHZbMl0gKiAwLjUsXHJcbiAgICAgIGF4MiA9IGFbNF0sXHJcbiAgICAgIGF5MiA9IGFbNV0sXHJcbiAgICAgIGF6MiA9IGFbNl0sXHJcbiAgICAgIGF3MiA9IGFbN107XHJcbiAgb3V0WzBdID0gYXgxO1xyXG4gIG91dFsxXSA9IGF5MTtcclxuICBvdXRbMl0gPSBhejE7XHJcbiAgb3V0WzNdID0gYXcxO1xyXG4gIG91dFs0XSA9IGF3MSAqIGJ4MSArIGF5MSAqIGJ6MSAtIGF6MSAqIGJ5MSArIGF4MjtcclxuICBvdXRbNV0gPSBhdzEgKiBieTEgKyBhejEgKiBieDEgLSBheDEgKiBiejEgKyBheTI7XHJcbiAgb3V0WzZdID0gYXcxICogYnoxICsgYXgxICogYnkxIC0gYXkxICogYngxICsgYXoyO1xyXG4gIG91dFs3XSA9IC1heDEgKiBieDEgLSBheTEgKiBieTEgLSBhejEgKiBiejEgKyBhdzI7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBYIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVYKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddLFxyXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHF1YXQucm90YXRlWChvdXQsIGEsIHJhZCk7XHJcbiAgYnggPSBvdXRbMF07XHJcbiAgYnkgPSBvdXRbMV07XHJcbiAgYnogPSBvdXRbMl07XHJcbiAgYncgPSBvdXRbM107XHJcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBZIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVZKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddLFxyXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHF1YXQucm90YXRlWShvdXQsIGEsIHJhZCk7XHJcbiAgYnggPSBvdXRbMF07XHJcbiAgYnkgPSBvdXRbMV07XHJcbiAgYnogPSBvdXRbMl07XHJcbiAgYncgPSBvdXRbM107XHJcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYXJvdW5kIHRoZSBaIGF4aXNcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtudW1iZXJ9IHJhZCBob3cgZmFyIHNob3VsZCB0aGUgcm90YXRpb24gYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVaKG91dCwgYSwgcmFkKSB7XHJcbiAgdmFyIGJ4ID0gLWFbMF0sXHJcbiAgICAgIGJ5ID0gLWFbMV0sXHJcbiAgICAgIGJ6ID0gLWFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXSxcclxuICAgICAgYXggPSBhWzRdLFxyXG4gICAgICBheSA9IGFbNV0sXHJcbiAgICAgIGF6ID0gYVs2XSxcclxuICAgICAgYXcgPSBhWzddLFxyXG4gICAgICBheDEgPSBheCAqIGJ3ICsgYXcgKiBieCArIGF5ICogYnogLSBheiAqIGJ5LFxyXG4gICAgICBheTEgPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6LFxyXG4gICAgICBhejEgPSBheiAqIGJ3ICsgYXcgKiBieiArIGF4ICogYnkgLSBheSAqIGJ4LFxyXG4gICAgICBhdzEgPSBhdyAqIGJ3IC0gYXggKiBieCAtIGF5ICogYnkgLSBheiAqIGJ6O1xyXG4gIHF1YXQucm90YXRlWihvdXQsIGEsIHJhZCk7XHJcbiAgYnggPSBvdXRbMF07XHJcbiAgYnkgPSBvdXRbMV07XHJcbiAgYnogPSBvdXRbMl07XHJcbiAgYncgPSBvdXRbM107XHJcbiAgb3V0WzRdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzVdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzZdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzddID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJvdGF0ZXMgYSBkdWFsIHF1YXQgYnkgYSBnaXZlbiBxdWF0ZXJuaW9uIChhICogcSlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gcm90YXRlIGJ5XHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQnlRdWF0QXBwZW5kKG91dCwgYSwgcSkge1xyXG4gIHZhciBxeCA9IHFbMF0sXHJcbiAgICAgIHF5ID0gcVsxXSxcclxuICAgICAgcXogPSBxWzJdLFxyXG4gICAgICBxdyA9IHFbM10sXHJcbiAgICAgIGF4ID0gYVswXSxcclxuICAgICAgYXkgPSBhWzFdLFxyXG4gICAgICBheiA9IGFbMl0sXHJcbiAgICAgIGF3ID0gYVszXTtcclxuXHJcbiAgb3V0WzBdID0gYXggKiBxdyArIGF3ICogcXggKyBheSAqIHF6IC0gYXogKiBxeTtcclxuICBvdXRbMV0gPSBheSAqIHF3ICsgYXcgKiBxeSArIGF6ICogcXggLSBheCAqIHF6O1xyXG4gIG91dFsyXSA9IGF6ICogcXcgKyBhdyAqIHF6ICsgYXggKiBxeSAtIGF5ICogcXg7XHJcbiAgb3V0WzNdID0gYXcgKiBxdyAtIGF4ICogcXggLSBheSAqIHF5IC0gYXogKiBxejtcclxuICBheCA9IGFbNF07XHJcbiAgYXkgPSBhWzVdO1xyXG4gIGF6ID0gYVs2XTtcclxuICBhdyA9IGFbN107XHJcbiAgb3V0WzRdID0gYXggKiBxdyArIGF3ICogcXggKyBheSAqIHF6IC0gYXogKiBxeTtcclxuICBvdXRbNV0gPSBheSAqIHF3ICsgYXcgKiBxeSArIGF6ICogcXggLSBheCAqIHF6O1xyXG4gIG91dFs2XSA9IGF6ICogcXcgKyBhdyAqIHF6ICsgYXggKiBxeSAtIGF5ICogcXg7XHJcbiAgb3V0WzddID0gYXcgKiBxdyAtIGF4ICogcXggLSBheSAqIHF5IC0gYXogKiBxejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBieSBhIGdpdmVuIHF1YXRlcm5pb24gKHEgKiBhKVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRlcm5pb25cclxuICogQHBhcmFtIHtxdWF0fSBxIHF1YXRlcm5pb24gdG8gcm90YXRlIGJ5XHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVCeVF1YXRQcmVwZW5kKG91dCwgcSwgYSkge1xyXG4gIHZhciBxeCA9IHFbMF0sXHJcbiAgICAgIHF5ID0gcVsxXSxcclxuICAgICAgcXogPSBxWzJdLFxyXG4gICAgICBxdyA9IHFbM10sXHJcbiAgICAgIGJ4ID0gYVswXSxcclxuICAgICAgYnkgPSBhWzFdLFxyXG4gICAgICBieiA9IGFbMl0sXHJcbiAgICAgIGJ3ID0gYVszXTtcclxuXHJcbiAgb3V0WzBdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcclxuICBvdXRbMV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xyXG4gIG91dFsyXSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XHJcbiAgb3V0WzNdID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcclxuICBieCA9IGFbNF07XHJcbiAgYnkgPSBhWzVdO1xyXG4gIGJ6ID0gYVs2XTtcclxuICBidyA9IGFbN107XHJcbiAgb3V0WzRdID0gcXggKiBidyArIHF3ICogYnggKyBxeSAqIGJ6IC0gcXogKiBieTtcclxuICBvdXRbNV0gPSBxeSAqIGJ3ICsgcXcgKiBieSArIHF6ICogYnggLSBxeCAqIGJ6O1xyXG4gIG91dFs2XSA9IHF6ICogYncgKyBxdyAqIGJ6ICsgcXggKiBieSAtIHF5ICogYng7XHJcbiAgb3V0WzddID0gcXcgKiBidyAtIHF4ICogYnggLSBxeSAqIGJ5IC0gcXogKiBiejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUm90YXRlcyBhIGR1YWwgcXVhdCBhcm91bmQgYSBnaXZlbiBheGlzLiBEb2VzIHRoZSBub3JtYWxpc2F0aW9uIGF1dG9tYXRpY2FsbHlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGR1YWwgcXVhdGVybmlvbiB0byByb3RhdGVcclxuICogQHBhcmFtIHt2ZWMzfSBheGlzIHRoZSBheGlzIHRvIHJvdGF0ZSBhcm91bmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhZCBob3cgZmFyIHRoZSByb3RhdGlvbiBzaG91bGQgYmVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByb3RhdGVBcm91bmRBeGlzKG91dCwgYSwgYXhpcywgcmFkKSB7XHJcbiAgLy9TcGVjaWFsIGNhc2UgZm9yIHJhZCA9IDBcclxuICBpZiAoTWF0aC5hYnMocmFkKSA8IGdsTWF0cml4LkVQU0lMT04pIHtcclxuICAgIHJldHVybiBjb3B5KG91dCwgYSk7XHJcbiAgfVxyXG4gIHZhciBheGlzTGVuZ3RoID0gTWF0aC5zcXJ0KGF4aXNbMF0gKiBheGlzWzBdICsgYXhpc1sxXSAqIGF4aXNbMV0gKyBheGlzWzJdICogYXhpc1syXSk7XHJcblxyXG4gIHJhZCA9IHJhZCAqIDAuNTtcclxuICB2YXIgcyA9IE1hdGguc2luKHJhZCk7XHJcbiAgdmFyIGJ4ID0gcyAqIGF4aXNbMF0gLyBheGlzTGVuZ3RoO1xyXG4gIHZhciBieSA9IHMgKiBheGlzWzFdIC8gYXhpc0xlbmd0aDtcclxuICB2YXIgYnogPSBzICogYXhpc1syXSAvIGF4aXNMZW5ndGg7XHJcbiAgdmFyIGJ3ID0gTWF0aC5jb3MocmFkKTtcclxuXHJcbiAgdmFyIGF4MSA9IGFbMF0sXHJcbiAgICAgIGF5MSA9IGFbMV0sXHJcbiAgICAgIGF6MSA9IGFbMl0sXHJcbiAgICAgIGF3MSA9IGFbM107XHJcbiAgb3V0WzBdID0gYXgxICogYncgKyBhdzEgKiBieCArIGF5MSAqIGJ6IC0gYXoxICogYnk7XHJcbiAgb3V0WzFdID0gYXkxICogYncgKyBhdzEgKiBieSArIGF6MSAqIGJ4IC0gYXgxICogYno7XHJcbiAgb3V0WzJdID0gYXoxICogYncgKyBhdzEgKiBieiArIGF4MSAqIGJ5IC0gYXkxICogYng7XHJcbiAgb3V0WzNdID0gYXcxICogYncgLSBheDEgKiBieCAtIGF5MSAqIGJ5IC0gYXoxICogYno7XHJcblxyXG4gIHZhciBheCA9IGFbNF0sXHJcbiAgICAgIGF5ID0gYVs1XSxcclxuICAgICAgYXogPSBhWzZdLFxyXG4gICAgICBhdyA9IGFbN107XHJcbiAgb3V0WzRdID0gYXggKiBidyArIGF3ICogYnggKyBheSAqIGJ6IC0gYXogKiBieTtcclxuICBvdXRbNV0gPSBheSAqIGJ3ICsgYXcgKiBieSArIGF6ICogYnggLSBheCAqIGJ6O1xyXG4gIG91dFs2XSA9IGF6ICogYncgKyBhdyAqIGJ6ICsgYXggKiBieSAtIGF5ICogYng7XHJcbiAgb3V0WzddID0gYXcgKiBidyAtIGF4ICogYnggLSBheSAqIGJ5IC0gYXogKiBiejtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZHMgdHdvIGR1YWwgcXVhdCdzXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICBvdXRbMl0gPSBhWzJdICsgYlsyXTtcclxuICBvdXRbM10gPSBhWzNdICsgYlszXTtcclxuICBvdXRbNF0gPSBhWzRdICsgYls0XTtcclxuICBvdXRbNV0gPSBhWzVdICsgYls1XTtcclxuICBvdXRbNl0gPSBhWzZdICsgYls2XTtcclxuICBvdXRbN10gPSBhWzddICsgYls3XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTXVsdGlwbGllcyB0d28gZHVhbCBxdWF0J3NcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gb3V0IHRoZSByZWNlaXZpbmcgZHVhbCBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHtxdWF0Mn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtdWx0aXBseShvdXQsIGEsIGIpIHtcclxuICB2YXIgYXgwID0gYVswXSxcclxuICAgICAgYXkwID0gYVsxXSxcclxuICAgICAgYXowID0gYVsyXSxcclxuICAgICAgYXcwID0gYVszXSxcclxuICAgICAgYngxID0gYls0XSxcclxuICAgICAgYnkxID0gYls1XSxcclxuICAgICAgYnoxID0gYls2XSxcclxuICAgICAgYncxID0gYls3XSxcclxuICAgICAgYXgxID0gYVs0XSxcclxuICAgICAgYXkxID0gYVs1XSxcclxuICAgICAgYXoxID0gYVs2XSxcclxuICAgICAgYXcxID0gYVs3XSxcclxuICAgICAgYngwID0gYlswXSxcclxuICAgICAgYnkwID0gYlsxXSxcclxuICAgICAgYnowID0gYlsyXSxcclxuICAgICAgYncwID0gYlszXTtcclxuICBvdXRbMF0gPSBheDAgKiBidzAgKyBhdzAgKiBieDAgKyBheTAgKiBiejAgLSBhejAgKiBieTA7XHJcbiAgb3V0WzFdID0gYXkwICogYncwICsgYXcwICogYnkwICsgYXowICogYngwIC0gYXgwICogYnowO1xyXG4gIG91dFsyXSA9IGF6MCAqIGJ3MCArIGF3MCAqIGJ6MCArIGF4MCAqIGJ5MCAtIGF5MCAqIGJ4MDtcclxuICBvdXRbM10gPSBhdzAgKiBidzAgLSBheDAgKiBieDAgLSBheTAgKiBieTAgLSBhejAgKiBiejA7XHJcbiAgb3V0WzRdID0gYXgwICogYncxICsgYXcwICogYngxICsgYXkwICogYnoxIC0gYXowICogYnkxICsgYXgxICogYncwICsgYXcxICogYngwICsgYXkxICogYnowIC0gYXoxICogYnkwO1xyXG4gIG91dFs1XSA9IGF5MCAqIGJ3MSArIGF3MCAqIGJ5MSArIGF6MCAqIGJ4MSAtIGF4MCAqIGJ6MSArIGF5MSAqIGJ3MCArIGF3MSAqIGJ5MCArIGF6MSAqIGJ4MCAtIGF4MSAqIGJ6MDtcclxuICBvdXRbNl0gPSBhejAgKiBidzEgKyBhdzAgKiBiejEgKyBheDAgKiBieTEgLSBheTAgKiBieDEgKyBhejEgKiBidzAgKyBhdzEgKiBiejAgKyBheDEgKiBieTAgLSBheTEgKiBieDA7XHJcbiAgb3V0WzddID0gYXcwICogYncxIC0gYXgwICogYngxIC0gYXkwICogYnkxIC0gYXowICogYnoxICsgYXcxICogYncwIC0gYXgxICogYngwIC0gYXkxICogYnkwIC0gYXoxICogYnowO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHF1YXQyLm11bHRpcGx5fVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbXVsID0gbXVsdGlwbHk7XHJcblxyXG4vKipcclxuICogU2NhbGVzIGEgZHVhbCBxdWF0IGJ5IGEgc2NhbGFyIG51bWJlclxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZHVhbCBxdWF0IHRvIHNjYWxlXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiIGFtb3VudCB0byBzY2FsZSB0aGUgZHVhbCBxdWF0IGJ5XHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIG91dFsyXSA9IGFbMl0gKiBiO1xyXG4gIG91dFszXSA9IGFbM10gKiBiO1xyXG4gIG91dFs0XSA9IGFbNF0gKiBiO1xyXG4gIG91dFs1XSA9IGFbNV0gKiBiO1xyXG4gIG91dFs2XSA9IGFbNl0gKiBiO1xyXG4gIG91dFs3XSA9IGFbN10gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gZHVhbCBxdWF0J3MgKFRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgcmVhbCBwYXJ0cylcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBkb3QgcHJvZHVjdCBvZiBhIGFuZCBiXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBkb3QgPSBxdWF0LmRvdDtcclxuXHJcbi8qKlxyXG4gKiBQZXJmb3JtcyBhIGxpbmVhciBpbnRlcnBvbGF0aW9uIGJldHdlZW4gdHdvIGR1YWwgcXVhdHMnc1xyXG4gKiBOT1RFOiBUaGUgcmVzdWx0aW5nIGR1YWwgcXVhdGVybmlvbnMgd29uJ3QgYWx3YXlzIGJlIG5vcm1hbGl6ZWQgKFRoZSBlcnJvciBpcyBtb3N0IG5vdGljZWFibGUgd2hlbiB0ID0gMC41KVxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBkdWFsIHF1YXRcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdCBpbnRlcnBvbGF0aW9uIGFtb3VudCwgaW4gdGhlIHJhbmdlIFswLTFdLCBiZXR3ZWVuIHRoZSB0d28gaW5wdXRzXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcclxuICB2YXIgbXQgPSAxIC0gdDtcclxuICBpZiAoZG90KGEsIGIpIDwgMCkgdCA9IC10O1xyXG5cclxuICBvdXRbMF0gPSBhWzBdICogbXQgKyBiWzBdICogdDtcclxuICBvdXRbMV0gPSBhWzFdICogbXQgKyBiWzFdICogdDtcclxuICBvdXRbMl0gPSBhWzJdICogbXQgKyBiWzJdICogdDtcclxuICBvdXRbM10gPSBhWzNdICogbXQgKyBiWzNdICogdDtcclxuICBvdXRbNF0gPSBhWzRdICogbXQgKyBiWzRdICogdDtcclxuICBvdXRbNV0gPSBhWzVdICogbXQgKyBiWzVdICogdDtcclxuICBvdXRbNl0gPSBhWzZdICogbXQgKyBiWzZdICogdDtcclxuICBvdXRbN10gPSBhWzddICogbXQgKyBiWzddICogdDtcclxuXHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSBkdWFsIHF1YXQuIElmIHRoZXkgYXJlIG5vcm1hbGl6ZWQsIGNvbmp1Z2F0ZSBpcyBjaGVhcGVyXHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdCB0byBjYWxjdWxhdGUgaW52ZXJzZSBvZlxyXG4gKiBAcmV0dXJucyB7cXVhdDJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcclxuICB2YXIgc3FsZW4gPSBzcXVhcmVkTGVuZ3RoKGEpO1xyXG4gIG91dFswXSA9IC1hWzBdIC8gc3FsZW47XHJcbiAgb3V0WzFdID0gLWFbMV0gLyBzcWxlbjtcclxuICBvdXRbMl0gPSAtYVsyXSAvIHNxbGVuO1xyXG4gIG91dFszXSA9IGFbM10gLyBzcWxlbjtcclxuICBvdXRbNF0gPSAtYVs0XSAvIHNxbGVuO1xyXG4gIG91dFs1XSA9IC1hWzVdIC8gc3FsZW47XHJcbiAgb3V0WzZdID0gLWFbNl0gLyBzcWxlbjtcclxuICBvdXRbN10gPSBhWzddIC8gc3FsZW47XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGNvbmp1Z2F0ZSBvZiBhIGR1YWwgcXVhdFxyXG4gKiBJZiB0aGUgZHVhbCBxdWF0ZXJuaW9uIGlzIG5vcm1hbGl6ZWQsIHRoaXMgZnVuY3Rpb24gaXMgZmFzdGVyIHRoYW4gcXVhdDIuaW52ZXJzZSBhbmQgcHJvZHVjZXMgdGhlIHNhbWUgcmVzdWx0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBvdXQgdGhlIHJlY2VpdmluZyBxdWF0ZXJuaW9uXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgcXVhdCB0byBjYWxjdWxhdGUgY29uanVnYXRlIG9mXHJcbiAqIEByZXR1cm5zIHtxdWF0Mn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29uanVnYXRlKG91dCwgYSkge1xyXG4gIG91dFswXSA9IC1hWzBdO1xyXG4gIG91dFsxXSA9IC1hWzFdO1xyXG4gIG91dFsyXSA9IC1hWzJdO1xyXG4gIG91dFszXSA9IGFbM107XHJcbiAgb3V0WzRdID0gLWFbNF07XHJcbiAgb3V0WzVdID0gLWFbNV07XHJcbiAgb3V0WzZdID0gLWFbNl07XHJcbiAgb3V0WzddID0gYVs3XTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgZHVhbCBxdWF0IHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbmd0aCA9IHF1YXQubGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIubGVuZ3RofVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgbGVuID0gbGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGEgZHVhbCBxdWF0IHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzcXVhcmVkTGVuZ3RoID0gcXVhdC5zcXVhcmVkTGVuZ3RoO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgcXVhdDIuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgZHVhbCBxdWF0XHJcbiAqXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IG91dCB0aGUgcmVjZWl2aW5nIGR1YWwgcXVhdGVybmlvblxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIGR1YWwgcXVhdGVybmlvbiB0byBub3JtYWxpemVcclxuICogQHJldHVybnMge3F1YXQyfSBvdXRcclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xyXG4gIHZhciBtYWduaXR1ZGUgPSBzcXVhcmVkTGVuZ3RoKGEpO1xyXG4gIGlmIChtYWduaXR1ZGUgPiAwKSB7XHJcbiAgICBtYWduaXR1ZGUgPSBNYXRoLnNxcnQobWFnbml0dWRlKTtcclxuXHJcbiAgICB2YXIgYTAgPSBhWzBdIC8gbWFnbml0dWRlO1xyXG4gICAgdmFyIGExID0gYVsxXSAvIG1hZ25pdHVkZTtcclxuICAgIHZhciBhMiA9IGFbMl0gLyBtYWduaXR1ZGU7XHJcbiAgICB2YXIgYTMgPSBhWzNdIC8gbWFnbml0dWRlO1xyXG5cclxuICAgIHZhciBiMCA9IGFbNF07XHJcbiAgICB2YXIgYjEgPSBhWzVdO1xyXG4gICAgdmFyIGIyID0gYVs2XTtcclxuICAgIHZhciBiMyA9IGFbN107XHJcblxyXG4gICAgdmFyIGFfZG90X2IgPSBhMCAqIGIwICsgYTEgKiBiMSArIGEyICogYjIgKyBhMyAqIGIzO1xyXG5cclxuICAgIG91dFswXSA9IGEwO1xyXG4gICAgb3V0WzFdID0gYTE7XHJcbiAgICBvdXRbMl0gPSBhMjtcclxuICAgIG91dFszXSA9IGEzO1xyXG5cclxuICAgIG91dFs0XSA9IChiMCAtIGEwICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XHJcbiAgICBvdXRbNV0gPSAoYjEgLSBhMSAqIGFfZG90X2IpIC8gbWFnbml0dWRlO1xyXG4gICAgb3V0WzZdID0gKGIyIC0gYTIgKiBhX2RvdF9iKSAvIG1hZ25pdHVkZTtcclxuICAgIG91dFs3XSA9IChiMyAtIGEzICogYV9kb3RfYikgLyBtYWduaXR1ZGU7XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgZHVhbCBxdWF0ZW5pb25cclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gYSBkdWFsIHF1YXRlcm5pb24gdG8gcmVwcmVzZW50IGFzIGEgc3RyaW5nXHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgZHVhbCBxdWF0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyKGEpIHtcclxuICByZXR1cm4gJ3F1YXQyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnLCAnICsgYVsyXSArICcsICcgKyBhWzNdICsgJywgJyArIGFbNF0gKyAnLCAnICsgYVs1XSArICcsICcgKyBhWzZdICsgJywgJyArIGFbN10gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBkdWFsIHF1YXRlcm5pb25zIGhhdmUgZXhhY3RseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHtxdWF0Mn0gYSB0aGUgZmlyc3QgZHVhbCBxdWF0ZXJuaW9uLlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBiIHRoZSBzZWNvbmQgZHVhbCBxdWF0ZXJuaW9uLlxyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgZHVhbCBxdWF0ZXJuaW9ucyBhcmUgZXF1YWwsIGZhbHNlIG90aGVyd2lzZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XHJcbiAgcmV0dXJuIGFbMF0gPT09IGJbMF0gJiYgYVsxXSA9PT0gYlsxXSAmJiBhWzJdID09PSBiWzJdICYmIGFbM10gPT09IGJbM10gJiYgYVs0XSA9PT0gYls0XSAmJiBhWzVdID09PSBiWzVdICYmIGFbNl0gPT09IGJbNl0gJiYgYVs3XSA9PT0gYls3XTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGR1YWwgcXVhdGVybmlvbnMgaGF2ZSBhcHByb3hpbWF0ZWx5IHRoZSBzYW1lIGVsZW1lbnRzIGluIHRoZSBzYW1lIHBvc2l0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3F1YXQyfSBhIHRoZSBmaXJzdCBkdWFsIHF1YXQuXHJcbiAqIEBwYXJhbSB7cXVhdDJ9IGIgdGhlIHNlY29uZCBkdWFsIHF1YXQuXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSBkdWFsIHF1YXRzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XHJcbiAgdmFyIGEwID0gYVswXSxcclxuICAgICAgYTEgPSBhWzFdLFxyXG4gICAgICBhMiA9IGFbMl0sXHJcbiAgICAgIGEzID0gYVszXSxcclxuICAgICAgYTQgPSBhWzRdLFxyXG4gICAgICBhNSA9IGFbNV0sXHJcbiAgICAgIGE2ID0gYVs2XSxcclxuICAgICAgYTcgPSBhWzddO1xyXG4gIHZhciBiMCA9IGJbMF0sXHJcbiAgICAgIGIxID0gYlsxXSxcclxuICAgICAgYjIgPSBiWzJdLFxyXG4gICAgICBiMyA9IGJbM10sXHJcbiAgICAgIGI0ID0gYls0XSxcclxuICAgICAgYjUgPSBiWzVdLFxyXG4gICAgICBiNiA9IGJbNl0sXHJcbiAgICAgIGI3ID0gYls3XTtcclxuICByZXR1cm4gTWF0aC5hYnMoYTAgLSBiMCkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTApLCBNYXRoLmFicyhiMCkpICYmIE1hdGguYWJzKGExIC0gYjEpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMiksIE1hdGguYWJzKGIyKSkgJiYgTWF0aC5hYnMoYTMgLSBiMykgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTMpLCBNYXRoLmFicyhiMykpICYmIE1hdGguYWJzKGE0IC0gYjQpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE0KSwgTWF0aC5hYnMoYjQpKSAmJiBNYXRoLmFicyhhNSAtIGI1KSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhNSksIE1hdGguYWJzKGI1KSkgJiYgTWF0aC5hYnMoYTYgLSBiNikgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTYpLCBNYXRoLmFicyhiNikpICYmIE1hdGguYWJzKGE3IC0gYjcpIDw9IGdsTWF0cml4LkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGE3KSwgTWF0aC5hYnMoYjcpKTtcclxufSIsImltcG9ydCAqIGFzIGdsTWF0cml4IGZyb20gXCIuL2NvbW1vbi5qc1wiO1xyXG5cclxuLyoqXHJcbiAqIDIgRGltZW5zaW9uYWwgVmVjdG9yXHJcbiAqIEBtb2R1bGUgdmVjMlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3LCBlbXB0eSB2ZWMyXHJcbiAqXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBhIG5ldyAyRCB2ZWN0b3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoKSB7XHJcbiAgdmFyIG91dCA9IG5ldyBnbE1hdHJpeC5BUlJBWV9UWVBFKDIpO1xyXG4gIGlmIChnbE1hdHJpeC5BUlJBWV9UWVBFICE9IEZsb2F0MzJBcnJheSkge1xyXG4gICAgb3V0WzBdID0gMDtcclxuICAgIG91dFsxXSA9IDA7XHJcbiAgfVxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IHZlYzIgaW5pdGlhbGl6ZWQgd2l0aCB2YWx1ZXMgZnJvbSBhbiBleGlzdGluZyB2ZWN0b3JcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBjbG9uZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gYSBuZXcgMkQgdmVjdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoYSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcclxuICBvdXRbMF0gPSBhWzBdO1xyXG4gIG91dFsxXSA9IGFbMV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgdmVjMiBpbml0aWFsaXplZCB3aXRoIHRoZSBnaXZlbiB2YWx1ZXNcclxuICpcclxuICogQHBhcmFtIHtOdW1iZXJ9IHggWCBjb21wb25lbnRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHkgWSBjb21wb25lbnRcclxuICogQHJldHVybnMge3ZlYzJ9IGEgbmV3IDJEIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGZyb21WYWx1ZXMoeCwgeSkge1xyXG4gIHZhciBvdXQgPSBuZXcgZ2xNYXRyaXguQVJSQVlfVFlQRSgyKTtcclxuICBvdXRbMF0gPSB4O1xyXG4gIG91dFsxXSA9IHk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcHkgdGhlIHZhbHVlcyBmcm9tIG9uZSB2ZWMyIHRvIGFub3RoZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBzb3VyY2UgdmVjdG9yXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xyXG4gIG91dFswXSA9IGFbMF07XHJcbiAgb3V0WzFdID0gYVsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2V0IHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMiB0byB0aGUgZ2l2ZW4gdmFsdWVzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB4IFggY29tcG9uZW50XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB5IFkgY29tcG9uZW50XHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXQob3V0LCB4LCB5KSB7XHJcbiAgb3V0WzBdID0geDtcclxuICBvdXRbMV0gPSB5O1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZChvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdICsgYlswXTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU3VidHJhY3RzIHZlY3RvciBiIGZyb20gdmVjdG9yIGFcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN1YnRyYWN0KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gLSBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gLSBiWzFdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBNdWx0aXBsaWVzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGx5KG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiWzBdO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiWzFdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEaXZpZGVzIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpdmlkZShvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBhWzBdIC8gYlswXTtcclxuICBvdXRbMV0gPSBhWzFdIC8gYlsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5jZWlsIHRoZSBjb21wb25lbnRzIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNlaWxcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNlaWwob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5jZWlsKGFbMF0pO1xyXG4gIG91dFsxXSA9IE1hdGguY2VpbChhWzFdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTWF0aC5mbG9vciB0aGUgY29tcG9uZW50cyBvZiBhIHZlYzJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHZlY3RvciB0byBmbG9vclxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmxvb3Iob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5mbG9vcihhWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBtaW5pbXVtIG9mIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG1pbihvdXQsIGEsIGIpIHtcclxuICBvdXRbMF0gPSBNYXRoLm1pbihhWzBdLCBiWzBdKTtcclxuICBvdXRbMV0gPSBNYXRoLm1pbihhWzFdLCBiWzFdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgbWF4aW11bSBvZiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYXgob3V0LCBhLCBiKSB7XHJcbiAgb3V0WzBdID0gTWF0aC5tYXgoYVswXSwgYlswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5tYXgoYVsxXSwgYlsxXSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIE1hdGgucm91bmQgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gcm91bmRcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHJvdW5kKG91dCwgYSkge1xyXG4gIG91dFswXSA9IE1hdGgucm91bmQoYVswXSk7XHJcbiAgb3V0WzFdID0gTWF0aC5yb3VuZChhWzFdKTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogU2NhbGVzIGEgdmVjMiBieSBhIHNjYWxhciBudW1iZXJcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gc2NhbGVcclxuICogQHBhcmFtIHtOdW1iZXJ9IGIgYW1vdW50IHRvIHNjYWxlIHRoZSB2ZWN0b3IgYnlcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgYikge1xyXG4gIG91dFswXSA9IGFbMF0gKiBiO1xyXG4gIG91dFsxXSA9IGFbMV0gKiBiO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGRzIHR3byB2ZWMyJ3MgYWZ0ZXIgc2NhbGluZyB0aGUgc2Vjb25kIG9wZXJhbmQgYnkgYSBzY2FsYXIgdmFsdWVcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBhbW91bnQgdG8gc2NhbGUgYiBieSBiZWZvcmUgYWRkaW5nXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgb3V0WzBdID0gYVswXSArIGJbMF0gKiBzY2FsZTtcclxuICBvdXRbMV0gPSBhWzFdICsgYlsxXSAqIHNjYWxlO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIHRoZSBldWNsaWRpYW4gZGlzdGFuY2UgYmV0d2VlbiB0d28gdmVjMidzXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgZmlyc3Qgb3BlcmFuZFxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGIgdGhlIHNlY29uZCBvcGVyYW5kXHJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKGEsIGIpIHtcclxuICB2YXIgeCA9IGJbMF0gLSBhWzBdLFxyXG4gICAgICB5ID0gYlsxXSAtIGFbMV07XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgZXVjbGlkaWFuIGRpc3RhbmNlIGJldHdlZW4gdHdvIHZlYzInc1xyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGRpc3RhbmNlIGJldHdlZW4gYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZWREaXN0YW5jZShhLCBiKSB7XHJcbiAgdmFyIHggPSBiWzBdIC0gYVswXSxcclxuICAgICAgeSA9IGJbMV0gLSBhWzFdO1xyXG4gIHJldHVybiB4ICogeCArIHkgKiB5O1xyXG59XHJcblxyXG4vKipcclxuICogQ2FsY3VsYXRlcyB0aGUgbGVuZ3RoIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBsZW5ndGggb2ZcclxuICogQHJldHVybnMge051bWJlcn0gbGVuZ3RoIG9mIGFcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoYSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV07XHJcbiAgcmV0dXJuIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZWQgbGVuZ3RoIG9mIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIGNhbGN1bGF0ZSBzcXVhcmVkIGxlbmd0aCBvZlxyXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBzcXVhcmVkIGxlbmd0aCBvZiBhXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3F1YXJlZExlbmd0aChhKSB7XHJcbiAgdmFyIHggPSBhWzBdLFxyXG4gICAgICB5ID0gYVsxXTtcclxuICByZXR1cm4geCAqIHggKyB5ICogeTtcclxufVxyXG5cclxuLyoqXHJcbiAqIE5lZ2F0ZXMgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gbmVnYXRlXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBuZWdhdGUob3V0LCBhKSB7XHJcbiAgb3V0WzBdID0gLWFbMF07XHJcbiAgb3V0WzFdID0gLWFbMV07XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludmVyc2Ugb2YgdGhlIGNvbXBvbmVudHMgb2YgYSB2ZWMyXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB2ZWN0b3IgdG8gaW52ZXJ0XHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpbnZlcnNlKG91dCwgYSkge1xyXG4gIG91dFswXSA9IDEuMCAvIGFbMF07XHJcbiAgb3V0WzFdID0gMS4wIC8gYVsxXTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplIGEgdmVjMlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIG5vcm1hbGl6ZVxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKG91dCwgYSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV07XHJcbiAgdmFyIGxlbiA9IHggKiB4ICsgeSAqIHk7XHJcbiAgaWYgKGxlbiA+IDApIHtcclxuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XHJcbiAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbik7XHJcbiAgICBvdXRbMF0gPSBhWzBdICogbGVuO1xyXG4gICAgb3V0WzFdID0gYVsxXSAqIGxlbjtcclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGRvdCBwcm9kdWN0IG9mIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gZG90IHByb2R1Y3Qgb2YgYSBhbmQgYlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGRvdChhLCBiKSB7XHJcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28gdmVjMidzXHJcbiAqIE5vdGUgdGhhdCB0aGUgY3Jvc3MgcHJvZHVjdCBtdXN0IGJ5IGRlZmluaXRpb24gcHJvZHVjZSBhIDNEIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzN9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIGZpcnN0IG9wZXJhbmRcclxuICogQHBhcmFtIHt2ZWMyfSBiIHRoZSBzZWNvbmQgb3BlcmFuZFxyXG4gKiBAcmV0dXJucyB7dmVjM30gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY3Jvc3Mob3V0LCBhLCBiKSB7XHJcbiAgdmFyIHogPSBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdO1xyXG4gIG91dFswXSA9IG91dFsxXSA9IDA7XHJcbiAgb3V0WzJdID0gejtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogUGVyZm9ybXMgYSBsaW5lYXIgaW50ZXJwb2xhdGlvbiBiZXR3ZWVuIHR3byB2ZWMyJ3NcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiB0aGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHQgaW50ZXJwb2xhdGlvbiBhbW91bnQsIGluIHRoZSByYW5nZSBbMC0xXSwgYmV0d2VlbiB0aGUgdHdvIGlucHV0c1xyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbGVycChvdXQsIGEsIGIsIHQpIHtcclxuICB2YXIgYXggPSBhWzBdLFxyXG4gICAgICBheSA9IGFbMV07XHJcbiAgb3V0WzBdID0gYXggKyB0ICogKGJbMF0gLSBheCk7XHJcbiAgb3V0WzFdID0gYXkgKyB0ICogKGJbMV0gLSBheSk7XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHJhbmRvbSB2ZWN0b3Igd2l0aCB0aGUgZ2l2ZW4gc2NhbGVcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHtOdW1iZXJ9IFtzY2FsZV0gTGVuZ3RoIG9mIHRoZSByZXN1bHRpbmcgdmVjdG9yLiBJZiBvbW1pdHRlZCwgYSB1bml0IHZlY3RvciB3aWxsIGJlIHJldHVybmVkXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiByYW5kb20ob3V0LCBzY2FsZSkge1xyXG4gIHNjYWxlID0gc2NhbGUgfHwgMS4wO1xyXG4gIHZhciByID0gZ2xNYXRyaXguUkFORE9NKCkgKiAyLjAgKiBNYXRoLlBJO1xyXG4gIG91dFswXSA9IE1hdGguY29zKHIpICogc2NhbGU7XHJcbiAgb3V0WzFdID0gTWF0aC5zaW4ocikgKiBzY2FsZTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MlxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IG91dCB0aGUgcmVjZWl2aW5nIHZlY3RvclxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdGhlIHZlY3RvciB0byB0cmFuc2Zvcm1cclxuICogQHBhcmFtIHttYXQyfSBtIG1hdHJpeCB0byB0cmFuc2Zvcm0gd2l0aFxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtTWF0MihvdXQsIGEsIG0pIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdO1xyXG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHk7XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzNdICogeTtcclxuICByZXR1cm4gb3V0O1xyXG59XHJcblxyXG4vKipcclxuICogVHJhbnNmb3JtcyB0aGUgdmVjMiB3aXRoIGEgbWF0MmRcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0MmR9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQyZChvdXQsIGEsIG0pIHtcclxuICB2YXIgeCA9IGFbMF0sXHJcbiAgICAgIHkgPSBhWzFdO1xyXG4gIG91dFswXSA9IG1bMF0gKiB4ICsgbVsyXSAqIHkgKyBtWzRdO1xyXG4gIG91dFsxXSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUcmFuc2Zvcm1zIHRoZSB2ZWMyIHdpdGggYSBtYXQzXHJcbiAqIDNyZCB2ZWN0b3IgY29tcG9uZW50IGlzIGltcGxpY2l0bHkgJzEnXHJcbiAqXHJcbiAqIEBwYXJhbSB7dmVjMn0gb3V0IHRoZSByZWNlaXZpbmcgdmVjdG9yXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSB0aGUgdmVjdG9yIHRvIHRyYW5zZm9ybVxyXG4gKiBAcGFyYW0ge21hdDN9IG0gbWF0cml4IHRvIHRyYW5zZm9ybSB3aXRoXHJcbiAqIEByZXR1cm5zIHt2ZWMyfSBvdXRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1NYXQzKG91dCwgYSwgbSkge1xyXG4gIHZhciB4ID0gYVswXSxcclxuICAgICAgeSA9IGFbMV07XHJcbiAgb3V0WzBdID0gbVswXSAqIHggKyBtWzNdICogeSArIG1bNl07XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzRdICogeSArIG1bN107XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFRyYW5zZm9ybXMgdGhlIHZlYzIgd2l0aCBhIG1hdDRcclxuICogM3JkIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMCdcclxuICogNHRoIHZlY3RvciBjb21wb25lbnQgaXMgaW1wbGljaXRseSAnMSdcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgdGhlIHJlY2VpdmluZyB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBhIHRoZSB2ZWN0b3IgdG8gdHJhbnNmb3JtXHJcbiAqIEBwYXJhbSB7bWF0NH0gbSBtYXRyaXggdG8gdHJhbnNmb3JtIHdpdGhcclxuICogQHJldHVybnMge3ZlYzJ9IG91dFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybU1hdDQob3V0LCBhLCBtKSB7XHJcbiAgdmFyIHggPSBhWzBdO1xyXG4gIHZhciB5ID0gYVsxXTtcclxuICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XHJcbiAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bMTNdO1xyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSb3RhdGUgYSAyRCB2ZWN0b3JcclxuICogQHBhcmFtIHt2ZWMyfSBvdXQgVGhlIHJlY2VpdmluZyB2ZWMyXHJcbiAqIEBwYXJhbSB7dmVjMn0gYSBUaGUgdmVjMiBwb2ludCB0byByb3RhdGVcclxuICogQHBhcmFtIHt2ZWMyfSBiIFRoZSBvcmlnaW4gb2YgdGhlIHJvdGF0aW9uXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjIFRoZSBhbmdsZSBvZiByb3RhdGlvblxyXG4gKiBAcmV0dXJucyB7dmVjMn0gb3V0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgYiwgYykge1xyXG4gIC8vVHJhbnNsYXRlIHBvaW50IHRvIHRoZSBvcmlnaW5cclxuICB2YXIgcDAgPSBhWzBdIC0gYlswXSxcclxuICAgICAgcDEgPSBhWzFdIC0gYlsxXSxcclxuICAgICAgc2luQyA9IE1hdGguc2luKGMpLFxyXG4gICAgICBjb3NDID0gTWF0aC5jb3MoYyk7XHJcblxyXG4gIC8vcGVyZm9ybSByb3RhdGlvbiBhbmQgdHJhbnNsYXRlIHRvIGNvcnJlY3QgcG9zaXRpb25cclxuICBvdXRbMF0gPSBwMCAqIGNvc0MgLSBwMSAqIHNpbkMgKyBiWzBdO1xyXG4gIG91dFsxXSA9IHAwICogc2luQyArIHAxICogY29zQyArIGJbMV07XHJcblxyXG4gIHJldHVybiBvdXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIDJEIHZlY3RvcnNcclxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCBvcGVyYW5kXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIG9wZXJhbmRcclxuICogQHJldHVybnMge051bWJlcn0gVGhlIGFuZ2xlIGluIHJhZGlhbnNcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBhbmdsZShhLCBiKSB7XHJcbiAgdmFyIHgxID0gYVswXSxcclxuICAgICAgeTEgPSBhWzFdLFxyXG4gICAgICB4MiA9IGJbMF0sXHJcbiAgICAgIHkyID0gYlsxXTtcclxuXHJcbiAgdmFyIGxlbjEgPSB4MSAqIHgxICsgeTEgKiB5MTtcclxuICBpZiAobGVuMSA+IDApIHtcclxuICAgIC8vVE9ETzogZXZhbHVhdGUgdXNlIG9mIGdsbV9pbnZzcXJ0IGhlcmU/XHJcbiAgICBsZW4xID0gMSAvIE1hdGguc3FydChsZW4xKTtcclxuICB9XHJcblxyXG4gIHZhciBsZW4yID0geDIgKiB4MiArIHkyICogeTI7XHJcbiAgaWYgKGxlbjIgPiAwKSB7XHJcbiAgICAvL1RPRE86IGV2YWx1YXRlIHVzZSBvZiBnbG1faW52c3FydCBoZXJlP1xyXG4gICAgbGVuMiA9IDEgLyBNYXRoLnNxcnQobGVuMik7XHJcbiAgfVxyXG5cclxuICB2YXIgY29zaW5lID0gKHgxICogeDIgKyB5MSAqIHkyKSAqIGxlbjEgKiBsZW4yO1xyXG5cclxuICBpZiAoY29zaW5lID4gMS4wKSB7XHJcbiAgICByZXR1cm4gMDtcclxuICB9IGVsc2UgaWYgKGNvc2luZSA8IC0xLjApIHtcclxuICAgIHJldHVybiBNYXRoLlBJO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gTWF0aC5hY29zKGNvc2luZSk7XHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIHZlY3RvclxyXG4gKlxyXG4gKiBAcGFyYW0ge3ZlYzJ9IGEgdmVjdG9yIHRvIHJlcHJlc2VudCBhcyBhIHN0cmluZ1xyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZlY3RvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cihhKSB7XHJcbiAgcmV0dXJuICd2ZWMyKCcgKyBhWzBdICsgJywgJyArIGFbMV0gKyAnKSc7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGV4YWN0bHkgaGF2ZSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbiAod2hlbiBjb21wYXJlZCB3aXRoID09PSlcclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXhhY3RFcXVhbHMoYSwgYikge1xyXG4gIHJldHVybiBhWzBdID09PSBiWzBdICYmIGFbMV0gPT09IGJbMV07XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB2ZWN0b3JzIGhhdmUgYXBwcm94aW1hdGVseSB0aGUgc2FtZSBlbGVtZW50cyBpbiB0aGUgc2FtZSBwb3NpdGlvbi5cclxuICpcclxuICogQHBhcmFtIHt2ZWMyfSBhIFRoZSBmaXJzdCB2ZWN0b3IuXHJcbiAqIEBwYXJhbSB7dmVjMn0gYiBUaGUgc2Vjb25kIHZlY3Rvci5cclxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIHZlY3RvcnMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZXF1YWxzKGEsIGIpIHtcclxuICB2YXIgYTAgPSBhWzBdLFxyXG4gICAgICBhMSA9IGFbMV07XHJcbiAgdmFyIGIwID0gYlswXSxcclxuICAgICAgYjEgPSBiWzFdO1xyXG4gIHJldHVybiBNYXRoLmFicyhhMCAtIGIwKSA8PSBnbE1hdHJpeC5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gZ2xNYXRyaXguRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTEpLCBNYXRoLmFicyhiMSkpO1xyXG59XHJcblxyXG4vKipcclxuICogQWxpYXMgZm9yIHtAbGluayB2ZWMyLmxlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGxlbiA9IGxlbmd0aDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3VidHJhY3R9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBzdWIgPSBzdWJ0cmFjdDtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIubXVsdGlwbHl9XHJcbiAqIEBmdW5jdGlvblxyXG4gKi9cclxuZXhwb3J0IHZhciBtdWwgPSBtdWx0aXBseTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuZGl2aWRlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZGl2ID0gZGl2aWRlO1xyXG5cclxuLyoqXHJcbiAqIEFsaWFzIGZvciB7QGxpbmsgdmVjMi5kaXN0YW5jZX1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIGRpc3QgPSBkaXN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZERpc3RhbmNlfVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgc3FyRGlzdCA9IHNxdWFyZWREaXN0YW5jZTtcclxuXHJcbi8qKlxyXG4gKiBBbGlhcyBmb3Ige0BsaW5rIHZlYzIuc3F1YXJlZExlbmd0aH1cclxuICogQGZ1bmN0aW9uXHJcbiAqL1xyXG5leHBvcnQgdmFyIHNxckxlbiA9IHNxdWFyZWRMZW5ndGg7XHJcblxyXG4vKipcclxuICogUGVyZm9ybSBzb21lIG9wZXJhdGlvbiBvdmVyIGFuIGFycmF5IG9mIHZlYzJzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge0FycmF5fSBhIHRoZSBhcnJheSBvZiB2ZWN0b3JzIHRvIGl0ZXJhdGUgb3ZlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gc3RyaWRlIE51bWJlciBvZiBlbGVtZW50cyBiZXR3ZWVuIHRoZSBzdGFydCBvZiBlYWNoIHZlYzIuIElmIDAgYXNzdW1lcyB0aWdodGx5IHBhY2tlZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gb2Zmc2V0IE51bWJlciBvZiBlbGVtZW50cyB0byBza2lwIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIGFycmF5XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb3VudCBOdW1iZXIgb2YgdmVjMnMgdG8gaXRlcmF0ZSBvdmVyLiBJZiAwIGl0ZXJhdGVzIG92ZXIgZW50aXJlIGFycmF5XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggdmVjdG9yIGluIHRoZSBhcnJheVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW2FyZ10gYWRkaXRpb25hbCBhcmd1bWVudCB0byBwYXNzIHRvIGZuXHJcbiAqIEByZXR1cm5zIHtBcnJheX0gYVxyXG4gKiBAZnVuY3Rpb25cclxuICovXHJcbmV4cG9ydCB2YXIgZm9yRWFjaCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgdmVjID0gY3JlYXRlKCk7XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAoYSwgc3RyaWRlLCBvZmZzZXQsIGNvdW50LCBmbiwgYXJnKSB7XHJcbiAgICB2YXIgaSA9IHZvaWQgMCxcclxuICAgICAgICBsID0gdm9pZCAwO1xyXG4gICAgaWYgKCFzdHJpZGUpIHtcclxuICAgICAgc3RyaWRlID0gMjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICBvZmZzZXQgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjb3VudCkge1xyXG4gICAgICBsID0gTWF0aC5taW4oY291bnQgKiBzdHJpZGUgKyBvZmZzZXQsIGEubGVuZ3RoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGwgPSBhLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGkgPSBvZmZzZXQ7IGkgPCBsOyBpICs9IHN0cmlkZSkge1xyXG4gICAgICB2ZWNbMF0gPSBhW2ldO3ZlY1sxXSA9IGFbaSArIDFdO1xyXG4gICAgICBmbih2ZWMsIHZlYywgYXJnKTtcclxuICAgICAgYVtpXSA9IHZlY1swXTthW2kgKyAxXSA9IHZlY1sxXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYTtcclxuICB9O1xyXG59KCk7IiwiLyohXG4gKiBAbWFwdGFsa3MvZnVzaW9uZ2wgdjAuMS4wXG4gKiBMSUNFTlNFIDogVU5MSUNFTlNFRFxuICogKGMpIDIwMTYtMjAxOSBtYXB0YWxrcy5jb21cbiAqL1xuZnVuY3Rpb24gRShFKXtmb3IobGV0IF89MTtfPGFyZ3VtZW50cy5sZW5ndGg7XysrKXtjb25zdCBSPWFyZ3VtZW50c1tfXTtmb3IoY29uc3QgXyBpbiBSKUVbX109UltfXX1yZXR1cm4gRX1mdW5jdGlvbiBfKF8sLi4uUil7Zm9yKGxldCBUPTA7VDxSLmxlbmd0aDtUKyspRShfLFJbVF0pfWxldCBSPTE7Y2xhc3MgVHtjb25zdHJ1Y3RvcihFKXt0aGlzLnVpZD1SKyssdGhpcy5zdGF0ZXM9ZnVuY3Rpb24oRSl7cmV0dXJue3NjaXNzb3I6WzAsMCxFLmNhbnZhcy53aWR0aCxFLmNhbnZhcy5oZWlnaHRdLHZpZXdwb3J0OlswLDAsRS5jYW52YXMud2lkdGgsRS5jYW52YXMuaGVpZ2h0XSxibGVuZENvbG9yOlswLDAsMCwwXSxibGVuZEVxdWF0aW9uU2VwYXJhdGU6W0UuRlVOQ19BREQsRS5GVU5DX0FERF0sYmxlbmRGdW5jU2VwYXJhdGU6W0UuT05FLEUuWkVSTyxFLk9ORSxFLlpFUk9dLGNsZWFyQ29sb3I6WzAsMCwwLDBdLGNsZWFyRGVwdGg6WzFdLGNsZWFyU3RlbmNpbDpbMF0sY29sb3JNYXNrOlshMCwhMCwhMCwhMF0sY3VsbEZhY2U6W0UuQkFDS10sZGVwdGhGdW5jOltFLkxFU1NdLGRlcHRoTWFzazpbITBdLGRlcHRoUmFuZ2U6WzAsMV0sY2FwYWJpbGl0aWVzOnszMDQyOiExLDI4ODQ6ITEsMjkyOTohMSwzMDI0OiExLDMyODIzOiExLDMyOTI2OiExLDMyOTI4OiExLDMwODk6ITEsMjk2MDohMX0sZnJvbnRGYWNlOltFLkNDV10saGludDp7MzMxNzA6W0UuRE9OVF9DQVJFXSwzNTcyMzpbRS5ET05UX0NBUkVdfSxsaW5lV2lkdGg6WzFdLHBpeGVsU3RvcmVpOnszMzMzOls0XSwzMzE3Ols0XSwzNzQ0MDpbITFdLDM3NDQxOlshMV0sMzc0NDM6W0UuQlJPV1NFUl9ERUZBVUxUX1dFQkdMXX0scG9seWdvbk9mZnNldDpbMCwwXSxzYW1wbGVDb3ZlcmFnZTpbMSwhMV0sc3RlbmNpbEZ1bmNTZXBhcmF0ZTp7MTAyODpbRS5BTFdBWVMsMCw0Mjk0OTY3Mjk1XSwxMDI5OltFLkFMV0FZUywwLDQyOTQ5NjcyOTVdfSxzdGVuY2lsTWFza1NlcGFyYXRlOnsxMDI4Ols0Mjk0OTY3Mjk1XSwxMDI5Ols0Mjk0OTY3Mjk1XX0sc3RlbmNpbE9wU2VwYXJhdGU6ezEwMjg6W0UuS0VFUCxFLktFRVAsRS5LRUVQXSwxMDI5OltFLktFRVAsRS5LRUVQLEUuS0VFUF19LHByb2dyYW06bnVsbCxmcmFtZWJ1ZmZlcjp7MzYxNjA6bnVsbCwzNjAwODpudWxsLDM2MDA5Om51bGx9LHJlbmRlcmJ1ZmZlcjp7MzYxNjE6bnVsbH0sdGV4dHVyZXM6e2FjdGl2ZTotMSx1bml0czpmdW5jdGlvbigpe2NvbnN0IF89W10sUj1FLmdldFBhcmFtZXRlcihFLk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTKTtmb3IobGV0IEU9MDtFPFI7RSsrKV8ucHVzaCh7MzU1MzpudWxsLDM0MDY3Om51bGx9KTtyZXR1cm4gX1stMV09ezM1NTM6bnVsbCwzNDA2NzpudWxsfSxffSgpfSxhdHRyaWJ1dGVzOnt9LGFycmF5QnVmZmVyOm51bGwsZWxlbWVudEFycmF5QnVmZmVyOm51bGx9fShFKSx0aGlzLl89RX1nZXQgY2FudmFzKCl7cmV0dXJuIHRoaXMuXy5jYW52YXN9Z2V0IGRyYXdpbmdCdWZmZXJXaWR0aCgpe3JldHVybiB0aGlzLl8uZHJhd2luZ0J1ZmZlcldpZHRofWdldCBkcmF3aW5nQnVmZmVySGVpZ2h0KCl7cmV0dXJuIHRoaXMuXy5kcmF3aW5nQnVmZmVySGVpZ2h0fWdldCBnbCgpe3JldHVybiB0aGlzLl99YXR0YWNoU2hhZGVyKEUsXyl7cmV0dXJuIHRoaXMuXy5hdHRhY2hTaGFkZXIoRSxfKX1zaGFkZXJTb3VyY2UoRSxfKXtyZXR1cm4gdGhpcy5fLnNoYWRlclNvdXJjZShFLF8pfWNvbXBpbGVTaGFkZXIoRSl7cmV0dXJuIHRoaXMuXy5jb21waWxlU2hhZGVyKEUpfWNyZWF0ZVNoYWRlcihFKXtyZXR1cm4gdGhpcy5fLmNyZWF0ZVNoYWRlcihFKX1jcmVhdGVQcm9ncmFtKCl7cmV0dXJuIHRoaXMuXy5jcmVhdGVQcm9ncmFtKCl9Y3JlYXRlVmVydGV4QXJyYXkoKXtyZXR1cm4gdGhpcy5SfHwodGhpcy5SPXRoaXMuXy5nZXRFeHRlbnNpb24oXCJPRVNfdmVydGV4X2FycmF5X29iamVjdFwiKSksdGhpcy5SLmNyZWF0ZVZlcnRleEFycmF5T0VTKCl9ZGVsZXRlVmVydGV4QXJyYXkoRSl7cmV0dXJuIHRoaXMuUnx8KHRoaXMuUj10aGlzLl8uZ2V0RXh0ZW5zaW9uKFwiT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIikpLHRoaXMuUi5kZWxldGVWZXJ0ZXhBcnJheU9FUyhFKX1iaW5kVmVydGV4QXJyYXkoRSl7cmV0dXJuIHRoaXMuUnx8KHRoaXMuUj10aGlzLl8uZ2V0RXh0ZW5zaW9uKFwiT0VTX3ZlcnRleF9hcnJheV9vYmplY3RcIikpLHRoaXMuUi5iaW5kVmVydGV4QXJyYXlPRVMoRSl9ZGVsZXRlUHJvZ3JhbShFKXtyZXR1cm4gdGhpcy5zdGF0ZXMucHJvZ3JhbT09PUUmJih0aGlzLnN0YXRlcy5wcm9ncmFtPW51bGwpLHRoaXMuXy5kZWxldGVQcm9ncmFtKEUpfWRlbGV0ZVNoYWRlcihFKXtyZXR1cm4gdGhpcy5fLmRlbGV0ZVNoYWRlcihFKX1kZXRhY2hTaGFkZXIoRSxfKXtyZXR1cm4gdGhpcy5fLmRldGFjaFNoYWRlcihFLF8pfWdldEF0dGFjaGVkU2hhZGVycyhFKXtyZXR1cm4gdGhpcy5fLmdldEF0dGFjaGVkU2hhZGVycyhFKX1saW5rUHJvZ3JhbShFKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmxpbmtQcm9ncmFtKEUpfWdldFNoYWRlclBhcmFtZXRlcihFLF8pe3JldHVybiB0aGlzLl8uZ2V0U2hhZGVyUGFyYW1ldGVyKEUsXyl9Z2V0U2hhZGVyUHJlY2lzaW9uRm9ybWF0KEUsXyl7cmV0dXJuIHRoaXMuXy5nZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQoRSxfKX1nZXRTaGFkZXJJbmZvTG9nKEUpe3JldHVybiB0aGlzLl8uZ2V0U2hhZGVySW5mb0xvZyhFKX1nZXRTaGFkZXJTb3VyY2UoRSl7cmV0dXJuIHRoaXMuXy5nZXRTaGFkZXJTb3VyY2UoRSl9Z2V0UHJvZ3JhbUluZm9Mb2coRSl7cmV0dXJuIHRoaXMuXy5nZXRQcm9ncmFtSW5mb0xvZyhFKX1nZXRQcm9ncmFtUGFyYW1ldGVyKEUsXyl7cmV0dXJuIHRoaXMuXy5nZXRQcm9ncmFtUGFyYW1ldGVyKEUsXyl9Z2V0RXJyb3IoKXtyZXR1cm4gdGhpcy5fLmdldEVycm9yKCl9Z2V0Q29udGV4dEF0dHJpYnV0ZXMoKXtyZXR1cm4gdGhpcy5fLmdldENvbnRleHRBdHRyaWJ1dGVzKCl9Z2V0RXh0ZW5zaW9uKEUpe3JldHVybiB0aGlzLl8uZ2V0RXh0ZW5zaW9uKEUpfWdldFN1cHBvcnRlZEV4dGVuc2lvbnMoKXtyZXR1cm4gdGhpcy5fLmdldFN1cHBvcnRlZEV4dGVuc2lvbnMoKX1nZXRQYXJhbWV0ZXIoRSl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy5nZXRQYXJhbWV0ZXIoRSl9aXNFbmFibGVkKEUpe3JldHVybiB0aGlzLl8uaXNFbmFibGVkKEUpfWlzUHJvZ3JhbShFKXtyZXR1cm4gdGhpcy5fLmlzUHJvZ3JhbShFKX1pc1NoYWRlcihFKXtyZXR1cm4gdGhpcy5fLmlzU2hhZGVyKEUpfXZhbGlkYXRlUHJvZ3JhbShFKXtyZXR1cm4gdGhpcy5fLnZhbGlkYXRlUHJvZ3JhbShFKX1jbGVhcihFKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmNsZWFyKEUpfWRyYXdBcnJheXMoRSxfLFIpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uZHJhd0FycmF5cyhFLF8sUil9ZHJhd0VsZW1lbnRzKEUsXyxSLFQpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uZHJhd0VsZW1lbnRzKEUsXyxSLFQpfUEoKXtjb25zdCBFPXRoaXMuXyxfPUUuZ2V0UGFyYW1ldGVyKEUuQ1VSUkVOVF9QUk9HUkFNKSxSPUUuZ2V0UHJvZ3JhbVBhcmFtZXRlcihfLEUuQUNUSVZFX0FUVFJJQlVURVMpLFQ9W107Zm9yKGxldCBfPTA7XzxSO18rKylULnB1c2goRS5nZXRWZXJ0ZXhBdHRyaWIoXyxFLlZFUlRFWF9BVFRSSUJfQVJSQVlfQlVGRkVSX0JJTkRJTkcpKTt0aGlzLnQ9e2J1ZmZlcnM6VCxlbGVtZW50czpFLmdldFBhcmFtZXRlcihFLkVMRU1FTlRfQVJSQVlfQlVGRkVSX0JJTkRJTkcpLGZyYW1lYnVmZmVyOkUuZ2V0UGFyYW1ldGVyKEUuRlJBTUVCVUZGRVJfQklORElORyl9LHdpbmRvdy5ERUJVR0dJTkcmJihjb25zb2xlLmxvZyh0aGlzLnVpZCx0aGlzLnQpLGNvbnNvbGUubG9nKHRoaXMudWlkLHRoaXMuc3RhdGVzLmF0dHJpYnV0ZXMpLGNvbnNvbGUubG9nKHRoaXMuc3RhdGVzLmF0dHJpYnV0ZXNbMF0uYnVmZmVyPT09dGhpcy50LmJ1ZmZlcnNbMF0pLGNvbnNvbGUubG9nKHRoaXMuc3RhdGVzLmF0dHJpYnV0ZXNbMV0uYnVmZmVyPT09dGhpcy50LmJ1ZmZlcnNbMV0pLGNvbnNvbGUubG9nKHRoaXMuc3RhdGVzLmF0dHJpYnV0ZXNbMl0uYnVmZmVyPT09dGhpcy50LmJ1ZmZlcnNbMl0pKX1maW5pc2goKXt9Zmx1c2goKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmZsdXNoKCl9Y29tbWl0KCl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy5jb21taXQoKX1pc0NvbnRleHRMb3N0KCl7cmV0dXJuIHRoaXMuXy5pc0NvbnRleHRMb3N0KCl9fV8oVC5wcm90b3R5cGUse0RFUFRIX0JVRkZFUl9CSVQ6MjU2LFNURU5DSUxfQlVGRkVSX0JJVDoxMDI0LENPTE9SX0JVRkZFUl9CSVQ6MTYzODQsUE9JTlRTOjAsTElORVM6MSxMSU5FX0xPT1A6MixMSU5FX1NUUklQOjMsVFJJQU5HTEVTOjQsVFJJQU5HTEVfU1RSSVA6NSxUUklBTkdMRV9GQU46NixaRVJPOjAsT05FOjEsU1JDX0NPTE9SOjc2OCxPTkVfTUlOVVNfU1JDX0NPTE9SOjc2OSxTUkNfQUxQSEE6NzcwLE9ORV9NSU5VU19TUkNfQUxQSEE6NzcxLERTVF9BTFBIQTo3NzIsT05FX01JTlVTX0RTVF9BTFBIQTo3NzMsRFNUX0NPTE9SOjc3NCxPTkVfTUlOVVNfRFNUX0NPTE9SOjc3NSxTUkNfQUxQSEFfU0FUVVJBVEU6Nzc2LENPTlNUQU5UX0NPTE9SOjMyNzY5LE9ORV9NSU5VU19DT05TVEFOVF9DT0xPUjozMjc3MCxDT05TVEFOVF9BTFBIQTozMjc3MSxPTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEE6MzI3NzIsRlVOQ19BREQ6MzI3NzQsRlVOQ19TVUJTVFJBQ1Q6MzI3NzgsRlVOQ19SRVZFUlNFX1NVQlRSQUNUOjMyNzc5LEJMRU5EX0VRVUFUSU9OOjMyNzc3LEJMRU5EX0VRVUFUSU9OX1JHQjozMjc3NyxCTEVORF9FUVVBVElPTl9BTFBIQTozNDg3NyxCTEVORF9EU1RfUkdCOjMyOTY4LEJMRU5EX1NSQ19SR0I6MzI5NjksQkxFTkRfRFNUX0FMUEhBOjMyOTcwLEJMRU5EX1NSQ19BTFBIQTozMjk3MSxCTEVORF9DT0xPUjozMjc3MyxBUlJBWV9CVUZGRVJfQklORElORzozNDk2NCxFTEVNRU5UX0FSUkFZX0JVRkZFUl9CSU5ESU5HOjM0OTY1LExJTkVfV0lEVEg6Mjg0OSxBTElBU0VEX1BPSU5UX1NJWkVfUkFOR0U6MzM5MDEsQUxJQVNFRF9MSU5FX1dJRFRIX1JBTkdFOjMzOTAyLENVTExfRkFDRV9NT0RFOjI4ODUsRlJPTlRfRkFDRToyODg2LERFUFRIX1JBTkdFOjI5MjgsREVQVEhfV1JJVEVNQVNLOjI5MzAsREVQVEhfQ0xFQVJfVkFMVUU6MjkzMSxERVBUSF9GVU5DOjI5MzIsU1RFTkNJTF9DTEVBUl9WQUxVRToyOTYxLFNURU5DSUxfRlVOQzoyOTYyLFNURU5DSUxfRkFJTDoyOTY0LFNURU5DSUxfUEFTU19ERVBUSF9GQUlMOjI5NjUsU1RFTkNJTF9QQVNTX0RFUFRIX1BBU1M6Mjk2NixTVEVOQ0lMX1JFRjoyOTY3LFNURU5DSUxfVkFMVUVfTUFTSzoyOTYzLFNURU5DSUxfV1JJVEVNQVNLOjI5NjgsU1RFTkNJTF9CQUNLX0ZVTkM6MzQ4MTYsU1RFTkNJTF9CQUNLX0ZBSUw6MzQ4MTcsU1RFTkNJTF9CQUNLX1BBU1NfREVQVEhfRkFJTDozNDgxOCxTVEVOQ0lMX0JBQ0tfUEFTU19ERVBUSF9QQVNTOjM0ODE5LFNURU5DSUxfQkFDS19SRUY6MzYwMDMsU1RFTkNJTF9CQUNLX1ZBTFVFX01BU0s6MzYwMDQsU1RFTkNJTF9CQUNLX1dSSVRFTUFTSzozNjAwNSxWSUVXUE9SVDoyOTc4LFNDSVNTT1JfQk9YOjMwODgsQ09MT1JfQ0xFQVJfVkFMVUU6MzEwNixDT0xPUl9XUklURU1BU0s6MzEwNyxVTlBBQ0tfQUxJR05NRU5UOjMzMTcsUEFDS19BTElHTk1FTlQ6MzMzMyxNQVhfVEVYVFVSRV9TSVpFOjMzNzksTUFYX1ZJRVdQT1JUX0RJTVM6MzM4NixTVUJQSVhFTF9CSVRTOjM0MDgsUkVEX0JJVFM6MzQxMCxHUkVFTl9CSVRTOjM0MTEsQkxVRV9CSVRTOjM0MTIsQUxQSEFfQklUUzozNDEzLERFUFRIX0JJVFM6MzQxNCxTVEVOQ0lMX0JJVFM6MzQxNSxQT0xZR09OX09GRlNFVF9VTklUUzoxMDc1MixQT0xZR09OX09GRlNFVF9GQUNUT1I6MzI4MjQsVEVYVFVSRV9CSU5ESU5HXzJEOjMyODczLFNBTVBMRV9CVUZGRVJTOjMyOTM2LFNBTVBMRVM6MzI5MzcsU0FNUExFX0NPVkVSQUdFX1ZBTFVFOjMyOTM4LFNBTVBMRV9DT1ZFUkFHRV9JTlZFUlQ6MzI5MzksQ09NUFJFU1NFRF9URVhUVVJFX0ZPUk1BVFM6MzQ0NjcsVkVORE9SOjc5MzYsUkVOREVSRVI6NzkzNyxWRVJTSU9OOjc5MzgsSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFOjM1NzM4LElNUExFTUVOVEFUSU9OX0NPTE9SX1JFQURfRk9STUFUOjM1NzM5LEJST1dTRVJfREVGQVVMVF9XRUJHTDozNzQ0NCxTVEFUSUNfRFJBVzozNTA0NCxTVFJFQU1fRFJBVzozNTA0MCxEWU5BTUlDX0RSQVc6MzUwNDgsQVJSQVlfQlVGRkVSOjM0OTYyLEVMRU1FTlRfQVJSQVlfQlVGRkVSOjM0OTYzLEJVRkZFUl9TSVpFOjM0NjYwLEJVRkZFUl9VU0FHRTozNDY2MSxDVVJSRU5UX1ZFUlRFWF9BVFRSSUI6MzQzNDIsVkVSVEVYX0FUVFJJQl9BUlJBWV9FTkFCTEVEOjM0MzM4LFZFUlRFWF9BVFRSSUJfQVJSQVlfU0laRTozNDMzOSxWRVJURVhfQVRUUklCX0FSUkFZX1NUUklERTozNDM0MCxWRVJURVhfQVRUUklCX0FSUkFZX1RZUEU6MzQzNDEsVkVSVEVYX0FUVFJJQl9BUlJBWV9OT1JNQUxJWkVEOjM0OTIyLFZFUlRFWF9BVFRSSUJfQVJSQVlfUE9JTlRFUjozNDM3MyxWRVJURVhfQVRUUklCX0FSUkFZX0JVRkZFUl9CSU5ESU5HOjM0OTc1LENVTExfRkFDRToyODg0LEZST05UOjEwMjgsQkFDSzoxMDI5LEZST05UX0FORF9CQUNLOjEwMzIsQkxFTkQ6MzA0MixERVBUSF9URVNUOjI5MjksRElUSEVSOjMwMjQsUE9MWUdPTl9PRkZTRVRfRklMTDozMjgyMyxTQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0U6MzI5MjYsU0FNUExFX0NPVkVSQUdFOjMyOTI4LFNDSVNTT1JfVEVTVDozMDg5LFNURU5DSUxfVEVTVDoyOTYwLE5PX0VSUk9SOjAsSU5WQUxJRF9FTlVNOjEyODAsSU5WQUxJRF9WQUxVRToxMjgxLElOVkFMSURfT1BFUkFUSU9OOjEyODIsT1VUX09GX01FTU9SWToxMjg1LENPTlRFWFRfTE9TVF9XRUJHTDozNzQ0MixDVzoyMzA0LENDVzoyMzA1LERPTlRfQ0FSRTo0MzUyLEZBU1RFU1Q6NDM1MyxOSUNFU1Q6NDM1NCxHRU5FUkFURV9NSVBNQVBfSElOVDozMzE3MCxCWVRFOjUxMjAsVU5TSUdORURfQllURTo1MTIxLFNIT1JUOjUxMjIsVU5TSUdORURfU0hPUlQ6NTEyMyxJTlQ6NTEyNCxVTlNJR05FRF9JTlQ6NTEyNSxGTE9BVDo1MTI2LERFUFRIX0NPTVBPTkVOVDo2NDAyLEFMUEhBOjY0MDYsUkdCOjY0MDcsUkdCQTo2NDA4LExVTUlOQU5DRTo2NDA5LExVTUlOQU5DRV9BTFBIQTo2NDEwLFVOU0lHTkVEX1NIT1JUXzRfNF80XzQ6MzI4MTksVU5TSUdORURfU0hPUlRfNV81XzVfMTozMjgyMCxVTlNJR05FRF9TSE9SVF81XzZfNTozMzYzNSxGUkFHTUVOVF9TSEFERVI6MzU2MzIsVkVSVEVYX1NIQURFUjozNTYzMyxDT01QSUxFX1NUQVRVUzozNTcxMyxERUxFVEVfU1RBVFVTOjM1NzEyLExJTktfU1RBVFVTOjM1NzE0LFZBTElEQVRFX1NUQVRVUzozNTcxNSxBVFRBQ0hFRF9TSEFERVJTOjM1NzE3LEFDVElWRV9BVFRSSUJVVEVTOjM1NzIxLEFDVElWRV9VTklGT1JNUzozNTcxOCxNQVhfVkVSVEVYX0FUVFJJQlM6MzQ5MjEsTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlM6MzYzNDcsTUFYX1ZBUllJTkdfVkVDVE9SUzozNjM0OCxNQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUzozNTY2MSxNQVhfVkVSVEVYX1RFWFRVUkVfSU1BR0VfVU5JVFM6MzU2NjAsTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFM6MzQ5MzAsTUFYX0ZSQUdNRU5UX1VOSUZPUk1fVkVDVE9SUzozNjM0OSxTSEFERVJfVFlQRTozNTY2MyxTSEFESU5HX0xBTkdVQUdFX1ZFUlNJT046MzU3MjQsQ1VSUkVOVF9QUk9HUkFNOjM1NzI1LE5FVkVSOjUxMixBTFdBWVM6NTE5LExFU1M6NTEzLEVRVUFMOjUxNCxMRVFVQUw6NTE1LEdSRUFURVI6NTE2LEdFUVVBTDo1MTgsTk9URVFVQUw6NTE3LEtFRVA6NzY4MCxSRVBMQUNFOjc2ODEsSU5DUjo3NjgyLERFQ1I6NzY4MyxJTlZFUlQ6NTM4NixJTkNSX1dSQVA6MzQwNTUsREVDUl9XUkFQOjM0MDU2LE5FQVJFU1Q6OTcyOCxMSU5FQVI6OTcyOSxORUFSRVNUX01JUE1BUF9ORUFSRVNUOjk5ODQsTElORUFSX01JUE1BUF9ORUFSRVNUOjk5ODUsTkVBUkVTVF9NSVBNQVBfTElORUFSOjk5ODYsTElORUFSX01JUE1BUF9MSU5FQVI6OTk4NyxURVhUVVJFX01BR19GSUxURVI6MTAyNDAsVEVYVFVSRV9NSU5fRklMVEVSOjEwMjQxLFRFWFRVUkVfV1JBUF9TOjEwMjQyLFRFWFRVUkVfV1JBUF9UOjEwMjQzLFRFWFRVUkVfMkQ6MzU1MyxURVhUVVJFOjU4OTAsVEVYVFVSRV9DVUJFX01BUDozNDA2NyxURVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVA6MzQwNjgsVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9YOjM0MDY5LFRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWDozNDA3MCxURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1k6MzQwNzEsVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9ZOjM0MDcyLFRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWjozNDA3MyxURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1o6MzQwNzQsTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRTozNDA3NixURVhUVVJFMDozMzk4NCxURVhUVVJFMTozMzk4NSxURVhUVVJFMjozMzk4NixURVhUVVJFMzozMzk4NyxURVhUVVJFNDozMzk4OCxURVhUVVJFNTozMzk4OSxURVhUVVJFNjozMzk5MCxURVhUVVJFNzozMzk5MSxURVhUVVJFODozMzk5MixURVhUVVJFOTozMzk5MyxURVhUVVJFMTA6MzM5OTQsVEVYVFVSRTExOjMzOTk1LFRFWFRVUkUxMjozMzk5NixURVhUVVJFMTM6MzM5OTcsVEVYVFVSRTE0OjMzOTk4LFRFWFRVUkUxNTozMzk5OSxURVhUVVJFMTY6MzRlMyxBQ1RJVkVfVEVYVFVSRTozNDAxNixSRVBFQVQ6MTA0OTcsQ0xBTVBfVE9fRURHRTozMzA3MSxNSVJST1JFRF9SRVBFQVQ6MzM2NDgsVEVYVFVSRV9XSURUSDo0MDk2LFRFWFRVUkVfSEVJR0hUOjQwOTcsRkxPQVRfVkVDMjozNTY2NCxGTE9BVF9WRUMzOjM1NjY1LEZMT0FUX1ZFQzQ6MzU2NjYsSU5UX1ZFQzI6MzU2NjcsSU5UX1ZFQzM6MzU2NjgsSU5UX1ZFQzQ6MzU2NjksQk9PTDozNTY3MCxCT09MX1ZFQzI6MzU2NzEsQk9PTF9WRUMzOjM1NjcyLEJPT0xfVkVDNDozNTY3MyxGTE9BVF9NQVQyOjM1Njc0LEZMT0FUX01BVDM6MzU2NzUsRkxPQVRfTUFUNDozNTY3NixTQU1QTEVSXzJEOjM1Njc4LFNBTVBMRVJfQ1VCRTozNTY4MCxMT1dfRkxPQVQ6MzYzMzYsTUVESVVNX0ZMT0FUOjM2MzM3LEhJR0hfRkxPQVQ6MzYzMzgsTE9XX0lOVDozNjMzOSxNRURJVU1fSU5UOjM2MzQwLEhJR0hfSU5UOjM2MzQxLEZSQU1FQlVGRkVSOjM2MTYwLFJFTkRFUkJVRkZFUjozNjE2MSxSR0JBNDozMjg1NCxSR0I1X0ExOjMyODU1LFJHQjU2NTozNjE5NCxERVBUSF9DT01QT05FTlQxNjozMzE4OSxTVEVOQ0lMX0lOREVYOjY0MDEsU1RFTkNJTF9JTkRFWDg6MzYxNjgsREVQVEhfU1RFTkNJTDozNDA0MSxSRU5ERVJCVUZGRVJfV0lEVEg6MzYxNjIsUkVOREVSQlVGRkVSX0hFSUdIVDozNjE2MyxSRU5ERVJCVUZGRVJfSU5URVJOQUxfRk9STUFUOjM2MTY0LFJFTkRFUkJVRkZFUl9SRURfU0laRTozNjE3NixSRU5ERVJCVUZGRVJfR1JFRU5fU0laRTozNjE3NyxSRU5ERVJCVUZGRVJfQkxVRV9TSVpFOjM2MTc4LFJFTkRFUkJVRkZFUl9BTFBIQV9TSVpFOjM2MTc5LFJFTkRFUkJVRkZFUl9ERVBUSF9TSVpFOjM2MTgwLFJFTkRFUkJVRkZFUl9TVEVOQ0lMX1NJWkU6MzYxODEsRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9PQkpFQ1RfVFlQRTozNjA0OCxGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FOjM2MDQ5LEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfVEVYVFVSRV9MRVZFTDozNjA1MCxGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfQ1VCRV9NQVBfRkFDRTozNjA1MSxDT0xPUl9BVFRBQ0hNRU5UMDozNjA2NCxERVBUSF9BVFRBQ0hNRU5UOjM2MDk2LFNURU5DSUxfQVRUQUNITUVOVDozNjEyOCxERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQ6MzMzMDYsTk9ORTowLEZSQU1FQlVGRkVSX0NPTVBMRVRFOjM2MDUzLEZSQU1FQlVGRkVSX0lOQ09NUExFVEVfQVRUQUNITUVOVDozNjA1NCxGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVDozNjA1NSxGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlM6MzYwNTcsRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQ6MzYwNjEsRlJBTUVCVUZGRVJfQklORElORzozNjAwNixSRU5ERVJCVUZGRVJfQklORElORzozNjAwNyxNQVhfUkVOREVSQlVGRkVSX1NJWkU6MzQwMjQsSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT046MTI4NixVTlBBQ0tfRkxJUF9ZX1dFQkdMOjM3NDQwLFVOUEFDS19QUkVNVUxUSVBMWV9BTFBIQV9XRUJHTDozNzQ0MSxVTlBBQ0tfQ09MT1JTUEFDRV9DT05WRVJTSU9OX1dFQkdMOjM3NDQzLFJFQURfQlVGRkVSOjMwNzQsVU5QQUNLX1JPV19MRU5HVEg6MzMxNCxVTlBBQ0tfU0tJUF9ST1dTOjMzMTUsVU5QQUNLX1NLSVBfUElYRUxTOjMzMTYsUEFDS19ST1dfTEVOR1RIOjMzMzAsUEFDS19TS0lQX1JPV1M6MzMzMSxQQUNLX1NLSVBfUElYRUxTOjMzMzIsVU5QQUNLX1NLSVBfSU1BR0VTOjMyODc3LFVOUEFDS19JTUFHRV9IRUlHSFQ6MzI4NzgsTUFYXzNEX1RFWFRVUkVfU0laRTozMjg4MyxNQVhfRUxFTUVOVFNfVkVSVElDRVM6MzNlMyxNQVhfRUxFTUVOVFNfSU5ESUNFUzozMzAwMSxNQVhfVEVYVFVSRV9MT0RfQklBUzozNDA0NSxNQVhfRlJBR01FTlRfVU5JRk9STV9DT01QT05FTlRTOjM1NjU3LE1BWF9WRVJURVhfVU5JRk9STV9DT01QT05FTlRTOjM1NjU4LE1BWF9BUlJBWV9URVhUVVJFX0xBWUVSUzozNTA3MSxNSU5fUFJPR1JBTV9URVhFTF9PRkZTRVQ6MzUwNzYsTUFYX1BST0dSQU1fVEVYRUxfT0ZGU0VUOjM1MDc3LE1BWF9WQVJZSU5HX0NPTVBPTkVOVFM6MzU2NTksRlJBR01FTlRfU0hBREVSX0RFUklWQVRJVkVfSElOVDozNTcyMyxSQVNURVJJWkVSX0RJU0NBUkQ6MzU5NzcsVkVSVEVYX0FSUkFZX0JJTkRJTkc6MzQyMjksTUFYX1ZFUlRFWF9PVVRQVVRfQ09NUE9ORU5UUzozNzE1NCxNQVhfRlJBR01FTlRfSU5QVVRfQ09NUE9ORU5UUzozNzE1NyxNQVhfU0VSVkVSX1dBSVRfVElNRU9VVDozNzEzNyxNQVhfRUxFTUVOVF9JTkRFWDozNjIwMyxSRUQ6NjQwMyxSR0I4OjMyODQ5LFJHQkE4OjMyODU2LFJHQjEwX0EyOjMyODU3LFRFWFRVUkVfM0Q6MzI4NzksVEVYVFVSRV9XUkFQX1I6MzI4ODIsVEVYVFVSRV9NSU5fTE9EOjMzMDgyLFRFWFRVUkVfTUFYX0xPRDozMzA4MyxURVhUVVJFX0JBU0VfTEVWRUw6MzMwODQsVEVYVFVSRV9NQVhfTEVWRUw6MzMwODUsVEVYVFVSRV9DT01QQVJFX01PREU6MzQ4OTIsVEVYVFVSRV9DT01QQVJFX0ZVTkM6MzQ4OTMsU1JHQjozNTkwNCxTUkdCODozNTkwNSxTUkdCOF9BTFBIQTg6MzU5MDcsQ09NUEFSRV9SRUZfVE9fVEVYVFVSRTozNDg5NCxSR0JBMzJGOjM0ODM2LFJHQjMyRjozNDgzNyxSR0JBMTZGOjM0ODQyLFJHQjE2RjozNDg0MyxURVhUVVJFXzJEX0FSUkFZOjM1ODY2LFRFWFRVUkVfQklORElOR18yRF9BUlJBWTozNTg2OSxSMTFGX0cxMUZfQjEwRjozNTg5OCxSR0I5X0U1OjM1OTAxLFJHQkEzMlVJOjM2MjA4LFJHQjMyVUk6MzYyMDksUkdCQTE2VUk6MzYyMTQsUkdCMTZVSTozNjIxNSxSR0JBOFVJOjM2MjIwLFJHQjhVSTozNjIyMSxSR0JBMzJJOjM2MjI2LFJHQjMySTozNjIyNyxSR0JBMTZJOjM2MjMyLFJHQjE2STozNjIzMyxSR0JBOEk6MzYyMzgsUkdCOEk6MzYyMzksUkVEX0lOVEVHRVI6MzYyNDQsUkdCX0lOVEVHRVI6MzYyNDgsUkdCQV9JTlRFR0VSOjM2MjQ5LFI4OjMzMzIxLFJHODozMzMyMyxSMTZGOjMzMzI1LFIzMkY6MzMzMjYsUkcxNkY6MzMzMjcsUkczMkY6MzMzMjgsUjhJOjMzMzI5LFI4VUk6MzMzMzAsUjE2STozMzMzMSxSMTZVSTozMzMzMixSMzJJOjMzMzMzLFIzMlVJOjMzMzM0LFJHOEk6MzMzMzUsUkc4VUk6MzMzMzYsUkcxNkk6MzMzMzcsUkcxNlVJOjMzMzM4LFJHMzJJOjMzMzM5LFJHMzJVSTozMzM0MCxSOF9TTk9STTozNjc1NixSRzhfU05PUk06MzY3NTcsUkdCOF9TTk9STTozNjc1OCxSR0JBOF9TTk9STTozNjc1OSxSR0IxMF9BMlVJOjM2OTc1LFRFWFRVUkVfSU1NVVRBQkxFX0ZPUk1BVDozNzE2NyxURVhUVVJFX0lNTVVUQUJMRV9MRVZFTFM6MzM1MDMsVU5TSUdORURfSU5UXzJfMTBfMTBfMTBfUkVWOjMzNjQwLFVOU0lHTkVEX0lOVF8xMEZfMTFGXzExRl9SRVY6MzU4OTksVU5TSUdORURfSU5UXzVfOV85XzlfUkVWOjM1OTAyLEZMT0FUXzMyX1VOU0lHTkVEX0lOVF8yNF84X1JFVjozNjI2OSxVTlNJR05FRF9JTlRfMjRfODozNDA0MixIQUxGX0ZMT0FUOjUxMzEsUkc6MzMzMTksUkdfSU5URUdFUjozMzMyMCxJTlRfMl8xMF8xMF8xMF9SRVY6MzYyNTUsQ1VSUkVOVF9RVUVSWTozNDkxNyxRVUVSWV9SRVNVTFQ6MzQ5MTgsUVVFUllfUkVTVUxUX0FWQUlMQUJMRTozNDkxOSxBTllfU0FNUExFU19QQVNTRUQ6MzU4ODcsQU5ZX1NBTVBMRVNfUEFTU0VEX0NPTlNFUlZBVElWRTozNjIwMixNQVhfRFJBV19CVUZGRVJTOjM0ODUyLERSQVdfQlVGRkVSMDozNDg1MyxEUkFXX0JVRkZFUjE6MzQ4NTQsRFJBV19CVUZGRVIyOjM0ODU1LERSQVdfQlVGRkVSMzozNDg1NixEUkFXX0JVRkZFUjQ6MzQ4NTcsRFJBV19CVUZGRVI1OjM0ODU4LERSQVdfQlVGRkVSNjozNDg1OSxEUkFXX0JVRkZFUjc6MzQ4NjAsRFJBV19CVUZGRVI4OjM0ODYxLERSQVdfQlVGRkVSOTozNDg2MixEUkFXX0JVRkZFUjEwOjM0ODYzLERSQVdfQlVGRkVSMTE6MzQ4NjQsRFJBV19CVUZGRVIxMjozNDg2NSxEUkFXX0JVRkZFUjEzOjM0ODY2LERSQVdfQlVGRkVSMTQ6MzQ4NjcsRFJBV19CVUZGRVIxNTozNDg2OCxNQVhfQ09MT1JfQVRUQUNITUVOVFM6MzYwNjMsQ09MT1JfQVRUQUNITUVOVDE6MzYwNjUsQ09MT1JfQVRUQUNITUVOVDI6MzYwNjYsQ09MT1JfQVRUQUNITUVOVDM6MzYwNjcsQ09MT1JfQVRUQUNITUVOVDQ6MzYwNjgsQ09MT1JfQVRUQUNITUVOVDU6MzYwNjksQ09MT1JfQVRUQUNITUVOVDY6MzYwNzAsQ09MT1JfQVRUQUNITUVOVDc6MzYwNzEsQ09MT1JfQVRUQUNITUVOVDg6MzYwNzIsQ09MT1JfQVRUQUNITUVOVDk6MzYwNzMsQ09MT1JfQVRUQUNITUVOVDEwOjM2MDc0LENPTE9SX0FUVEFDSE1FTlQxMTozNjA3NSxDT0xPUl9BVFRBQ0hNRU5UMTI6MzYwNzYsQ09MT1JfQVRUQUNITUVOVDEzOjM2MDc3LENPTE9SX0FUVEFDSE1FTlQxNDozNjA3OCxDT0xPUl9BVFRBQ0hNRU5UMTU6MzYwNzksU0FNUExFUl8zRDozNTY3OSxTQU1QTEVSXzJEX1NIQURPVzozNTY4MixTQU1QTEVSXzJEX0FSUkFZOjM2Mjg5LFNBTVBMRVJfMkRfQVJSQVlfU0hBRE9XOjM2MjkyLFNBTVBMRVJfQ1VCRV9TSEFET1c6MzYyOTMsSU5UX1NBTVBMRVJfMkQ6MzYyOTgsSU5UX1NBTVBMRVJfM0Q6MzYyOTksSU5UX1NBTVBMRVJfQ1VCRTozNjMwMCxJTlRfU0FNUExFUl8yRF9BUlJBWTozNjMwMyxVTlNJR05FRF9JTlRfU0FNUExFUl8yRDozNjMwNixVTlNJR05FRF9JTlRfU0FNUExFUl8zRDozNjMwNyxVTlNJR05FRF9JTlRfU0FNUExFUl9DVUJFOjM2MzA4LFVOU0lHTkVEX0lOVF9TQU1QTEVSXzJEX0FSUkFZOjM2MzExLE1BWF9TQU1QTEVTOjM2MTgzLFNBTVBMRVJfQklORElORzozNTA5NyxQSVhFTF9QQUNLX0JVRkZFUjozNTA1MSxQSVhFTF9VTlBBQ0tfQlVGRkVSOjM1MDUyLFBJWEVMX1BBQ0tfQlVGRkVSX0JJTkRJTkc6MzUwNTMsUElYRUxfVU5QQUNLX0JVRkZFUl9CSU5ESU5HOjM1MDU1LENPUFlfUkVBRF9CVUZGRVI6MzY2NjIsQ09QWV9XUklURV9CVUZGRVI6MzY2NjMsQ09QWV9SRUFEX0JVRkZFUl9CSU5ESU5HOjM2NjYyLENPUFlfV1JJVEVfQlVGRkVSX0JJTkRJTkc6MzY2NjMsRkxPQVRfTUFUMngzOjM1Njg1LEZMT0FUX01BVDJ4NDozNTY4NixGTE9BVF9NQVQzeDI6MzU2ODcsRkxPQVRfTUFUM3g0OjM1Njg4LEZMT0FUX01BVDR4MjozNTY4OSxGTE9BVF9NQVQ0eDM6MzU2OTAsVU5TSUdORURfSU5UX1ZFQzI6MzYyOTQsVU5TSUdORURfSU5UX1ZFQzM6MzYyOTUsVU5TSUdORURfSU5UX1ZFQzQ6MzYyOTYsVU5TSUdORURfTk9STUFMSVpFRDozNTg2MyxTSUdORURfTk9STUFMSVpFRDozNjc2NCxWRVJURVhfQVRUUklCX0FSUkFZX0lOVEVHRVI6MzUwNjksVkVSVEVYX0FUVFJJQl9BUlJBWV9ESVZJU09SOjM1MDcwLFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVJfTU9ERTozNTk2NyxNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0NPTVBPTkVOVFM6MzU5NjgsVFJBTlNGT1JNX0ZFRURCQUNLX1ZBUllJTkdTOjM1OTcxLFRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVJfU1RBUlQ6MzU5NzIsVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9TSVpFOjM1OTczLFRSQU5TRk9STV9GRUVEQkFDS19QUklNSVRJVkVTX1dSSVRURU46MzU5NzYsTUFYX1RSQU5TRk9STV9GRUVEQkFDS19JTlRFUkxFQVZFRF9DT01QT05FTlRTOjM1OTc4LE1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfU0VQQVJBVEVfQVRUUklCUzozNTk3OSxJTlRFUkxFQVZFRF9BVFRSSUJTOjM1OTgwLFNFUEFSQVRFX0FUVFJJQlM6MzU5ODEsVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUjozNTk4MixUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX0JJTkRJTkc6MzU5ODMsVFJBTlNGT1JNX0ZFRURCQUNLOjM2Mzg2LFRSQU5TRk9STV9GRUVEQkFDS19QQVVTRUQ6MzYzODcsVFJBTlNGT1JNX0ZFRURCQUNLX0FDVElWRTozNjM4OCxUUkFOU0ZPUk1fRkVFREJBQ0tfQklORElORzozNjM4OSxGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0NPTE9SX0VOQ09ESU5HOjMzMjk2LEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09NUE9ORU5UX1RZUEU6MzMyOTcsRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9SRURfU0laRTozMzI5OCxGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0dSRUVOX1NJWkU6MzMyOTksRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9CTFVFX1NJWkU6MzMzMDAsRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9BTFBIQV9TSVpFOjMzMzAxLEZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfREVQVEhfU0laRTozMzMwMixGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1NURU5DSUxfU0laRTozMzMwMyxGUkFNRUJVRkZFUl9ERUZBVUxUOjMzMzA0LERFUFRIMjRfU1RFTkNJTDg6MzUwNTYsRFJBV19GUkFNRUJVRkZFUl9CSU5ESU5HOjM2MDA2LFJFQURfRlJBTUVCVUZGRVJfQklORElORzozNjAxMCxSRU5ERVJCVUZGRVJfU0FNUExFUzozNjAxMSxGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX1RFWFRVUkVfTEFZRVI6MzYwNTIsRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NVUxUSVNBTVBMRTozNjE4MixVTklGT1JNX0JVRkZFUjozNTM0NSxVTklGT1JNX0JVRkZFUl9CSU5ESU5HOjM1MzY4LFVOSUZPUk1fQlVGRkVSX1NUQVJUOjM1MzY5LFVOSUZPUk1fQlVGRkVSX1NJWkU6MzUzNzAsTUFYX1ZFUlRFWF9VTklGT1JNX0JMT0NLUzozNTM3MSxNQVhfRlJBR01FTlRfVU5JRk9STV9CTE9DS1M6MzUzNzMsTUFYX0NPTUJJTkVEX1VOSUZPUk1fQkxPQ0tTOjM1Mzc0LE1BWF9VTklGT1JNX0JVRkZFUl9CSU5ESU5HUzozNTM3NSxNQVhfVU5JRk9STV9CTE9DS19TSVpFOjM1Mzc2LE1BWF9DT01CSU5FRF9WRVJURVhfVU5JRk9STV9DT01QT05FTlRTOjM1Mzc3LE1BWF9DT01CSU5FRF9GUkFHTUVOVF9VTklGT1JNX0NPTVBPTkVOVFM6MzUzNzksVU5JRk9STV9CVUZGRVJfT0ZGU0VUX0FMSUdOTUVOVDozNTM4MCxBQ1RJVkVfVU5JRk9STV9CTE9DS1M6MzUzODIsVU5JRk9STV9UWVBFOjM1MzgzLFVOSUZPUk1fU0laRTozNTM4NCxVTklGT1JNX0JMT0NLX0lOREVYOjM1Mzg2LFVOSUZPUk1fT0ZGU0VUOjM1Mzg3LFVOSUZPUk1fQVJSQVlfU1RSSURFOjM1Mzg4LFVOSUZPUk1fTUFUUklYX1NUUklERTozNTM4OSxVTklGT1JNX0lTX1JPV19NQUpPUjozNTM5MCxVTklGT1JNX0JMT0NLX0JJTkRJTkc6MzUzOTEsVU5JRk9STV9CTE9DS19EQVRBX1NJWkU6MzUzOTIsVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STVM6MzUzOTQsVU5JRk9STV9CTE9DS19BQ1RJVkVfVU5JRk9STV9JTkRJQ0VTOjM1Mzk1LFVOSUZPUk1fQkxPQ0tfUkVGRVJFTkNFRF9CWV9WRVJURVhfU0hBREVSOjM1Mzk2LFVOSUZPUk1fQkxPQ0tfUkVGRVJFTkNFRF9CWV9GUkFHTUVOVF9TSEFERVI6MzUzOTgsT0JKRUNUX1RZUEU6MzcxMzgsU1lOQ19DT05ESVRJT046MzcxMzksU1lOQ19TVEFUVVM6MzcxNDAsU1lOQ19GTEFHUzozNzE0MSxTWU5DX0ZFTkNFOjM3MTQyLFNZTkNfR1BVX0NPTU1BTkRTX0NPTVBMRVRFOjM3MTQzLFVOU0lHTkFMRUQ6MzcxNDQsU0lHTkFMRUQ6MzcxNDUsQUxSRUFEWV9TSUdOQUxFRDozNzE0NixUSU1FT1VUX0VYUElSRUQ6MzcxNDcsQ09ORElUSU9OX1NBVElTRklFRDozNzE0OCxXQUlUX0ZBSUxFRDozNzE0OSxTWU5DX0ZMVVNIX0NPTU1BTkRTX0JJVDoxLENPTE9SOjYxNDQsREVQVEg6NjE0NSxTVEVOQ0lMOjYxNDYsTUlOOjMyNzc1LE1BWDozMjc3NixERVBUSF9DT01QT05FTlQyNDozMzE5MCxTVFJFQU1fUkVBRDozNTA0MSxTVFJFQU1fQ09QWTozNTA0MixTVEFUSUNfUkVBRDozNTA0NSxTVEFUSUNfQ09QWTozNTA0NixEWU5BTUlDX1JFQUQ6MzUwNDksRFlOQU1JQ19DT1BZOjM1MDUwLERFUFRIX0NPTVBPTkVOVDMyRjozNjAxMixERVBUSDMyRl9TVEVOQ0lMODozNjAxMyxJTlZBTElEX0lOREVYOjQyOTQ5NjcyOTUsVElNRU9VVF9JR05PUkVEOi0xLE1BWF9DTElFTlRfV0FJVF9USU1FT1VUX1dFQkdMOjM3NDQ3LFZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUl9BTkdMRTozNTA3MCxVTk1BU0tFRF9WRU5ET1JfV0VCR0w6Mzc0NDUsVU5NQVNLRURfUkVOREVSRVJfV0VCR0w6Mzc0NDYsTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUOjM0MDQ3LFRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUOjM0MDQ2LENPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQ6MzM3NzYsQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQ6MzM3NzcsQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUM19FWFQ6MzM3NzgsQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQ6MzM3NzksQ09NUFJFU1NFRF9SMTFfRUFDOjM3NDg4LENPTVBSRVNTRURfU0lHTkVEX1IxMV9FQUM6Mzc0ODksQ09NUFJFU1NFRF9SRzExX0VBQzozNzQ5MCxDT01QUkVTU0VEX1NJR05FRF9SRzExX0VBQzozNzQ5MSxDT01QUkVTU0VEX1JHQjhfRVRDMjozNzQ5MixDT01QUkVTU0VEX1JHQkE4X0VUQzJfRUFDOjM3NDkzLENPTVBSRVNTRURfU1JHQjhfRVRDMjozNzQ5NCxDT01QUkVTU0VEX1NSR0I4X0FMUEhBOF9FVEMyX0VBQzozNzQ5NSxDT01QUkVTU0VEX1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyOjM3NDk2LENPTVBSRVNTRURfU1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyOjM3NDk3LENPTVBSRVNTRURfUkdCX1BWUlRDXzRCUFBWMV9JTUc6MzU4NDAsQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzRCUFBWMV9JTUc6MzU4NDIsQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRzozNTg0MSxDT01QUkVTU0VEX1JHQkFfUFZSVENfMkJQUFYxX0lNRzozNTg0MyxDT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMOjM2MTk2LENPTVBSRVNTRURfUkdCX0FUQ19XRUJHTDozNTk4NixDT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMOjM1OTg2LENPTVBSRVNTRURfUkdCQV9BVENfSU5URVJQT0xBVEVEX0FMUEhBX1dFQkdMOjM0Nzk4LFVOU0lHTkVEX0lOVF8yNF84X1dFQkdMOjM0MDQyLEhBTEZfRkxPQVRfT0VTOjM2MTkzLFJHQkEzMkZfRVhUOjM0ODM2LFJHQjMyRl9FWFQ6MzQ4MzcsRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT01QT05FTlRfVFlQRV9FWFQ6MzMyOTcsVU5TSUdORURfTk9STUFMSVpFRF9FWFQ6MzU4NjMsTUlOX0VYVDozMjc3NSxNQVhfRVhUOjMyNzc2LFNSR0JfRVhUOjM1OTA0LFNSR0JfQUxQSEFfRVhUOjM1OTA2LFNSR0I4X0FMUEhBOF9FWFQ6MzU5MDcsRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT0xPUl9FTkNPRElOR19FWFQ6MzMyOTYsRlJBR01FTlRfU0hBREVSX0RFUklWQVRJVkVfSElOVF9PRVM6MzU3MjMsQ09MT1JfQVRUQUNITUVOVDBfV0VCR0w6MzYwNjQsQ09MT1JfQVRUQUNITUVOVDFfV0VCR0w6MzYwNjUsQ09MT1JfQVRUQUNITUVOVDJfV0VCR0w6MzYwNjYsQ09MT1JfQVRUQUNITUVOVDNfV0VCR0w6MzYwNjcsQ09MT1JfQVRUQUNITUVOVDRfV0VCR0w6MzYwNjgsQ09MT1JfQVRUQUNITUVOVDVfV0VCR0w6MzYwNjksQ09MT1JfQVRUQUNITUVOVDZfV0VCR0w6MzYwNzAsQ09MT1JfQVRUQUNITUVOVDdfV0VCR0w6MzYwNzEsQ09MT1JfQVRUQUNITUVOVDhfV0VCR0w6MzYwNzIsQ09MT1JfQVRUQUNITUVOVDlfV0VCR0w6MzYwNzMsQ09MT1JfQVRUQUNITUVOVDEwX1dFQkdMOjM2MDc0LENPTE9SX0FUVEFDSE1FTlQxMV9XRUJHTDozNjA3NSxDT0xPUl9BVFRBQ0hNRU5UMTJfV0VCR0w6MzYwNzYsQ09MT1JfQVRUQUNITUVOVDEzX1dFQkdMOjM2MDc3LENPTE9SX0FUVEFDSE1FTlQxNF9XRUJHTDozNjA3OCxDT0xPUl9BVFRBQ0hNRU5UMTVfV0VCR0w6MzYwNzksRFJBV19CVUZGRVIwX1dFQkdMOjM0ODUzLERSQVdfQlVGRkVSMV9XRUJHTDozNDg1NCxEUkFXX0JVRkZFUjJfV0VCR0w6MzQ4NTUsRFJBV19CVUZGRVIzX1dFQkdMOjM0ODU2LERSQVdfQlVGRkVSNF9XRUJHTDozNDg1NyxEUkFXX0JVRkZFUjVfV0VCR0w6MzQ4NTgsRFJBV19CVUZGRVI2X1dFQkdMOjM0ODU5LERSQVdfQlVGRkVSN19XRUJHTDozNDg2MCxEUkFXX0JVRkZFUjhfV0VCR0w6MzQ4NjEsRFJBV19CVUZGRVI5X1dFQkdMOjM0ODYyLERSQVdfQlVGRkVSMTBfV0VCR0w6MzQ4NjMsRFJBV19CVUZGRVIxMV9XRUJHTDozNDg2NCxEUkFXX0JVRkZFUjEyX1dFQkdMOjM0ODY1LERSQVdfQlVGRkVSMTNfV0VCR0w6MzQ4NjYsRFJBV19CVUZGRVIxNF9XRUJHTDozNDg2NyxEUkFXX0JVRkZFUjE1X1dFQkdMOjM0ODY4LE1BWF9DT0xPUl9BVFRBQ0hNRU5UU19XRUJHTDozNjA2MyxNQVhfRFJBV19CVUZGRVJTX1dFQkdMOjM0ODUyLFZFUlRFWF9BUlJBWV9CSU5ESU5HX09FUzozNDIyOSxRVUVSWV9DT1VOVEVSX0JJVFNfRVhUOjM0OTE2LENVUlJFTlRfUVVFUllfRVhUOjM0OTE3LFFVRVJZX1JFU1VMVF9FWFQ6MzQ5MTgsUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQ6MzQ5MTksVElNRV9FTEFQU0VEX0VYVDozNTAwNyxUSU1FU1RBTVBfRVhUOjM2MzkyLEdQVV9ESVNKT0lOVF9FWFQ6MzY3OTV9KSxfKFQucHJvdG90eXBlLHtidWZmZXJEYXRhKC4uLkUpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uYnVmZmVyRGF0YSguLi5FKX0sYnVmZmVyU3ViRGF0YSguLi5FKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmJ1ZmZlclN1YkRhdGEoLi4uRSl9LGNyZWF0ZUJ1ZmZlcigpe3JldHVybiB0aGlzLl8uY3JlYXRlQnVmZmVyKCl9LGRlbGV0ZUJ1ZmZlcihFKXtjb25zdCBfPXRoaXMuc3RhdGVzO18uYXJyYXlCdWZmZXI9PT1FP18uYXJyYXlCdWZmZXI9bnVsbDpfLmVsZW1lbnRBcnJheUJ1ZmZlcj09PUUmJihfLmVsZW1lbnRBcnJheUJ1ZmZlcj1udWxsKTtjb25zdCBSPV8uYXR0cmlidXRlcztmb3IoY29uc3QgXyBpbiBSKVJbX10uYnVmZmVyPT09RSYmKFJbX10uYnVmZmVyPW51bGwpO3JldHVybiB0aGlzLl8uZGVsZXRlQnVmZmVyKEUpfSxnZXRCdWZmZXJQYXJhbWV0ZXIoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmdldEJ1ZmZlclBhcmFtZXRlcihFLF8pfSxpc0J1ZmZlcihFKXtyZXR1cm4gdGhpcy5fLmlzQnVmZmVyKEUpfX0pLF8oVC5wcm90b3R5cGUse2NoZWNrRnJhbWVidWZmZXJTdGF0dXMoRSl7cmV0dXJuIHRoaXMuXy5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKEUpfSxjcmVhdGVGcmFtZWJ1ZmZlcigpe3JldHVybiB0aGlzLl8uY3JlYXRlRnJhbWVidWZmZXIoKX0sZGVsZXRlRnJhbWVidWZmZXIoRSl7Y29uc3QgXz10aGlzLnN0YXRlcy5mcmFtZWJ1ZmZlcjtmb3IoY29uc3QgUiBpbiBfKV9bUl09PT1FJiYoX1tSXT1udWxsKTtyZXR1cm4gdGhpcy5fLmRlbGV0ZUZyYW1lYnVmZmVyKEUpfSxmcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihFLF8sUixUKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyKEUsXyxSLFQpfSxmcmFtZWJ1ZmZlclRleHR1cmUyRChFLF8sUixULEEpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uZnJhbWVidWZmZXJUZXh0dXJlMkQoRSxfLFIsVCxBKX0sZ2V0RnJhbWVidWZmZXJBdHRhY2htZW50UGFyYW1ldGVyKEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmdldEZyYW1lYnVmZmVyQXR0YWNobWVudFBhcmFtZXRlcihFLF8sUil9LGlzRnJhbWVidWZmZXIoRSl7cmV0dXJuIHRoaXMuXy5pc0ZyYW1lYnVmZmVyKEUpfSxyZWFkUGl4ZWxzKEUsXyxSLFQsQSx0LHIpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8ucmVhZFBpeGVscyhFLF8sUixULEEsdCxyKX19KSxfKFQucHJvdG90eXBlLHtjcmVhdGVSZW5kZXJidWZmZXIoKXtyZXR1cm4gdGhpcy5fLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpfSxkZWxldGVSZW5kZXJidWZmZXIoRSl7Y29uc3QgXz10aGlzLnN0YXRlcy5yZW5kZXJidWZmZXI7Zm9yKGNvbnN0IFIgaW4gXylfW1JdPT09RSYmKF9bUl09bnVsbCk7cmV0dXJuIHRoaXMuXy5kZWxldGVSZW5kZXJidWZmZXIoRSl9LGdldFJlbmRlcmJ1ZmZlclBhcmFtZXRlcihFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uZ2V0UmVuZGVyYnVmZmVyUGFyYW1ldGVyKEUsXyl9LGlzUmVuZGVyYnVmZmVyKEUpe3JldHVybiB0aGlzLl8uaXNSZW5kZXJidWZmZXIoRSl9LHJlbmRlcmJ1ZmZlclN0b3JhZ2UoRSxfLFIsVCl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy5yZW5kZXJidWZmZXJTdG9yYWdlKEUsXyxSLFQpfX0pO3ZhciBBPUFycmF5LmlzQXJyYXksdD1PYmplY3Qua2V5cyxyPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTj1mdW5jdGlvbiBFKF8sUil7aWYoXz09PVIpcmV0dXJuITA7aWYoXyYmUiYmXCJvYmplY3RcIj09dHlwZW9mIF8mJlwib2JqZWN0XCI9PXR5cGVvZiBSKXt2YXIgVCxOLGUsaT1BKF8pLEk9QShSKTtpZihpJiZJKXtpZigoTj1fLmxlbmd0aCkhPVIubGVuZ3RoKXJldHVybiExO2ZvcihUPU47MCE9VC0tOylpZighRShfW1RdLFJbVF0pKXJldHVybiExO3JldHVybiEwfWlmKGkhPUkpcmV0dXJuITE7dmFyIHM9XyBpbnN0YW5jZW9mIERhdGUsUz1SIGluc3RhbmNlb2YgRGF0ZTtpZihzIT1TKXJldHVybiExO2lmKHMmJlMpcmV0dXJuIF8uZ2V0VGltZSgpPT1SLmdldFRpbWUoKTt2YXIgRj1fIGluc3RhbmNlb2YgUmVnRXhwLE89UiBpbnN0YW5jZW9mIFJlZ0V4cDtpZihGIT1PKXJldHVybiExO2lmKEYmJk8pcmV0dXJuIF8udG9TdHJpbmcoKT09Ui50b1N0cmluZygpO3ZhciBNPXQoXyk7aWYoKE49TS5sZW5ndGgpIT09dChSKS5sZW5ndGgpcmV0dXJuITE7Zm9yKFQ9TjswIT1ULS07KWlmKCFyLmNhbGwoUixNW1RdKSlyZXR1cm4hMTtmb3IoVD1OOzAhPVQtLTspaWYoIUUoX1tlPU1bVF1dLFJbZV0pKXJldHVybiExO3JldHVybiEwfXJldHVybiBfIT1fJiZSIT1SfTtfKFQucHJvdG90eXBlLHtzY2lzc29yKEUsXyxSLFQpe3RoaXMuVCgpO2NvbnN0IEE9dGhpcy5zdGF0ZXMuc2Npc3NvcjtBWzBdPT09RSYmQVsxXT09PV8mJkFbMl09PT1SJiZBWzNdPT09VHx8KEFbMF09RSxBWzFdPV8sQVsyXT1SLEFbM109VCx0aGlzLl8uc2Npc3NvcihFLF8sUixUKSl9LHZpZXdwb3J0KEUsXyxSLFQpe3RoaXMuVCgpO2NvbnN0IEE9dGhpcy5zdGF0ZXMudmlld3BvcnQ7QVswXT09PUUmJkFbMV09PT1fJiZBWzJdPT09UiYmQVszXT09PVR8fChBWzBdPUUsQVsxXT1fLEFbMl09UixBWzNdPVQsdGhpcy5fLnZpZXdwb3J0KEUsXyxSLFQpKX0sYmxlbmRDb2xvcihFLF8sUixUKXt0aGlzLlQoKTtjb25zdCBBPXRoaXMuc3RhdGVzLmJsZW5kQ29sb3I7QVswXT09PUUmJkFbMV09PT1fJiZBWzJdPT09UiYmQVszXT09PVR8fChBWzBdPUUsQVsxXT1fLEFbMl09UixBWzNdPVQsdGhpcy5fLmJsZW5kQ29sb3IoRSxfLFIsVCkpfSxibGVuZEVxdWF0aW9uKEUpe3RoaXMuVCgpO2NvbnN0IF89dGhpcy5zdGF0ZXMuYmxlbmRFcXVhdGlvblNlcGFyYXRlO19bMF09PT1FJiZfWzFdPT09RXx8KF9bMF09RSxfWzFdPUUsdGhpcy5fLmJsZW5kRXF1YXRpb24oRSkpfSxibGVuZEVxdWF0aW9uU2VwYXJhdGUoRSxfKXt0aGlzLlQoKTtjb25zdCBSPXRoaXMuc3RhdGVzLmJsZW5kRXF1YXRpb25TZXBhcmF0ZTtSWzBdPT09RSYmUlsxXT09PV98fChSWzBdPUUsUlsxXT1fLHRoaXMuXy5ibGVuZEVxdWF0aW9uU2VwYXJhdGUoRSxfKSl9LGJsZW5kRnVuYyhFLF8pe3RoaXMuVCgpO2NvbnN0IFI9dGhpcy5zdGF0ZXMuYmxlbmRGdW5jU2VwYXJhdGU7UlswXT09PUUmJlJbMl09PT1FJiZSWzFdPT09XyYmUlszXT09PV98fChSWzBdPUUsUlsxXT1fLFJbMl09RSxSWzNdPV8sdGhpcy5fLmJsZW5kRnVuYyhFLF8pKX0sYmxlbmRGdW5jU2VwYXJhdGUoRSxfLFIsVCl7dGhpcy5UKCk7Y29uc3QgQT10aGlzLnN0YXRlcy5ibGVuZEZ1bmNTZXBhcmF0ZTtBWzBdPT09RSYmQVsxXT09PV8mJkFbMl09PT1SJiZBWzNdPT09VHx8KEFbMF09RSxBWzFdPV8sQVsyXT1SLEFbM109VCx0aGlzLl8uYmxlbmRGdW5jU2VwYXJhdGUoRSxfLFIsVCkpfSxjbGVhckNvbG9yKEUsXyxSLFQpe3RoaXMuVCgpO2NvbnN0IEE9dGhpcy5zdGF0ZXMuY2xlYXJDb2xvcjtBWzBdPT09RSYmQVsxXT09PV8mJkFbMl09PT1SJiZBWzNdPT09VHx8KEFbMF09RSxBWzFdPV8sQVsyXT1SLEFbM109VCx0aGlzLl8uY2xlYXJDb2xvcihFLF8sUixUKSl9LGNsZWFyRGVwdGgoRSl7dGhpcy5UKCk7Y29uc3QgXz10aGlzLnN0YXRlcy5jbGVhckRlcHRoO19bMF0hPT1FJiYoX1swXT1FLHRoaXMuXy5jbGVhckRlcHRoKEUpKX0sY2xlYXJTdGVuY2lsKEUpe3RoaXMuVCgpO2NvbnN0IF89dGhpcy5zdGF0ZXMuY2xlYXJTdGVuY2lsO19bMF0hPT1FJiYoX1swXT1FLHRoaXMuXy5jbGVhclN0ZW5jaWwoRSkpfSxjb2xvck1hc2soRSxfLFIsVCl7dGhpcy5UKCk7Y29uc3QgQT10aGlzLnN0YXRlcy5jb2xvck1hc2s7QVswXT09PUUmJkFbMV09PT1fJiZBWzJdPT09UiYmQVszXT09PVR8fChBWzBdPUUsQVsxXT1fLEFbMl09UixBWzNdPVQsdGhpcy5fLmNvbG9yTWFzayhFLF8sUixUKSl9LGN1bGxGYWNlKEUpe3RoaXMuVCgpO2NvbnN0IF89dGhpcy5zdGF0ZXMuY3VsbEZhY2U7X1swXSE9PUUmJihfWzBdPUUsdGhpcy5fLmN1bGxGYWNlKEUpKX0sZGVwdGhGdW5jKEUpe3RoaXMuVCgpO2NvbnN0IF89dGhpcy5zdGF0ZXMuZGVwdGhGdW5jO19bMF0hPT1FJiYoX1swXT1FLHRoaXMuXy5kZXB0aEZ1bmMoRSkpfSxkZXB0aE1hc2soRSl7dGhpcy5UKCk7Y29uc3QgXz10aGlzLnN0YXRlcy5kZXB0aE1hc2s7X1swXSE9PUUmJihfWzBdPUUsdGhpcy5fLmRlcHRoTWFzayhFKSl9LGRlcHRoUmFuZ2UoRSxfKXt0aGlzLlQoKTtjb25zdCBSPXRoaXMuc3RhdGVzLmRlcHRoUmFuZ2U7UlswXT09PUUmJlJbMV09PT1ffHwoUlswXT1FLFJbMV09Xyx0aGlzLl8uZGVwdGhSYW5nZShFLF8pKX0sZGlzYWJsZShFKXt0aGlzLlQoKTtjb25zdCBfPXRoaXMuc3RhdGVzLmNhcGFiaWxpdGllcztfW0VdJiYoX1tFXT0hMSx0aGlzLl8uZGlzYWJsZShFKSl9LGVuYWJsZShFKXt0aGlzLlQoKTtjb25zdCBfPXRoaXMuc3RhdGVzLmNhcGFiaWxpdGllcztfW0VdfHwoX1tFXT0hMCx0aGlzLl8uZW5hYmxlKEUpKX0sZnJvbnRGYWNlKEUpe3RoaXMuVCgpO2NvbnN0IF89dGhpcy5zdGF0ZXMuZnJvbnRGYWNlO19bMF0hPT1FJiYoX1swXT1FLHRoaXMuXy5mcm9udEZhY2UoRSkpfSxoaW50KEUsXyl7dGhpcy5UKCk7Y29uc3QgUj10aGlzLnN0YXRlcy5oaW50O1JbRV1bMF0hPT1fJiYoUltFXVswXT1fLHRoaXMuXy5oaW50KEUsXykpfSxsaW5lV2lkdGgoRSl7dGhpcy5UKCk7Y29uc3QgXz10aGlzLnN0YXRlcy5saW5lV2lkdGg7X1swXSE9PUUmJihfWzBdPUUsdGhpcy5fLmxpbmVXaWR0aChFKSl9LHBpeGVsU3RvcmVpKEUsXyl7dGhpcy5UKCk7Y29uc3QgUj10aGlzLnN0YXRlcy5waXhlbFN0b3JlaTtSW0VdIT09XyYmKFJbRV0mJihSW0VdWzBdPV8pLHRoaXMuXy5waXhlbFN0b3JlaShFLF8pKX0scG9seWdvbk9mZnNldChFLF8pe3RoaXMuVCgpO2NvbnN0IFI9dGhpcy5zdGF0ZXMucG9seWdvbk9mZnNldDtSWzBdPT09RSYmUlsxXT09PV98fChSWzBdPUUsUlsxXT1fLHRoaXMuXy5wb2x5Z29uT2Zmc2V0KEUsXykpfSxzYW1wbGVDb3ZlcmFnZShFLF8pe3RoaXMuVCgpO2NvbnN0IFI9dGhpcy5zdGF0ZXMuc2FtcGxlQ292ZXJhZ2U7UlswXT09PUUmJlJbMV09PT1ffHwoUlswXT1FLFJbMV09Xyx0aGlzLl8uc2FtcGxlQ292ZXJhZ2UoRSxfKSl9LHN0ZW5jaWxGdW5jKEUsXyxSKXt0aGlzLlQoKTtjb25zdCBUPXRoaXMuc3RhdGVzLnN0ZW5jaWxGdW5jU2VwYXJhdGUsQT10aGlzLl87VFtBLkZST05UXVswXT09PUUmJlRbQS5GUk9OVF1bMV09PT1fJiZUW0EuRlJPTlRdWzJdPT09UiYmVFtBLkJBQ0tdWzBdPT09RSYmVFtBLkJBQ0tdWzFdPT09XyYmVFtBLkJBQ0tdWzJdPT09Unx8KFRbQS5GUk9OVF1bMF09VFtBLkJBQ0tdWzBdPUUsVFtBLkZST05UXVsxXT1UW0EuQkFDS11bMV09XyxUW0EuRlJPTlRdWzJdPVRbQS5CQUNLXVsyXT1SLHRoaXMuXy5zdGVuY2lsRnVuYyhFLF8sUikpfSxzdGVuY2lsRnVuY1NlcGFyYXRlKEUsXyxSLFQpe2lmKHRoaXMuVCgpLEU9PT10aGlzLl8uRlJPTlRfQU5EX0JBQ0spcmV0dXJuIHZvaWQgdGhpcy5zdGVuY2lsRnVuYyhfLFIsVCk7Y29uc3QgQT10aGlzLnN0YXRlcy5zdGVuY2lsRnVuY1NlcGFyYXRlO0FbRV1bMF09PT1fJiZBW0VdWzFdPT09UiYmQVtFXVsyXT09PVR8fChBW0VdWzBdPV8sQVtFXVsxXT1SLEFbRV1bMl09VCx0aGlzLl8uc3RlbmNpbEZ1bmNTZXBhcmF0ZShFLF8sUixUKSl9LHN0ZW5jaWxNYXNrKEUpe3RoaXMuVCgpO2NvbnN0IF89dGhpcy5fLFI9dGhpcy5zdGF0ZXMuc3RlbmNpbE1hc2tTZXBhcmF0ZTtSW18uRlJPTlRdWzBdPT09RSYmUltfLkJBQ0tdWzBdPT09RXx8KFJbXy5GUk9OVF1bMF09RSxSW18uQkFDS11bMF09RSx0aGlzLl8uc3RlbmNpbE1hc2soRSkpfSxzdGVuY2lsTWFza1NlcGFyYXRlKEUsXyl7aWYodGhpcy5UKCksRT09PXRoaXMuXy5GUk9OVF9BTkRfQkFDSylyZXR1cm4gdm9pZCB0aGlzLnN0ZW5jaWxNYXNrKF8pO2NvbnN0IFI9dGhpcy5zdGF0ZXMuc3RlbmNpbE1hc2tTZXBhcmF0ZTtSW0VdWzBdIT09XyYmKFJbRV1bMF09Xyx0aGlzLl8uc3RlbmNpbE1hc2tTZXBhcmF0ZShFLF8pKX0sc3RlbmNpbE9wKEUsXyxSKXt0aGlzLlQoKTtjb25zdCBUPXRoaXMuc3RhdGVzLnN0ZW5jaWxPcFNlcGFyYXRlLEE9dGhpcy5fO1RbQS5GUk9OVF1bMF09PT1FJiZUW0EuRlJPTlRdWzFdPT09XyYmVFtBLkZST05UXVsyXT09PVImJlRbQS5CQUNLXVswXT09PUUmJlRbQS5CQUNLXVsxXT09PV8mJlRbQS5CQUNLXVsyXT09PVJ8fChUW0EuRlJPTlRdWzBdPVRbQS5CQUNLXVswXT1FLFRbQS5GUk9OVF1bMV09VFtBLkJBQ0tdWzFdPV8sVFtBLkZST05UXVsyXT1UW0EuQkFDS11bMl09Uix0aGlzLl8uc3RlbmNpbE9wKEUsXyxSKSl9LHN0ZW5jaWxPcFNlcGFyYXRlKEUsXyxSLFQpe2lmKHRoaXMuVCgpLEU9PT10aGlzLl8uRlJPTlRfQU5EX0JBQ0spcmV0dXJuIHZvaWQgdGhpcy5zdGVuY2lsT3AoXyxSLFQpO2NvbnN0IEE9dGhpcy5zdGF0ZXMuc3RlbmNpbE9wU2VwYXJhdGU7QVtFXVswXT09PV8mJkFbRV1bMV09PT1SJiZBW0VdWzJdPT09VHx8KEFbRV1bMF09XyxBW0VdWzFdPVIsQVtFXVsyXT1ULHRoaXMuXy5zdGVuY2lsT3BTZXBhcmF0ZShFLF8sUixUKSl9LGJpbmRGcmFtZWJ1ZmZlcihFLF8pe3RoaXMuVCgpO2NvbnN0IFI9dGhpcy5zdGF0ZXMuZnJhbWVidWZmZXI7UltFXSE9PV8mJihSW0VdPV8sdGhpcy5fLmJpbmRGcmFtZWJ1ZmZlcihFLF8pKX0sYmluZFJlbmRlcmJ1ZmZlcihFLF8pe3RoaXMuVCgpO2NvbnN0IFI9dGhpcy5zdGF0ZXMucmVuZGVyYnVmZmVyO1JbRV0hPT1fJiYoUltFXT1fLHRoaXMuXy5iaW5kUmVuZGVyYnVmZmVyKEUsXykpfSxiaW5kVGV4dHVyZShFLF8pe3RoaXMuVCgpO2NvbnN0IFI9dGhpcy5zdGF0ZXMudGV4dHVyZXMsVD0tMSE9PVIuYWN0aXZlP1IuYWN0aXZlLTMzOTg0Oi0xO1IudW5pdHNbVF1bRV09Xyx0aGlzLl8uYmluZFRleHR1cmUoRSxfKX0sYWN0aXZlVGV4dHVyZShFKXt0aGlzLlQoKTtjb25zdCBfPXRoaXMuXyxSPXRoaXMuc3RhdGVzLnRleHR1cmVzLFQ9Ui5hY3RpdmU7Ui5hY3RpdmU9RSxfLmFjdGl2ZVRleHR1cmUoRSksLTE9PT1UJiYoUi51bml0c1tFLTMzOTg0XVtfLlRFWFRVUkVfMkRdPVIudW5pdHNbLTFdW18uVEVYVFVSRV8yRF0sUi51bml0c1tFLTMzOTg0XVtfLlRFWFRVUkVfQ1VCRV9NQVBdPVIudW5pdHNbLTFdW18uVEVYVFVSRV9DVUJFX01BUF0sUi51bml0c1stMV1bXy5URVhUVVJFXzJEXT1udWxsLFIudW5pdHNbLTFdW18uVEVYVFVSRV9DVUJFX01BUF09bnVsbCl9LHVzZVByb2dyYW0oRSl7dGhpcy5UKCk7Y29uc3QgXz10aGlzLnN0YXRlcztfLnByb2dyYW0hPT1FJiYoXy5wcm9ncmFtPUUsdGhpcy5fLnVzZVByb2dyYW0oRSkpfSxiaW5kQnVmZmVyKEUsXyl7dGhpcy5UKCk7Y29uc3QgUj10aGlzLl8sVD10aGlzLnN0YXRlcztpZihFPT09Ui5FTEVNRU5UX0FSUkFZX0JVRkZFUil7aWYoVC5lbGVtZW50QXJyYXlCdWZmZXI9PT1fKXJldHVybjtULmVsZW1lbnRBcnJheUJ1ZmZlcj1ffWVsc2V7aWYoVC5hcnJheUJ1ZmZlcj09PV8pcmV0dXJuO1QuYXJyYXlCdWZmZXI9X31SLmJpbmRCdWZmZXIoRSxfKX0sdmVydGV4QXR0cmliUG9pbnRlcihFLF8sUixULEEsdCl7dGhpcy5UKCk7Y29uc3Qgcj1bRSxfLFIsVCxBLHRdO3RoaXMuc3RhdGVzLmF0dHJpYnV0ZXNbRV18fCh0aGlzLnN0YXRlcy5hdHRyaWJ1dGVzW0VdPXtlbmFibGU6ITB9KTtjb25zdCBOPXRoaXMuc3RhdGVzLmF0dHJpYnV0ZXNbRV07cmV0dXJuIE4uYnVmZmVyPXRoaXMuc3RhdGVzLmFycmF5QnVmZmVyLE4uYXJncz1yLHRoaXMuXy52ZXJ0ZXhBdHRyaWJQb2ludGVyKEUsXyxSLFQsQSx0KX19LHtUKCl7Y29uc3QgRT10aGlzLl87aWYoRS5OJiZFLk4hPT10aGlzKXtjb25zdCBfPUUuTjt0aGlzLmkoXy5zdGF0ZXMpLEUuTj10aGlzfUUuTj10aGlzfSxpKEUpe2NvbnN0IF89dGhpcy5zdGF0ZXMsUj10aGlzLl87Zm9yKGNvbnN0IFQgaW4gXylpZihcImNhcGFiaWxpdGllc1wiIT09VCYmXCJ0ZXh0dXJlc1wiIT09VCYmXCJhdHRyaWJ1dGVzXCIhPT1UJiZcImFycmF5QnVmZmVyXCIhPT1UJiZcImVsZW1lbnRBcnJheUJ1ZmZlclwiIT09VClpZihcInByb2dyYW1cIj09PVQpXy5wcm9ncmFtIT09RS5wcm9ncmFtJiZSLnVzZVByb2dyYW0oXy5wcm9ncmFtKTtlbHNlIGlmKFwiZnJhbWVidWZmZXJcIj09PVQpZm9yKGNvbnN0IEEgaW4gX1tUXSlfW1RdW0FdIT09RVtUXVtBXSYmUi5iaW5kRnJhbWVidWZmZXIoK0EsX1tUXVtBXSk7ZWxzZSBpZihcInJlbmRlcmJ1ZmZlclwiPT09VClmb3IoY29uc3QgQSBpbiBfW1RdKV9bVF1bQV0hPT1FW1RdW0FdJiZSLmJpbmRSZW5kZXJidWZmZXIoK0EsX1tUXVtBXSk7ZWxzZSBpZighTihfW1RdLEVbVF0pKWlmKEFycmF5LmlzQXJyYXkoRVtUXSkpUltUXSguLi5fW1RdKTtlbHNlIGZvcihjb25zdCBBIGluIF9bVF0pTihfW1RdW0FdLEVbVF1bQV0pfHxSW1RdKCtBLC4uLl9bVF1bQV0pO2Zvcihjb25zdCBUIGluIF8uY2FwYWJpbGl0aWVzKV8uY2FwYWJpbGl0aWVzW1RdIT09RS5jYXBhYmlsaXRpZXNbVF0mJlJbXy5jYXBhYmlsaXRpZXNbVF0/XCJlbmFibGVcIjpcImRpc2FibGVcIl0oK1QpO2NvbnN0IFQ9Xy50ZXh0dXJlcyxBPUUudGV4dHVyZXMsdD1ULnVuaXRzLHI9QS51bml0cyxlPVQuYWN0aXZlLVIuVEVYVFVSRTA7Zm9yKGxldCBFPTA7RTx0Lmxlbmd0aDtFKyspRT09PWV8fHRbRV1bUi5URVhUVVJFXzJEXT09PXJbRV1bUi5URVhUVVJFXzJEXSYmdFtFXVtSLlRFWFRVUkVfQ1VCRV9NQVBdPT09cltFXVtSLlRFWFRVUkVfQ1VCRV9NQVBdfHwoUi5hY3RpdmVUZXh0dXJlKFIuVEVYVFVSRTArRSksUi5iaW5kVGV4dHVyZShSLlRFWFRVUkVfMkQsdFtFXVtSLlRFWFRVUkVfMkRdKSxSLmJpbmRUZXh0dXJlKFIuVEVYVFVSRV9DVUJFX01BUCx0W0VdW1IuVEVYVFVSRV9DVUJFX01BUF0pKTtpZihULmFjdGl2ZT4tMSl7Y29uc3QgRT10W2VdO0VbUi5URVhUVVJFXzJEXT09PXJbZV1bUi5URVhUVVJFXzJEXSYmRVtSLlRFWFRVUkVfQ1VCRV9NQVBdPT09cltlXVtSLlRFWFRVUkVfQ1VCRV9NQVBdfHwoUi5hY3RpdmVUZXh0dXJlKFQuYWN0aXZlKSxSLmJpbmRUZXh0dXJlKFIuVEVYVFVSRV8yRCxFW1IuVEVYVFVSRV8yRF0pLFIuYmluZFRleHR1cmUoUi5URVhUVVJFX0NVQkVfTUFQLEVbUi5URVhUVVJFX0NVQkVfTUFQXSkpfWNvbnN0IGk9Xy5hdHRyaWJ1dGVzLEk9RS5hdHRyaWJ1dGVzO2Zvcihjb25zdCBFIGluIGkpSVtFXSYmaVtFXS5idWZmZXI9PT1JW0VdLmJ1ZmZlciYmTihpW0VdLmFyZ3MsSVtFXS5hcmdzKXx8aVtFXS5idWZmZXImJihSLmJpbmRCdWZmZXIoUi5BUlJBWV9CVUZGRVIsaVtFXS5idWZmZXIpLFIudmVydGV4QXR0cmliUG9pbnRlciguLi5pW0VdLmFyZ3MpLGlbRV0uZW5hYmxlP1IuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaVtFXS5hcmdzWzBdKTpSLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheShpW0VdLmFyZ3NbMF0pKTtSLmJpbmRCdWZmZXIoUi5BUlJBWV9CVUZGRVIsXy5hcnJheUJ1ZmZlciksUi5iaW5kQnVmZmVyKFIuRUxFTUVOVF9BUlJBWV9CVUZGRVIsXy5lbGVtZW50QXJyYXlCdWZmZXIpfX0pLF8oVC5wcm90b3R5cGUse2NvbXByZXNzZWRUZXhJbWFnZTJEKEUsXyxSLFQsQSx0LHIpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uY29tcHJlc3NlZFRleEltYWdlMkQoRSxfLFIsVCxBLHQscil9LGNvcHlUZXhJbWFnZTJEKEUsXyxSLFQsQSx0LHIsTil7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy5jb3B5VGV4SW1hZ2UyRChFLF8sUixULEEsdCxyLE4pfSxjb3B5VGV4U3ViSW1hZ2UyRChFLF8sUixULEEsdCxyLE4pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8uY29weVRleFN1YkltYWdlMkQoRSxfLFIsVCxBLHQscixOKX0sY3JlYXRlVGV4dHVyZSgpe3JldHVybiB0aGlzLl8uY3JlYXRlVGV4dHVyZSgpfSxkZWxldGVUZXh0dXJlKEUpe3JldHVybiB0aGlzLl8uZGVsZXRlVGV4dHVyZShFKX0sZ2VuZXJhdGVNaXBtYXAoRSl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy5nZW5lcmF0ZU1pcG1hcChFKX0sZ2V0VGV4UGFyYW1ldGVyKEUsXyl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy5nZXRUZXhQYXJhbWV0ZXIoRSxfKX0saXNUZXh0dXJlKEUpe3JldHVybiB0aGlzLl8uaXNUZXh0dXJlKEUpfSx0ZXhJbWFnZTJEKC4uLkUpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udGV4SW1hZ2UyRCguLi5FKX0sdGV4U3ViSW1hZ2UyRChFKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnRleFN1YkltYWdlMkQoLi4uRSl9LHRleFBhcmFtZXRlcmYoRSxfLFIpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udGV4UGFyYW1ldGVyZihFLF8sUil9LHRleFBhcmFtZXRlcmkoRSxfLFIpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udGV4UGFyYW1ldGVyaShFLF8sUil9fSksXyhULnByb3RvdHlwZSx7YmluZEF0dHJpYkxvY2F0aW9uKEUsXyxSKXtyZXR1cm4gdGhpcy5fLmJpbmRBdHRyaWJMb2NhdGlvbihFLF8sUil9LGVuYWJsZVZlcnRleEF0dHJpYkFycmF5KEUpe3JldHVybiB0aGlzLlQoKSx0aGlzLnN0YXRlcy5hdHRyaWJ1dGVzW0VdfHwodGhpcy5zdGF0ZXMuYXR0cmlidXRlc1tFXT17fSksdGhpcy5zdGF0ZXMuYXR0cmlidXRlc1tFXS5lbmFibGU9ITAsdGhpcy5fLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KEUpfSxkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoRSl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuc3RhdGVzLmF0dHJpYnV0ZXNbRV18fCh0aGlzLnN0YXRlcy5hdHRyaWJ1dGVzW0VdPXt9KSx0aGlzLnN0YXRlcy5hdHRyaWJ1dGVzW0VdLmVuYWJsZT0hMSx0aGlzLl8uZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KEUpfSxnZXRBY3RpdmVBdHRyaWIoRSxfKXtyZXR1cm4gdGhpcy5fLmdldEFjdGl2ZUF0dHJpYihFLF8pfSxnZXRBY3RpdmVVbmlmb3JtKEUsXyl7cmV0dXJuIHRoaXMuXy5nZXRBY3RpdmVVbmlmb3JtKEUsXyl9LGdldEF0dHJpYkxvY2F0aW9uKEUsXyl7cmV0dXJuIHRoaXMuXy5nZXRBdHRyaWJMb2NhdGlvbihFLF8pfSxnZXRVbmlmb3JtTG9jYXRpb24oRSxfKXtyZXR1cm4gdGhpcy5fLmdldFVuaWZvcm1Mb2NhdGlvbihFLF8pfSxnZXRWZXJ0ZXhBdHRyaWIoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmdldFZlcnRleEF0dHJpYihFLF8pfSxnZXRWZXJ0ZXhBdHRyaWJPZmZzZXQoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLmdldFZlcnRleEF0dHJpYk9mZnNldChFLF8pfSx1bmlmb3JtTWF0cml4MmZ2KEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm1NYXRyaXgyZnYoRSxfLFIpfSx1bmlmb3JtTWF0cml4M2Z2KEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm1NYXRyaXgzZnYoRSxfLFIpfSx1bmlmb3JtTWF0cml4NGZ2KEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm1NYXRyaXg0ZnYoRSxfLFIpfSx1bmlmb3JtMWYoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0xZihFLF8pfSx1bmlmb3JtMWZ2KEUsXyl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy51bmlmb3JtMWZ2KEUsXyl9LHVuaWZvcm0xaShFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udW5pZm9ybTFpKEUsXyl9LHVuaWZvcm0xaXYoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0xaXYoRSxfKX0sdW5pZm9ybTJmKEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0yZihFLF8sUil9LHVuaWZvcm0yZnYoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0yZnYoRSxfKX0sdW5pZm9ybTJpKEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0yaShFLF8sUil9LHVuaWZvcm0yaXYoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0yaXYoRSxfKX0sdW5pZm9ybTNmKEUsXyxSLFQpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udW5pZm9ybTNmKEUsXyxSLFQpfSx1bmlmb3JtM2Z2KEUsXyl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy51bmlmb3JtM2Z2KEUsXyl9LHVuaWZvcm0zaShFLF8sUixUKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm0zaShFLF8sUixUKX0sdW5pZm9ybTNpdihFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udW5pZm9ybTNpdihFLF8pfSx1bmlmb3JtNGYoRSxfLFIsVCxBKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm00ZihFLF8sUixULEEpfSx1bmlmb3JtNGZ2KEUsXyl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy51bmlmb3JtNGZ2KEUsXyl9LHVuaWZvcm00aShFLF8sUixULEEpe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udW5pZm9ybTRpKEUsXyxSLFQsQSl9LHVuaWZvcm00aXYoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnVuaWZvcm00aXYoRSxfKX0sdmVydGV4QXR0cmliMWYoRSxfKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnZlcnRleEF0dHJpYjFmKEUsXyl9LHZlcnRleEF0dHJpYjJmKEUsXyxSKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnZlcnRleEF0dHJpYjJmKEUsXyxSKX0sdmVydGV4QXR0cmliM2YoRSxfLFIsVCl7cmV0dXJuIHRoaXMuVCgpLHRoaXMuXy52ZXJ0ZXhBdHRyaWIzZihFLF8sUixUKX0sdmVydGV4QXR0cmliNGYoRSxfLFIsVCxBKXtyZXR1cm4gdGhpcy5UKCksdGhpcy5fLnZlcnRleEF0dHJpYjRmKEUsXyxSLFQsQSl9LHZlcnRleEF0dHJpYjFmdihFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udmVydGV4QXR0cmliMWZ2KEUsXyl9LHZlcnRleEF0dHJpYjJmdihFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udmVydGV4QXR0cmliMmZ2KEUsXyl9LHZlcnRleEF0dHJpYjNmdihFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udmVydGV4QXR0cmliM2Z2KEUsXyl9LHZlcnRleEF0dHJpYjRmdihFLF8pe3JldHVybiB0aGlzLlQoKSx0aGlzLl8udmVydGV4QXR0cmliNGZ2KEUsXyl9fSk7ZXhwb3J0e1QgYXMgR0xDb250ZXh0fTtcbiIsImltcG9ydCAqIGFzIG1hcHRhbGtzIGZyb20gJ21hcHRhbGtzJztcclxuaW1wb3J0IHsgR0xDb250ZXh0IH0gZnJvbSAnQG1hcHRhbGtzL2Z1c2lvbmdsJztcclxuXHJcbmNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICByZW5kZXJlciA6ICdnbCcsXHJcbiAgICBhbnRpYWxpYXMgOiB0cnVlLFxyXG4gICAgZXh0ZW5zaW9ucyA6IFtcclxuICAgICAgICAnQU5HTEVfaW5zdGFuY2VkX2FycmF5cycsXHJcbiAgICAgICAgJ09FU190ZXh0dXJlX2Zsb2F0JyxcclxuICAgICAgICAnT0VTX2VsZW1lbnRfaW5kZXhfdWludCcsXHJcbiAgICAgICAgJ09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcydcclxuICAgIF0sXHJcbiAgICBvcHRpb25hbEV4dGVuc2lvbnMgOiBbJ1dFQkdMX2RyYXdfYnVmZmVycycsICdFWFRfc2hhZGVyX3RleHR1cmVfbG9kJywgJ09FU190ZXh0dXJlX2Zsb2F0X2xpbmVhciddLFxyXG4gICAgZm9yY2VSZW5kZXJPblpvb21pbmcgOiB0cnVlLFxyXG4gICAgZm9yY2VSZW5kZXJPbk1vdmluZyA6IHRydWUsXHJcbiAgICBmb3JjZVJlbmRlck9uUm90YXRpbmcgOiB0cnVlXHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBHcm91cEdMTGF5ZXIgZXh0ZW5kcyBtYXB0YWxrcy5MYXllciB7XHJcbiAgICAvKipcclxuICAgICAqIFJlcHJvZHVjZSBhIEdyb3VwR0xMYXllciBmcm9tIGxheWVyJ3MgcHJvZmlsZSBKU09OLlxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBsYXllckpTT04gLSBsYXllcidzIHByb2ZpbGUgSlNPTlxyXG4gICAgICogQHJldHVybiB7R3JvdXBHTExheWVyfVxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqIEBmdW5jdGlvblxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZnJvbUpTT04obGF5ZXJKU09OKSB7XHJcbiAgICAgICAgaWYgKCFsYXllckpTT04gfHwgbGF5ZXJKU09OWyd0eXBlJ10gIT09ICdHcm91cEdMTGF5ZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsYXllcnMgPSBsYXllckpTT05bJ2xheWVycyddLm1hcChqc29uID0+IG1hcHRhbGtzLkxheWVyLmZyb21KU09OKGpzb24pKTtcclxuICAgICAgICByZXR1cm4gbmV3IEdyb3VwR0xMYXllcihsYXllckpTT05bJ2lkJ10sIGxheWVycywgbGF5ZXJKU09OWydvcHRpb25zJ10pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBpZCAgICAtIGxheWVyJ3MgaWRcclxuICAgICAqIEBwYXJhbSB7TGF5ZXJbXX0gbGF5ZXJzICAgICAgLSBsYXllcnMgdG8gYWRkXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gIFtvcHRpb25zPW51bGxdICAgICAgICAgIC0gY29uc3RydWN0IG9wdGlvbnNcclxuICAgICAqIEBwYXJhbSB7Kn0gIFtvcHRpb25zLio9bnVsbF0gICAgICAgICAgICAgLSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGlkLCBsYXllcnMsIG9wdGlvbnMpIHtcclxuICAgICAgICBzdXBlcihpZCwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5sYXllcnMgPSBsYXllcnMgfHwgW107XHJcbiAgICAgICAgdGhpcy5fY2hlY2tDaGlsZHJlbigpO1xyXG4gICAgICAgIHRoaXMuX2xheWVyTWFwID0ge307XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBuZXcgTGF5ZXIuXHJcbiAgICAgKiBAcGFyYW0ge0xheWVyfSBsYXllciAtIG5ldyBsYXllclxyXG4gICAgICogQHJldHVybnMge0dyb3VwR0xMYXllcn0gdGhpc1xyXG4gICAgICovXHJcbiAgICBhZGRMYXllcihsYXllciwgaWR4KSB7XHJcbiAgICAgICAgaWYgKGxheWVyLmdldE1hcCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbGF5ZXIoJHtsYXllci5nZXRJZCgpfSBpcyBhbHJlYWR5IGFkZGVkIG9uIG1hcGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaWR4ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXllcnMucHVzaChsYXllcik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sYXllcnMuc3BsaWNlKGlkeCwgMCwgbGF5ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9jaGVja0NoaWxkcmVuKCk7XHJcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLmdldFJlbmRlcmVyKCk7XHJcbiAgICAgICAgaWYgKCFyZW5kZXJlcikge1xyXG4gICAgICAgICAgICAvLyBub3QgbG9hZGVkIHlldFxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcHJlcGFyZUxheWVyKGxheWVyKTtcclxuICAgICAgICByZW5kZXJlci5zZXRUb1JlZHJhdygpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUxheWVyKGxheWVyKSB7XHJcbiAgICAgICAgaWYgKG1hcHRhbGtzLlV0aWwuaXNTdHJpbmcobGF5ZXIpKSB7XHJcbiAgICAgICAgICAgIGxheWVyID0gdGhpcy5nZXRDaGlsZExheWVyKGxheWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5sYXllcnMuaW5kZXhPZihsYXllcik7XHJcbiAgICAgICAgaWYgKGlkeCA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxheWVyLl9kb1JlbW92ZSgpO1xyXG4gICAgICAgIGxheWVyLm9mZignc2hvdyBoaWRlJywgdGhpcy5fb25MYXllclNob3dIaWRlLCB0aGlzKTtcclxuICAgICAgICBkZWxldGUgdGhpcy5fbGF5ZXJNYXBbbGF5ZXIuZ2V0SWQoKV07XHJcbiAgICAgICAgdGhpcy5sYXllcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnNldFRvUmVkcmF3KCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXQgY2hpbGRyZW4gVGlsZUxheWVyXHJcbiAgICAgKiBAcmV0dXJucyB7VGlsZUxheWVyW119XHJcbiAgICAgKi9cclxuICAgIGdldExheWVycygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sYXllcnM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHBvcnQgdGhlIEdyb3VwVGlsZUxheWVyJ3MgcHJvZmlsZSBqc29uLiA8YnI+XHJcbiAgICAgKiBMYXllcidzIHByb2ZpbGUgaXMgYSBzbmFwc2hvdCBvZiB0aGUgbGF5ZXIgaW4gSlNPTiBmb3JtYXQuIDxicj5cclxuICAgICAqIEl0IGNhbiBiZSB1c2VkIHRvIHJlcHJvZHVjZSB0aGUgaW5zdGFuY2UgYnkgW2Zyb21KU09OXXtAbGluayBMYXllciNmcm9tSlNPTn0gbWV0aG9kXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGxheWVyJ3MgcHJvZmlsZSBKU09OXHJcbiAgICAgKi9cclxuICAgIHRvSlNPTigpIHtcclxuICAgICAgICBjb25zdCBsYXllcnMgPSBbXTtcclxuICAgICAgICBpZiAodGhpcy5sYXllcnMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxheWVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmxheWVyc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmICghbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsYXllciAmJiBsYXllci50b0pTT04pIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllcnMucHVzaChsYXllci50b0pTT04oKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgcHJvZmlsZSA9IHtcclxuICAgICAgICAgICAgJ3R5cGUnOiB0aGlzLmdldEpTT05UeXBlKCksXHJcbiAgICAgICAgICAgICdpZCc6IHRoaXMuZ2V0SWQoKSxcclxuICAgICAgICAgICAgJ2xheWVycycgOiBsYXllcnMsXHJcbiAgICAgICAgICAgICdvcHRpb25zJzogdGhpcy5jb25maWcoKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHByb2ZpbGU7XHJcbiAgICB9XHJcblxyXG4gICAgb25Mb2FkRW5kKCkge1xyXG4gICAgICAgIHRoaXMubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlTGF5ZXIobGF5ZXIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHN1cGVyLm9uTG9hZEVuZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIF9wcmVwYXJlTGF5ZXIobGF5ZXIpIHtcclxuICAgICAgICBjb25zdCBtYXAgPSB0aGlzLmdldE1hcCgpO1xyXG4gICAgICAgIHRoaXMuX2xheWVyTWFwW2xheWVyLmdldElkKCldID0gbGF5ZXI7XHJcbiAgICAgICAgbGF5ZXJbJ19jYW52YXMnXSA9IHRoaXMuZ2V0UmVuZGVyZXIoKS5jYW52YXM7XHJcbiAgICAgICAgbGF5ZXJbJ19iaW5kTWFwJ10obWFwKTtcclxuICAgICAgICBsYXllci5vbmNlKCdyZW5kZXJlcmNyZWF0ZScsIHRoaXMuX29uQ2hpbGRSZW5kZXJlckNyZWF0ZSwgdGhpcyk7XHJcbiAgICAgICAgbGF5ZXIubG9hZCgpO1xyXG4gICAgICAgIHRoaXMuX2JpbmRDaGlsZExpc3RlbmVycyhsYXllcik7XHJcbiAgICB9XHJcblxyXG4gICAgb25SZW1vdmUoKSB7XHJcbiAgICAgICAgdGhpcy5sYXllcnMuZm9yRWFjaChsYXllciA9PiB7XHJcbiAgICAgICAgICAgIGxheWVyLl9kb1JlbW92ZSgpO1xyXG4gICAgICAgICAgICBsYXllci5vZmYoJ3Nob3cgaGlkZScsIHRoaXMuX29uTGF5ZXJTaG93SGlkZSwgdGhpcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuX2xheWVyTWFwO1xyXG4gICAgICAgIHN1cGVyLm9uUmVtb3ZlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2hpbGRMYXllcihpZCkge1xyXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJNYXBbaWRdO1xyXG4gICAgICAgIHJldHVybiBsYXllciB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIF9iaW5kQ2hpbGRMaXN0ZW5lcnMobGF5ZXIpIHtcclxuICAgICAgICBsYXllci5vbignc2hvdyBoaWRlJywgdGhpcy5fb25MYXllclNob3dIaWRlLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBfb25MYXllclNob3dIaWRlKCkge1xyXG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5nZXRSZW5kZXJlcigpO1xyXG4gICAgICAgIGlmIChyZW5kZXJlcikge1xyXG4gICAgICAgICAgICByZW5kZXJlci5zZXRUb1JlZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfb25DaGlsZFJlbmRlcmVyQ3JlYXRlKGUpIHtcclxuICAgICAgICBlLnJlbmRlcmVyLmNsZWFyQ2FudmFzID0gZW1wdHk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNWaXNpYmxlKCkge1xyXG4gICAgICAgIGlmICghc3VwZXIuaXNWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMubGF5ZXJzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbltpXS5pc1Zpc2libGUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9jaGVja0NoaWxkcmVuKCkge1xyXG4gICAgICAgIGNvbnN0IGlkcyA9IHt9O1xyXG4gICAgICAgIHRoaXMubGF5ZXJzLmZvckVhY2gobGF5ZXIgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBsYXllcklkID0gbGF5ZXIuZ2V0SWQoKTtcclxuICAgICAgICAgICAgaWYgKGlkc1tsYXllcklkXSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBEdXBsaWNhdGUgY2hpbGQgbGF5ZXIgaWQgKCR7bGF5ZXJJZH0pIGluIHRoZSBHcm91cEdMTGF5ZXIgKCR7dGhpcy5nZXRJZCgpfSlgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlkc1tsYXllcklkXSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuR3JvdXBHTExheWVyLm1lcmdlT3B0aW9ucyhvcHRpb25zKTtcclxuXHJcbkdyb3VwR0xMYXllci5yZWdpc3RlckpTT05UeXBlKCdHcm91cEdMTGF5ZXInKTtcclxuXHJcbmNsYXNzIFJlbmRlcmVyIGV4dGVuZHMgbWFwdGFsa3MucmVuZGVyZXIuQ2FudmFzUmVuZGVyZXIge1xyXG5cclxuICAgIG9uQWRkKCkge1xyXG4gICAgICAgIHN1cGVyLm9uQWRkKCk7XHJcbiAgICAgICAgdGhpcy5wcmVwYXJlQ2FudmFzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVuZGVyKC4uLmFyZ3MpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZ2V0TWFwKCkgfHwgIXRoaXMubGF5ZXIuaXNWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnByZXBhcmVSZW5kZXIoKTtcclxuICAgICAgICB0aGlzLnByZXBhcmVDYW52YXMoKTtcclxuICAgICAgICB0aGlzLmZvckVhY2hSZW5kZXJlcigocmVuZGVyZXIsIGxheWVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghbGF5ZXIuaXNWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBnbCA9IHJlbmRlcmVyLmdsO1xyXG4gICAgICAgICAgICBpZiAoZ2wgJiYgKGdsIGluc3RhbmNlb2YgR0xDb250ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgZ2wuY2xlYXIoZ2wuU1RFTkNJTF9CVUZGRVJfQklUKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZW5kZXJlci5yZW5kZXIuYXBwbHkocmVuZGVyZXIsIGFyZ3MpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXNbJ190b1JlZHJhdyddID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd09uSW50ZXJhY3RpbmcoLi4uYXJncykge1xyXG4gICAgICAgIGlmICghdGhpcy5nZXRNYXAoKSB8fCAhdGhpcy5sYXllci5pc1Zpc2libGUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZm9yRWFjaFJlbmRlcmVyKChyZW5kZXJlciwgbGF5ZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKCFsYXllci5pc1Zpc2libGUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGdsID0gcmVuZGVyZXIuZ2w7XHJcbiAgICAgICAgICAgIGlmIChnbCAmJiAoZ2wgaW5zdGFuY2VvZiBHTENvbnRleHQpKSB7XHJcbiAgICAgICAgICAgICAgICBnbC5jbGVhcihnbC5TVEVOQ0lMX0JVRkZFUl9CSVQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlbmRlcmVyLmRyYXdPbkludGVyYWN0aW5nLmFwcGx5KHJlbmRlcmVyLCBhcmdzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzWydfdG9SZWRyYXcnXSA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRlc3RJZk5lZWRSZWRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXNbJ190b1JlZHJhdyddKSB7XHJcbiAgICAgICAgICAgIHRoaXNbJ190b1JlZHJhdyddID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsYXllcnMgPSB0aGlzLmxheWVyLmdldExheWVycygpO1xyXG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgbGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlcmVyID0gbGF5ZXIuZ2V0UmVuZGVyZXIoKTtcclxuICAgICAgICAgICAgaWYgKHJlbmRlcmVyICYmIHJlbmRlcmVyLnRlc3RJZk5lZWRSZWRyYXcoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUmVuZGVyQ29tcGxldGUoKSB7XHJcbiAgICAgICAgY29uc3QgbGF5ZXJzID0gdGhpcy5sYXllci5nZXRMYXllcnMoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVycykge1xyXG4gICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGxheWVyLmdldFJlbmRlcmVyKCk7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJlciAmJiAhcmVuZGVyZXIuaXNSZW5kZXJDb21wbGV0ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgbXVzdFJlbmRlck9uSW50ZXJhY3RpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgbGF5ZXJzID0gdGhpcy5sYXllci5nZXRMYXllcnMoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGxheWVyIG9mIGxheWVycykge1xyXG4gICAgICAgICAgICBjb25zdCByZW5kZXJlciA9IGxheWVyLmdldFJlbmRlcmVyKCk7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJlciAmJiByZW5kZXJlci5tdXN0UmVuZGVyT25JbnRlcmFjdGluZygpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDYW52YXNVcGRhdGVkKCkge1xyXG4gICAgICAgIGNvbnN0IGxheWVycyA9IHRoaXMubGF5ZXIuZ2V0TGF5ZXJzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBsYXllciBvZiBsYXllcnMpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBsYXllci5nZXRSZW5kZXJlcigpO1xyXG4gICAgICAgICAgICBpZiAocmVuZGVyZXIgJiYgcmVuZGVyZXIuaXNDYW52YXNVcGRhdGVkKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpc0JsYW5rKCkge1xyXG4gICAgICAgIGNvbnN0IGxheWVycyA9IHRoaXMubGF5ZXIuZ2V0TGF5ZXJzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBsYXllciBvZiBsYXllcnMpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBsYXllci5nZXRSZW5kZXJlcigpO1xyXG4gICAgICAgICAgICBpZiAocmVuZGVyZXIgJiYgIXJlbmRlcmVyLmlzQmxhbmsoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNvbnRleHQoKSB7XHJcbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmxheWVyO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBsYXllci5vcHRpb25zWydnbE9wdGlvbnMnXSB8fCB7XHJcbiAgICAgICAgICAgIGFscGhhOiB0cnVlLFxyXG4gICAgICAgICAgICBkZXB0aDogdHJ1ZSxcclxuICAgICAgICAgICAgc3RlbmNpbCA6IHRydWVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGF0dHJpYnV0ZXMucHJlc2VydmVEcmF3aW5nQnVmZmVyID0gdHJ1ZTtcclxuICAgICAgICBhdHRyaWJ1dGVzLmFudGlhbGlhcyA9IGxheWVyLm9wdGlvbnNbJ2FudGlhbGlhcyddO1xyXG4gICAgICAgIHRoaXMuZ2xPcHRpb25zID0gYXR0cmlidXRlcztcclxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2wgPSB0aGlzLl9jcmVhdGVHTENvbnRleHQodGhpcy5jYW52YXMsIGF0dHJpYnV0ZXMpOyAgICAgICAgLy8gdGhpcy5nbCA9IGdsO1xyXG4gICAgICAgIHRoaXMuX2luaXRHTChnbCk7XHJcbiAgICAgICAgZ2wud3JhcCA9ICgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHTENvbnRleHQodGhpcy5nbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmdsQ3R4ID0gZ2wud3JhcCgpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmdsID0gdGhpcy5nbDtcclxuICAgIH1cclxuXHJcbiAgICBfaW5pdEdMKCkge1xyXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5sYXllcjtcclxuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IGxheWVyLm9wdGlvbnNbJ2V4dGVuc2lvbnMnXTtcclxuICAgICAgICBpZiAoZXh0ZW5zaW9ucykge1xyXG4gICAgICAgICAgICBleHRlbnNpb25zLmZvckVhY2goZXh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbihleHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxFeHRlbnNpb25zID0gbGF5ZXIub3B0aW9uc1snb3B0aW9uYWxFeHRlbnNpb25zJ107XHJcbiAgICAgICAgaWYgKG9wdGlvbmFsRXh0ZW5zaW9ucykge1xyXG4gICAgICAgICAgICBvcHRpb25hbEV4dGVuc2lvbnMuZm9yRWFjaChleHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKGV4dCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmdsLmNsZWFyQ29sb3IoMC4wLCAwLjAsIDAuMCwgMC4wKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhckNhbnZhcygpIHtcclxuICAgICAgICBzdXBlci5jbGVhckNhbnZhcygpO1xyXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5nbEN0eDtcclxuICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCBudWxsKTtcclxuXHJcbiAgICAgICAgLy8gb25seSBjbGVhciBtYWluIGZyYW1lYnVmZmVyXHJcbiAgICAgICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCB8IGdsLlNURU5DSUxfQlVGRkVSX0JJVCB8IGdsLkRFUFRIX0JVRkZFUl9CSVQpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICByZXNpemVDYW52YXMoKSB7XHJcbiAgICAgICAgc3VwZXIucmVzaXplQ2FudmFzKCk7XHJcbiAgICAgICAgdGhpcy5nbC52aWV3cG9ydCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmZvckVhY2hSZW5kZXJlcihyZW5kZXJlciA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJlci5jYW52YXMpIHtcclxuICAgICAgICAgICAgICAgIHJlbmRlcmVyLnJlc2l6ZUNhbnZhcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2FudmFzSW1hZ2UoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoUmVuZGVyZXIocmVuZGVyZXIgPT4ge1xyXG4gICAgICAgICAgICByZW5kZXJlci5nZXRDYW52YXNJbWFnZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzdXBlci5nZXRDYW52YXNJbWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGZvckVhY2hSZW5kZXJlcihmbikge1xyXG4gICAgICAgIGNvbnN0IGxheWVycyA9IHRoaXMubGF5ZXIuZ2V0TGF5ZXJzKCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBsYXllciBvZiBsYXllcnMpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVuZGVyZXIgPSBsYXllci5nZXRSZW5kZXJlcigpO1xyXG4gICAgICAgICAgICBpZiAocmVuZGVyZXIpIHtcclxuICAgICAgICAgICAgICAgIGZuKHJlbmRlcmVyLCBsYXllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2NyZWF0ZUdMQ29udGV4dChjYW52YXMsIG9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBuYW1lcyA9IFsnd2ViZ2wnLCAnZXhwZXJpbWVudGFsLXdlYmdsJ107XHJcbiAgICAgICAgbGV0IGdsID0gbnVsbDtcclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1lbXB0eSAqL1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGdsID0gY2FudmFzLmdldENvbnRleHQobmFtZXNbaV0sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxyXG4gICAgICAgICAgICBpZiAoZ2wpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBnbDtcclxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWVtcHR5ICovXHJcbiAgICB9XHJcblxyXG4gICAgb25SZW1vdmUoKSB7XHJcbiAgICAgICAgLy9yZWdsIGZyYW1lYnVmZmVyIGZvciBwaWNraW5nIGNyZWF0ZWQgYnkgY2hpbGRyZW4gbGF5ZXJzXHJcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzLnBpY2tpbmdGQk8gJiYgdGhpcy5jYW52YXMucGlja2luZ0ZCTy5kZXN0cm95KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLnBpY2tpbmdGQk8uZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzdXBlci5vblJlbW92ZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5Hcm91cEdMTGF5ZXIucmVnaXN0ZXJSZW5kZXJlcignZ2wnLCBSZW5kZXJlcik7XHJcbkdyb3VwR0xMYXllci5yZWdpc3RlclJlbmRlcmVyKCdjYW52YXMnLCBudWxsKTtcclxuXHJcbmZ1bmN0aW9uIGVtcHR5KCkge31cclxuXHJcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgLy8gYXBwZW5kIEdyb3VwR0xMYXllciBvbiBtYXB0YWxrcyBtYW51YWxseVxyXG4gICAgaWYgKHdpbmRvdy5tYXB0YWxrcykgd2luZG93Lm1hcHRhbGtzLkdyb3VwR0xMYXllciA9IEdyb3VwR0xMYXllcjtcclxufVxyXG4iXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsIm1vZHVsZSIsInRoaXMiLCJpc1R5cGVkQXJyYXkiLCJ4IiwiVWludDhBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiZXh0ZW5kIiwiYmFzZSIsIm9wdHMiLCJrZXlzIiwiT2JqZWN0IiwiaSIsImxlbmd0aCIsImVuZGwiLCJkZWNvZGVCNjQiLCJzdHIiLCJhdG9iIiwicmFpc2UiLCJtZXNzYWdlIiwiZXJyb3IiLCJFcnJvciIsImNvbnNvbGUiLCJjaGVjayIsInByZWQiLCJlbmNvbG9uIiwiY2hlY2tQYXJhbWV0ZXIiLCJwYXJhbSIsInBvc3NpYmlsaXRpZXMiLCJqb2luIiwiY2hlY2tJc1R5cGVkQXJyYXkiLCJkYXRhIiwiY2hlY2tUeXBlT2YiLCJ2YWx1ZSIsInR5cGUiLCJjaGVja05vbk5lZ2F0aXZlSW50IiwiY2hlY2tPbmVPZiIsImxpc3QiLCJpbmRleE9mIiwiY29uc3RydWN0b3JLZXlzIiwiY2hlY2tDb25zdHJ1Y3RvciIsIm9iaiIsImZvckVhY2giLCJrZXkiLCJsZWZ0UGFkIiwibiIsIlNoYWRlckZpbGUiLCJuYW1lIiwibGluZXMiLCJpbmRleCIsImhhc0Vycm9ycyIsIlNoYWRlckxpbmUiLCJudW1iZXIiLCJsaW5lIiwiZXJyb3JzIiwiU2hhZGVyRXJyb3IiLCJmaWxlTnVtYmVyIiwibGluZU51bWJlciIsImZpbGUiLCJndWVzc0NvbW1hbmQiLCJzdGFjayIsInRvU3RyaW5nIiwicGF0IiwiZXhlYyIsInBhdDIiLCJndWVzc0NhbGxTaXRlIiwicGFyc2VTb3VyY2UiLCJzb3VyY2UiLCJjb21tYW5kIiwic3BsaXQiLCJmaWxlcyIsInVua25vd24iLCJwdXNoIiwicGFydHMiLCJsaW5lTnVtYmVySW5mbyIsIm5hbWVJbmZvIiwicGFyc2VFcnJvckxvZyIsImVyckxvZyIsInJlc3VsdCIsImVyck1zZyIsInRyaW0iLCJhbm5vdGF0ZUZpbGVzIiwiY2hlY2tTaGFkZXJFcnJvciIsImdsIiwic2hhZGVyIiwiZ2V0U2hhZGVyUGFyYW1ldGVyIiwiQ09NUElMRV9TVEFUVVMiLCJnZXRTaGFkZXJJbmZvTG9nIiwidHlwZU5hbWUiLCJGUkFHTUVOVF9TSEFERVIiLCJjaGVja0NvbW1hbmRUeXBlIiwic3RyaW5ncyIsInN0eWxlcyIsInN0eWxlIiwib2Zmc2V0IiwidG9rZW4iLCJ0b2tlblBhdCIsIk1hdGgiLCJtYXgiLCJkb2N1bWVudCIsIndpbmRvdyIsImNocm9tZSIsImxvZyIsImFwcGx5IiwiY2hlY2tMaW5rRXJyb3IiLCJwcm9ncmFtIiwiZnJhZ1NoYWRlciIsInZlcnRTaGFkZXIiLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImZyYWdQYXJzZSIsInZlcnRQYXJzZSIsImhlYWRlciIsInNhdmVDb21tYW5kUmVmIiwib2JqZWN0IiwiX2NvbW1hbmRSZWYiLCJzYXZlRHJhd0NvbW1hbmRJbmZvIiwidW5pZm9ybXMiLCJhdHRyaWJ1dGVzIiwic3RyaW5nU3RvcmUiLCJpZCIsIl9mcmFnSWQiLCJzdGF0aWMiLCJmcmFnIiwiX3ZlcnRJZCIsInZlcnQiLCJhZGRQcm9wcyIsImRpY3QiLCJzZXQiLCJ1IiwidW5pZm9ybVNldCIsIl91bmlmb3JtU2V0IiwiZHluYW1pYyIsImF0dHJpYnV0ZVNldCIsIl9hdHRyaWJ1dGVTZXQiLCJfaGFzQ291bnQiLCJjb21tYW5kUmFpc2UiLCJjYWxsU2l0ZSIsImNoZWNrQ29tbWFuZCIsImNoZWNrUGFyYW1ldGVyQ29tbWFuZCIsImNoZWNrT3B0aW9uYWwiLCJibG9jayIsImNoZWNrRnJhbWVidWZmZXJGb3JtYXQiLCJhdHRhY2htZW50IiwidGV4Rm9ybWF0cyIsInJiRm9ybWF0cyIsInRleHR1cmUiLCJfdGV4dHVyZSIsImludGVybmFsZm9ybWF0IiwicmVuZGVyYnVmZmVyIiwiX3JlbmRlcmJ1ZmZlciIsImZvcm1hdCIsIkdMX0NMQU1QX1RPX0VER0UiLCJHTF9ORUFSRVNUIiwiR0xfTkVBUkVTVF9NSVBNQVBfTkVBUkVTVCIsIkdMX0xJTkVBUl9NSVBNQVBfTkVBUkVTVCIsIkdMX05FQVJFU1RfTUlQTUFQX0xJTkVBUiIsIkdMX0xJTkVBUl9NSVBNQVBfTElORUFSIiwiR0xfQllURSIsIkdMX1VOU0lHTkVEX0JZVEUiLCJHTF9TSE9SVCIsIkdMX1VOU0lHTkVEX1NIT1JUIiwiR0xfSU5UIiwiR0xfVU5TSUdORURfSU5UIiwiR0xfRkxPQVQiLCJHTF9VTlNJR05FRF9TSE9SVF80XzRfNF80IiwiR0xfVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIkdMX1VOU0lHTkVEX1NIT1JUXzVfNl81IiwiR0xfVU5TSUdORURfSU5UXzI0XzhfV0VCR0wiLCJHTF9IQUxGX0ZMT0FUX09FUyIsIlRZUEVfU0laRSIsInBpeGVsU2l6ZSIsImNoYW5uZWxzIiwiaXNQb3cyIiwidiIsImNoZWNrVGV4dHVyZTJEIiwiaW5mbyIsIm1pcERhdGEiLCJsaW1pdHMiLCJ3Iiwid2lkdGgiLCJoIiwiaGVpZ2h0IiwiYyIsIm1heFRleHR1cmVTaXplIiwid3JhcFMiLCJ3cmFwVCIsIm1pcG1hc2siLCJtaW5GaWx0ZXIiLCJleHRlbnNpb25zIiwibWFnRmlsdGVyIiwiZ2VuTWlwbWFwcyIsIm1pcGltYWdlcyIsImltYWdlcyIsIm13IiwibWgiLCJpbWciLCJjb21wcmVzc2VkIiwicm93U2l6ZSIsImNlaWwiLCJ1bnBhY2tBbGlnbm1lbnQiLCJieXRlTGVuZ3RoIiwiZWxlbWVudCIsImNvcHkiLCJjaGVja1RleHR1cmVDdWJlIiwiZmFjZXMiLCJmYWNlIiwibWlwbWFwcyIsImoiLCJjaGVjayQxIiwib3B0aW9uYWwiLCJwYXJhbWV0ZXIiLCJjb21tYW5kUGFyYW1ldGVyIiwiY29uc3RydWN0b3IiLCJjb21tYW5kVHlwZSIsIm5uaSIsIm9uZU9mIiwic2hhZGVyRXJyb3IiLCJsaW5rRXJyb3IiLCJzYXZlRHJhd0luZm8iLCJmcmFtZWJ1ZmZlckZvcm1hdCIsInRleHR1cmUyRCIsInRleHR1cmVDdWJlIiwiVkFSSUFCTEVfQ09VTlRFUiIsIkRZTl9GVU5DIiwiRHluYW1pY1ZhcmlhYmxlIiwiZXNjYXBlU3RyIiwicmVwbGFjZSIsInNwbGl0UGFydHMiLCJmaXJzdENoYXIiLCJjaGFyQXQiLCJsYXN0Q2hhciIsInN1YnN0ciIsImNvbmNhdCIsInN1YnBhcnRzIiwidG9BY2Nlc3NvclN0cmluZyIsImRlZmluZUR5bmFtaWMiLCJpc0R5bmFtaWMiLCJfcmVnbFR5cGUiLCJ1bmJveCIsInBhdGgiLCJkZWZpbmUiLCJhY2Nlc3NvciIsInJhZiIsIm5leHQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYiIsInNldFRpbWVvdXQiLCJjYW5jZWwiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNsZWFyVGltZW91dCIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwiY3JlYXRlU3RyaW5nU3RvcmUiLCJzdHJpbmdJZHMiLCJzdHJpbmdWYWx1ZXMiLCJjcmVhdGVDYW52YXMiLCJvbkRvbmUiLCJwaXhlbFJhdGlvIiwiY2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImJvcmRlciIsIm1hcmdpbiIsInBhZGRpbmciLCJ0b3AiLCJsZWZ0IiwiYXBwZW5kQ2hpbGQiLCJib2R5IiwicG9zaXRpb24iLCJyZXNpemUiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJib3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyaWdodCIsImJvdHRvbSIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkRlc3Ryb3kiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVDb250ZXh0IiwiY29udGV4dEF0dHJpYnV0ZXMiLCJnZXQiLCJnZXRDb250ZXh0IiwiZSIsImlzSFRNTEVsZW1lbnQiLCJub2RlTmFtZSIsImlzV2ViR0xDb250ZXh0IiwiZHJhd0FycmF5cyIsImRyYXdFbGVtZW50cyIsInBhcnNlRXh0ZW5zaW9ucyIsImlucHV0IiwiQXJyYXkiLCJpc0FycmF5IiwiZ2V0RWxlbWVudCIsImRlc2MiLCJxdWVyeVNlbGVjdG9yIiwicGFyc2VBcmdzIiwiYXJnc18iLCJhcmdzIiwiY29udGFpbmVyIiwib3B0aW9uYWxFeHRlbnNpb25zIiwiZGV2aWNlUGl4ZWxSYXRpbyIsInByb2ZpbGUiLCJlcnIiLCJ0b0xvd2VyQ2FzZSIsImNyZWF0ZUV4dGVuc2lvbkNhY2hlIiwiY29uZmlnIiwidHJ5TG9hZEV4dGVuc2lvbiIsIm5hbWVfIiwiZXh0IiwiZ2V0RXh0ZW5zaW9uIiwicmVzdG9yZSIsImxvb3AiLCJmIiwiR0xfQllURSQxIiwiR0xfVU5TSUdORURfQllURSQyIiwiR0xfU0hPUlQkMSIsIkdMX1VOU0lHTkVEX1NIT1JUJDEiLCJHTF9JTlQkMSIsIkdMX1VOU0lHTkVEX0lOVCQxIiwiR0xfRkxPQVQkMiIsIm5leHRQb3cxNiIsImxvZzIiLCJyIiwic2hpZnQiLCJjcmVhdGVQb29sIiwiYnVmZmVyUG9vbCIsImFsbG9jIiwic3oiLCJiaW4iLCJwb3AiLCJBcnJheUJ1ZmZlciIsImZyZWUiLCJidWYiLCJhbGxvY1R5cGUiLCJzdWJhcnJheSIsImZyZWVUeXBlIiwiYXJyYXkiLCJidWZmZXIiLCJwb29sIiwiemVybyIsIkdMX1NVQlBJWEVMX0JJVFMiLCJHTF9SRURfQklUUyIsIkdMX0dSRUVOX0JJVFMiLCJHTF9CTFVFX0JJVFMiLCJHTF9BTFBIQV9CSVRTIiwiR0xfREVQVEhfQklUUyIsIkdMX1NURU5DSUxfQklUUyIsIkdMX0FMSUFTRURfUE9JTlRfU0laRV9SQU5HRSIsIkdMX0FMSUFTRURfTElORV9XSURUSF9SQU5HRSIsIkdMX01BWF9URVhUVVJFX1NJWkUiLCJHTF9NQVhfVklFV1BPUlRfRElNUyIsIkdMX01BWF9WRVJURVhfQVRUUklCUyIsIkdMX01BWF9WRVJURVhfVU5JRk9STV9WRUNUT1JTIiwiR0xfTUFYX1ZBUllJTkdfVkVDVE9SUyIsIkdMX01BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiR0xfTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiR0xfTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJHTF9NQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTIiwiR0xfTUFYX0NVQkVfTUFQX1RFWFRVUkVfU0laRSIsIkdMX01BWF9SRU5ERVJCVUZGRVJfU0laRSIsIkdMX1ZFTkRPUiIsIkdMX1JFTkRFUkVSIiwiR0xfVkVSU0lPTiIsIkdMX1NIQURJTkdfTEFOR1VBR0VfVkVSU0lPTiIsIkdMX01BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsIkdMX01BWF9DT0xPUl9BVFRBQ0hNRU5UU19XRUJHTCIsIkdMX01BWF9EUkFXX0JVRkZFUlNfV0VCR0wiLCJHTF9URVhUVVJFXzJEIiwiR0xfVEVYVFVSRV9DVUJFX01BUCIsIkdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCIsIkdMX1RFWFRVUkUwIiwiR0xfUkdCQSIsIkdMX0ZMT0FUJDEiLCJHTF9VTlNJR05FRF9CWVRFJDEiLCJHTF9GUkFNRUJVRkZFUiIsIkdMX0ZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiR0xfQ09MT1JfQVRUQUNITUVOVDAiLCJHTF9DT0xPUl9CVUZGRVJfQklUJDEiLCJ3cmFwTGltaXRzIiwibWF4QW5pc290cm9waWMiLCJleHRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMiLCJnZXRQYXJhbWV0ZXIiLCJtYXhEcmF3YnVmZmVycyIsIm1heENvbG9yQXR0YWNobWVudHMiLCJ3ZWJnbF9kcmF3X2J1ZmZlcnMiLCJyZWFkRmxvYXQiLCJvZXNfdGV4dHVyZV9mbG9hdCIsInJlYWRGbG9hdFRleHR1cmUiLCJjcmVhdGVUZXh0dXJlIiwiYmluZFRleHR1cmUiLCJ0ZXhJbWFnZTJEIiwiZmJvIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJiaW5kRnJhbWVidWZmZXIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJ2aWV3cG9ydCIsImNsZWFyQ29sb3IiLCJjbGVhciIsInBpeGVscyIsInJlYWRQaXhlbHMiLCJnZXRFcnJvciIsImRlbGV0ZUZyYW1lYnVmZmVyIiwiZGVsZXRlVGV4dHVyZSIsImlzSUUiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwiYXBwVmVyc2lvbiIsIm5wb3RUZXh0dXJlQ3ViZSIsImN1YmVUZXh0dXJlIiwiYWN0aXZlVGV4dHVyZSIsImNvbG9yQml0cyIsImRlcHRoQml0cyIsInN0ZW5jaWxCaXRzIiwic3VicGl4ZWxCaXRzIiwiZmlsdGVyIiwicG9pbnRTaXplRGltcyIsImxpbmVXaWR0aERpbXMiLCJtYXhWaWV3cG9ydERpbXMiLCJtYXhDb21iaW5lZFRleHR1cmVVbml0cyIsIm1heEN1YmVNYXBTaXplIiwibWF4UmVuZGVyYnVmZmVyU2l6ZSIsIm1heFRleHR1cmVVbml0cyIsIm1heEF0dHJpYnV0ZXMiLCJtYXhWZXJ0ZXhVbmlmb3JtcyIsIm1heFZlcnRleFRleHR1cmVVbml0cyIsIm1heFZhcnlpbmdWZWN0b3JzIiwibWF4RnJhZ21lbnRVbmlmb3JtcyIsImdsc2wiLCJyZW5kZXJlciIsInZlbmRvciIsInZlcnNpb24iLCJpc05EQXJyYXlMaWtlIiwic2hhcGUiLCJzdHJpZGUiLCJ2YWx1ZXMiLCJtYXAiLCJmbGF0dGVuVXRpbHMiLCJhcnJheVNoYXBlJDEiLCJmbGF0dGVuIiwiZmxhdHRlbkFycmF5IiwiZmxhdHRlbjFEIiwibngiLCJvdXQiLCJmbGF0dGVuMkQiLCJueSIsInB0ciIsInJvdyIsImZsYXR0ZW4zRCIsIm56IiwicHRyXyIsImNvbCIsImsiLCJmbGF0dGVuUmVjIiwibGV2ZWwiLCJvdXRfIiwiYXJyYXlfIiwiYXJyYXlUeXBlcyIsImludDgiLCJpbnQxNiIsImludDMyIiwidWludDgiLCJ1aW50MTYiLCJ1aW50MzIiLCJmbG9hdCIsImZsb2F0MzIiLCJnbFR5cGVzIiwiZHluYW1pYyQxIiwic3RyZWFtIiwidXNhZ2VUeXBlcyIsImFycmF5RmxhdHRlbiIsImFycmF5U2hhcGUiLCJHTF9TVEFUSUNfRFJBVyIsIkdMX1NUUkVBTV9EUkFXIiwiR0xfVU5TSUdORURfQllURSQzIiwiR0xfRkxPQVQkMyIsIkRUWVBFU19TSVpFUyIsInR5cGVkQXJyYXlDb2RlIiwicHJvdG90eXBlIiwiY2FsbCIsImNvcHlBcnJheSIsImlucCIsInRyYW5zcG9zZSIsInNoYXBlWCIsInNoYXBlWSIsInN0cmlkZVgiLCJzdHJpZGVZIiwid3JhcEJ1ZmZlclN0YXRlIiwic3RhdHMiLCJhdHRyaWJ1dGVTdGF0ZSIsImJ1ZmZlckNvdW50IiwiYnVmZmVyU2V0IiwiUkVHTEJ1ZmZlciIsImNyZWF0ZUJ1ZmZlciIsInVzYWdlIiwiZGltZW5zaW9uIiwiZHR5cGUiLCJwZXJzaXN0ZW50RGF0YSIsInNpemUiLCJiaW5kIiwiYmluZEJ1ZmZlciIsImRlc3Ryb3kiLCJzdHJlYW1Qb29sIiwiY3JlYXRlU3RyZWFtIiwiaW5pdEJ1ZmZlckZyb21EYXRhIiwiZGVzdHJveVN0cmVhbSIsInN0cmVhbSQkMSIsImluaXRCdWZmZXJGcm9tVHlwZWRBcnJheSIsImJ1ZmZlckRhdGEiLCJwZXJzaXN0IiwiZmxhdERhdGEiLCJkaW0iLCJ0eXBlZERhdGEiLCJ0cmFuc3Bvc2VEYXRhIiwic3RhdGUiLCJyZWNvcmQiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJoYW5kbGUiLCJkZWxldGVCdWZmZXIiLCJvcHRpb25zIiwiZGVmZXJJbml0IiwicGVyc2lzdGVudCIsInJlZ2xCdWZmZXIiLCJzZXRTdWJEYXRhIiwiYnVmZmVyU3ViRGF0YSIsInN1YmRhdGEiLCJvZmZzZXRfIiwiY29udmVydGVkIiwiX2J1ZmZlciIsInJlc3RvcmVCdWZmZXJzIiwiZ2V0VG90YWxCdWZmZXJTaXplIiwidG90YWwiLCJjcmVhdGUiLCJnZXRCdWZmZXIiLCJ3cmFwcGVyIiwiX2luaXRCdWZmZXIiLCJwb2ludHMiLCJwb2ludCIsInRyaWFuZ2xlcyIsInRyaWFuZ2xlIiwicHJpbVR5cGVzIiwiR0xfUE9JTlRTIiwiR0xfTElORVMiLCJHTF9UUklBTkdMRVMiLCJHTF9CWVRFJDIiLCJHTF9VTlNJR05FRF9CWVRFJDQiLCJHTF9TSE9SVCQyIiwiR0xfVU5TSUdORURfU0hPUlQkMiIsIkdMX0lOVCQyIiwiR0xfVU5TSUdORURfSU5UJDIiLCJHTF9FTEVNRU5UX0FSUkFZX0JVRkZFUiIsIkdMX1NUUkVBTV9EUkFXJDEiLCJHTF9TVEFUSUNfRFJBVyQxIiwid3JhcEVsZW1lbnRzU3RhdGUiLCJidWZmZXJTdGF0ZSIsImVsZW1lbnRTZXQiLCJlbGVtZW50Q291bnQiLCJlbGVtZW50VHlwZXMiLCJvZXNfZWxlbWVudF9pbmRleF91aW50IiwiUkVHTEVsZW1lbnRCdWZmZXIiLCJwcmltVHlwZSIsInZlcnRDb3VudCIsImNyZWF0ZUVsZW1lbnRTdHJlYW0iLCJpbml0RWxlbWVudHMiLCJkZXN0cm95RWxlbWVudFN0cmVhbSIsImVsZW1lbnRzIiwicHJpbSIsImNvdW50IiwicHJlZGljdGVkVHlwZSIsImRlc3Ryb3lFbGVtZW50cyIsImVsZW1lbnRzQ291bnQiLCJjcmVhdGVFbGVtZW50cyIsInJlZ2xFbGVtZW50cyIsInByaW1pdGl2ZSIsIl9lbGVtZW50cyIsImdldEVsZW1lbnRzIiwiRkxPQVQiLCJJTlQiLCJHTF9VTlNJR05FRF9TSE9SVCQ0IiwiY29udmVydFRvSGFsZkZsb2F0IiwidXNob3J0cyIsImlzTmFOIiwiSW5maW5pdHkiLCJzZ24iLCJleHAiLCJmcmFjIiwicyIsImlzQXJyYXlMaWtlIiwiaXNQb3cyJDEiLCJHTF9DT01QUkVTU0VEX1RFWFRVUkVfRk9STUFUUyIsIkdMX1RFWFRVUkVfMkQkMSIsIkdMX1RFWFRVUkVfQ1VCRV9NQVAkMSIsIkdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQxIiwiR0xfUkdCQSQxIiwiR0xfQUxQSEEiLCJHTF9SR0IiLCJHTF9MVU1JTkFOQ0UiLCJHTF9MVU1JTkFOQ0VfQUxQSEEiLCJHTF9SR0JBNCIsIkdMX1JHQjVfQTEiLCJHTF9SR0I1NjUiLCJHTF9VTlNJR05FRF9TSE9SVF80XzRfNF80JDEiLCJHTF9VTlNJR05FRF9TSE9SVF81XzVfNV8xJDEiLCJHTF9VTlNJR05FRF9TSE9SVF81XzZfNSQxIiwiR0xfVU5TSUdORURfSU5UXzI0XzhfV0VCR0wkMSIsIkdMX0RFUFRIX0NPTVBPTkVOVCIsIkdMX0RFUFRIX1NURU5DSUwiLCJHTF9TUkdCX0VYVCIsIkdMX1NSR0JfQUxQSEFfRVhUIiwiR0xfSEFMRl9GTE9BVF9PRVMkMSIsIkdMX0NPTVBSRVNTRURfUkdCX1MzVENfRFhUMV9FWFQiLCJHTF9DT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQxX0VYVCIsIkdMX0NPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDNfRVhUIiwiR0xfQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUNV9FWFQiLCJHTF9DT01QUkVTU0VEX1JHQl9BVENfV0VCR0wiLCJHTF9DT01QUkVTU0VEX1JHQkFfQVRDX0VYUExJQ0lUX0FMUEhBX1dFQkdMIiwiR0xfQ09NUFJFU1NFRF9SR0JBX0FUQ19JTlRFUlBPTEFURURfQUxQSEFfV0VCR0wiLCJHTF9DT01QUkVTU0VEX1JHQl9QVlJUQ180QlBQVjFfSU1HIiwiR0xfQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkdMX0NPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiR0xfQ09NUFJFU1NFRF9SR0JBX1BWUlRDXzJCUFBWMV9JTUciLCJHTF9DT01QUkVTU0VEX1JHQl9FVEMxX1dFQkdMIiwiR0xfVU5TSUdORURfQllURSQ1IiwiR0xfVU5TSUdORURfU0hPUlQkMyIsIkdMX1VOU0lHTkVEX0lOVCQzIiwiR0xfRkxPQVQkNCIsIkdMX1RFWFRVUkVfV1JBUF9TIiwiR0xfVEVYVFVSRV9XUkFQX1QiLCJHTF9SRVBFQVQiLCJHTF9DTEFNUF9UT19FREdFJDEiLCJHTF9NSVJST1JFRF9SRVBFQVQiLCJHTF9URVhUVVJFX01BR19GSUxURVIiLCJHTF9URVhUVVJFX01JTl9GSUxURVIiLCJHTF9ORUFSRVNUJDEiLCJHTF9MSU5FQVIiLCJHTF9ORUFSRVNUX01JUE1BUF9ORUFSRVNUJDEiLCJHTF9MSU5FQVJfTUlQTUFQX05FQVJFU1QkMSIsIkdMX05FQVJFU1RfTUlQTUFQX0xJTkVBUiQxIiwiR0xfTElORUFSX01JUE1BUF9MSU5FQVIkMSIsIkdMX0dFTkVSQVRFX01JUE1BUF9ISU5UIiwiR0xfRE9OVF9DQVJFIiwiR0xfRkFTVEVTVCIsIkdMX05JQ0VTVCIsIkdMX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiR0xfVU5QQUNLX0FMSUdOTUVOVCIsIkdMX1VOUEFDS19GTElQX1lfV0VCR0wiLCJHTF9VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJHTF9VTlBBQ0tfQ09MT1JTUEFDRV9DT05WRVJTSU9OX1dFQkdMIiwiR0xfQlJPV1NFUl9ERUZBVUxUX1dFQkdMIiwiR0xfVEVYVFVSRTAkMSIsIk1JUE1BUF9GSUxURVJTIiwiQ0hBTk5FTFNfRk9STUFUIiwiRk9STUFUX0NIQU5ORUxTIiwib2JqZWN0TmFtZSIsIkNBTlZBU19DTEFTUyIsIkNPTlRFWFQyRF9DTEFTUyIsIkJJVE1BUF9DTEFTUyIsIklNQUdFX0NMQVNTIiwiVklERU9fQ0xBU1MiLCJQSVhFTF9DTEFTU0VTIiwiVFlQRV9TSVpFUyIsIkZPUk1BVF9TSVpFU19TUEVDSUFMIiwiaXNOdW1lcmljQXJyYXkiLCJhcnIiLCJpc1JlY3RBcnJheSIsImNsYXNzU3RyaW5nIiwiaXNDYW52YXNFbGVtZW50IiwiaXNDb250ZXh0MkQiLCJpc0JpdG1hcCIsImlzSW1hZ2VFbGVtZW50IiwiaXNWaWRlb0VsZW1lbnQiLCJpc1BpeGVsRGF0YSIsImNsYXNzTmFtZSIsInR5cGVkQXJyYXlDb2RlJDEiLCJjb252ZXJ0RGF0YSIsInByZUNvbnZlcnQiLCJpbWFnZSIsInBvc3RDb252ZXJ0Iiwic3RyaWRlQyIsInAiLCJnZXRUZXh0dXJlU2l6ZSIsImlzTWlwbWFwIiwiaXNDdWJlIiwiY3JlYXRlVGV4dHVyZVNldCIsInJlZ2xQb2xsIiwiY29udGV4dFN0YXRlIiwibWlwbWFwSGludCIsIndyYXBNb2RlcyIsIm1hZ0ZpbHRlcnMiLCJtaW5GaWx0ZXJzIiwiY29sb3JTcGFjZSIsInRleHR1cmVUeXBlcyIsInRleHR1cmVGb3JtYXRzIiwiY29tcHJlc3NlZFRleHR1cmVGb3JtYXRzIiwiZXh0X3NyZ2IiLCJzcmdiIiwic3JnYmEiLCJvZXNfdGV4dHVyZV9oYWxmX2Zsb2F0Iiwid2ViZ2xfZGVwdGhfdGV4dHVyZSIsIndlYmdsX2NvbXByZXNzZWRfdGV4dHVyZV9zM3RjIiwid2ViZ2xfY29tcHJlc3NlZF90ZXh0dXJlX2F0YyIsIndlYmdsX2NvbXByZXNzZWRfdGV4dHVyZV9wdnJ0YyIsIndlYmdsX2NvbXByZXNzZWRfdGV4dHVyZV9ldGMxIiwic3VwcG9ydGVkQ29tcHJlc3NlZEZvcm1hdHMiLCJzbGljZSIsInN1cHBvcnRlZEZvcm1hdHMiLCJ0ZXh0dXJlRm9ybWF0c0ludmVydCIsInZhbCIsInRleHR1cmVUeXBlc0ludmVydCIsIm1hZ0ZpbHRlcnNJbnZlcnQiLCJtaW5GaWx0ZXJzSW52ZXJ0Iiwid3JhcE1vZGVzSW52ZXJ0IiwiY29sb3JGb3JtYXRzIiwicmVkdWNlIiwiY29sb3IiLCJnbGVudW0iLCJUZXhGbGFncyIsInByZW11bHRpcGx5QWxwaGEiLCJmbGlwWSIsImNvcHlGbGFncyIsIm90aGVyIiwicGFyc2VGbGFncyIsImZsYWdzIiwiYWxpZ25tZW50IiwiaGFzQ2hhbm5lbHMiLCJyYWRpdXMiLCJoYXNGb3JtYXQiLCJmb3JtYXRTdHIiLCJzZXRGbGFncyIsInBpeGVsU3RvcmVpIiwiVGV4SW1hZ2UiLCJ4T2Zmc2V0IiwieU9mZnNldCIsIm5lZWRzRnJlZSIsIm5lZWRzQ29weSIsInBhcnNlSW1hZ2UiLCJ5Iiwidmlld1ciLCJ2aWV3cG9ydFdpZHRoIiwidmlld0giLCJ2aWV3cG9ydEhlaWdodCIsInNoYXBlQyIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJkZCIsImFsbG9jRGF0YSIsInNldEltYWdlIiwidGFyZ2V0IiwibWlwbGV2ZWwiLCJjb21wcmVzc2VkVGV4SW1hZ2UyRCIsImNvcHlUZXhJbWFnZTJEIiwibnVsbERhdGEiLCJzZXRTdWJJbWFnZSIsInRleFN1YkltYWdlMkQiLCJjb21wcmVzc2VkVGV4U3ViSW1hZ2UyRCIsImNvcHlUZXhTdWJJbWFnZTJEIiwiaW1hZ2VQb29sIiwiYWxsb2NJbWFnZSIsImZyZWVJbWFnZSIsIk1pcE1hcCIsInBhcnNlTWlwTWFwRnJvbVNoYXBlIiwibWlwbWFwIiwicGFyc2VNaXBNYXBGcm9tT2JqZWN0IiwiaW1nRGF0YSIsInNldE1pcE1hcCIsIm1pcFBvb2wiLCJhbGxvY01pcE1hcCIsImZyZWVNaXBNYXAiLCJUZXhJbmZvIiwiYW5pc290cm9waWMiLCJwYXJzZVRleEluZm8iLCJtaW4iLCJtYWciLCJ3cmFwIiwib3B0V3JhcFMiLCJvcHRXcmFwVCIsImhhc01pcE1hcCIsInNldFRleEluZm8iLCJ0ZXhQYXJhbWV0ZXJpIiwiaGludCIsImdlbmVyYXRlTWlwbWFwIiwidGV4dHVyZUNvdW50IiwidGV4dHVyZVNldCIsIm51bVRleFVuaXRzIiwidGV4dHVyZVVuaXRzIiwiUkVHTFRleHR1cmUiLCJyZWZDb3VudCIsInVuaXQiLCJiaW5kQ291bnQiLCJ0ZXhJbmZvIiwidGVtcEJpbmQiLCJ0ZW1wUmVzdG9yZSIsInByZXYiLCJwYXJhbXMiLCJ1bmJpbmQiLCJkZWNSZWYiLCJjcmVhdGVUZXh0dXJlMkQiLCJhIiwiYiIsInJlZ2xUZXh0dXJlMkQiLCJzdWJpbWFnZSIsInhfIiwieV8iLCJsZXZlbF8iLCJpbWFnZURhdGEiLCJ3XyIsImhfIiwiX3ciLCJfaCIsImNyZWF0ZVRleHR1cmVDdWJlIiwiYTAiLCJhMSIsImEyIiwiYTMiLCJhNCIsImE1IiwiY3ViZUNvdW50IiwicmVnbFRleHR1cmVDdWJlIiwiZmFjZV9pbnB1dCIsInJhZGl1c18iLCJkZXN0cm95VGV4dHVyZXMiLCJnZXRUb3RhbFRleHR1cmVTaXplIiwicmVzdG9yZVRleHR1cmVzIiwidGV4IiwiY3JlYXRlMkQiLCJjcmVhdGVDdWJlIiwiZ2V0VGV4dHVyZSIsIkdMX1JFTkRFUkJVRkZFUiIsIkdMX1JHQkE0JDEiLCJHTF9SR0I1X0ExJDEiLCJHTF9SR0I1NjUkMSIsIkdMX0RFUFRIX0NPTVBPTkVOVDE2IiwiR0xfU1RFTkNJTF9JTkRFWDgiLCJHTF9ERVBUSF9TVEVOQ0lMJDEiLCJHTF9TUkdCOF9BTFBIQThfRVhUIiwiR0xfUkdCQTMyRl9FWFQiLCJHTF9SR0JBMTZGX0VYVCIsIkdMX1JHQjE2Rl9FWFQiLCJGT1JNQVRfU0laRVMiLCJnZXRSZW5kZXJidWZmZXJTaXplIiwid3JhcFJlbmRlcmJ1ZmZlcnMiLCJmb3JtYXRUeXBlcyIsImV4dF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdCIsIndlYmdsX2NvbG9yX2J1ZmZlcl9mbG9hdCIsImZvcm1hdFR5cGVzSW52ZXJ0IiwicmVuZGVyYnVmZmVyQ291bnQiLCJyZW5kZXJidWZmZXJTZXQiLCJSRUdMUmVuZGVyYnVmZmVyIiwicmIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiZGVsZXRlUmVuZGVyYnVmZmVyIiwiY3JlYXRlUmVuZGVyYnVmZmVyIiwicmVnbFJlbmRlcmJ1ZmZlciIsInJlbmRlcmJ1ZmZlclN0b3JhZ2UiLCJnZXRUb3RhbFJlbmRlcmJ1ZmZlclNpemUiLCJyZXN0b3JlUmVuZGVyYnVmZmVycyIsIkdMX0ZSQU1FQlVGRkVSJDEiLCJHTF9SRU5ERVJCVUZGRVIkMSIsIkdMX1RFWFRVUkVfMkQkMiIsIkdMX1RFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWCQyIiwiR0xfQ09MT1JfQVRUQUNITUVOVDAkMSIsIkdMX0RFUFRIX0FUVEFDSE1FTlQiLCJHTF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJHTF9ERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJHTF9GUkFNRUJVRkZFUl9DT01QTEVURSQxIiwiR0xfRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UIiwiR0xfRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQiLCJHTF9GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlMiLCJHTF9GUkFNRUJVRkZFUl9VTlNVUFBPUlRFRCIsIkdMX0hBTEZfRkxPQVRfT0VTJDIiLCJHTF9VTlNJR05FRF9CWVRFJDYiLCJHTF9GTE9BVCQ1IiwiR0xfUkdCJDEiLCJHTF9SR0JBJDIiLCJHTF9ERVBUSF9DT01QT05FTlQkMSIsImNvbG9yVGV4dHVyZUZvcm1hdEVudW1zIiwidGV4dHVyZUZvcm1hdENoYW5uZWxzIiwidGV4dHVyZVR5cGVTaXplcyIsIkdMX1JHQkE0JDIiLCJHTF9SR0I1X0ExJDIiLCJHTF9SR0I1NjUkMiIsIkdMX0RFUFRIX0NPTVBPTkVOVDE2JDEiLCJHTF9TVEVOQ0lMX0lOREVYOCQxIiwiR0xfREVQVEhfU1RFTkNJTCQyIiwiR0xfU1JHQjhfQUxQSEE4X0VYVCQxIiwiR0xfUkdCQTMyRl9FWFQkMSIsIkdMX1JHQkExNkZfRVhUJDEiLCJHTF9SR0IxNkZfRVhUJDEiLCJjb2xvclJlbmRlcmJ1ZmZlckZvcm1hdEVudW1zIiwic3RhdHVzQ29kZSIsIndyYXBGQk9TdGF0ZSIsInRleHR1cmVTdGF0ZSIsInJlbmRlcmJ1ZmZlclN0YXRlIiwiZnJhbWVidWZmZXJTdGF0ZSIsImN1ciIsImRpcnR5Iiwic2V0RkJPIiwiY29sb3JUZXh0dXJlRm9ybWF0cyIsImNvbG9yUmVuZGVyYnVmZmVyRm9ybWF0cyIsImNvbG9yVHlwZXMiLCJGcmFtZWJ1ZmZlckF0dGFjaG1lbnQiLCJpbmNSZWZBbmRDaGVja1NoYXBlIiwidHciLCJ0aCIsImF0dGFjaCIsImxvY2F0aW9uIiwiZnJhbWVidWZmZXJSZW5kZXJidWZmZXIiLCJwYXJzZUF0dGFjaG1lbnQiLCJhbGxvY0F0dGFjaG1lbnQiLCJpc1RleHR1cmUiLCJ1bndyYXBBdHRhY2htZW50IiwicmVzaXplQXR0YWNobWVudCIsImZyYW1lYnVmZmVyQ291bnQiLCJmcmFtZWJ1ZmZlclNldCIsIlJFR0xGcmFtZWJ1ZmZlciIsImZyYW1lYnVmZmVyIiwiY29sb3JBdHRhY2htZW50cyIsImRlcHRoQXR0YWNobWVudCIsInN0ZW5jaWxBdHRhY2htZW50IiwiZGVwdGhTdGVuY2lsQXR0YWNobWVudCIsImRlY0ZCT1JlZnMiLCJ1cGRhdGVGcmFtZWJ1ZmZlciIsInN0YXR1cyIsImlzQ29udGV4dExvc3QiLCJjcmVhdGVGQk8iLCJyZWdsRnJhbWVidWZmZXIiLCJuZWVkc0RlcHRoIiwibmVlZHNTdGVuY2lsIiwiY29sb3JCdWZmZXIiLCJjb2xvclRleHR1cmUiLCJjb2xvckZvcm1hdCIsImNvbG9yVHlwZSIsImNvbG9yQ291bnQiLCJkZXB0aEJ1ZmZlciIsInN0ZW5jaWxCdWZmZXIiLCJkZXB0aFN0ZW5jaWxCdWZmZXIiLCJkZXB0aFN0ZW5jaWxUZXh0dXJlIiwiY29sb3JzIiwiZGVwdGhUZXh0dXJlIiwiZGVwdGgiLCJzdGVuY2lsIiwiZGVwdGhTdGVuY2lsIiwiY29tbW9uQ29sb3JBdHRhY2htZW50U2l6ZSIsImNvbG9yQXR0YWNobWVudFNpemUiLCJfZnJhbWVidWZmZXIiLCJ1c2UiLCJjcmVhdGVDdWJlRkJPIiwicmVnbEZyYW1lYnVmZmVyQ3ViZSIsImNvbG9yQ3ViZXMiLCJjdWJlTWFwUGFyYW1zIiwiY3ViZSIsInJlc3RvcmVGcmFtZWJ1ZmZlcnMiLCJmYiIsImdldEZyYW1lYnVmZmVyIiwiR0xfRkxPQVQkNiIsIkF0dHJpYnV0ZVJlY29yZCIsInoiLCJub3JtYWxpemVkIiwiZGl2aXNvciIsIndyYXBBdHRyaWJ1dGVTdGF0ZSIsIk5VTV9BVFRSSUJVVEVTIiwiYXR0cmlidXRlQmluZGluZ3MiLCJSZWNvcmQiLCJzY29wZSIsIkdMX0ZSQUdNRU5UX1NIQURFUiIsIkdMX1ZFUlRFWF9TSEFERVIiLCJHTF9BQ1RJVkVfVU5JRk9STVMiLCJHTF9BQ1RJVkVfQVRUUklCVVRFUyIsIndyYXBTaGFkZXJTdGF0ZSIsImZyYWdTaGFkZXJzIiwidmVydFNoYWRlcnMiLCJBY3RpdmVJbmZvIiwiaW5zZXJ0QWN0aXZlSW5mbyIsImdldFNoYWRlciIsImNhY2hlIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsInByb2dyYW1DYWNoZSIsInByb2dyYW1MaXN0IiwiUFJPR1JBTV9DT1VOVEVSIiwiUkVHTFByb2dyYW0iLCJmcmFnSWQiLCJ2ZXJ0SWQiLCJ1bmlmb3Jtc0NvdW50IiwiYXR0cmlidXRlc0NvdW50IiwibGlua1Byb2dyYW0iLCJjcmVhdGVQcm9ncmFtIiwiYXR0YWNoU2hhZGVyIiwibnVtVW5pZm9ybXMiLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwibnVtQXR0cmlidXRlcyIsImdldEFjdGl2ZUF0dHJpYiIsImdldEF0dHJpYkxvY2F0aW9uIiwiZ2V0TWF4VW5pZm9ybXNDb3VudCIsIm0iLCJnZXRNYXhBdHRyaWJ1dGVzQ291bnQiLCJyZXN0b3JlU2hhZGVycyIsImRlbGV0ZVNoYWRlciIsImRlbGV0ZVByb2dyYW0iLCJzaGFkZXJDb3VudCIsIkdMX1JHQkEkMyIsIkdMX1VOU0lHTkVEX0JZVEUkNyIsIkdMX1BBQ0tfQUxJR05NRU5UIiwiR0xfRkxPQVQkNyIsIndyYXBSZWFkUGl4ZWxzIiwiY29udGV4dCIsImdsQXR0cmlidXRlcyIsInJlYWRQaXhlbHNJbXBsIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwiZnJhbWVidWZmZXJXaWR0aCIsImZyYW1lYnVmZmVySGVpZ2h0IiwicmVhZFBpeGVsc0ZCTyIsImNyZWF0ZUVudmlyb25tZW50IiwidmFyQ291bnRlciIsImxpbmtlZE5hbWVzIiwibGlua2VkVmFsdWVzIiwibGluayIsImNvZGUiLCJhcmd1bWVudHMiLCJ2YXJzIiwiZGVmIiwiZW50cnkiLCJleGl0IiwiZW50cnlUb1N0cmluZyIsImV4aXRUb1N0cmluZyIsInNhdmUiLCJwcm9wIiwiY29uZGl0aW9uYWwiLCJ0aGVuQmxvY2siLCJlbHNlQmxvY2siLCJ0aGVuVG9TdHJpbmciLCJlbHNlVG9TdHJpbmciLCJ0aGVuIiwiZWxzZSIsImVsc2VDbGF1c2UiLCJnbG9iYWxCbG9jayIsInByb2NlZHVyZXMiLCJwcm9jIiwiYXJnIiwiYm9keVRvU3RyaW5nIiwiY29tcGlsZSIsInNyYyIsIkZ1bmN0aW9uIiwiY29uZCIsIkNVVEVfQ09NUE9ORU5UUyIsIkdMX1VOU0lHTkVEX0JZVEUkOCIsIkFUVFJJQl9TVEFURV9QT0lOVEVSIiwiQVRUUklCX1NUQVRFX0NPTlNUQU5UIiwiRFlOX0ZVTkMkMSIsIkRZTl9QUk9QJDEiLCJEWU5fQ09OVEVYVCQxIiwiRFlOX1NUQVRFJDEiLCJEWU5fVEhVTksiLCJTX0RJVEhFUiIsIlNfQkxFTkRfRU5BQkxFIiwiU19CTEVORF9DT0xPUiIsIlNfQkxFTkRfRVFVQVRJT04iLCJTX0JMRU5EX0ZVTkMiLCJTX0RFUFRIX0VOQUJMRSIsIlNfREVQVEhfRlVOQyIsIlNfREVQVEhfUkFOR0UiLCJTX0RFUFRIX01BU0siLCJTX0NPTE9SX01BU0siLCJTX0NVTExfRU5BQkxFIiwiU19DVUxMX0ZBQ0UiLCJTX0ZST05UX0ZBQ0UiLCJTX0xJTkVfV0lEVEgiLCJTX1BPTFlHT05fT0ZGU0VUX0VOQUJMRSIsIlNfUE9MWUdPTl9PRkZTRVRfT0ZGU0VUIiwiU19TQU1QTEVfQUxQSEEiLCJTX1NBTVBMRV9FTkFCTEUiLCJTX1NBTVBMRV9DT1ZFUkFHRSIsIlNfU1RFTkNJTF9FTkFCTEUiLCJTX1NURU5DSUxfTUFTSyIsIlNfU1RFTkNJTF9GVU5DIiwiU19TVEVOQ0lMX09QRlJPTlQiLCJTX1NURU5DSUxfT1BCQUNLIiwiU19TQ0lTU09SX0VOQUJMRSIsIlNfU0NJU1NPUl9CT1giLCJTX1ZJRVdQT1JUIiwiU19QUk9GSUxFIiwiU19GUkFNRUJVRkZFUiIsIlNfVkVSVCIsIlNfRlJBRyIsIlNfRUxFTUVOVFMiLCJTX1BSSU1JVElWRSIsIlNfQ09VTlQiLCJTX09GRlNFVCIsIlNfSU5TVEFOQ0VTIiwiU1VGRklYX1dJRFRIIiwiU1VGRklYX0hFSUdIVCIsIlNfRlJBTUVCVUZGRVJfV0lEVEgiLCJTX0ZSQU1FQlVGRkVSX0hFSUdIVCIsIlNfVklFV1BPUlRfV0lEVEgiLCJTX1ZJRVdQT1JUX0hFSUdIVCIsIlNfRFJBV0lOR0JVRkZFUiIsIlNfRFJBV0lOR0JVRkZFUl9XSURUSCIsIlNfRFJBV0lOR0JVRkZFUl9IRUlHSFQiLCJORVNURURfT1BUSU9OUyIsIkdMX0FSUkFZX0JVRkZFUiQxIiwiR0xfRUxFTUVOVF9BUlJBWV9CVUZGRVIkMSIsIkdMX0ZSQUdNRU5UX1NIQURFUiQxIiwiR0xfVkVSVEVYX1NIQURFUiQxIiwiR0xfVEVYVFVSRV8yRCQzIiwiR0xfVEVYVFVSRV9DVUJFX01BUCQyIiwiR0xfQ1VMTF9GQUNFIiwiR0xfQkxFTkQiLCJHTF9ESVRIRVIiLCJHTF9TVEVOQ0lMX1RFU1QiLCJHTF9ERVBUSF9URVNUIiwiR0xfU0NJU1NPUl9URVNUIiwiR0xfUE9MWUdPTl9PRkZTRVRfRklMTCIsIkdMX1NBTVBMRV9BTFBIQV9UT19DT1ZFUkFHRSIsIkdMX1NBTVBMRV9DT1ZFUkFHRSIsIkdMX0ZMT0FUJDgiLCJHTF9GTE9BVF9WRUMyIiwiR0xfRkxPQVRfVkVDMyIsIkdMX0ZMT0FUX1ZFQzQiLCJHTF9JTlQkMyIsIkdMX0lOVF9WRUMyIiwiR0xfSU5UX1ZFQzMiLCJHTF9JTlRfVkVDNCIsIkdMX0JPT0wiLCJHTF9CT09MX1ZFQzIiLCJHTF9CT09MX1ZFQzMiLCJHTF9CT09MX1ZFQzQiLCJHTF9GTE9BVF9NQVQyIiwiR0xfRkxPQVRfTUFUMyIsIkdMX0ZMT0FUX01BVDQiLCJHTF9TQU1QTEVSXzJEIiwiR0xfU0FNUExFUl9DVUJFIiwiR0xfVFJJQU5HTEVTJDEiLCJHTF9GUk9OVCIsIkdMX0JBQ0siLCJHTF9DVyIsIkdMX0NDVyIsIkdMX01JTl9FWFQiLCJHTF9NQVhfRVhUIiwiR0xfQUxXQVlTIiwiR0xfS0VFUCIsIkdMX1pFUk8iLCJHTF9PTkUiLCJHTF9GVU5DX0FERCIsIkdMX0xFU1MiLCJHTF9GUkFNRUJVRkZFUiQyIiwiR0xfQ09MT1JfQVRUQUNITUVOVDAkMiIsImJsZW5kRnVuY3MiLCJpbnZhbGlkQmxlbmRDb21iaW5hdGlvbnMiLCJjb21wYXJlRnVuY3MiLCJzdGVuY2lsT3BzIiwic2hhZGVyVHlwZSIsIm9yaWVudGF0aW9uVHlwZSIsImlzQnVmZmVyQXJncyIsInNvcnRTdGF0ZSIsInNvcnQiLCJEZWNsYXJhdGlvbiIsInRoaXNEZXAiLCJjb250ZXh0RGVwIiwicHJvcERlcCIsImFwcGVuZCIsImlzU3RhdGljIiwiZGVjbCIsImNyZWF0ZVN0YXRpY0RlY2wiLCJjcmVhdGVEeW5hbWljRGVjbCIsImR5biIsIm51bUFyZ3MiLCJTQ09QRV9ERUNMIiwicmVnbENvcmUiLCJlbGVtZW50U3RhdGUiLCJ1bmlmb3JtU3RhdGUiLCJzaGFkZXJTdGF0ZSIsImRyYXdTdGF0ZSIsInRpbWVyIiwiYmxlbmRFcXVhdGlvbnMiLCJleHRfYmxlbmRfbWlubWF4IiwiZXh0SW5zdGFuY2luZyIsImFuZ2xlX2luc3RhbmNlZF9hcnJheXMiLCJleHREcmF3QnVmZmVycyIsImN1cnJlbnRTdGF0ZSIsIm5leHRTdGF0ZSIsIkdMX1NUQVRFX05BTUVTIiwiR0xfRkxBR1MiLCJHTF9WQVJJQUJMRVMiLCJwcm9wTmFtZSIsInN0YXRlRmxhZyIsInNuYW1lIiwiY2FwIiwiaW5pdCIsInN0YXRlVmFyaWFibGUiLCJmdW5jIiwiZHJhd2luZ0J1ZmZlcldpZHRoIiwiZHJhd2luZ0J1ZmZlckhlaWdodCIsInNoYXJlZFN0YXRlIiwiY3VycmVudCIsImRyYXciLCJzaGFyZWRDb25zdGFudHMiLCJiYWNrQnVmZmVyIiwiZHJhd0J1ZmZlciIsImRyYXdDYWxsQ291bnRlciIsImNyZWF0ZVJFR0xFbnZpcm9ubWVudCIsImVudiIsImJhdGNoSWQiLCJTSEFSRUQiLCJzaGFyZWQiLCJwcm9wcyIsIkNIRUNLIiwiY29tbWFuZFN0ciIsImFzc2VydCIsIm5leHRWYXJzIiwiY3VycmVudFZhcnMiLCJ2YXJpYWJsZSIsImNvbnN0YW50cyIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbnZva2UiLCJhcmdMaXN0IiwicmVmIiwiYXR0cmliQ2FjaGUiLCJzY29wZUF0dHJpYnMiLCJzY29wZUF0dHJpYiIsImJpbmRpbmciLCJwYXJzZVByb2ZpbGUiLCJzdGF0aWNPcHRpb25zIiwiZHluYW1pY09wdGlvbnMiLCJwcm9maWxlRW5hYmxlIiwiZW5hYmxlIiwicGFyc2VGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiQ09OVEVYVCIsIkZSQU1FQlVGRkVSX0ZVTkMiLCJGUkFNRUJVRkZFUl9TVEFURSIsInBhcnNlVmlld3BvcnRTY2lzc29yIiwicGFyc2VCb3giLCJib3giLCJCT1hfVyIsIkJPWF9IIiwiZHluQm94IiwiQk9YIiwiQk9YX1giLCJCT1hfWSIsInByZXZWaWV3cG9ydCIsIlZJRVdQT1JUIiwic2Npc3Nvcl9ib3giLCJwYXJzZVByb2dyYW0iLCJwYXJzZVNoYWRlciIsInByb2dWYXIiLCJTSEFERVJfU1RBVEUiLCJwcm9nRGVmIiwicGFyc2VEcmF3IiwicGFyc2VFbGVtZW50cyIsIkVMRU1FTlRTIiwiSVNfQlVGRkVSX0FSR1MiLCJFTEVNRU5UX1NUQVRFIiwiZWxlbWVudERlZm4iLCJlbGVtZW50U3RyZWFtIiwiaWZ0ZSIsInBhcnNlUHJpbWl0aXZlIiwiZHluUHJpbWl0aXZlIiwiUFJJTV9UWVBFUyIsInBhcnNlUGFyYW0iLCJpc09mZnNldCIsIk9GRlNFVCIsImR5blZhbHVlIiwicGFyc2VWZXJ0Q291bnQiLCJkeW5Db3VudCIsIk1JU1NJTkciLCJEWU5BTUlDIiwiaW5zdGFuY2VzIiwicGFyc2VHTFN0YXRlIiwiU1RBVEUiLCJwYXJzZVN0YXRpYyIsInBhcnNlRHluYW1pYyIsIkNPTVBBUkVfRlVOQ1MiLCJaX05FQVIiLCJaX0ZBUiIsInNyY1JHQiIsInNyY0FscGhhIiwiZHN0UkdCIiwiZHN0IiwiZHN0QWxwaGEiLCJCTEVORF9GVU5DUyIsInJlYWQiLCJwcmVmaXgiLCJzdWZmaXgiLCJJTlZBTElEX0JMRU5EX0NPTUJJTkFUSU9OUyIsIlNSQ19SR0IiLCJTUkNfQUxQSEEiLCJEU1RfUkdCIiwiRFNUX0FMUEhBIiwicmdiIiwiYWxwaGEiLCJCTEVORF9FUVVBVElPTlMiLCJSR0IiLCJBTFBIQSIsImNoZWNrUHJvcCIsImNtcCIsIm1hc2siLCJmYWlsIiwiemZhaWwiLCJ6cGFzcyIsIlNURU5DSUxfT1BTIiwiZmFjdG9yIiwidW5pdHMiLCJGQUNUT1IiLCJVTklUUyIsInNhbXBsZVZhbHVlIiwic2FtcGxlSW52ZXJ0IiwiaW52ZXJ0IiwiVkFMVUUiLCJJTlZFUlQiLCJwYXJzZVVuaWZvcm1zIiwic3RhdGljVW5pZm9ybXMiLCJkeW5hbWljVW5pZm9ybXMiLCJVTklGT1JNUyIsInJlZ2xUeXBlIiwiSVRFTSIsInBhcnNlQXR0cmlidXRlcyIsInN0YXRpY0F0dHJpYnV0ZXMiLCJkeW5hbWljQXR0cmlidXRlcyIsImF0dHJpYnV0ZURlZnMiLCJhdHRyaWJ1dGUiLCJjb25zdGFudCIsIlZBTElEX0tFWVMiLCJpc1N0cmVhbSIsImFwcGVuZEF0dHJpYnV0ZUNvZGUiLCJCVUZGRVJfU1RBVEUiLCJkZWZhdWx0UmVjb3JkIiwiQlVGRkVSIiwiVFlQRSIsImVtaXRSZWFkUmVjb3JkIiwicGFyc2VDb250ZXh0Iiwic3RhdGljQ29udGV4dCIsImR5bmFtaWNDb250ZXh0IiwicGFyc2VBcmd1bWVudHMiLCJLRVlfTkFNRVMiLCJjaGVja0tleXMiLCJ2aWV3cG9ydEFuZFNjaXNzb3IiLCJjb3B5Qm94IiwiZGVmbiIsImVtaXRDb250ZXh0IiwiY29udGV4dEVudGVyIiwiZW1pdFBvbGxGcmFtZWJ1ZmZlciIsInNraXBDaGVjayIsIkdMIiwiRVhUX0RSQVdfQlVGRkVSUyIsIkRSQVdfQlVGRkVSUyIsIkJBQ0tfQlVGRkVSIiwiTkVYVCIsImVtaXRQb2xsU3RhdGUiLCJDVVJSRU5UX1ZBUlMiLCJORVhUX1ZBUlMiLCJDVVJSRU5UX1NUQVRFIiwiTkVYVF9TVEFURSIsIkNVUlJFTlQiLCJlbWl0U2V0T3B0aW9ucyIsImZsYWciLCJpbmplY3RFeHRlbnNpb25zIiwiaW5zdGFuY2luZyIsImVtaXRQcm9maWxlIiwidXNlU2NvcGUiLCJpbmNyZW1lbnRDb3VudGVyIiwiU1RBVFMiLCJUSU1FUiIsInByb2ZpbGVBcmciLCJwZXJmQ291bnRlciIsIkNQVV9TVEFSVCIsIlFVRVJZX0NPVU5URVIiLCJlbWl0UHJvZmlsZVN0YXJ0IiwiZW1pdFByb2ZpbGVFbmQiLCJzY29wZVByb2ZpbGUiLCJVU0VfUFJPRklMRSIsInN0YXJ0IiwiZW5kIiwiZW1pdEF0dHJpYnV0ZXMiLCJ0eXBlTGVuZ3RoIiwiZW1pdEJpbmRBdHRyaWJ1dGUiLCJBVFRSSUJVVEUiLCJMT0NBVElPTiIsIkJJTkRJTkciLCJDT05TVF9DT01QT05FTlRTIiwiQ09NTU9OX0tFWVMiLCJlbWl0QnVmZmVyIiwiU0laRSIsIkRJVklTT1IiLCJlbWl0Q29uc3RhbnQiLCJlbWl0VW5pZm9ybXMiLCJpbmZpeCIsInVuaWZvcm0iLCJVTklGT1JNIiwiVEVYX1ZBTFVFIiwiTUFUX1ZBTFVFIiwiY2hlY2tUeXBlIiwiY2hlY2tWZWN0b3IiLCJjaGVja1RleHR1cmUiLCJ1bnJvbGwiLCJURVgiLCJtYXRTaXplIiwicG93IiwiU1RPUkFHRSIsImVtaXREcmF3Iiwib3V0ZXIiLCJpbm5lciIsIkRSQVdfU1RBVEUiLCJkcmF3T3B0aW9ucyIsImVtaXRFbGVtZW50cyIsImNvbnRleHREeW5hbWljIiwiZW1pdENvdW50IiwiQ09VTlQiLCJlbWl0VmFsdWUiLCJQUklNSVRJVkUiLCJJTlNUQU5DRVMiLCJFWFRfSU5TVEFOQ0lORyIsIkVMRU1FTlRfVFlQRSIsImVsZW1lbnRzU3RhdGljIiwiZW1pdEluc3RhbmNpbmciLCJlbWl0UmVndWxhciIsImNyZWF0ZUJvZHkiLCJlbWl0Qm9keSIsInBhcmVudEVudiIsImVtaXREcmF3Qm9keSIsImVtaXREcmF3UHJvYyIsImRyYXdDYWNoZSIsIlBST0dfSUQiLCJDQUNIRURfUFJPQyIsImVtaXRCYXRjaER5bmFtaWNTaGFkZXJCb2R5IiwiYWxsIiwiZW1pdEJhdGNoQm9keSIsIkJBVENIX0lEIiwiUFJPUF9MSVNUIiwiTlVNX1BST1BTIiwiUFJPUFMiLCJpc0lubmVyRGVmbiIsImlzT3V0ZXJEZWZuIiwibmVlZHNDb250ZXh0IiwibmVlZHNGcmFtZWJ1ZmZlciIsInByb2dDYWNoZSIsIlBST0dSQU0iLCJlbWl0QmF0Y2hQcm9jIiwiYmF0Y2giLCJwcm9nRGVmbiIsImJhdGNoQ2FjaGUiLCJlbWl0U2NvcGVQcm9jIiwib3B0Iiwic2F2ZVNoYWRlciIsImlzRHluYW1pY09iamVjdCIsInNwbGF0T2JqZWN0IiwiZ2xvYmFscyIsIm9iamVjdFJlZiIsImRlcHMiLCJhcHBlbmRCbG9jayIsImNvbXBpbGVDb21tYW5kIiwicHJvY3MiLCJwb2xsIiwicmVmcmVzaCIsImNvbW1vbiIsIklOU1RBTkNJTkciLCJHTF9RVUVSWV9SRVNVTFRfRVhUIiwiR0xfUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQiLCJHTF9USU1FX0VMQVBTRURfRVhUIiwiY3JlYXRlVGltZXIiLCJleHRfZGlzam9pbnRfdGltZXJfcXVlcnkiLCJxdWVyeVBvb2wiLCJhbGxvY1F1ZXJ5IiwiY3JlYXRlUXVlcnlFWFQiLCJmcmVlUXVlcnkiLCJxdWVyeSIsInBlbmRpbmdRdWVyaWVzIiwiYmVnaW5RdWVyeSIsImJlZ2luUXVlcnlFWFQiLCJwdXNoU2NvcGVTdGF0cyIsImVuZFF1ZXJ5IiwiZW5kUXVlcnlFWFQiLCJQZW5kaW5nU3RhdHMiLCJzdGFydFF1ZXJ5SW5kZXgiLCJlbmRRdWVyeUluZGV4Iiwic3VtIiwicGVuZGluZ1N0YXRzUG9vbCIsImFsbG9jUGVuZGluZ1N0YXRzIiwiZnJlZVBlbmRpbmdTdGF0cyIsInBlbmRpbmdTdGF0cyIsInBzIiwidGltZVN1bSIsInF1ZXJ5UHRyIiwidXBkYXRlIiwicXVlcnlUaW1lIiwiZ2V0UXVlcnlPYmplY3RFWFQiLCJzdGFydFB0ciIsImVuZFB0ciIsImdwdVRpbWUiLCJnZXROdW1QZW5kaW5nUXVlcmllcyIsImRlbGV0ZVF1ZXJ5RVhUIiwiR0xfQ09MT1JfQlVGRkVSX0JJVCIsIkdMX0RFUFRIX0JVRkZFUl9CSVQiLCJHTF9TVEVOQ0lMX0JVRkZFUl9CSVQiLCJHTF9BUlJBWV9CVUZGRVIiLCJDT05URVhUX0xPU1RfRVZFTlQiLCJDT05URVhUX1JFU1RPUkVEX0VWRU5UIiwiRFlOX1BST1AiLCJEWU5fQ09OVEVYVCIsIkRZTl9TVEFURSIsImZpbmQiLCJoYXlzdGFjayIsIm5lZWRsZSIsIndyYXBSRUdMIiwiZ2V0Q29udGV4dEF0dHJpYnV0ZXMiLCJjb250ZXh0TG9zdCIsImV4dGVuc2lvblN0YXRlIiwic3RhdHMkJDEiLCJTVEFSVF9USU1FIiwiV0lEVEgiLCJIRUlHSFQiLCJ0aWNrIiwidGltZSIsImNvcmUiLCJyYWZDYWxsYmFja3MiLCJsb3NzQ2FsbGJhY2tzIiwicmVzdG9yZUNhbGxiYWNrcyIsImRlc3Ryb3lDYWxsYmFja3MiLCJhY3RpdmVSQUYiLCJoYW5kbGVSQUYiLCJmbHVzaCIsInN0YXJ0UkFGIiwic3RvcFJBRiIsImhhbmRsZUNvbnRleHRMb3NzIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZUNvbnRleHRSZXN0b3JlZCIsImNvbXBpbGVQcm9jZWR1cmUiLCJmbGF0dGVuTmVzdGVkT3B0aW9ucyIsIm9wIiwib3BCYWNrIiwib3BGcm9udCIsIm1lcmdlIiwiY2hpbGQiLCJzZXBhcmF0ZUR5bmFtaWMiLCJzdGF0aWNJdGVtcyIsImR5bmFtaWNJdGVtcyIsIm9wdGlvbiIsImNwdVRpbWUiLCJjb21waWxlZCIsIkVNUFRZX0FSUkFZIiwicmVzZXJ2ZSIsIlJFR0xDb21tYW5kIiwiY2xlYXJJbXBsIiwiXyIsImNsZWFyRmxhZ3MiLCJjbGVhckRlcHRoIiwiY2xlYXJTdGVuY2lsIiwiZnJhbWVidWZmZXJfcmVnbFR5cGUiLCJmcmFtZSIsInBlbmRpbmdDYW5jZWwiLCJwb2xsVmlld3BvcnQiLCJzY2lzc29yQm94IiwiYWRkTGlzdGVuZXIiLCJjYWxsYmFjayIsImNhbGxiYWNrcyIsInJlZ2wiLCJmcmFtZWJ1ZmZlckN1YmUiLCJvbiIsImhhc0V4dGVuc2lvbiIsIl9nbCIsIl9yZWZyZXNoIiwiRVBTSUxPTiIsIkFSUkFZX1RZUEUiLCJkZWdyZWUiLCJQSSIsImdsTWF0cml4IiwiZnJvbU1hdDQiLCJpZGVudGl0eSIsImEwMSIsImEwMiIsImEwMyIsImExMiIsImExMyIsImEyMyIsImEwMCIsImExMCIsImExMSIsImEyMCIsImEyMSIsImEyMiIsImEzMCIsImEzMSIsImEzMiIsImEzMyIsImIwMCIsImIwMSIsImIwMiIsImIwMyIsImIwNCIsImIwNSIsImIwNiIsImIwNyIsImIwOCIsImIwOSIsImIxMCIsImIxMSIsImRldCIsIm11bHRpcGx5IiwiYjAiLCJiMSIsImIyIiwiYjMiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInBlcnNwZWN0aXZlIiwiZm92eSIsImFzcGVjdCIsIm5lYXIiLCJmYXIiLCJ0YW4iLCJuZiIsIm9ydGhvIiwibHIiLCJidCIsImxvb2tBdCIsImV5ZSIsImNlbnRlciIsInVwIiwieDAiLCJ4MSIsIngyIiwieTAiLCJ5MSIsInkyIiwiejAiLCJ6MSIsInoyIiwibGVuIiwiZXlleCIsImV5ZXkiLCJleWV6IiwidXB4IiwidXB5IiwidXB6IiwiY2VudGVyeCIsImNlbnRlcnkiLCJjZW50ZXJ6IiwiYWJzIiwic3FydCIsImZyb21WYWx1ZXMiLCJhZGQiLCJzdWJ0cmFjdCIsImRpc3RhbmNlIiwibm9ybWFsaXplIiwiZG90IiwiY3Jvc3MiLCJheCIsImF5IiwiYXoiLCJieCIsImJ5IiwiYnoiLCJ0cmFuc2Zvcm1NYXQ0Iiwic3ViIiwiZGlzdCIsInZlYyIsImZuIiwibCIsInNldEF4aXNBbmdsZSIsImF4aXMiLCJyYWQiLCJzaW4iLCJjb3MiLCJzbGVycCIsInQiLCJhdyIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwiYWNvcyIsImZyb21NYXQzIiwiZlRyYWNlIiwiZlJvb3QiLCJ2ZWM0Iiwicm90YXRpb25UbyIsInRtcHZlYzMiLCJ2ZWMzIiwieFVuaXRWZWMzIiwieVVuaXRWZWMzIiwic3FsZXJwIiwidGVtcDEiLCJ0ZW1wMiIsImQiLCJzZXRBeGVzIiwibWF0ciIsIm1hdDMiLCJ2aWV3IiwiaXNTdHJpbmciLCJpc05pbCIsIlN0cmluZyIsImlzRnVuY3Rpb24iLCJzdXBwb3J0QXNzaWduIiwiYXNzaWduIiwiZGVzdCIsImV4dGVuZDIiLCJ1bmRlZmluZWQiLCJpc051bWJlciIsIkxPRzJFIiwicm91bmRlZCIsInJvdW5kIiwiaW50ZXJwb2xhdGUiLCJVdGlsIiwiZnJlZXplIiwiRXZlbnRhYmxlIiwiQmFzZSIsImhhbmRsZXIiLCJfZXZlbnRzIiwib25jZSIsIl93cmFwT25jZSIsIm9mZiIsInNwbGljZSIsImZpcmUiLCJxdWV1ZSIsInNlbGYiLCJjYWxsZWQiLCJvbmNlSGFuZGxlciIsIkFic3RyYWN0VGV4dHVyZSIsInJlc0xvYWRlciIsImhhc093blByb3BlcnR5IiwidXJsIiwicHJvbWlzZSIsIl9sb2FkaW5nIiwibG9hZEZuIiwiYXJyYXlCdWZmZXIiLCJnZXRBcnJheUJ1ZmZlciIsImdldERlZmF1bHRUZXh0dXJlIiwiSW1hZ2UiLCJfbmVlZFBvd2VyT2YyIiwib25Mb2FkIiwicmVzb3VyY2VzIiwiY2F0Y2giLCJpc1JlYWR5IiwiZ2V0UkVHTFRleHR1cmUiLCJjcmVhdGVSRUdMVGV4dHVyZSIsIl91cGRhdGVSRUdMIiwiZGlzcG9zZSIsImRpc3Bvc2VSZXMiLCJpc1JlcGVhdCIsIlRleHR1cmUiLCJpc1Bvd2VyT2ZUd28iLCJmbG9vclBvd2VyT2ZUd28iLCJkcmF3SW1hZ2UiLCJpZHgiLCJsYXN0SW5kZXhPZiIsImZpbGVuYW1lIiwic3Vic3RyaW5nIiwid2FybiIsImZsb29yIiwiTE4yIiwiUmVuZGVyZXIiLCJyZW5kZXIiLCJzY2VuZSIsInNldFVuaWZvcm1zIiwic2V0RnJhbWVidWZmZXIiLCJnZXRTb3J0ZWRNZXNoZXMiLCJvcGFxdWVzIiwidHJhbnNwYXJlbnRzIiwiRGVmZXJyZWRSZW5kZXJlciIsIkNIQVJfQklUIiwiTUFUMCIsIlRNUDAiLCJUTVAxIiwiVE1QMiIsInBhY2tUYW5nZW50RnJhbWUiLCJxIiwibWF0IiwidG9NYXQzIiwicXVhdCIsInBvc2l0aXZlIiwic3RvcmFnZVNpemUiLCJiaWFzIiwiY2MiLCJjMDAiLCJjMDEiLCJjMDIiLCJjMTAiLCJjMTEiLCJjMTIiLCJjMjAiLCJjMjEiLCJjMjIiLCJidWlsZFRhbmdlbnRzIiwicG9zaXRpb25zIiwibm9ybWFscyIsInV2cyIsImluZGljZXMiLCJuVmVydGljZXMiLCJ0YW5nZW50cyIsInRhbjEiLCJ0YW4yIiwidkEiLCJ2QiIsInZDIiwidXZBIiwidXZCIiwidXZDIiwic2RpciIsInRkaXIiLCJoYW5kbGVUcmlhbmdsZSIsImZyb21BcnJheTMiLCJmcm9tQXJyYXkyIiwiczEiLCJzMiIsInQxIiwidDIiLCJqbCIsInRtcCIsInRtcDIiLCJuMiIsImhhbmRsZVZlcnRleCIsIkJvdW5kaW5nQm94IiwiX2RpcnR5IiwiZ2V0Q2VudGVyIiwiY29udGFpblBvaW50IiwiaXNGaW5pdGUiLCJERUZBVUxUX0RFU0MiLCJHZW9tZXRyeSIsInBvcyIsInBvc2l0aW9uQXR0cmlidXRlIiwiZ2V0RWxlbWVudExlbmd0aCIsInBvc2l0aW9uU2l6ZSIsInByb3BlcnRpZXMiLCJfYnVmZmVycyIsInVwZGF0ZUJvdW5kaW5nQm94IiwiZ2VuZXJhdGVCdWZmZXJzIiwiYWxsb2NhdGVkQnVmZmVycyIsImJ1ZmZlcnMiLCJnZXRQcmltaXRpdmUiLCJhZGRCdWZmZXIiLCJ1cGRhdGVCdWZmZXIiLCJ1cGRhdGVEYXRhIiwiZ2V0QXR0cmlidXRlcyIsInNldEVsZW1lbnRzIiwic2V0RHJhd0NvdW50IiwiY291bnQxIiwiZ2V0RHJhd0NvdW50Iiwic2V0RHJhd09mZnNldCIsImdldERyYXdPZmZzZXQiLCJfZm9yRWFjaEJ1ZmZlciIsIl9kaXNwb3NlZCIsImlzRGlzcG9zZWQiLCJiYm94IiwiYm91bmRpbmdCb3giLCJwb3NBdHRyIiwicG9zQXJyIiwiY3JlYXRlVGFuZ2VudCIsIm5vcm1hbEF0dHJpYnV0ZSIsInV2MEF0dHJpYnV0ZSIsImFUYW5nZW50IiwibmkiLCJjcmVhdGVCYXJ5Y2VudHJpYyIsImJhcnkiLCJpaSIsImJ1aWxkVW5pcXVlVmVydGV4Iiwib2xkRGF0YSIsInZlcnRleENvdW50IiwiY3Vyc29yIiwiZ2V0TWVtb3J5U2l6ZSIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiTWF0ZXJpYWwiLCJkZWZhdWx0VW5pZm9ybXMiLCJnZXR0ZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0eSIsIl9kaXJ0eVVuaWZvcm1zIiwiZGlydHlEZWZpbmVzIiwiX3JlZ2xVbmlmb3JtcyIsIl9iaW5kZWRPblRleHR1cmVDb21wbGV0ZSIsIl9vblRleHR1cmVDb21wbGV0ZSIsIl9jaGVja1RleHR1cmVzIiwiX2xvYWRpbmdDb3VudCIsImlzRGlydHkiLCJnZXREZWZpbmVzIiwiX2RlZmluZXMiLCJjcmVhdGVEZWZpbmVzIiwiZ2V0VW5pZm9ybXMiLCJyZWFsVW5pZm9ybXMiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiTWF0ZXJpYWwkMSIsIldpcmVGcmFtZU1hdGVyaWFsIiwiZGVmYXVsdFVuaWZvcm1zJDEiLCJQaG9uZ01hdGVyaWFsIiwiTWVzaCIsImdlb21ldHJ5IiwibWF0ZXJpYWwiLCJ0cmFuc3BhcmVudCIsImNhc3RTaGFkb3ciLCJwaWNraW5nIiwibG9jYWxUcmFuc2Zvcm0iLCJtYXQ0Iiwic2V0UGFyZW50IiwicGFyZW50Iiwic2V0TG9jYWxUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJzZXRVbmlmb3JtIiwiZ2V0VW5pZm9ybSIsImRlZmluZXMiLCJtRGVmaW5lcyIsInNldERlZmluZXMiLCJnZXREZWZpbmVzS2V5IiwiX2RlZmluZXNLZXkiLCJfY3JlYXRlRGVmaW5lc0tleSIsIl9yZWFsVW5pZm9ybXMiLCJtYXRlcmlhbFVuaWZvcm1zIiwiZ2V0TWF0ZXJpYWwiLCJnZXRSRUdMUHJvcHMiLCJpc1ZhbGlkIiwiZ2V0V29ybGRUcmFuc2Zvcm0iLCJ3b3JsZFRyYW5zZm9ybSIsIkluc3RhbmNlZE1lc2giLCJpbnN0YW5jZWREYXRhIiwiaW5zdGFuY2VDb3VudCIsIl9jaGVja0luc3RhbmNlZFByb3AiLCJ1cGRhdGVJbnN0YW5jZWREYXRhIiwiYnl0ZXNQZXJFbGVtZW50IiwiX2dldEJ5dGVzUGVyRWxlbWVudCIsImdlbmVyYXRlSW5zdGFuY2VkQnVmZmVycyIsIkFqYXgiLCJyZXNwb25zZVR5cGUiLCJjbGllbnQiLCJfZ2V0Q2xpZW50Iiwib3BlbiIsImhlYWRlcnMiLCJzZXRSZXF1ZXN0SGVhZGVyIiwid2l0aENyZWRlbnRpYWxzIiwiY3JlZGVudGlhbHMiLCJzZW5kIiwiX3dyYXBDYWxsYmFjayIsInJlYWR5U3RhdGUiLCJyZXNwb25zZSIsImNhY2hlQ29udHJvbCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZXhwaXJlcyIsImNvbnRlbnRUeXBlIiwicmVzcG9uc2VUZXh0Iiwic3RhdHVzVGV4dCIsIlhNTEh0dHBSZXF1ZXN0IiwiQWN0aXZlWE9iamVjdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImNvbW1vbmpzR2xvYmFsIiwiZ2xvYmFsVGhpcyIsImNyZWF0ZUNvbW1vbmpzTW9kdWxlIiwiZXhwb3J0cyIsInpvdXNhbk1pbiIsIm8iLCJNdXRhdGlvbk9ic2VydmVyIiwicHJvY2VzcyIsIm5leHRUaWNrIiwic2V0SW1tZWRpYXRlIiwib2JzZXJ2ZSIsInNldEF0dHJpYnV0ZSIsIlR5cGVFcnJvciIsInJlc29sdmUiLCJyZWplY3QiLCJoYW5kbGVkIiwic3VwcHJlc3NVbmNhdWdodFJlamVjdGlvbkVycm9yIiwiZmluYWxseSIsInRpbWVvdXQiLCJhbWQiLCJab3VzYW4iLCJzb29uIiwiUHJvbWlzZSIsIlByb21pc2UkMSIsIlJlc291cmNlTG9hZGVyIiwiREVGQVVMVF9URVhUVVJFIiwiZGVmYXVsdFRleHR1cmUiLCJkZWZhdWx0Q3ViZVRleHR1cmUiLCJfbG9hZEltYWdlcyIsIl9sb2FkSW1hZ2UiLCJwcm9taXNlcyIsIl9kaXNwb3NlT25lIiwiaXNMb2FkaW5nIiwiX2NvdW50IiwiX2dldEJsYW5rVGV4dHVyZXMiLCJjcm9zc09yaWdpbiIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0IiwidXJscyIsIlJlc291cmNlTG9hZGVyJDEiLCJQMCIsIlAxIiwidWlkIiwiU2NlbmUiLCJtZXNoZXMiLCJfaWQiLCJzb3J0ZWRNZXNoZXMiLCJzZXRNZXNoZXMiLCJfY29tcGFyZUJpbmRlZCIsIl9jb21wYXJlIiwibWVzaCIsIl9zY2VuZXMiLCJhZGRNZXNoIiwicmVtb3ZlTWVzaCIsImhpdCIsImVsIiwiZ2V0TWVzaGVzIiwic29ydE1lc2hlcyIsImNhbWVyYVBvc2l0aW9uIiwiX2NhbWVyYVBvc2l0aW9uIiwidG9DaGFyIiwiZnJvbUNoYXJDb2RlIiwiTUlORUxFTiIsIk1BWEVMRU4iLCJyZ2JlMmZsb2F0IiwicmdiZSIsImV4cG9zdXJlIiwidWludDgyc3RyaW5nIiwiY29weXJnYmUiLCJvbGRSZWFkQ29sb3JzIiwic2NhbiIsInhtYXgiLCJyc2hpZnQiLCJyZWFkQ29sb3JzIiwicGFyc2VSR0JFIiwiX2NoYXIiLCJwYXJzZUludCIsInNjYW5saW5lIiwib2Zmc2V0MiIsIlRleHR1cmUyRCIsImhkciIsIlRleHR1cmVDdWJlIiwiX2NyZWF0ZUZhY2VzIiwiUGxhbmUiLCJhUG9zaXRpb24iLCJhTm9ybWFsIiwidnNtX3NoYWRvd192ZXJ0IiwidnNtX3NoYWRvd19mcmFnIiwiZmJvX3BpY2tpbmdfdmVydCIsImludmVydF92ZXJ0IiwiaW5zdGFuY2VfdmVydCIsInNraW5fdmVydCIsImZsX2NvbW1vbl9tYXRoX2dsc2wiLCJmbF91bmlmb3Jtc19nbHNsIiwiZmxfbWF0ZXJpYWxfaW5wdXRzX3ZlcnQiLCJmbF9pbnB1dHNfdmVydCIsImZsX2hlYWRlcl9mcmFnIiwiZmxfY29tbW9uX2dyYXBoaWNzX2dsc2wiLCJmbF9pbnB1dHNfZnJhZyIsImZsX2JyZGZfZnJhZyIsImZsX3NoYWRpbmdfcGFyYW1zIiwiZmxfY29tbW9uX3NoYWRpbmdfZnJhZyIsImZsX2dldHRlcnNfZnJhZyIsImZsX21hdGVyaWFsX2lucHV0c19mcmFnIiwiZmxfY29tbW9uX21hdGVyaWFsX2ZyYWciLCJmbF9jb21tb25fbGlnaHRpbmdfZnJhZyIsImZsX21hdGVyaWFsX3VuaWZvcm1zX2ZyYWciLCJmbF9saWdodF91bmlmb3Jtc19mcmFnIiwiZmxfbGlnaHRfaW5kaXJlY3QiLCJmbF9hbWJpZW50X29jY2x1c2lvbl9mcmFnIiwiZmxfc2hhZGluZ19tb2RlbF9zdGFuZGFyZF9mcmFnIiwiZmxfc2hhZGluZ19tb2RlbF9jbG90aF9mcmFnIiwiZmxfc2hhZGluZ19tb2RlbF9zdWJzdXJmYWNlX2ZyYWciLCJmbF9saWdodF9kaXJlY3Rpb25hbCIsImZsX3NoYWRpbmdfbGl0IiwiZmxfZ2xfcG9zdF9wcm9jZXNzX2ZyYWciLCJmbF9tYWluIiwiU2hhZGVyQ2h1bmsiLCJTaGFkZXJMaWIiLCJyZWdpc3RlciIsInBhcnNlSW5jbHVkZXMiLCJwYXR0ZXJuIiwic3RyaW5nIiwibWF0Y2giLCJpbmNsdWRlIiwiVU5JRk9STV9UWVBFIiwiZnVuY3Rpb24iLCJTaGFkZXIiLCJleHRyYUNvbW1hbmRQcm9wcyIsInNoYWRlckRlZmluZXMiLCJjb250ZXh0RGVzYyIsInBhcnNlQXJyYXlOYW1lIiwiY29tbWFuZHMiLCJfY29tcGlsZVNvdXJjZSIsImFwcGVuZFJlbmRlclVuaWZvcm1zIiwibWVzaFByb3BzIiwiY3JlYXRlUkVHTENvbW1hbmQiLCJtYXRlcmlhbERlZmluZXMiLCJhdHRyUHJvcHMiLCJ1bmlQcm9wcyIsImlzSW5zdGFuY2VkIiwiX2luc2VydERlZmluZXMiLCJkZWZpbmVIZWFkZXJzIiwiTWVzaFNoYWRlciIsInByZUNvbW1hbmQiLCJnZXRNZXNoQ29tbWFuZCIsImRLZXkiLCJlbGVtZW50VHlwZSIsIndpcmVmcmFtZUZyYWciLCJ3aXJlZnJhbWVWZXJ0IiwiV2lyZWZyYW1lU2hhZGVyIiwiYmFyeWNlbnRyaWNBdHRyaWJ1dGUiLCJibGVuZCIsImVxdWF0aW9uIiwic2FtcGxlIiwicGhvbmdGcmFnIiwicGhvbmdWZXJ0IiwiUGhvbmdTaGFkZXIiLCJub3JtYWxNYXRyaXgiLCJza3lib3hEYXRhIiwidmVydGljZXMiLCJza3lib3hWUyIsInNreWJveEZyYWciLCJjb21tYW5kSERSIiwiZHJhd1NreWJveCIsImN1YmVNYXAiLCJ2aWV3TWF0cml4IiwicHJvak1hdHJpeCIsInVzZUhEUiIsImZyYW1lQnVmZmVyIiwiZHJhd0NvbW1hbmQiLCJTa3lib3hIZWxwZXIiLCJyZW5kZXJUb0N1YmUiLCJjYW1lcmFQb3MiLCJjYXB0dXJlVmlld3MiLCJmb3YiLCJwbWF0Iiwic2V0dXBGYWNlIiwiY3ViZURhdGEiLCJ0ZXh0dXJlcyIsImN1YmVtYXBWUyIsImVxdWlyZWN0YW5ndWxhck1hcEZTIiwicHJlZmlsdGVyRlMiLCJkZmdGUyIsImRmZ1ZTIiwiZXBzaWxvbiIsImNyZWF0ZV8xIiwiY2xvbmVfMSIsImNsb25lIiwiZnJvbVZhbHVlc18xIiwibm9ybWFsaXplXzEiLCJub3JtYWxpemUkMSIsImRvdF8xIiwiYW5nbGVfMSIsImFuZ2xlIiwidGVtcEEiLCJ0ZW1wQiIsImNvc2luZSIsImNvcHlfMSIsInNldF8xIiwiZXF1YWxzXzEiLCJlcXVhbHMiLCJleGFjdEVxdWFsc18xIiwiZXhhY3RFcXVhbHMiLCJhZGRfMSIsInN1YnRyYWN0XzEiLCJtdWx0aXBseV8xIiwibXVsIiwiZGl2aWRlXzEiLCJkaXZpZGUiLCJkaXYiLCJtaW5fMSIsIm1heF8xIiwiZmxvb3JfMSIsImNlaWxfMSIsInJvdW5kXzEiLCJzY2FsZV8xIiwic2NhbGVBbmRBZGRfMSIsInNjYWxlQW5kQWRkIiwiZGlzdGFuY2VfMSIsInNxdWFyZWREaXN0YW5jZV8xIiwic3F1YXJlZERpc3RhbmNlIiwic3FyRGlzdCIsImxlbmd0aF8xIiwic3F1YXJlZExlbmd0aF8xIiwic3F1YXJlZExlbmd0aCIsInNxckxlbiIsIm5lZ2F0ZV8xIiwibmVnYXRlIiwiaW52ZXJzZV8xIiwiaW52ZXJzZSIsImNyb3NzXzEiLCJsZXJwXzEiLCJsZXJwIiwicmFuZG9tXzEiLCJyYW5kb20iLCJ6U2NhbGUiLCJ0cmFuc2Zvcm1NYXQ0XzEiLCJ0cmFuc2Zvcm1NYXQzXzEiLCJ0cmFuc2Zvcm1NYXQzIiwidHJhbnNmb3JtUXVhdF8xIiwidHJhbnNmb3JtUXVhdCIsInF4IiwicXkiLCJxeiIsInF3IiwiaXgiLCJpeSIsIml6IiwiaXciLCJyb3RhdGVYXzEiLCJyb3RhdGVYIiwicHkiLCJweiIsInNjIiwicm90YXRlWV8xIiwicm90YXRlWSIsInB4Iiwicm90YXRlWl8xIiwicm90YXRlWiIsImZvckVhY2hfMSIsImdsVmVjMyIsImN1YmVtYXBGYWNlTm9ybWFscyIsImN1YmVtYXBTaCIsImN1YmVtYXBTaXplIiwiY2giLCJvayIsImVxdWFsIiwiY3ViZU1hcFZlY3MiLCJmYWNlVmVjcyIsImZVIiwiZlYiLCJ2ZWNYIiwidmVjWSIsInZlY1oiLCJyZXMiLCJzaCIsIndlaWdodEFjY3VtIiwiZ2FtbWFDb3JyZWN0IiwidGV4ZWxWZWN0Iiwid2VpZ2h0IiwidGV4ZWxTb2xpZEFuZ2xlIiwid2VpZ2h0MSIsIndlaWdodDIiLCJ3ZWlnaHQzIiwid2VpZ2h0NCIsIndlaWdodDUiLCJkeCIsImR5IiwiZHoiLCJhVSIsImFWIiwiVSIsIlYiLCJpbnZSZXNvbHV0aW9uVyIsImludlJlc29sdXRpb25IIiwiYXJlYUVsZW1lbnQiLCJhdGFuMiIsImNyZWF0ZUlCTE1hcHMiLCJlbnZUZXh0dXJlIiwiZW52Q3ViZVNpemUiLCJzYW1wbGVTaXplIiwicm91Z2huZXNzTGV2ZWxzIiwicHJlZmlsdGVyQ3ViZVNpemUiLCJkZmdTaXplIiwiZW52TWFwIiwiY3JlYXRlRXF1aXJlY3Rhbmd1bGFyTWFwQ3ViZSIsImNyZWF0ZVNreWJveCIsInByZWZpbHRlck1hcCIsImNyZWF0ZVByZWZpbHRlckN1YmUiLCJkZmdMVVQiLCJnZW5lcmF0ZURGR0xVVCIsImlnbm9yZVNIIiwiZ2V0RW52bWFwUGl4ZWxzIiwibWFwcyIsImN1YmVtYXAiLCJkcmF3Q3ViZSIsInRtcEZCTyIsImVudk1hcEZCTyIsImNyZWF0ZVByZWZpbHRlck1pcG1hcCIsImZyb21DdWJlTWFwIiwiZGlzdHJvIiwiZ2VuZXJhdGVOb3JtYWxEaXN0cmlidXRpb24iLCJkaXN0cmlidXRpb25NYXAiLCJtYXhMZXZlbHMiLCJyb3VnaG5lc3MiLCJmYWNlSWQiLCJwcmVmaWx0ZXJNYXBGQk8iLCJxdWFkVmVydGljZXMiLCJxdWFkVGV4Y29vcmRzIiwiREZHX0NBQ0hFIiwicXVhZEJ1ZiIsInF1YWRUZXhCdWYiLCJkcmF3TFVUIiwiaGFtbWVyc2xleSIsInBoaSIsImNvc1RoZXRhIiwic2luVGhldGEiLCJQQlJIZWxwZXIiLCJERUZBVUxUX1VOSUZPUk1TIiwiYmFzZUNvbG9yVGV4dHVyZSIsImJhc2VDb2xvckZhY3RvciIsIm1ldGFsbGljUm91Z2huZXNzVGV4dHVyZSIsIm1ldGFsbGljRmFjdG9yIiwicm91Z2huZXNzRmFjdG9yIiwib2NjbHVzaW9uVGV4dHVyZSIsIm9jY2x1c2lvbiIsIm9jY2x1c2lvblN0cmVuZ3RoIiwibm9ybWFsVGV4dHVyZSIsIm5vcm1hbFN0cmVuZ3RoIiwicmVmbGVjdGFuY2UiLCJlbWlzc2l2ZVRleHR1cmUiLCJlbWlzc2l2ZUZhY3RvciIsImNsZWFyQ29hdCIsImNsZWFyQ29hdFJvdWdobmVzc1RleHR1cmUiLCJjbGVhckNvYXRSb3VnaG5lc3MiLCJjbGVhckNvYXROb3JtYWxUZXh0dXJlIiwiY2xlYXJDb2F0SW9yQ2hhbmdlIiwiYW5pc290cm9weSIsImFuaXNvdHJvcHlEaXJlY3Rpb24iLCJwb3N0TGlnaHRpbmdDb2xvciIsIkhBU19UT05FX01BUFBJTkciLCJHQU1NQV9DT1JSRUNUX0lOUFVUIiwidXZTY2FsZSIsInV2T2Zmc2V0IiwiTGl0TWF0ZXJpYWwiLCJCTEVORF9NT0RFX1RSQU5TUEFSRU5UIiwibGl0RnJhZyIsInZlcnRTb3VyY2UiLCJTdGFuZGFyZFNoYWRlciIsInRhbmdlbnRBdHRyaWJ1dGUiLCJjb2xvckF0dHJpYnV0ZSIsInV2MUF0dHJpYnV0ZSIsImdldEdlb21ldHJ5RGVmaW5lcyIsIkxpdFNoYWRlciIsIkRFRkFVTFRfVU5JRk9STVMkMSIsInNoZWVuQ29sb3IiLCJzdWJzdXJmYWNlQ29sb3IiLCJDbG90aE1hdGVyaWFsIiwiY2xvdGhGcmFnIiwiVU5JRk9STVMkMSIsIkNsb3RoU2hhZGVyIiwiREVGQVVMVF9VTklGT1JNUyQyIiwidGhpY2tuZXNzIiwic3Vic3VyZmFjZVBvd2VyIiwiQ2xvdGhNYXRlcmlhbCQxIiwic3Vic3VyZmFjZUZyYWciLCJVTklGT1JNUyQyIiwiQ2xvdGhTaGFkZXIkMSIsInZzbUZyYWciLCJ2c21WZXJ0IiwiU2hhZG93TWFwU2hhZGVyIiwiYm94Qmx1ckZyYWciLCJib3hCbHVyVmVydCIsInF1YWRWZXJ0aWNlcyQxIiwicXVhZFRleGNvb3JkcyQxIiwiUXVhZFNoYWRlciIsIl9xdWFkTWVzaCIsIl9jcmVhdGVRdWFkTWVzaCIsImFUZXhDb29yZCIsIkJveEJsdXJTaGFkZXIiLCJibHVyT2Zmc2V0IiwiZ2V0RnJ1c3R1bVdvcmxkU3BhY2UiLCJnZXREaXJMaWdodENhbWVyYVByb2pWaWV3IiwiU2hhZG93UGFzcyIsIl9pbml0IiwiY2FtZXJhUHJvalZpZXdNYXRyaXgiLCJsaWdodERpciIsImZhclBsYW5lIiwiaXNTdXBwb3J0ZWQiLCJsaWdodFByb2pWaWV3TWF0cml4IiwiX3JlbmRlclNoYWRvdyIsInNoYWRvd01hcCIsImJsdXJUZXgiLCJkZXB0aFRleCIsImRlcHRoRkJPIiwiYmx1ckZCTyIsIl9zdXBwb3J0ZWQiLCJ2c21TaGFkZXIiLCJmcnVzdHVtIiwiYm94Qmx1clNoYWRlciIsInRleHR1cmVTaXplIiwidGV4dHVyZVNvdXJjZSIsImNsaXBQbGFuZXMiLCJpbnZlcnNlUHJvamVjdGlvbk1hdHJpeCIsImNhbWVyYVByb2pWaWV3IiwicHJvaldvcmxkU3BhY2VQb3NpdGlvbiIsInRyYW5zZiIsImZydXN0dW1DZW50ZXIiLCJjYW1lcmFVcCIsInYzIiwibHZNYXRyaXgiLCJscE1hdHJpeCIsImNyb3BNYXRyaXgiLCJzY2FsZVYiLCJvZmZzZXRWIiwibWluWiIsIm1heFoiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwic2NhbGVYIiwic2NhbGVZIiwic2hhZG93RGlzcGxheUZyYWciLCJzaGFkb3dEaXNwbGF5VmVydCIsIlNoYWRvd0Rpc3BsYXlTaGFkZXIiLCJwcm9qVmlld01vZGVsTWF0cml4IiwicGFjazMiLCJVSU5UOF9WSUVXIiwiRkxPQVRfVklFVyIsInBhY2tEZXB0aCIsInVucGFja0Z1biIsImZyYWcwIiwiZnJhZzEiLCJmcmFnMiIsImRlcHRoRnJhZyIsIkZCT1JheVBpY2tpbmciLCJfcmVuZGVyZXIiLCJfZmJvIiwiX2NsZWFyRmJvIiwiX3ZlcnQiLCJfdW5pZm9ybXMiLCJfZXh0cmFDb21tYW5kUHJvcHMiLCJfY3VycmVudE1lc2hlcyIsIl9zaGFkZXIwIiwiX3NoYWRlcjIiLCJkZWZpbmVzMSIsIl9zaGFkZXIxIiwiX2RlcHRoU2hhZGVyIiwiX3NjZW5lIiwiX3NjZW5lMSIsIl9nZXRTaGFkZXIiLCJfY3VycmVudFNoYWRlciIsInBpY2siLCJ0b2xlcmFuY2UiLCJwaWNraW5nSWQiLCJtZXNoSWQiLCJfZ2V0UGFyYW1zIiwibWVzaElkcyIsInBpY2tpbmdJZHMiLCJfcGFja0RhdGEiLCJ2aXNpdGVkIiwicGlja2VkTWVzaGVzIiwiX2dldFBpY2tpbmdJZCIsImRlcHRocyIsIl9waWNrRGVwdGgiLCJfZ2V0V29ybGRQb3MiLCJpdGVyRGlzdHMiLCJnZXRNZXNoQXQiLCJnZXRSZW5kZXJlZE1lc2hlcyIsIncyIiwiaDIiLCJjcDAiLCJjcDEiLCJpbnZlcnNlUHJvak1hdHJpeCIsInZjcDAiLCJ2Y3AxIiwiYXBwbHlNYXRyaXgiLCJwcm9qVmlld01hdHJpeCIsImludmVyc2VQcm9qVmlld01hdHJpeCIsImZibzEiLCJfZ2V0RkJPMSIsImlkcyIsIl9mYm8xIiwiSERSIiwicGFyc2VIRFIiLCJwYnIiLCJTdWJzdXJmYWNlU2hhZGVyIiwiU3Vic3VyZmFjZU1hdGVyaWFsIiwiUkFORE9NIiwic2V0TWF0cml4QXJyYXlUeXBlIiwidG9SYWRpYW4iLCJtMDAiLCJtMDEiLCJtMTAiLCJtMTEiLCJhZGpvaW50IiwiZGV0ZXJtaW5hbnQiLCJyb3RhdGUiLCJ2MCIsInYxIiwiZnJvbVJvdGF0aW9uIiwiZnJvbVNjYWxpbmciLCJmcm9iIiwiTERVIiwiTCIsIkQiLCJtdWx0aXBseVNjYWxhciIsIm11bHRpcGx5U2NhbGFyQW5kQWRkIiwidHgiLCJ0eSIsImFhIiwiYWIiLCJhYyIsImFkIiwiYXR4IiwiYXR5IiwiYjQiLCJiNSIsImZyb21UcmFuc2xhdGlvbiIsIm0wMiIsIm0xMiIsIm0yMCIsIm0yMSIsIm0yMiIsImIyMSIsImIxMiIsImIyMCIsImIyMiIsImZyb21NYXQyZCIsImZyb21RdWF0IiwieHgiLCJ5eCIsInl5IiwiengiLCJ6eSIsInp6Iiwid3giLCJ3eSIsInd6Iiwibm9ybWFsRnJvbU1hdDQiLCJwcm9qZWN0aW9uIiwiYTYiLCJhNyIsImE4IiwiYjYiLCJiNyIsImI4IiwibTAzIiwibTEzIiwibTIzIiwibTMwIiwibTMxIiwibTMyIiwibTMzIiwiZnJvbVhSb3RhdGlvbiIsImZyb21ZUm90YXRpb24iLCJmcm9tWlJvdGF0aW9uIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb24iLCJ4eSIsInh6IiwieXoiLCJmcm9tUXVhdDIiLCJ0cmFuc2xhdGlvbiIsIm1hZ25pdHVkZSIsImdldFRyYW5zbGF0aW9uIiwiZ2V0U2NhbGluZyIsImdldFJvdGF0aW9uIiwidHJhY2UiLCJTIiwiZnJvbVJvdGF0aW9uVHJhbnNsYXRpb25TY2FsZSIsInN4Iiwic3kiLCJmcm9tUm90YXRpb25UcmFuc2xhdGlvblNjYWxlT3JpZ2luIiwib3giLCJveSIsIm96Iiwib3V0MCIsIm91dDEiLCJvdXQyIiwib3V0NCIsIm91dDUiLCJvdXQ2Iiwib3V0OCIsIm91dDkiLCJvdXQxMCIsInJsIiwidGIiLCJwZXJzcGVjdGl2ZUZyb21GaWVsZE9mVmlldyIsInVwVGFuIiwidXBEZWdyZWVzIiwiZG93blRhbiIsImRvd25EZWdyZWVzIiwibGVmdFRhbiIsImxlZnREZWdyZWVzIiwicmlnaHRUYW4iLCJyaWdodERlZ3JlZXMiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJ0YXJnZXRUbyIsImE5IiwiYTE0IiwiYTE1IiwiYjkiLCJiMTMiLCJiMTQiLCJiMTUiLCJoZXJtaXRlIiwiZmFjdG9yVGltZXMyIiwiZmFjdG9yMSIsImZhY3RvcjIiLCJmYWN0b3IzIiwiZmFjdG9yNCIsImJlemllciIsImludmVyc2VGYWN0b3IiLCJpbnZlcnNlRmFjdG9yVGltZXNUd28iLCJ1dngiLCJ1dnkiLCJ1dnoiLCJ1dXZ4IiwidXV2eSIsInV1dnoiLCJ2MiIsInY0IiwiZ2V0QXhpc0FuZ2xlIiwib3V0X2F4aXMiLCJjYWxjdWxhdGVXIiwidTEiLCJ1MiIsInUzIiwic3FydDFNaW51c1UxIiwic3FydFUxIiwiaW52RG90IiwiY29uanVnYXRlIiwiZnJvbUV1bGVyIiwiaGFsZlRvUmFkIiwiY3giLCJjeSIsImN6IiwiZHEiLCJ3MSIsImZyb21Sb3RhdGlvblRyYW5zbGF0aW9uVmFsdWVzIiwiZ2V0UmVhbCIsImdldER1YWwiLCJzZXRSZWFsIiwic2V0RHVhbCIsImF4MSIsImF5MSIsImF6MSIsImF3MSIsImJ4MSIsImJ5MSIsImJ6MSIsImF4MiIsImF5MiIsImF6MiIsImF3MiIsInJvdGF0ZUJ5UXVhdEFwcGVuZCIsInJvdGF0ZUJ5UXVhdFByZXBlbmQiLCJyb3RhdGVBcm91bmRBeGlzIiwiYXhpc0xlbmd0aCIsImF4MCIsImF5MCIsImF6MCIsImF3MCIsImJ3MSIsImJ4MCIsImJ5MCIsImJ6MCIsImJ3MCIsIm10Iiwic3FsZW4iLCJhX2RvdF9iIiwidHJhbnNmb3JtTWF0MiIsInRyYW5zZm9ybU1hdDJkIiwicDAiLCJwMSIsInNpbkMiLCJjb3NDIiwibGVuMSIsImxlbjIiLCJFIiwiUiIsIlQiLCJzdGF0ZXMiLCJzY2lzc29yIiwiYmxlbmRDb2xvciIsImJsZW5kRXF1YXRpb25TZXBhcmF0ZSIsIkZVTkNfQUREIiwiYmxlbmRGdW5jU2VwYXJhdGUiLCJPTkUiLCJaRVJPIiwiY29sb3JNYXNrIiwiY3VsbEZhY2UiLCJCQUNLIiwiZGVwdGhGdW5jIiwiTEVTUyIsImRlcHRoTWFzayIsImRlcHRoUmFuZ2UiLCJjYXBhYmlsaXRpZXMiLCJmcm9udEZhY2UiLCJDQ1ciLCJET05UX0NBUkUiLCJsaW5lV2lkdGgiLCJCUk9XU0VSX0RFRkFVTFRfV0VCR0wiLCJwb2x5Z29uT2Zmc2V0Iiwic2FtcGxlQ292ZXJhZ2UiLCJzdGVuY2lsRnVuY1NlcGFyYXRlIiwiQUxXQVlTIiwic3RlbmNpbE1hc2tTZXBhcmF0ZSIsInN0ZW5jaWxPcFNlcGFyYXRlIiwiS0VFUCIsImFjdGl2ZSIsIk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiZWxlbWVudEFycmF5QnVmZmVyIiwiY3JlYXRlVmVydGV4QXJyYXkiLCJjcmVhdGVWZXJ0ZXhBcnJheU9FUyIsImRlbGV0ZVZlcnRleEFycmF5IiwiZGVsZXRlVmVydGV4QXJyYXlPRVMiLCJiaW5kVmVydGV4QXJyYXkiLCJiaW5kVmVydGV4QXJyYXlPRVMiLCJkZXRhY2hTaGFkZXIiLCJnZXRBdHRhY2hlZFNoYWRlcnMiLCJnZXRTaGFkZXJQcmVjaXNpb25Gb3JtYXQiLCJnZXRTaGFkZXJTb3VyY2UiLCJnZXRTdXBwb3J0ZWRFeHRlbnNpb25zIiwiaXNFbmFibGVkIiwiaXNQcm9ncmFtIiwiaXNTaGFkZXIiLCJ2YWxpZGF0ZVByb2dyYW0iLCJBIiwiQ1VSUkVOVF9QUk9HUkFNIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJnZXRWZXJ0ZXhBdHRyaWIiLCJWRVJURVhfQVRUUklCX0FSUkFZX0JVRkZFUl9CSU5ESU5HIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVJfQklORElORyIsIkZSQU1FQlVGRkVSX0JJTkRJTkciLCJERUJVR0dJTkciLCJmaW5pc2giLCJjb21taXQiLCJERVBUSF9CVUZGRVJfQklUIiwiU1RFTkNJTF9CVUZGRVJfQklUIiwiQ09MT1JfQlVGRkVSX0JJVCIsIlBPSU5UUyIsIkxJTkVTIiwiTElORV9MT09QIiwiTElORV9TVFJJUCIsIlRSSUFOR0xFUyIsIlRSSUFOR0xFX1NUUklQIiwiVFJJQU5HTEVfRkFOIiwiU1JDX0NPTE9SIiwiT05FX01JTlVTX1NSQ19DT0xPUiIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJPTkVfTUlOVVNfRFNUX0FMUEhBIiwiRFNUX0NPTE9SIiwiT05FX01JTlVTX0RTVF9DT0xPUiIsIlNSQ19BTFBIQV9TQVRVUkFURSIsIkNPTlNUQU5UX0NPTE9SIiwiT05FX01JTlVTX0NPTlNUQU5UX0NPTE9SIiwiQ09OU1RBTlRfQUxQSEEiLCJPTkVfTUlOVVNfQ09OU1RBTlRfQUxQSEEiLCJGVU5DX1NVQlNUUkFDVCIsIkZVTkNfUkVWRVJTRV9TVUJUUkFDVCIsIkJMRU5EX0VRVUFUSU9OIiwiQkxFTkRfRVFVQVRJT05fUkdCIiwiQkxFTkRfRVFVQVRJT05fQUxQSEEiLCJCTEVORF9EU1RfUkdCIiwiQkxFTkRfU1JDX1JHQiIsIkJMRU5EX0RTVF9BTFBIQSIsIkJMRU5EX1NSQ19BTFBIQSIsIkJMRU5EX0NPTE9SIiwiQVJSQVlfQlVGRkVSX0JJTkRJTkciLCJMSU5FX1dJRFRIIiwiQUxJQVNFRF9QT0lOVF9TSVpFX1JBTkdFIiwiQUxJQVNFRF9MSU5FX1dJRFRIX1JBTkdFIiwiQ1VMTF9GQUNFX01PREUiLCJGUk9OVF9GQUNFIiwiREVQVEhfUkFOR0UiLCJERVBUSF9XUklURU1BU0siLCJERVBUSF9DTEVBUl9WQUxVRSIsIkRFUFRIX0ZVTkMiLCJTVEVOQ0lMX0NMRUFSX1ZBTFVFIiwiU1RFTkNJTF9GVU5DIiwiU1RFTkNJTF9GQUlMIiwiU1RFTkNJTF9QQVNTX0RFUFRIX0ZBSUwiLCJTVEVOQ0lMX1BBU1NfREVQVEhfUEFTUyIsIlNURU5DSUxfUkVGIiwiU1RFTkNJTF9WQUxVRV9NQVNLIiwiU1RFTkNJTF9XUklURU1BU0siLCJTVEVOQ0lMX0JBQ0tfRlVOQyIsIlNURU5DSUxfQkFDS19GQUlMIiwiU1RFTkNJTF9CQUNLX1BBU1NfREVQVEhfRkFJTCIsIlNURU5DSUxfQkFDS19QQVNTX0RFUFRIX1BBU1MiLCJTVEVOQ0lMX0JBQ0tfUkVGIiwiU1RFTkNJTF9CQUNLX1ZBTFVFX01BU0siLCJTVEVOQ0lMX0JBQ0tfV1JJVEVNQVNLIiwiU0NJU1NPUl9CT1giLCJDT0xPUl9DTEVBUl9WQUxVRSIsIkNPTE9SX1dSSVRFTUFTSyIsIlVOUEFDS19BTElHTk1FTlQiLCJQQUNLX0FMSUdOTUVOVCIsIk1BWF9URVhUVVJFX1NJWkUiLCJNQVhfVklFV1BPUlRfRElNUyIsIlNVQlBJWEVMX0JJVFMiLCJSRURfQklUUyIsIkdSRUVOX0JJVFMiLCJCTFVFX0JJVFMiLCJBTFBIQV9CSVRTIiwiREVQVEhfQklUUyIsIlNURU5DSUxfQklUUyIsIlBPTFlHT05fT0ZGU0VUX1VOSVRTIiwiUE9MWUdPTl9PRkZTRVRfRkFDVE9SIiwiVEVYVFVSRV9CSU5ESU5HXzJEIiwiU0FNUExFX0JVRkZFUlMiLCJTQU1QTEVTIiwiU0FNUExFX0NPVkVSQUdFX1ZBTFVFIiwiU0FNUExFX0NPVkVSQUdFX0lOVkVSVCIsIkNPTVBSRVNTRURfVEVYVFVSRV9GT1JNQVRTIiwiVkVORE9SIiwiUkVOREVSRVIiLCJWRVJTSU9OIiwiSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9UWVBFIiwiSU1QTEVNRU5UQVRJT05fQ09MT1JfUkVBRF9GT1JNQVQiLCJTVEFUSUNfRFJBVyIsIlNUUkVBTV9EUkFXIiwiRFlOQU1JQ19EUkFXIiwiQVJSQVlfQlVGRkVSIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJCVUZGRVJfU0laRSIsIkJVRkZFUl9VU0FHRSIsIkNVUlJFTlRfVkVSVEVYX0FUVFJJQiIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfRU5BQkxFRCIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfU0laRSIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfU1RSSURFIiwiVkVSVEVYX0FUVFJJQl9BUlJBWV9UWVBFIiwiVkVSVEVYX0FUVFJJQl9BUlJBWV9OT1JNQUxJWkVEIiwiVkVSVEVYX0FUVFJJQl9BUlJBWV9QT0lOVEVSIiwiQ1VMTF9GQUNFIiwiRlJPTlQiLCJGUk9OVF9BTkRfQkFDSyIsIkJMRU5EIiwiREVQVEhfVEVTVCIsIkRJVEhFUiIsIlBPTFlHT05fT0ZGU0VUX0ZJTEwiLCJTQU1QTEVfQUxQSEFfVE9fQ09WRVJBR0UiLCJTQU1QTEVfQ09WRVJBR0UiLCJTQ0lTU09SX1RFU1QiLCJTVEVOQ0lMX1RFU1QiLCJOT19FUlJPUiIsIklOVkFMSURfRU5VTSIsIklOVkFMSURfVkFMVUUiLCJJTlZBTElEX09QRVJBVElPTiIsIk9VVF9PRl9NRU1PUlkiLCJDT05URVhUX0xPU1RfV0VCR0wiLCJDVyIsIkZBU1RFU1QiLCJOSUNFU1QiLCJHRU5FUkFURV9NSVBNQVBfSElOVCIsIkJZVEUiLCJVTlNJR05FRF9CWVRFIiwiU0hPUlQiLCJVTlNJR05FRF9TSE9SVCIsIlVOU0lHTkVEX0lOVCIsIkRFUFRIX0NPTVBPTkVOVCIsIlJHQkEiLCJMVU1JTkFOQ0UiLCJMVU1JTkFOQ0VfQUxQSEEiLCJVTlNJR05FRF9TSE9SVF80XzRfNF80IiwiVU5TSUdORURfU0hPUlRfNV81XzVfMSIsIlVOU0lHTkVEX1NIT1JUXzVfNl81IiwiVkVSVEVYX1NIQURFUiIsIkRFTEVURV9TVEFUVVMiLCJWQUxJREFURV9TVEFUVVMiLCJBVFRBQ0hFRF9TSEFERVJTIiwiQUNUSVZFX1VOSUZPUk1TIiwiTUFYX1ZFUlRFWF9BVFRSSUJTIiwiTUFYX1ZFUlRFWF9VTklGT1JNX1ZFQ1RPUlMiLCJNQVhfVkFSWUlOR19WRUNUT1JTIiwiTUFYX1ZFUlRFWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9WRUNUT1JTIiwiU0hBREVSX1RZUEUiLCJTSEFESU5HX0xBTkdVQUdFX1ZFUlNJT04iLCJORVZFUiIsIkVRVUFMIiwiTEVRVUFMIiwiR1JFQVRFUiIsIkdFUVVBTCIsIk5PVEVRVUFMIiwiUkVQTEFDRSIsIklOQ1IiLCJERUNSIiwiSU5DUl9XUkFQIiwiREVDUl9XUkFQIiwiTkVBUkVTVCIsIkxJTkVBUiIsIk5FQVJFU1RfTUlQTUFQX05FQVJFU1QiLCJMSU5FQVJfTUlQTUFQX05FQVJFU1QiLCJORUFSRVNUX01JUE1BUF9MSU5FQVIiLCJMSU5FQVJfTUlQTUFQX0xJTkVBUiIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfV1JBUF9TIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFXzJEIiwiVEVYVFVSRSIsIlRFWFRVUkVfQ1VCRV9NQVAiLCJURVhUVVJFX0JJTkRJTkdfQ1VCRV9NQVAiLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1giLCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1giLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1kiLCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1kiLCJURVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1oiLCJURVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1oiLCJNQVhfQ1VCRV9NQVBfVEVYVFVSRV9TSVpFIiwiVEVYVFVSRTAiLCJURVhUVVJFMSIsIlRFWFRVUkUyIiwiVEVYVFVSRTMiLCJURVhUVVJFNCIsIlRFWFRVUkU1IiwiVEVYVFVSRTYiLCJURVhUVVJFNyIsIlRFWFRVUkU4IiwiVEVYVFVSRTkiLCJURVhUVVJFMTAiLCJURVhUVVJFMTEiLCJURVhUVVJFMTIiLCJURVhUVVJFMTMiLCJURVhUVVJFMTQiLCJURVhUVVJFMTUiLCJURVhUVVJFMTYiLCJBQ1RJVkVfVEVYVFVSRSIsIlJFUEVBVCIsIkNMQU1QX1RPX0VER0UiLCJNSVJST1JFRF9SRVBFQVQiLCJURVhUVVJFX1dJRFRIIiwiVEVYVFVSRV9IRUlHSFQiLCJGTE9BVF9WRUMyIiwiRkxPQVRfVkVDMyIsIkZMT0FUX1ZFQzQiLCJJTlRfVkVDMiIsIklOVF9WRUMzIiwiSU5UX1ZFQzQiLCJCT09MIiwiQk9PTF9WRUMyIiwiQk9PTF9WRUMzIiwiQk9PTF9WRUM0IiwiRkxPQVRfTUFUMiIsIkZMT0FUX01BVDMiLCJGTE9BVF9NQVQ0IiwiU0FNUExFUl8yRCIsIlNBTVBMRVJfQ1VCRSIsIkxPV19GTE9BVCIsIk1FRElVTV9GTE9BVCIsIkhJR0hfRkxPQVQiLCJMT1dfSU5UIiwiTUVESVVNX0lOVCIsIkhJR0hfSU5UIiwiUkVOREVSQlVGRkVSIiwiUkdCQTQiLCJSR0I1X0ExIiwiUkdCNTY1IiwiREVQVEhfQ09NUE9ORU5UMTYiLCJTVEVOQ0lMX0lOREVYIiwiU1RFTkNJTF9JTkRFWDgiLCJERVBUSF9TVEVOQ0lMIiwiUkVOREVSQlVGRkVSX1dJRFRIIiwiUkVOREVSQlVGRkVSX0hFSUdIVCIsIlJFTkRFUkJVRkZFUl9JTlRFUk5BTF9GT1JNQVQiLCJSRU5ERVJCVUZGRVJfUkVEX1NJWkUiLCJSRU5ERVJCVUZGRVJfR1JFRU5fU0laRSIsIlJFTkRFUkJVRkZFUl9CTFVFX1NJWkUiLCJSRU5ERVJCVUZGRVJfQUxQSEFfU0laRSIsIlJFTkRFUkJVRkZFUl9ERVBUSF9TSVpFIiwiUkVOREVSQlVGRkVSX1NURU5DSUxfU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfT0JKRUNUX1RZUEUiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX09CSkVDVF9OQU1FIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0xFVkVMIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9URVhUVVJFX0NVQkVfTUFQX0ZBQ0UiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsIkRFUFRIX0FUVEFDSE1FTlQiLCJTVEVOQ0lMX0FUVEFDSE1FTlQiLCJERVBUSF9TVEVOQ0lMX0FUVEFDSE1FTlQiLCJOT05FIiwiRlJBTUVCVUZGRVJfQ09NUExFVEUiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUyIsIkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEIiwiUkVOREVSQlVGRkVSX0JJTkRJTkciLCJNQVhfUkVOREVSQlVGRkVSX1NJWkUiLCJJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTiIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJVTlBBQ0tfQ09MT1JTUEFDRV9DT05WRVJTSU9OX1dFQkdMIiwiUkVBRF9CVUZGRVIiLCJVTlBBQ0tfUk9XX0xFTkdUSCIsIlVOUEFDS19TS0lQX1JPV1MiLCJVTlBBQ0tfU0tJUF9QSVhFTFMiLCJQQUNLX1JPV19MRU5HVEgiLCJQQUNLX1NLSVBfUk9XUyIsIlBBQ0tfU0tJUF9QSVhFTFMiLCJVTlBBQ0tfU0tJUF9JTUFHRVMiLCJVTlBBQ0tfSU1BR0VfSEVJR0hUIiwiTUFYXzNEX1RFWFRVUkVfU0laRSIsIk1BWF9FTEVNRU5UU19WRVJUSUNFUyIsIk1BWF9FTEVNRU5UU19JTkRJQ0VTIiwiTUFYX1RFWFRVUkVfTE9EX0JJQVMiLCJNQVhfRlJBR01FTlRfVU5JRk9STV9DT01QT05FTlRTIiwiTUFYX1ZFUlRFWF9VTklGT1JNX0NPTVBPTkVOVFMiLCJNQVhfQVJSQVlfVEVYVFVSRV9MQVlFUlMiLCJNSU5fUFJPR1JBTV9URVhFTF9PRkZTRVQiLCJNQVhfUFJPR1JBTV9URVhFTF9PRkZTRVQiLCJNQVhfVkFSWUlOR19DT01QT05FTlRTIiwiRlJBR01FTlRfU0hBREVSX0RFUklWQVRJVkVfSElOVCIsIlJBU1RFUklaRVJfRElTQ0FSRCIsIlZFUlRFWF9BUlJBWV9CSU5ESU5HIiwiTUFYX1ZFUlRFWF9PVVRQVVRfQ09NUE9ORU5UUyIsIk1BWF9GUkFHTUVOVF9JTlBVVF9DT01QT05FTlRTIiwiTUFYX1NFUlZFUl9XQUlUX1RJTUVPVVQiLCJNQVhfRUxFTUVOVF9JTkRFWCIsIlJFRCIsIlJHQjgiLCJSR0JBOCIsIlJHQjEwX0EyIiwiVEVYVFVSRV8zRCIsIlRFWFRVUkVfV1JBUF9SIiwiVEVYVFVSRV9NSU5fTE9EIiwiVEVYVFVSRV9NQVhfTE9EIiwiVEVYVFVSRV9CQVNFX0xFVkVMIiwiVEVYVFVSRV9NQVhfTEVWRUwiLCJURVhUVVJFX0NPTVBBUkVfTU9ERSIsIlRFWFRVUkVfQ09NUEFSRV9GVU5DIiwiU1JHQiIsIlNSR0I4IiwiU1JHQjhfQUxQSEE4IiwiQ09NUEFSRV9SRUZfVE9fVEVYVFVSRSIsIlJHQkEzMkYiLCJSR0IzMkYiLCJSR0JBMTZGIiwiUkdCMTZGIiwiVEVYVFVSRV8yRF9BUlJBWSIsIlRFWFRVUkVfQklORElOR18yRF9BUlJBWSIsIlIxMUZfRzExRl9CMTBGIiwiUkdCOV9FNSIsIlJHQkEzMlVJIiwiUkdCMzJVSSIsIlJHQkExNlVJIiwiUkdCMTZVSSIsIlJHQkE4VUkiLCJSR0I4VUkiLCJSR0JBMzJJIiwiUkdCMzJJIiwiUkdCQTE2SSIsIlJHQjE2SSIsIlJHQkE4SSIsIlJHQjhJIiwiUkVEX0lOVEVHRVIiLCJSR0JfSU5URUdFUiIsIlJHQkFfSU5URUdFUiIsIlI4IiwiUkc4IiwiUjE2RiIsIlIzMkYiLCJSRzE2RiIsIlJHMzJGIiwiUjhJIiwiUjhVSSIsIlIxNkkiLCJSMTZVSSIsIlIzMkkiLCJSMzJVSSIsIlJHOEkiLCJSRzhVSSIsIlJHMTZJIiwiUkcxNlVJIiwiUkczMkkiLCJSRzMyVUkiLCJSOF9TTk9STSIsIlJHOF9TTk9STSIsIlJHQjhfU05PUk0iLCJSR0JBOF9TTk9STSIsIlJHQjEwX0EyVUkiLCJURVhUVVJFX0lNTVVUQUJMRV9GT1JNQVQiLCJURVhUVVJFX0lNTVVUQUJMRV9MRVZFTFMiLCJVTlNJR05FRF9JTlRfMl8xMF8xMF8xMF9SRVYiLCJVTlNJR05FRF9JTlRfMTBGXzExRl8xMUZfUkVWIiwiVU5TSUdORURfSU5UXzVfOV85XzlfUkVWIiwiRkxPQVRfMzJfVU5TSUdORURfSU5UXzI0XzhfUkVWIiwiVU5TSUdORURfSU5UXzI0XzgiLCJIQUxGX0ZMT0FUIiwiUkciLCJSR19JTlRFR0VSIiwiSU5UXzJfMTBfMTBfMTBfUkVWIiwiQ1VSUkVOVF9RVUVSWSIsIlFVRVJZX1JFU1VMVCIsIlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUiLCJBTllfU0FNUExFU19QQVNTRUQiLCJBTllfU0FNUExFU19QQVNTRURfQ09OU0VSVkFUSVZFIiwiTUFYX0RSQVdfQlVGRkVSUyIsIkRSQVdfQlVGRkVSMCIsIkRSQVdfQlVGRkVSMSIsIkRSQVdfQlVGRkVSMiIsIkRSQVdfQlVGRkVSMyIsIkRSQVdfQlVGRkVSNCIsIkRSQVdfQlVGRkVSNSIsIkRSQVdfQlVGRkVSNiIsIkRSQVdfQlVGRkVSNyIsIkRSQVdfQlVGRkVSOCIsIkRSQVdfQlVGRkVSOSIsIkRSQVdfQlVGRkVSMTAiLCJEUkFXX0JVRkZFUjExIiwiRFJBV19CVUZGRVIxMiIsIkRSQVdfQlVGRkVSMTMiLCJEUkFXX0JVRkZFUjE0IiwiRFJBV19CVUZGRVIxNSIsIk1BWF9DT0xPUl9BVFRBQ0hNRU5UUyIsIkNPTE9SX0FUVEFDSE1FTlQxIiwiQ09MT1JfQVRUQUNITUVOVDIiLCJDT0xPUl9BVFRBQ0hNRU5UMyIsIkNPTE9SX0FUVEFDSE1FTlQ0IiwiQ09MT1JfQVRUQUNITUVOVDUiLCJDT0xPUl9BVFRBQ0hNRU5UNiIsIkNPTE9SX0FUVEFDSE1FTlQ3IiwiQ09MT1JfQVRUQUNITUVOVDgiLCJDT0xPUl9BVFRBQ0hNRU5UOSIsIkNPTE9SX0FUVEFDSE1FTlQxMCIsIkNPTE9SX0FUVEFDSE1FTlQxMSIsIkNPTE9SX0FUVEFDSE1FTlQxMiIsIkNPTE9SX0FUVEFDSE1FTlQxMyIsIkNPTE9SX0FUVEFDSE1FTlQxNCIsIkNPTE9SX0FUVEFDSE1FTlQxNSIsIlNBTVBMRVJfM0QiLCJTQU1QTEVSXzJEX1NIQURPVyIsIlNBTVBMRVJfMkRfQVJSQVkiLCJTQU1QTEVSXzJEX0FSUkFZX1NIQURPVyIsIlNBTVBMRVJfQ1VCRV9TSEFET1ciLCJJTlRfU0FNUExFUl8yRCIsIklOVF9TQU1QTEVSXzNEIiwiSU5UX1NBTVBMRVJfQ1VCRSIsIklOVF9TQU1QTEVSXzJEX0FSUkFZIiwiVU5TSUdORURfSU5UX1NBTVBMRVJfMkQiLCJVTlNJR05FRF9JTlRfU0FNUExFUl8zRCIsIlVOU0lHTkVEX0lOVF9TQU1QTEVSX0NVQkUiLCJVTlNJR05FRF9JTlRfU0FNUExFUl8yRF9BUlJBWSIsIk1BWF9TQU1QTEVTIiwiU0FNUExFUl9CSU5ESU5HIiwiUElYRUxfUEFDS19CVUZGRVIiLCJQSVhFTF9VTlBBQ0tfQlVGRkVSIiwiUElYRUxfUEFDS19CVUZGRVJfQklORElORyIsIlBJWEVMX1VOUEFDS19CVUZGRVJfQklORElORyIsIkNPUFlfUkVBRF9CVUZGRVIiLCJDT1BZX1dSSVRFX0JVRkZFUiIsIkNPUFlfUkVBRF9CVUZGRVJfQklORElORyIsIkNPUFlfV1JJVEVfQlVGRkVSX0JJTkRJTkciLCJGTE9BVF9NQVQyeDMiLCJGTE9BVF9NQVQyeDQiLCJGTE9BVF9NQVQzeDIiLCJGTE9BVF9NQVQzeDQiLCJGTE9BVF9NQVQ0eDIiLCJGTE9BVF9NQVQ0eDMiLCJVTlNJR05FRF9JTlRfVkVDMiIsIlVOU0lHTkVEX0lOVF9WRUMzIiwiVU5TSUdORURfSU5UX1ZFQzQiLCJVTlNJR05FRF9OT1JNQUxJWkVEIiwiU0lHTkVEX05PUk1BTElaRUQiLCJWRVJURVhfQVRUUklCX0FSUkFZX0lOVEVHRVIiLCJWRVJURVhfQVRUUklCX0FSUkFZX0RJVklTT1IiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX01PREUiLCJNQVhfVFJBTlNGT1JNX0ZFRURCQUNLX1NFUEFSQVRFX0NPTVBPTkVOVFMiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfVkFSWUlOR1MiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQlVGRkVSX1NUQVJUIiwiVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUl9TSVpFIiwiVFJBTlNGT1JNX0ZFRURCQUNLX1BSSU1JVElWRVNfV1JJVFRFTiIsIk1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfSU5URVJMRUFWRURfQ09NUE9ORU5UUyIsIk1BWF9UUkFOU0ZPUk1fRkVFREJBQ0tfU0VQQVJBVEVfQVRUUklCUyIsIklOVEVSTEVBVkVEX0FUVFJJQlMiLCJTRVBBUkFURV9BVFRSSUJTIiwiVFJBTlNGT1JNX0ZFRURCQUNLX0JVRkZFUiIsIlRSQU5TRk9STV9GRUVEQkFDS19CVUZGRVJfQklORElORyIsIlRSQU5TRk9STV9GRUVEQkFDSyIsIlRSQU5TRk9STV9GRUVEQkFDS19QQVVTRUQiLCJUUkFOU0ZPUk1fRkVFREJBQ0tfQUNUSVZFIiwiVFJBTlNGT1JNX0ZFRURCQUNLX0JJTkRJTkciLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0NPTE9SX0VOQ09ESU5HIiwiRlJBTUVCVUZGRVJfQVRUQUNITUVOVF9DT01QT05FTlRfVFlQRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfUkVEX1NJWkUiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0dSRUVOX1NJWkUiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0JMVUVfU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQUxQSEFfU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfREVQVEhfU0laRSIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfU1RFTkNJTF9TSVpFIiwiRlJBTUVCVUZGRVJfREVGQVVMVCIsIkRFUFRIMjRfU1RFTkNJTDgiLCJEUkFXX0ZSQU1FQlVGRkVSX0JJTkRJTkciLCJSRUFEX0ZSQU1FQlVGRkVSX0JJTkRJTkciLCJSRU5ERVJCVUZGRVJfU0FNUExFUyIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfVEVYVFVSRV9MQVlFUiIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTVVMVElTQU1QTEUiLCJVTklGT1JNX0JVRkZFUiIsIlVOSUZPUk1fQlVGRkVSX0JJTkRJTkciLCJVTklGT1JNX0JVRkZFUl9TVEFSVCIsIlVOSUZPUk1fQlVGRkVSX1NJWkUiLCJNQVhfVkVSVEVYX1VOSUZPUk1fQkxPQ0tTIiwiTUFYX0ZSQUdNRU5UX1VOSUZPUk1fQkxPQ0tTIiwiTUFYX0NPTUJJTkVEX1VOSUZPUk1fQkxPQ0tTIiwiTUFYX1VOSUZPUk1fQlVGRkVSX0JJTkRJTkdTIiwiTUFYX1VOSUZPUk1fQkxPQ0tfU0laRSIsIk1BWF9DT01CSU5FRF9WRVJURVhfVU5JRk9STV9DT01QT05FTlRTIiwiTUFYX0NPTUJJTkVEX0ZSQUdNRU5UX1VOSUZPUk1fQ09NUE9ORU5UUyIsIlVOSUZPUk1fQlVGRkVSX09GRlNFVF9BTElHTk1FTlQiLCJBQ1RJVkVfVU5JRk9STV9CTE9DS1MiLCJVTklGT1JNX1NJWkUiLCJVTklGT1JNX0JMT0NLX0lOREVYIiwiVU5JRk9STV9PRkZTRVQiLCJVTklGT1JNX0FSUkFZX1NUUklERSIsIlVOSUZPUk1fTUFUUklYX1NUUklERSIsIlVOSUZPUk1fSVNfUk9XX01BSk9SIiwiVU5JRk9STV9CTE9DS19CSU5ESU5HIiwiVU5JRk9STV9CTE9DS19EQVRBX1NJWkUiLCJVTklGT1JNX0JMT0NLX0FDVElWRV9VTklGT1JNUyIsIlVOSUZPUk1fQkxPQ0tfQUNUSVZFX1VOSUZPUk1fSU5ESUNFUyIsIlVOSUZPUk1fQkxPQ0tfUkVGRVJFTkNFRF9CWV9WRVJURVhfU0hBREVSIiwiVU5JRk9STV9CTE9DS19SRUZFUkVOQ0VEX0JZX0ZSQUdNRU5UX1NIQURFUiIsIk9CSkVDVF9UWVBFIiwiU1lOQ19DT05ESVRJT04iLCJTWU5DX1NUQVRVUyIsIlNZTkNfRkxBR1MiLCJTWU5DX0ZFTkNFIiwiU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUiLCJVTlNJR05BTEVEIiwiU0lHTkFMRUQiLCJBTFJFQURZX1NJR05BTEVEIiwiVElNRU9VVF9FWFBJUkVEIiwiQ09ORElUSU9OX1NBVElTRklFRCIsIldBSVRfRkFJTEVEIiwiU1lOQ19GTFVTSF9DT01NQU5EU19CSVQiLCJDT0xPUiIsIkRFUFRIIiwiU1RFTkNJTCIsIk1JTiIsIk1BWCIsIkRFUFRIX0NPTVBPTkVOVDI0IiwiU1RSRUFNX1JFQUQiLCJTVFJFQU1fQ09QWSIsIlNUQVRJQ19SRUFEIiwiU1RBVElDX0NPUFkiLCJEWU5BTUlDX1JFQUQiLCJEWU5BTUlDX0NPUFkiLCJERVBUSF9DT01QT05FTlQzMkYiLCJERVBUSDMyRl9TVEVOQ0lMOCIsIklOVkFMSURfSU5ERVgiLCJUSU1FT1VUX0lHTk9SRUQiLCJNQVhfQ0xJRU5UX1dBSVRfVElNRU9VVF9XRUJHTCIsIlZFUlRFWF9BVFRSSUJfQVJSQVlfRElWSVNPUl9BTkdMRSIsIlVOTUFTS0VEX1ZFTkRPUl9XRUJHTCIsIlVOTUFTS0VEX1JFTkRFUkVSX1dFQkdMIiwiTUFYX1RFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiVEVYVFVSRV9NQVhfQU5JU09UUk9QWV9FWFQiLCJDT01QUkVTU0VEX1JHQl9TM1RDX0RYVDFfRVhUIiwiQ09NUFJFU1NFRF9SR0JBX1MzVENfRFhUMV9FWFQiLCJDT01QUkVTU0VEX1JHQkFfUzNUQ19EWFQzX0VYVCIsIkNPTVBSRVNTRURfUkdCQV9TM1RDX0RYVDVfRVhUIiwiQ09NUFJFU1NFRF9SMTFfRUFDIiwiQ09NUFJFU1NFRF9TSUdORURfUjExX0VBQyIsIkNPTVBSRVNTRURfUkcxMV9FQUMiLCJDT01QUkVTU0VEX1NJR05FRF9SRzExX0VBQyIsIkNPTVBSRVNTRURfUkdCOF9FVEMyIiwiQ09NUFJFU1NFRF9SR0JBOF9FVEMyX0VBQyIsIkNPTVBSRVNTRURfU1JHQjhfRVRDMiIsIkNPTVBSRVNTRURfU1JHQjhfQUxQSEE4X0VUQzJfRUFDIiwiQ09NUFJFU1NFRF9SR0I4X1BVTkNIVEhST1VHSF9BTFBIQTFfRVRDMiIsIkNPTVBSRVNTRURfU1JHQjhfUFVOQ0hUSFJPVUdIX0FMUEhBMV9FVEMyIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfNEJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ180QlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfUFZSVENfMkJQUFYxX0lNRyIsIkNPTVBSRVNTRURfUkdCQV9QVlJUQ18yQlBQVjFfSU1HIiwiQ09NUFJFU1NFRF9SR0JfRVRDMV9XRUJHTCIsIkNPTVBSRVNTRURfUkdCX0FUQ19XRUJHTCIsIkNPTVBSRVNTRURfUkdCQV9BVENfRVhQTElDSVRfQUxQSEFfV0VCR0wiLCJDT01QUkVTU0VEX1JHQkFfQVRDX0lOVEVSUE9MQVRFRF9BTFBIQV9XRUJHTCIsIlVOU0lHTkVEX0lOVF8yNF84X1dFQkdMIiwiSEFMRl9GTE9BVF9PRVMiLCJSR0JBMzJGX0VYVCIsIlJHQjMyRl9FWFQiLCJGUkFNRUJVRkZFUl9BVFRBQ0hNRU5UX0NPTVBPTkVOVF9UWVBFX0VYVCIsIlVOU0lHTkVEX05PUk1BTElaRURfRVhUIiwiTUlOX0VYVCIsIk1BWF9FWFQiLCJTUkdCX0VYVCIsIlNSR0JfQUxQSEFfRVhUIiwiU1JHQjhfQUxQSEE4X0VYVCIsIkZSQU1FQlVGRkVSX0FUVEFDSE1FTlRfQ09MT1JfRU5DT0RJTkdfRVhUIiwiRlJBR01FTlRfU0hBREVSX0RFUklWQVRJVkVfSElOVF9PRVMiLCJDT0xPUl9BVFRBQ0hNRU5UMF9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxX1dFQkdMIiwiQ09MT1JfQVRUQUNITUVOVDJfV0VCR0wiLCJDT0xPUl9BVFRBQ0hNRU5UM19XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQ0X1dFQkdMIiwiQ09MT1JfQVRUQUNITUVOVDVfV0VCR0wiLCJDT0xPUl9BVFRBQ0hNRU5UNl9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQ3X1dFQkdMIiwiQ09MT1JfQVRUQUNITUVOVDhfV0VCR0wiLCJDT0xPUl9BVFRBQ0hNRU5UOV9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxMF9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxMV9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxMl9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxM19XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxNF9XRUJHTCIsIkNPTE9SX0FUVEFDSE1FTlQxNV9XRUJHTCIsIkRSQVdfQlVGRkVSMF9XRUJHTCIsIkRSQVdfQlVGRkVSMV9XRUJHTCIsIkRSQVdfQlVGRkVSMl9XRUJHTCIsIkRSQVdfQlVGRkVSM19XRUJHTCIsIkRSQVdfQlVGRkVSNF9XRUJHTCIsIkRSQVdfQlVGRkVSNV9XRUJHTCIsIkRSQVdfQlVGRkVSNl9XRUJHTCIsIkRSQVdfQlVGRkVSN19XRUJHTCIsIkRSQVdfQlVGRkVSOF9XRUJHTCIsIkRSQVdfQlVGRkVSOV9XRUJHTCIsIkRSQVdfQlVGRkVSMTBfV0VCR0wiLCJEUkFXX0JVRkZFUjExX1dFQkdMIiwiRFJBV19CVUZGRVIxMl9XRUJHTCIsIkRSQVdfQlVGRkVSMTNfV0VCR0wiLCJEUkFXX0JVRkZFUjE0X1dFQkdMIiwiRFJBV19CVUZGRVIxNV9XRUJHTCIsIk1BWF9DT0xPUl9BVFRBQ0hNRU5UU19XRUJHTCIsIk1BWF9EUkFXX0JVRkZFUlNfV0VCR0wiLCJWRVJURVhfQVJSQVlfQklORElOR19PRVMiLCJRVUVSWV9DT1VOVEVSX0JJVFNfRVhUIiwiQ1VSUkVOVF9RVUVSWV9FWFQiLCJRVUVSWV9SRVNVTFRfRVhUIiwiUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQiLCJUSU1FX0VMQVBTRURfRVhUIiwiVElNRVNUQU1QX0VYVCIsIkdQVV9ESVNKT0lOVF9FWFQiLCJnZXRCdWZmZXJQYXJhbWV0ZXIiLCJpc0J1ZmZlciIsImdldEZyYW1lYnVmZmVyQXR0YWNobWVudFBhcmFtZXRlciIsImlzRnJhbWVidWZmZXIiLCJnZXRSZW5kZXJidWZmZXJQYXJhbWV0ZXIiLCJpc1JlbmRlcmJ1ZmZlciIsIk4iLCJJIiwiZ2V0VGltZSIsIkYiLCJSZWdFeHAiLCJPIiwiTSIsImJsZW5kRXF1YXRpb24iLCJibGVuZEZ1bmMiLCJkaXNhYmxlIiwic3RlbmNpbEZ1bmMiLCJzdGVuY2lsTWFzayIsInN0ZW5jaWxPcCIsInVzZVByb2dyYW0iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJnZXRUZXhQYXJhbWV0ZXIiLCJ0ZXhQYXJhbWV0ZXJmIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwiZ2V0VmVydGV4QXR0cmliT2Zmc2V0IiwidW5pZm9ybU1hdHJpeDJmdiIsInVuaWZvcm1NYXRyaXgzZnYiLCJ1bmlmb3JtTWF0cml4NGZ2IiwidW5pZm9ybTFmIiwidW5pZm9ybTFmdiIsInVuaWZvcm0xaSIsInVuaWZvcm0xaXYiLCJ1bmlmb3JtMmYiLCJ1bmlmb3JtMmZ2IiwidW5pZm9ybTJpIiwidW5pZm9ybTJpdiIsInVuaWZvcm0zZiIsInVuaWZvcm0zZnYiLCJ1bmlmb3JtM2kiLCJ1bmlmb3JtM2l2IiwidW5pZm9ybTRmIiwidW5pZm9ybTRmdiIsInVuaWZvcm00aSIsInVuaWZvcm00aXYiLCJ2ZXJ0ZXhBdHRyaWIxZiIsInZlcnRleEF0dHJpYjJmIiwidmVydGV4QXR0cmliM2YiLCJ2ZXJ0ZXhBdHRyaWI0ZiIsInZlcnRleEF0dHJpYjFmdiIsInZlcnRleEF0dHJpYjJmdiIsInZlcnRleEF0dHJpYjNmdiIsInZlcnRleEF0dHJpYjRmdiIsImFudGlhbGlhcyIsImZvcmNlUmVuZGVyT25ab29taW5nIiwiZm9yY2VSZW5kZXJPbk1vdmluZyIsImZvcmNlUmVuZGVyT25Sb3RhdGluZyIsIkdyb3VwR0xMYXllciIsImZyb21KU09OIiwibGF5ZXJKU09OIiwibGF5ZXJzIiwianNvbiIsIm1hcHRhbGtzIiwiX2NoZWNrQ2hpbGRyZW4iLCJfbGF5ZXJNYXAiLCJhZGRMYXllciIsImxheWVyIiwiZ2V0TWFwIiwiZ2V0SWQiLCJnZXRSZW5kZXJlciIsIl9wcmVwYXJlTGF5ZXIiLCJzZXRUb1JlZHJhdyIsInJlbW92ZUxheWVyIiwiZ2V0Q2hpbGRMYXllciIsIl9kb1JlbW92ZSIsIl9vbkxheWVyU2hvd0hpZGUiLCJnZXRMYXllcnMiLCJ0b0pTT04iLCJnZXRKU09OVHlwZSIsIm9uTG9hZEVuZCIsIl9vbkNoaWxkUmVuZGVyZXJDcmVhdGUiLCJsb2FkIiwiX2JpbmRDaGlsZExpc3RlbmVycyIsIm9uUmVtb3ZlIiwiY2xlYXJDYW52YXMiLCJlbXB0eSIsImlzVmlzaWJsZSIsImNoaWxkcmVuIiwibGF5ZXJJZCIsIm1lcmdlT3B0aW9ucyIsInJlZ2lzdGVySlNPTlR5cGUiLCJvbkFkZCIsInByZXBhcmVDYW52YXMiLCJwcmVwYXJlUmVuZGVyIiwiZm9yRWFjaFJlbmRlcmVyIiwiR0xDb250ZXh0IiwiZHJhd09uSW50ZXJhY3RpbmciLCJ0ZXN0SWZOZWVkUmVkcmF3IiwiaXNSZW5kZXJDb21wbGV0ZSIsIm11c3RSZW5kZXJPbkludGVyYWN0aW5nIiwiaXNDYW52YXNVcGRhdGVkIiwiaXNCbGFuayIsImdsT3B0aW9ucyIsIl9jcmVhdGVHTENvbnRleHQiLCJfaW5pdEdMIiwiZ2xDdHgiLCJyZXNpemVDYW52YXMiLCJnZXRDYW52YXNJbWFnZSIsIm5hbWVzIiwicGlja2luZ0ZCTyIsIkNhbnZhc1JlbmRlcmVyIiwicmVnaXN0ZXJSZW5kZXJlciJdLCJtYXBwaW5ncyI6Ijs7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QUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLENBQVQ7Q0FDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLENBQVQ7Q0FDQUEsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLENBQVQ7Q0FDRDs7Q0FDREEsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLENBQVQ7Q0FDQUEsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLENBQVQ7Q0FDQUEsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTLENBQVQ7Q0FDQSxTQUFPQSxHQUFQO0NBQ0Q7QUFTRCxDQUFPLFNBQVN3bUMsUUFBVCxDQUFrQnhtQyxHQUFsQixFQUF1Qm9XLENBQXZCLEVBQTBCO0NBQy9CcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLEVBQUQsQ0FBVjtDQUNBLFNBQU9wVyxHQUFQO0NBQ0Q7O0NDcUlNLFNB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QyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxFQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxFQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU29XLENBQUMsQ0FBQyxDQUFELENBQVY7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVW9XLENBQUMsQ0FBQyxFQUFELENBQVg7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVW9XLENBQUMsQ0FBQyxFQUFELENBQVg7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVW9XLENBQUMsQ0FBQyxDQUFELENBQVg7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVW9XLENBQUMsQ0FBQyxDQUFELENBQVg7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVW9XLENBQUMsQ0FBQyxFQUFELENBQVg7Q0FDQXBXLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVW9XLENBQUMsQ0FB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R0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBcFcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBVjtDQUNBLFNBQU9wVyxHQUFQO0NBQ0Q7QUFTRCxDQUFPLFNBQVNyUCxNQUFULENBQWNxUCxHQUFkLEVBQW1Cb1csQ0FBbkIsRUFBc0I7Q0FDM0JwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxD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R0FBVjtDQUNBOW1DLElBQUFBLEdBQUcsQ0FBQyxFQUFELENBQUgsR0FBVSttQyxHQUFWO0NBQ0QsR0FwQkQsTUFvQk87Q0FDTC9tQyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsRUFBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsRUFBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFWO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFYO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFYO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsQ0FBRCxDQUFYO0NBQ0FwVyxJQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMs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QUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsQ0FBRCxDQUFILEdBQVNvVyxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBQWpCO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFELEdBQVFDLENBQUMsQ0FBQyxFQUFELENBQW5CO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFELEdBQVFDLENBQUMsQ0FBQyxFQUFELENBQW5CO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFELEdBQVFDLENBQUMsQ0FBQyxFQUFELENBQW5CO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFELEdBQVFDLENBQUMsQ0FBQyxFQUFELENBQW5CO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFELEdBQVFDLENBQUMsQ0FBQyxFQUFELENBQW5CO0NBQ0FyVyxFQUFBQSxHQUFHLENBQUMsRUFBRCxDQUFILEdBQVVvVyxDQUFDLENBQUMsRUFBRCxDQUFELEdBQVFDLENBQUMsQ0FBQyxFQUFELENBQW5CO0NBQ0EsU0FBT3JXLEdBQVA7Q0FDRDtBQVVELENBQU8sU0FBU21yQyxVQUFULENBQWtCbnJDLEdBQWxCLEVBQXVCb1csQ0FBdkIsRUFBMEJDLENBQTFCLEVBQTZCO0NBQ2xDclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTb1csQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFqQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLEVBQUQsQ0FBSCxHQUFVb1csQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFuQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLEVBQUQsQ0FBSCxHQUFVb1csQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFuQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLEVBQUQsQ0FBSCxHQUFVb1csQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFuQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLEVBQUQsQ0FBSCxHQUFVb1csQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFuQjtDQUNBclcsRUFBQUEsR0FBRyxDQUFDLEVBQUQsQ0FBSCxHQUFVb1csQ0FBQyxDQUFDLEVBQUQsQ0FBRCxHQUFRQyxDQUFDLENBQUMsRUFBRCxDQUFuQjtDQUNBclcsRUFB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
